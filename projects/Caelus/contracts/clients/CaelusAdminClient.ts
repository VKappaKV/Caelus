/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"CaelusAdmin","desc":"","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"MANAGER_createToken","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updateVestTokensID","args":[{"name":"vestID","type":"uint64"},{"name":"stVestID","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_changeManager","args":[{"name":"manager","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updatePoolContractCost","args":[{"name":"validatorPoolContractCost","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updatePoolContractProgram","args":[{"name":"programSize","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_writePoolContractProgram","args":[{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"addValidator","args":[{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"mintRequest","args":[{"name":"mintTxn","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"burnRequest","args":[{"name":"burnTxn","type":"axfer"},{"name":"burnTo","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"mintValidatorCommit","args":[{"name":"validatorAppID","type":"uint64"},{"name":"stakeCommit","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"burnValidatorCommit","args":[{"name":"appToBurnFrom","type":"uint64"},{"name":"amount","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"burnToDelinquentValidator","args":[{"name":"burnTxn","type":"axfer"},{"name":"validatorAppID","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reMintDelinquentCommit","args":[{"name":"app","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"bid","args":[{"name":"validatorAppID","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delegateStake","args":[{"name":"amount","type":"uint64"},{"name":"validatorAppID","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"snitchToBurn","args":[{"name":"app","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"multiSnitchToBurn","args":[{"name":"apps","type":"uint64[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"snitchCheck","desc":"Used to check the behavior of a Validator App","args":[{"name":"appToCheck","type":"uint64","desc":"Validator AppID to snitch"},{"name":"params","type":"(bool,bool,bool,uint64,bool,uint64)","desc":"SnitchInfo object containing the informations to check"}],"returns":{"type":"bool","desc":"boolean result of the snitch if successfull - true"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reStakeFromSnitch","desc":"Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back","args":[{"name":"snitchedApp","type":"uint64","desc":"The AppID of the validator to snitch"},{"name":"receiverApp","type":"uint64","desc":"The AppID of the receiver of the delegated Algo"},{"name":"restakeTxn","type":"pay","desc":"The PayTxn following the snitch that sends the delegated Algo to be moved back and restaked"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"makeFlashLoanRequest","args":[{"name":"payFeeTxn","type":"pay"},{"name":"amounts","type":"uint64[]"},{"name":"appToInclude","type":"uint64[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"getFLcounter","args":[],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc62_get_circulating_supply","args":[{"name":"assetId","type":"uint64"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":12,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMString","valueType":"AVMBytes"},"validatorPoolContractVersion":{"key":"dmFsaWRhdG9yX3Bvb2xfdmVyc2lvbg==","keyType":"AVMString","valueType":"AVMUint64"},"validatorPoolContractCost":{"key":"dmFsaWRhdG9yX3Bvb2xfY29zdA==","keyType":"AVMString","valueType":"AVMUint64"},"totalStake":{"key":"dG90YWxfc3Rha2U=","keyType":"AVMString","valueType":"AVMUint64"},"pegRatio":{"key":"cGVnX3JhdGlv","keyType":"AVMString","valueType":"AVMUint64"},"tokenId":{"key":"dG9rZW5faWQ=","keyType":"AVMString","valueType":"AVMUint64"},"vestId":{"key":"dmVzdF9pZA==","keyType":"AVMString","valueType":"AVMUint64"},"stVestId":{"key":"c3Rha2VkX3Zlc3RfaWQ=","keyType":"AVMString","valueType":"AVMUint64"},"tokenCirculatingSupply":{"key":"Y2lyY3VsYXRpbmdfc3VwcGx5","keyType":"AVMString","valueType":"AVMUint64"},"highestBidder":{"key":"aGlnaGVzdF9iaWRkZXI=","keyType":"AVMString","valueType":"AVMUint64"},"burnQueue":{"key":"YnVybl9xdWV1ZQ==","keyType":"AVMString","valueType":"AVMBytes"},"lastExhaustBlock":{"key":"bGFzdF9leGhhdXN0X2Jsb2Nr","keyType":"AVMString","valueType":"AVMUint64"},"lastFlashloanBlock":{"key":"bGFzdF9mbGFzaGxvYW5fYmxvY2s=","keyType":"AVMString","valueType":"AVMUint64"},"flashLoanCounter":{"key":"Zmxhc2hsb2FuX2NvdW50ZXI=","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDExCmludGNibG9jayAwIDEgOCA2IDUgMiAxMDAwMDAgNCAzIDMyCmJ5dGVjYmxvY2sgMHggMHg2Mjc1NzI2ZTVmNzE3NTY1NzU2NSAweDYzNjk3MjYzNzU2YzYxNzQ2OTZlNjc1ZjczNzU3MDcwNmM3OSAweDc0NmY2YjY1NmU1ZjY5NjQgMHg3NDZmNzQ2MTZjNWY3Mzc0NjE2YjY1IDB4NjY2YzYxNzM2ODZjNmY2MTZlNWY2MzZmNzU2ZTc0NjU3MiAweDZkNjE2ZTYxNjc2NTcyIDB4Njg2OTY3Njg2NTczNzQ1ZjYyNjk2NDY0NjU3MiAweDAwIDB4NzY2MTZjNjk2NDYxNzQ2ZjcyNWY2MTcwNzA3MjZmNzY2MTZjNWY3MDcyNmY2NzcyNjE2ZCAweDc2NjE2YzY5NjQ2MTc0NmY3MjVmNzA2ZjZmNmM1Zjc2NjU3MjczNjk2ZjZlIDB4NzM2MTc0NzU3MjYxNzQ2OTZmNmU1ZjYyNzU2NjY2NjU3MiAweDZjNjE3Mzc0NWY2NTc4Njg2MTc1NzM3NDVmNjI2YzZmNjM2YiAweDcwNjU2NzVmNzI2MTc0Njk2ZiAweDc2NjE2YzY5NjQ2MTc0NmY3MjVmNzA2ZjZmNmM1ZjYzNmY3Mzc0IDB4NzM3NDYxNzQ3NTczIDB4MTUxZjdjNzUgMHg2YzYxNzM3NDVmNjY2YzYxNzM2ODZjNmY2MTZlNWY2MjZjNmY2MzZiIDB4NjQ2NTZjNjU2NzYxNzQ2NTY0NWY3Mzc0NjE2YjY1IDB4NmY3MDY1NzI2MTc0NmY3MjVmNjM2ZjZkNmQ2OTc0IDB4NmY3MDY1NzI2MTc0NmY3MiAweGI0YmZjYTUwIDB4ZGNhZTc3MWIgMHhkZmEyMDc2NAoKLy8gVGhpcyBURUFMIHdhcyBnZW5lcmF0ZWQgYnkgVEVBTFNjcmlwdCB2MC4xMDUuNQovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKaW50YyAzIC8vIDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNhbGxfVXBkYXRlQXBwbGljYXRpb24gKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbigpOiB2b2lkCmNyZWF0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjkKCS8vIHRoaXMubWFuYWdlci52YWx1ZSA9IHRoaXMuYXBwLmNyZWF0b3IKCWJ5dGVjIDYgLy8gICJtYW5hZ2VyIgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjcwCgkvLyB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdFZlcnNpb24udmFsdWUgPSAwCglieXRlYyAxMCAvLyAgInZhbGlkYXRvcl9wb29sX3ZlcnNpb24iCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo3MQoJLy8gdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RDb3N0LnZhbHVlID0gVkFMSURBVE9SX1BPT0xfQ09OVFJBQ1RfTUJSCglieXRlYyAxNCAvLyAgInZhbGlkYXRvcl9wb29sX2Nvc3QiCglwdXNoaW50IDExMjA1MDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NzMKCS8vIHRoaXMudG90YWxTdGFrZS52YWx1ZSA9IDAKCWJ5dGVjIDQgLy8gICJ0b3RhbF9zdGFrZSIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjc0CgkvLyB0aGlzLnBlZ1JhdGlvLnZhbHVlID0gMSAqIFNDQUxFCglieXRlYyAxMyAvLyAgInBlZ19yYXRpbyIKCWludGMgNiAvLyAxMDAwMDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NzYKCS8vIHRoaXMudG9rZW5JZC52YWx1ZSA9IEFzc2V0SUQuemVyb0luZGV4CglieXRlYyAzIC8vICAidG9rZW5faWQiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo3NwoJLy8gdGhpcy50b2tlbkNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlID0gMAoJYnl0ZWMgMiAvLyAgImNpcmN1bGF0aW5nX3N1cHBseSIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjc5CgkvLyB0aGlzLmhpZ2hlc3RCaWRkZXIudmFsdWUgPSBBcHBJRC56ZXJvSW5kZXgKCWJ5dGVjIDcgLy8gICJoaWdoZXN0X2JpZGRlciIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjgxCgkvLyB0aGlzLmJ1cm5RdWV1ZS52YWx1ZSA9IFtdCglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCXB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjgzCgkvLyB0aGlzLmxhc3RFeGhhdXN0QmxvY2sudmFsdWUgPSAwCglieXRlYyAxMiAvLyAgImxhc3RfZXhoYXVzdF9ibG9jayIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyB1cGRhdGVBcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX3VwZGF0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSB1cGRhdGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiB1cGRhdGVBcHBsaWNhdGlvbgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gdXBkYXRlQXBwbGljYXRpb24oKTogdm9pZAp1cGRhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjg3CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm1hbmFnZXIudmFsdWUpCgl0eG4gU2VuZGVyCglieXRlYyA2IC8vICAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYXNzZXJ0CglyZXRzdWIKCi8vIE1BTkFHRVJfY3JlYXRlVG9rZW4oKXZvaWQKKmFiaV9yb3V0ZV9NQU5BR0VSX2NyZWF0ZVRva2VuOgoJLy8gZXhlY3V0ZSBNQU5BR0VSX2NyZWF0ZVRva2VuKCl2b2lkCgljYWxsc3ViIE1BTkFHRVJfY3JlYXRlVG9rZW4KCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIE1BTkFHRVJfY3JlYXRlVG9rZW4oKTogdm9pZApNQU5BR0VSX2NyZWF0ZVRva2VuOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6OTEKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFuYWdlci52YWx1ZSwgJ29ubHkgdGhlIG1hbmFnZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QnKQoJdHhuIFNlbmRlcgoJYnl0ZWMgNiAvLyAgIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kCglhc3NlcnQKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6OTMKCS8vIHRoaXMudG9rZW5JZC52YWx1ZSA9PT0gQXNzZXRJRC56ZXJvSW5kZXgKCWJ5dGVjIDMgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDAgLy8gMAoJPT0KCWJ6ICppZjBfZW5kCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo5NAoJLy8gdGhpcy50b2tlbklkLnZhbHVlID0gc2VuZEFzc2V0Q3JlYXRpb24oewoJLy8gICAgICAgICBjb25maWdBc3NldFRvdGFsOiAxMCAqKiAxNiwKCS8vICAgICAgICAgY29uZmlnQXNzZXREZWNpbWFsczogNiwKCS8vICAgICAgICAgY29uZmlnQXNzZXRSZXNlcnZlOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICBjb25maWdBc3NldE1hbmFnZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgIGNvbmZpZ0Fzc2V0Q2xhd2JhY2s6IGdsb2JhbHMuemVyb0FkZHJlc3MsCgkvLyAgICAgICAgIGNvbmZpZ0Fzc2V0RnJlZXplOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgICBjb25maWdBc3NldERlZmF1bHRGcm96ZW46IDAsCgkvLyAgICAgICAgIGNvbmZpZ0Fzc2V0TmFtZTogJ1Zlc3RndWFyZCBBTEdPJywKCS8vICAgICAgICAgY29uZmlnQXNzZXRVbml0TmFtZTogJ3ZBTEdPJywKCS8vICAgICAgICAgY29uZmlnQXNzZXRVUkw6ICdodHRwczovL3Zlc3RpZ2UuZmknLAoJLy8gICAgICAgfSkKCWJ5dGVjIDMgLy8gICJ0b2tlbl9pZCIKCWl0eG5fYmVnaW4KCWludGMgOCAvLyAgYWNmZwoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjk1CgkvLyBjb25maWdBc3NldFRvdGFsOiAxMCAqKiAxNgoJcHVzaGludCAxMAoJcHVzaGludCAxNgoJZXhwCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo5NgoJLy8gY29uZmlnQXNzZXREZWNpbWFsczogNgoJaW50YyAzIC8vIDYKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjk3CgkvLyBjb25maWdBc3NldFJlc2VydmU6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0UmVzZXJ2ZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjk4CgkvLyBjb25maWdBc3NldE1hbmFnZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjk5CgkvLyBjb25maWdBc3NldENsYXdiYWNrOiBnbG9iYWxzLnplcm9BZGRyZXNzCglnbG9iYWwgWmVyb0FkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRDbGF3YmFjawoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjEwMAoJLy8gY29uZmlnQXNzZXRGcmVlemU6IGdsb2JhbHMuemVyb0FkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldEZyZWV6ZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjEwMQoJLy8gY29uZmlnQXNzZXREZWZhdWx0RnJvemVuOiAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBDb25maWdBc3NldERlZmF1bHRGcm96ZW4KCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMDIKCS8vIGNvbmZpZ0Fzc2V0TmFtZTogJ1Zlc3RndWFyZCBBTEdPJwoJcHVzaGJ5dGVzIDB4NTY2NTczNzQ2Nzc1NjE3MjY0MjA0MTRjNDc0ZiAvLyAiVmVzdGd1YXJkIEFMR08iCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjEwMwoJLy8gY29uZmlnQXNzZXRVbml0TmFtZTogJ3ZBTEdPJwoJcHVzaGJ5dGVzIDB4NzY0MTRjNDc0ZiAvLyAidkFMR08iCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMDQKCS8vIGNvbmZpZ0Fzc2V0VVJMOiAnaHR0cHM6Ly92ZXN0aWdlLmZpJwoJcHVzaGJ5dGVzIDB4Njg3NDc0NzA3MzNhMmYyZjc2NjU3Mzc0Njk2NzY1MmU2NjY5IC8vICJodHRwczovL3Zlc3RpZ2UuZmkiCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VVJMCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBDcmVhdGVkQXNzZXRJRAoJYXBwX2dsb2JhbF9wdXQKCippZjBfZW5kOgoJcmV0c3ViCgovLyBNQU5BR0VSX3VwZGF0ZVZlc3RUb2tlbnNJRCh1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9NQU5BR0VSX3VwZGF0ZVZlc3RUb2tlbnNJRDoKCS8vIHN0VmVzdElEOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyB2ZXN0SUQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgTUFOQUdFUl91cGRhdGVWZXN0VG9rZW5zSUQodWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIE1BTkFHRVJfdXBkYXRlVmVzdFRva2Vuc0lECglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBNQU5BR0VSX3VwZGF0ZVZlc3RUb2tlbnNJRCh2ZXN0SUQ6IEFzc2V0SUQsIHN0VmVzdElEOiBBc3NldElEKTogdm9pZApNQU5BR0VSX3VwZGF0ZVZlc3RUb2tlbnNJRDoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjExMAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5tYW5hZ2VyLnZhbHVlLCAnb25seSB0aGUgbWFuYWdlciBjYW4gY2FsbCB0aGlzIG1ldGhvZCcpCgl0eG4gU2VuZGVyCglieXRlYyA2IC8vICAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIG9ubHkgdGhlIG1hbmFnZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjExMQoJLy8gdGhpcy52ZXN0SWQudmFsdWUgPSB2ZXN0SUQKCXB1c2hieXRlcyAweDc2NjU3Mzc0NWY2OTY0IC8vICJ2ZXN0X2lkIgoJZnJhbWVfZGlnIC0xIC8vIHZlc3RJRDogQXNzZXRJRAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMTIKCS8vIHRoaXMuc3RWZXN0SWQudmFsdWUgPSBzdFZlc3RJRAoJcHVzaGJ5dGVzIDB4NzM3NDYxNmI2NTY0NWY3NjY1NzM3NDVmNjk2NCAvLyAic3Rha2VkX3Zlc3RfaWQiCglmcmFtZV9kaWcgLTIgLy8gc3RWZXN0SUQ6IEFzc2V0SUQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIE1BTkFHRVJfY2hhbmdlTWFuYWdlcihhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9NQU5BR0VSX2NoYW5nZU1hbmFnZXI6CgkvLyBtYW5hZ2VyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyA5IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKG1hbmFnZXIpIGZvciBNQU5BR0VSX2NoYW5nZU1hbmFnZXIgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgTUFOQUdFUl9jaGFuZ2VNYW5hZ2VyKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBNQU5BR0VSX2NoYW5nZU1hbmFnZXIKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIE1BTkFHRVJfY2hhbmdlTWFuYWdlcihtYW5hZ2VyOiBBZGRyZXNzKTogdm9pZApNQU5BR0VSX2NoYW5nZU1hbmFnZXI6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMTYKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFuYWdlci52YWx1ZSwgJ29ubHkgdGhlIG1hbmFnZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QnKQoJdHhuIFNlbmRlcgoJYnl0ZWMgNiAvLyAgIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMTcKCS8vIHRoaXMubWFuYWdlci52YWx1ZSA9IG1hbmFnZXIKCWJ5dGVjIDYgLy8gICJtYW5hZ2VyIgoJZnJhbWVfZGlnIC0xIC8vIG1hbmFnZXI6IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIE1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0Q29zdCh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX01BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0Q29zdDoKCS8vIHZhbGlkYXRvclBvb2xDb250cmFjdENvc3Q6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RDb3N0KHVpbnQ2NCl2b2lkCgljYWxsc3ViIE1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0Q29zdAoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RDb3N0KHZhbGlkYXRvclBvb2xDb250cmFjdENvc3Q6IHVpbnQ2NCk6IHZvaWQKTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RDb3N0OgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTIxCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm1hbmFnZXIudmFsdWUsICdvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kJykKCXR4biBTZW5kZXIKCWJ5dGVjIDYgLy8gICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gb25seSB0aGUgbWFuYWdlciBjYW4gY2FsbCB0aGlzIG1ldGhvZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTIyCgkvLyB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdENvc3QudmFsdWUgPSB2YWxpZGF0b3JQb29sQ29udHJhY3RDb3N0CglieXRlYyAxNCAvLyAgInZhbGlkYXRvcl9wb29sX2Nvc3QiCglmcmFtZV9kaWcgLTEgLy8gdmFsaWRhdG9yUG9vbENvbnRyYWN0Q29zdDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW0odWludDY0KXZvaWQKKmFiaV9yb3V0ZV9NQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW06CgkvLyBwcm9ncmFtU2l6ZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW0odWludDY0KXZvaWQKCWNhbGxzdWIgTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW0ocHJvZ3JhbVNpemU6IHVpbnQ2NCk6IHZvaWQKTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTI2CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm1hbmFnZXIudmFsdWUsICdvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kJykKCXR4biBTZW5kZXIKCWJ5dGVjIDYgLy8gICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gb25seSB0aGUgbWFuYWdlciBjYW4gY2FsbCB0aGlzIG1ldGhvZAoJYXNzZXJ0CgoJLy8gKmlmMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjEyOAoJLy8gdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RBcHByb3ZhbFByb2dyYW0uZXhpc3RzCglieXRlYyA5IC8vICAidmFsaWRhdG9yX2FwcHJvdmFsX3Byb2dyYW0iCglib3hfbGVuCglzd2FwCglwb3AKCWJ6ICppZjFfZWxzZQoKCS8vICppZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTI5CgkvLyB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS5yZXNpemUocHJvZ3JhbVNpemUpCglieXRlYyA5IC8vICAidmFsaWRhdG9yX2FwcHJvdmFsX3Byb2dyYW0iCglmcmFtZV9kaWcgLTEgLy8gcHJvZ3JhbVNpemU6IHVpbnQ2NAoJYm94X3Jlc2l6ZQoJYiAqaWYxX2VuZAoKKmlmMV9lbHNlOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTMxCgkvLyB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS5jcmVhdGUocHJvZ3JhbVNpemUpCglieXRlYyA5IC8vICAidmFsaWRhdG9yX2FwcHJvdmFsX3Byb2dyYW0iCglmcmFtZV9kaWcgLTEgLy8gcHJvZ3JhbVNpemU6IHVpbnQ2NAoJYm94X2NyZWF0ZQoJcG9wCgoqaWYxX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjEzNAoJLy8gdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RWZXJzaW9uLnZhbHVlICs9IDEKCWJ5dGVjIDEwIC8vICAidmFsaWRhdG9yX3Bvb2xfdmVyc2lvbiIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDEgLy8gMQoJKwoJYnl0ZWMgMTAgLy8gICJ2YWxpZGF0b3JfcG9vbF92ZXJzaW9uIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gTUFOQUdFUl93cml0ZVBvb2xDb250cmFjdFByb2dyYW0odWludDY0LGJ5dGVbXSl2b2lkCiphYmlfcm91dGVfTUFOQUdFUl93cml0ZVBvb2xDb250cmFjdFByb2dyYW06CgkvLyBkYXRhOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gb2Zmc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIE1BTkFHRVJfd3JpdGVQb29sQ29udHJhY3RQcm9ncmFtKHVpbnQ2NCxieXRlW10pdm9pZAoJY2FsbHN1YiBNQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbQoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gTUFOQUdFUl93cml0ZVBvb2xDb250cmFjdFByb2dyYW0ob2Zmc2V0OiB1aW50NjQsIGRhdGE6IGJ5dGVzKTogdm9pZApNQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbToKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjEzOAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5tYW5hZ2VyLnZhbHVlLCAnb25seSB0aGUgbWFuYWdlciBjYW4gY2FsbCB0aGlzIG1ldGhvZCcpCgl0eG4gU2VuZGVyCglieXRlYyA2IC8vICAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIG9ubHkgdGhlIG1hbmFnZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE0MAoJLy8gdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RBcHByb3ZhbFByb2dyYW0ucmVwbGFjZShvZmZzZXQsIGRhdGEpCglieXRlYyA5IC8vICAidmFsaWRhdG9yX2FwcHJvdmFsX3Byb2dyYW0iCglmcmFtZV9kaWcgLTEgLy8gb2Zmc2V0OiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBkYXRhOiBieXRlcwoJYm94X3JlcGxhY2UKCXJldHN1YgoKLy8gYWRkVmFsaWRhdG9yKHBheSl2b2lkCiphYmlfcm91dGVfYWRkVmFsaWRhdG9yOgoJLy8gbWJyUGF5OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAobWJyUGF5KSBmb3IgYWRkVmFsaWRhdG9yIG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgYWRkVmFsaWRhdG9yKHBheSl2b2lkCgljYWxsc3ViIGFkZFZhbGlkYXRvcgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gYWRkVmFsaWRhdG9yKG1iclBheTogUGF5VHhuKTogdm9pZAphZGRWYWxpZGF0b3I6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNDQKCS8vIHZlcmlmeVBheVR4bihtYnJQYXksIHsKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiB7IGdyZWF0ZXJUaGFuRXF1YWxUbzogdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RDb3N0LnZhbHVlIH0sCgkvLyAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJtYnJQYXkiLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBtYnJQYXk6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglieXRlYyAxNCAvLyAgInZhbGlkYXRvcl9wb29sX2Nvc3QiCglhcHBfZ2xvYmFsX2dldAoJPj0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoiYW1vdW50IiwiY29uZGl0aW9uIjoiZ3JlYXRlclRoYW5FcXVhbFRvIiwiZXhwZWN0ZWQiOiI+PXRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0Q29zdC52YWx1ZSJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNDkKCS8vIHNlbmRBcHBDYWxsKHsKCS8vICAgICAgIG9uQ29tcGxldGlvbjogT25Db21wbGV0aW9uLk5vT3AsCgkvLyAgICAgICBhcHByb3ZhbFByb2dyYW06IHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLnZhbHVlLAoJLy8gICAgICAgY2xlYXJTdGF0ZVByb2dyYW06IENhZWx1c1ZhbGlkYXRvclBvb2wuY2xlYXJQcm9ncmFtKCksCgkvLyAgICAgICBnbG9iYWxOdW1VaW50OiBDYWVsdXNWYWxpZGF0b3JQb29sLnNjaGVtYS5nbG9iYWwubnVtVWludCwKCS8vICAgICAgIGdsb2JhbE51bUJ5dGVTbGljZTogQ2FlbHVzVmFsaWRhdG9yUG9vbC5zY2hlbWEuZ2xvYmFsLm51bUJ5dGVTbGljZSwKCS8vICAgICAgIGV4dHJhUHJvZ3JhbVBhZ2VzOiAzLAoJLy8gICAgICAgYXBwbGljYXRpb25BcmdzOiBbCgkvLyAgICAgICAgIG1ldGhvZCgnY3JlYXRlQXBwbGljYXRpb24odWludDY0LGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkJyksCgkvLyAgICAgICAgIGl0b2IodGhpcy5hcHAuaWQpLAoJLy8gICAgICAgICB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgIGl0b2IodGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RWZXJzaW9uLnZhbHVlKSwKCS8vICAgICAgICAgaXRvYih0aGlzLnRva2VuSWQudmFsdWUpLAoJLy8gICAgICAgXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTUwCgkvLyBvbkNvbXBsZXRpb246IE9uQ29tcGxldGlvbi5Ob09wCglpbnRjIDAgLy8gIE5vT3AKCWl0eG5fZmllbGQgT25Db21wbGV0aW9uCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTUxCgkvLyBhcHByb3ZhbFByb2dyYW06IHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLnZhbHVlCglieXRlYyA5IC8vICAidmFsaWRhdG9yX2FwcHJvdmFsX3Byb2dyYW0iCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS52YWx1ZQoJYXNzZXJ0CglpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE1MgoJLy8gY2xlYXJTdGF0ZVByb2dyYW06IENhZWx1c1ZhbGlkYXRvclBvb2wuY2xlYXJQcm9ncmFtKCkKCXB1c2hieXRlcyAweDBiCglpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTUzCgkvLyBnbG9iYWxOdW1VaW50OiBDYWVsdXNWYWxpZGF0b3JQb29sLnNjaGVtYS5nbG9iYWwubnVtVWludAoJcHVzaGludCAxNQoJaXR4bl9maWVsZCBHbG9iYWxOdW1VaW50CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTU0CgkvLyBnbG9iYWxOdW1CeXRlU2xpY2U6IENhZWx1c1ZhbGlkYXRvclBvb2wuc2NoZW1hLmdsb2JhbC5udW1CeXRlU2xpY2UKCWludGMgNSAvLyAyCglpdHhuX2ZpZWxkIEdsb2JhbE51bUJ5dGVTbGljZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE1NQoJLy8gZXh0cmFQcm9ncmFtUGFnZXM6IDMKCWludGMgOCAvLyAzCglpdHhuX2ZpZWxkIEV4dHJhUHJvZ3JhbVBhZ2VzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTU2CgkvLyBhcHBsaWNhdGlvbkFyZ3M6IFsKCS8vICAgICAgICAgbWV0aG9kKCdjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQnKSwKCS8vICAgICAgICAgaXRvYih0aGlzLmFwcC5pZCksCgkvLyAgICAgICAgIHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgaXRvYih0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdFZlcnNpb24udmFsdWUpLAoJLy8gICAgICAgICBpdG9iKHRoaXMudG9rZW5JZC52YWx1ZSksCgkvLyAgICAgICBdCglwdXNoYnl0ZXMgMHhhZDA0ZjZhMSAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWJ5dGVjIDEwIC8vICAidmFsaWRhdG9yX3Bvb2xfdmVyc2lvbiIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJYnl0ZWMgMyAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE2NQoJLy8gdGhpcy52YWxpZGF0b3JBZGRlZEV2ZW50LmxvZyh7CgkvLyAgICAgICBvcGVyYXRvcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgdmVyc2lvbjogdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RWZXJzaW9uLnZhbHVlLAoJLy8gICAgIH0pCglwdXNoYnl0ZXMgMHg1N2ViNjY5OSAvLyB2YWxpZGF0b3JBZGRlZEV2ZW50KGFkZHJlc3MsdWludDY0KQoJdHhuIFNlbmRlcgoJYnl0ZWMgMTAgLy8gICJ2YWxpZGF0b3JfcG9vbF92ZXJzaW9uIgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gbWludFJlcXVlc3QocGF5KXZvaWQKKmFiaV9yb3V0ZV9taW50UmVxdWVzdDoKCS8vIG1pbnRUeG46IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludGMgMSAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDEgLy8gIHBheQoJPT0KCgkvLyBhcmd1bWVudCAwIChtaW50VHhuKSBmb3IgbWludFJlcXVlc3QgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBtaW50UmVxdWVzdChwYXkpdm9pZAoJY2FsbHN1YiBtaW50UmVxdWVzdAoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gbWludFJlcXVlc3QobWludFR4bjogUGF5VHhuKTogdm9pZAptaW50UmVxdWVzdDoKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTcyCgkvLyB2ZXJpZnlQYXlUeG4obWludFR4biwgewoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICBhbW91bnQ6IHsgZ3JlYXRlclRoYW5FcXVhbFRvOiBnbG9iYWxzLm1pblR4bkZlZSB9LAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBtaW50VHhuOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1pbnRUeG4iLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBtaW50VHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZ2xvYmFsIE1pblR4bkZlZQoJPj0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1pbnRUeG4iLCJmaWVsZCI6ImFtb3VudCIsImNvbmRpdGlvbiI6ImdyZWF0ZXJUaGFuRXF1YWxUbyIsImV4cGVjdGVkIjoiPj1nbG9iYWxzLm1pblR4bkZlZSJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNzcKCS8vIG1pbnRlZCA9IHRoaXMuZ2V0TWludEFtb3VudChtaW50VHhuLmFtb3VudCkKCWZyYW1lX2RpZyAtMSAvLyBtaW50VHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJY2FsbHN1YiBnZXRNaW50QW1vdW50CglmcmFtZV9idXJ5IDAgLy8gbWludGVkOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNzgKCS8vIHRoaXMuZG9BeGZlcih0aGlzLnR4bi5zZW5kZXIsIG1pbnRlZCwgdGhpcy50b2tlbklkLnZhbHVlKQoJYnl0ZWMgMyAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIG1pbnRlZDogdWludDY0Cgl0eG4gU2VuZGVyCgljYWxsc3ViIGRvQXhmZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNzkKCS8vIHRoaXMudG90YWxTdGFrZS52YWx1ZSArPSBtaW50VHhuLmFtb3VudAoJYnl0ZWMgNCAvLyAgInRvdGFsX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBtaW50VHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJKwoJYnl0ZWMgNCAvLyAgInRvdGFsX3N0YWtlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxODAKCS8vIHRoaXMudG9rZW5DaXJjdWxhdGluZ1N1cHBseS52YWx1ZSArPSBtaW50ZWQKCWJ5dGVjIDIgLy8gICJjaXJjdWxhdGluZ19zdXBwbHkiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDAgLy8gbWludGVkOiB1aW50NjQKCSsKCWJ5dGVjIDIgLy8gICJjaXJjdWxhdGluZ19zdXBwbHkiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE4MgoJLy8gdGhpcy5taW50RXZlbnQubG9nKHsKCS8vICAgICAgIGluc3RhbnQ6IHRydWUsCgkvLyAgICAgICBhbW91bnQ6IG1pbnRUeG4uYW1vdW50LAoJLy8gICAgICAgb3V0cHV0OiBtaW50ZWQsCgkvLyAgICAgfSkKCWJ5dGVjIDIxIC8vICBtaW50RXZlbnQoYm9vbCx1aW50NjQsdWludDY0KQoJYnl0ZWMgOCAvLyAweDAwCglpbnRjIDAgLy8gMAoJaW50YyAxIC8vIDEKCXNldGJpdAoJZnJhbWVfZGlnIC0xIC8vIG1pbnRUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAwIC8vIG1pbnRlZDogdWludDY0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGJ1cm5SZXF1ZXN0KGF4ZmVyLGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX2J1cm5SZXF1ZXN0OgoJLy8gYnVyblRvOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyA5IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGJ1cm5UbykgZm9yIGJ1cm5SZXF1ZXN0IG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBidXJuVHhuOiBheGZlcgoJdHhuIEdyb3VwSW5kZXgKCWludGMgMSAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDcgLy8gIGF4ZmVyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKGJ1cm5UeG4pIGZvciBidXJuUmVxdWVzdCBtdXN0IGJlIGEgYXhmZXIgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgYnVyblJlcXVlc3QoYXhmZXIsYWRkcmVzcyl2b2lkCgljYWxsc3ViIGJ1cm5SZXF1ZXN0CglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBidXJuUmVxdWVzdChidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuLCBidXJuVG86IEFkZHJlc3MpOiB2b2lkCmJ1cm5SZXF1ZXN0OgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cG4gNwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE5MAoJLy8gdmVyaWZ5QXNzZXRUcmFuc2ZlclR4bihidXJuVHhuLCB7CgkvLyAgICAgICB4ZmVyQXNzZXQ6IHRoaXMudG9rZW5JZC52YWx1ZSwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICBhc3NldEFtb3VudDogeyBncmVhdGVyVGhhbkVxdWFsVG86IEFMR09SQU5EX0JBU0VfRkVFIH0sCgkvLyAgICAgfSkKCS8vIHZlcmlmeSB4ZmVyQXNzZXQKCWZyYW1lX2RpZyAtMSAvLyBidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBYZmVyQXNzZXQKCWJ5dGVjIDMgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoiYnVyblR4biIsImZpZWxkIjoieGZlckFzc2V0IiwiZXhwZWN0ZWQiOiJ0aGlzLnRva2VuSWQudmFsdWUifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFzc2V0UmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6ImJ1cm5UeG4iLCJmaWVsZCI6ImFzc2V0UmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFzc2V0QW1vdW50CglmcmFtZV9kaWcgLTEgLy8gYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCXB1c2hpbnQgMTAwMAoJPj0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6ImJ1cm5UeG4iLCJmaWVsZCI6ImFzc2V0QW1vdW50IiwiY29uZGl0aW9uIjoiZ3JlYXRlclRoYW5FcXVhbFRvIiwiZXhwZWN0ZWQiOiI+PUFMR09SQU5EX0JBU0VfRkVFIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE5NgoJLy8gYW1vdW50VG9CdXJuID0gdGhpcy5nZXRCdXJuQW1vdW50KGJ1cm5UeG4uYXNzZXRBbW91bnQpCglmcmFtZV9kaWcgLTEgLy8gYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWNhbGxzdWIgZ2V0QnVybkFtb3VudAoJZnJhbWVfYnVyeSAwIC8vIGFtb3VudFRvQnVybjogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTk3CgkvLyBidXJuaW5nID0gMAoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgMSAvLyBidXJuaW5nOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxOTkKCS8vIGlkbGVBbGdvID0gdGhpcy5hcHAuYWRkcmVzcy5iYWxhbmNlIC0gdGhpcy5hcHAuYWRkcmVzcy5taW5CYWxhbmNlCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKCXBvcAoJLQoJZnJhbWVfYnVyeSAyIC8vIGlkbGVBbGdvOiB1aW50NjQKCgkvLyAqaWYyX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjAwCgkvLyBpZGxlQWxnbyA+IDAKCWZyYW1lX2RpZyAyIC8vIGlkbGVBbGdvOiB1aW50NjQKCWludGMgMCAvLyAwCgk+CglieiAqaWYyX2VuZAoKCS8vICppZjJfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjAxCgkvLyBhbW91bnRUb0J1cm5Gcm9tSWRsZSA9IGlkbGVBbGdvID49IGFtb3VudFRvQnVybiA/IGFtb3VudFRvQnVybiA6IGlkbGVBbGdvCglmcmFtZV9kaWcgMiAvLyBpZGxlQWxnbzogdWludDY0CglmcmFtZV9kaWcgMCAvLyBhbW91bnRUb0J1cm46IHVpbnQ2NAoJPj0KCWJ6ICp0ZXJuYXJ5MF9mYWxzZQoJZnJhbWVfZGlnIDAgLy8gYW1vdW50VG9CdXJuOiB1aW50NjQKCWIgKnRlcm5hcnkwX2VuZAoKKnRlcm5hcnkwX2ZhbHNlOgoJZnJhbWVfZGlnIDIgLy8gaWRsZUFsZ286IHVpbnQ2NAoKKnRlcm5hcnkwX2VuZDoKCWZyYW1lX2J1cnkgMyAvLyBhbW91bnRUb0J1cm5Gcm9tSWRsZTogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjAyCgkvLyBidXJuaW5nICs9IGFtb3VudFRvQnVybkZyb21JZGxlCglmcmFtZV9kaWcgMSAvLyBidXJuaW5nOiB1aW50NjQKCWZyYW1lX2RpZyAzIC8vIGFtb3VudFRvQnVybkZyb21JZGxlOiB1aW50NjQKCSsKCWZyYW1lX2J1cnkgMSAvLyBidXJuaW5nOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMDQKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgcmVjZWl2ZXI6IGJ1cm5UeG4uc2VuZGVyLAoJLy8gICAgICAgICBhbW91bnQ6IGFtb3VudFRvQnVybkZyb21JZGxlLAoJLy8gICAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjA1CgkvLyByZWNlaXZlcjogYnVyblR4bi5zZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBTZW5kZXIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMDYKCS8vIGFtb3VudDogYW1vdW50VG9CdXJuRnJvbUlkbGUKCWZyYW1lX2RpZyAzIC8vIGFtb3VudFRvQnVybkZyb21JZGxlOiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKKmlmMl9lbmQ6CgkvLyAqaWYzX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjEwCgkvLyBidXJuaW5nID09PSBhbW91bnRUb0J1cm4KCWZyYW1lX2RpZyAxIC8vIGJ1cm5pbmc6IHVpbnQ2NAoJZnJhbWVfZGlnIDAgLy8gYW1vdW50VG9CdXJuOiB1aW50NjQKCT09CglieiAqaWYzX2VuZAoKCS8vICppZjNfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjExCgkvLyByZXR1cm47CglyZXRzdWIKCippZjNfZW5kOgoJLy8gKmlmNF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIxNAoJLy8gdGhpcy5xdWV1ZUlzRW1wdHkoKQoJY2FsbHN1YiBxdWV1ZUlzRW1wdHkKCWJ6ICppZjRfZW5kCgoJLy8gKmlmNF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMTUKCS8vIHJldHVybjsKCXJldHN1YgoKKmlmNF9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMTgKCS8vIGFzc2VydChnbG9iYWxzLnJvdW5kIC0gdGhpcy5sYXN0RXhoYXVzdEJsb2NrLnZhbHVlID4gQlVSTl9DT09MRE9XTiwgJ3dhaXQgYXQgbGVhc3QgNSBibG9ja3Mgc2luY2UgRXhoYXVzdCBCbG9jaycpCglnbG9iYWwgUm91bmQKCWJ5dGVjIDEyIC8vICAibGFzdF9leGhhdXN0X2Jsb2NrIgoJYXBwX2dsb2JhbF9nZXQKCS0KCWludGMgNCAvLyA1Cgk+CgoJLy8gd2FpdCBhdCBsZWFzdCA1IGJsb2NrcyBzaW5jZSBFeGhhdXN0IEJsb2NrCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMjAKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5idXJuUXVldWUudmFsdWUubGVuZ3RoOyBpICs9IDEpCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSA0IC8vIGk6IHVpbnQ2NAoKKmZvcl8wOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjIwCgkvLyBpIDwgdGhpcy5idXJuUXVldWUudmFsdWUubGVuZ3RoCglmcmFtZV9kaWcgNCAvLyBpOiB1aW50NjQKCWJ5dGVjIDEgLy8gICJidXJuX3F1ZXVlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgNCAvLyA1Cgk8CglieiAqZm9yXzBfZW5kCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjIxCgkvLyBjdXJyZW50VGFyZ2V0SW5RdWV1ZSA9IHRoaXMuYnVyblF1ZXVlLnZhbHVlW2ldCglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgNCAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJZnJhbWVfYnVyeSA1IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCgkvLyAqaWY1X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjIyCgkvLyB0aGlzLmlzUG9vbChjdXJyZW50VGFyZ2V0SW5RdWV1ZSkKCWZyYW1lX2RpZyA1IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCWNhbGxzdWIgaXNQb29sCglieiAqaWY1X2VuZAoKCS8vICppZjVfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjIzCgkvLyBkZWxlZ2F0ZWRUb1RhcmdldCA9IGN1cnJlbnRUYXJnZXRJblF1ZXVlLmdsb2JhbFN0YXRlKCdkZWxlZ2F0ZWRfc3Rha2UnKSBhcyB1aW50NjQKCWZyYW1lX2RpZyA1IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCWJ5dGVjIDE4IC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGN1cnJlbnRUYXJnZXRJblF1ZXVlLmdsb2JhbFN0YXRlKCdkZWxlZ2F0ZWRfc3Rha2UnKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDYgLy8gZGVsZWdhdGVkVG9UYXJnZXQ6IHVpbnQ2NAoKCS8vICppZjZfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMjQKCS8vIGRlbGVnYXRlZFRvVGFyZ2V0IDwgYW1vdW50VG9CdXJuIC0gYnVybmluZwoJZnJhbWVfZGlnIDYgLy8gZGVsZWdhdGVkVG9UYXJnZXQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDAgLy8gYW1vdW50VG9CdXJuOiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIGJ1cm5pbmc6IHVpbnQ2NAoJLQoJPAoJYnogKmlmNl9lbHNlCgoJLy8gKmlmNl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMjUKCS8vIHRoaXMuZG9CdXJuVHhuKGN1cnJlbnRUYXJnZXRJblF1ZXVlLCBbZGVsZWdhdGVkVG9UYXJnZXQsIGJ1cm5Ub10pCglmcmFtZV9kaWcgNiAvLyBkZWxlZ2F0ZWRUb1RhcmdldDogdWludDY0CglpdG9iCglmcmFtZV9kaWcgLTIgLy8gYnVyblRvOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyA1IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCWNhbGxzdWIgZG9CdXJuVHhuCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjI2CgkvLyB0aGlzLmJ1cm5RdWV1ZS52YWx1ZVtpXSA9IEFwcElELnplcm9JbmRleAoJYnl0ZWMgMSAvLyAgImJ1cm5fcXVldWUiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDQgLy8gaTogdWludDY0CglpbnRjIDIgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCglwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAwCglyZXBsYWNlMwoJYnl0ZWMgMSAvLyAgImJ1cm5fcXVldWUiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIyNwoJLy8gYnVybmluZyArPSBkZWxlZ2F0ZWRUb1RhcmdldAoJZnJhbWVfZGlnIDEgLy8gYnVybmluZzogdWludDY0CglmcmFtZV9kaWcgNiAvLyBkZWxlZ2F0ZWRUb1RhcmdldDogdWludDY0CgkrCglmcmFtZV9idXJ5IDEgLy8gYnVybmluZzogdWludDY0CgliICppZjZfZW5kCgoqaWY2X2Vsc2U6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMjkKCS8vIHRoaXMuZG9CdXJuVHhuKGN1cnJlbnRUYXJnZXRJblF1ZXVlLCBbYW1vdW50VG9CdXJuIC0gYnVybmluZywgYnVyblRvXSkKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFRvQnVybjogdWludDY0CglmcmFtZV9kaWcgMSAvLyBidXJuaW5nOiB1aW50NjQKCS0KCWl0b2IKCWZyYW1lX2RpZyAtMiAvLyBidXJuVG86IEFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIDUgLy8gY3VycmVudFRhcmdldEluUXVldWU6IHVpbnQ2NAoJY2FsbHN1YiBkb0J1cm5UeG4KCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMzAKCS8vIGJ1cm5pbmcgPSBhbW91bnRUb0J1cm4KCWZyYW1lX2RpZyAwIC8vIGFtb3VudFRvQnVybjogdWludDY0CglmcmFtZV9idXJ5IDEgLy8gYnVybmluZzogdWludDY0CgliICpmb3JfMF9lbmQKCippZjZfZW5kOgoKKmlmNV9lbmQ6CgoqZm9yXzBfY29udGludWU6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMjAKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDQgLy8gaTogdWludDY0CglpbnRjIDEgLy8gMQoJKwoJZnJhbWVfYnVyeSA0IC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzAKCipmb3JfMF9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMzYKCS8vIGFtb3VudExlZnQgPSB0aGlzLmdldEJ1cm5BbW91bnQoYW1vdW50VG9CdXJuIC0gYnVybmluZykKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFRvQnVybjogdWludDY0CglmcmFtZV9kaWcgMSAvLyBidXJuaW5nOiB1aW50NjQKCS0KCWNhbGxzdWIgZ2V0QnVybkFtb3VudAoJZnJhbWVfYnVyeSA3IC8vIGFtb3VudExlZnQ6IHVpbnQ2NAoKCS8vICppZjdfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMzcKCS8vIGFtb3VudExlZnQgPiAwCglmcmFtZV9kaWcgNyAvLyBhbW91bnRMZWZ0OiB1aW50NjQKCWludGMgMCAvLyAwCgk+CglieiAqaWY3X2VuZAoKCS8vICppZjdfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjM4CgkvLyB0aGlzLmRvQXhmZXIoYnVyblR4bi5zZW5kZXIsIGFtb3VudExlZnQsIHRoaXMudG9rZW5JZC52YWx1ZSkKCWJ5dGVjIDMgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgNyAvLyBhbW91bnRMZWZ0OiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBTZW5kZXIKCWNhbGxzdWIgZG9BeGZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIzOQoJLy8gdGhpcy5sYXN0RXhoYXVzdEJsb2NrLnZhbHVlID0gZ2xvYmFscy5yb3VuZAoJYnl0ZWMgMTIgLy8gICJsYXN0X2V4aGF1c3RfYmxvY2siCglnbG9iYWwgUm91bmQKCWFwcF9nbG9iYWxfcHV0CgoqaWY3X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI0MQoJLy8gdGhpcy50b2tlbkNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlIC09IGJ1cm5UeG4uYXNzZXRBbW91bnQgLSBhbW91bnRMZWZ0CglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJZnJhbWVfZGlnIDcgLy8gYW1vdW50TGVmdDogdWludDY0CgktCgktCglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNDIKCS8vIHRoaXMudG90YWxTdGFrZS52YWx1ZSAtPSBidXJuaW5nCglieXRlYyA0IC8vICAidG90YWxfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDEgLy8gYnVybmluZzogdWludDY0CgktCglieXRlYyA0IC8vICAidG90YWxfc3Rha2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI0NAoJLy8gdGhpcy5idXJuRXZlbnQubG9nKHsKCS8vICAgICAgIGZpbGxlZDogYW1vdW50TGVmdCA+IDAsCgkvLyAgICAgICBhbW91bnQ6IGJ1cm5UeG4uYXNzZXRBbW91bnQgLSBhbW91bnRMZWZ0LAoJLy8gICAgICAgb3V0cHV0OiBidXJuaW5nLAoJLy8gICAgIH0pCglieXRlYyAyMiAvLyAgYnVybkV2ZW50KGJvb2wsdWludDY0LHVpbnQ2NCkKCWJ5dGVjIDggLy8gMHgwMAoJaW50YyAwIC8vIDAKCWZyYW1lX2RpZyA3IC8vIGFtb3VudExlZnQ6IHVpbnQ2NAoJaW50YyAwIC8vIDAKCT4KCXNldGJpdAoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgNyAvLyBhbW91bnRMZWZ0OiB1aW50NjQKCS0KCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDEgLy8gYnVybmluZzogdWludDY0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIG1pbnRWYWxpZGF0b3JDb21taXQodWludDY0LHBheSl2b2lkCiphYmlfcm91dGVfbWludFZhbGlkYXRvckNvbW1pdDoKCS8vIHN0YWtlQ29tbWl0OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAoc3Rha2VDb21taXQpIGZvciBtaW50VmFsaWRhdG9yQ29tbWl0IG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIHZhbGlkYXRvckFwcElEOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIG1pbnRWYWxpZGF0b3JDb21taXQodWludDY0LHBheSl2b2lkCgljYWxsc3ViIG1pbnRWYWxpZGF0b3JDb21taXQKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIG1pbnRWYWxpZGF0b3JDb21taXQodmFsaWRhdG9yQXBwSUQ6IEFwcElELCBzdGFrZUNvbW1pdDogUGF5VHhuKTogdm9pZAptaW50VmFsaWRhdG9yQ29tbWl0OgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI1NwoJLy8gYXNzZXJ0KHRoaXMuaXNQb29sKHZhbGlkYXRvckFwcElEKSkKCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWNhbGxzdWIgaXNQb29sCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNTgKCS8vIG9wZXJhdG9yQWRkcmVzcyA9IHZhbGlkYXRvckFwcElELmdsb2JhbFN0YXRlKCdvcGVyYXRvcicpIGFzIEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWJ5dGVjIDIwIC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdmFsaWRhdG9yQXBwSUQuZ2xvYmFsU3RhdGUoJ29wZXJhdG9yJykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIG9wZXJhdG9yQWRkcmVzczogYWRkcmVzcwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI1OQoJLy8gdmVyaWZ5UGF5VHhuKHN0YWtlQ29tbWl0LCB7CgkvLyAgICAgICBzZW5kZXI6IG9wZXJhdG9yQWRkcmVzcywKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTIgLy8gc3Rha2VDb21taXQ6IFBheVR4bgoJZ3R4bnMgU2VuZGVyCglmcmFtZV9kaWcgMCAvLyBvcGVyYXRvckFkZHJlc3M6IGFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJzdGFrZUNvbW1pdCIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJvcGVyYXRvckFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTIgLy8gc3Rha2VDb21taXQ6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoic3Rha2VDb21taXQiLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI2NAoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLmFkZFRvT3BlcmF0b3JDb21taXQ+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IHZhbGlkYXRvckFwcElELAoJLy8gICAgICAgbWV0aG9kQXJnczogWwoJLy8gICAgICAgICB7CgkvLyAgICAgICAgICAgcmVjZWl2ZXI6IHZhbGlkYXRvckFwcElELmFkZHJlc3MsCgkvLyAgICAgICAgICAgYW1vdW50OiBzdGFrZUNvbW1pdC5hbW91bnQsCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICBdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI2OAoJLy8gcmVjZWl2ZXI6IHZhbGlkYXRvckFwcElELmFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI2OQoJLy8gYW1vdW50OiBzdGFrZUNvbW1pdC5hbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBzdGFrZUNvbW1pdDogUGF5VHhuCglndHhucyBBbW91bnQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJYnl0ZWMgMjMgLy8gIG1ldGhvZCAiYWRkVG9PcGVyYXRvckNvbW1pdChwYXkpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjY1CgkvLyBhcHBsaWNhdGlvbklEOiB2YWxpZGF0b3JBcHBJRAoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjY2CgkvLyBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcywKCS8vICAgICAgICAgICBhbW91bnQ6IHN0YWtlQ29tbWl0LmFtb3VudCwKCS8vICAgICAgICAgfSwKCS8vICAgICAgIF0KCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNzQKCS8vIGFtb3VudFRvTWludCA9IHRoaXMuZ2V0TWludEFtb3VudChzdGFrZUNvbW1pdC5hbW91bnQpCglmcmFtZV9kaWcgLTIgLy8gc3Rha2VDb21taXQ6IFBheVR4bgoJZ3R4bnMgQW1vdW50CgljYWxsc3ViIGdldE1pbnRBbW91bnQKCWZyYW1lX2J1cnkgMSAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI3NQoJLy8gdGhpcy5kb0F4ZmVyKHZhbGlkYXRvckFwcElELmFkZHJlc3MsIGFtb3VudFRvTWludCwgdGhpcy50b2tlbklkLnZhbHVlKQoJYnl0ZWMgMyAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAxIC8vIGFtb3VudFRvTWludDogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCWNhbGxzdWIgZG9BeGZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI3NgoJLy8gdGhpcy50b3RhbFN0YWtlLnZhbHVlICs9IHN0YWtlQ29tbWl0LmFtb3VudAoJYnl0ZWMgNCAvLyAgInRvdGFsX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMiAvLyBzdGFrZUNvbW1pdDogUGF5VHhuCglndHhucyBBbW91bnQKCSsKCWJ5dGVjIDQgLy8gICJ0b3RhbF9zdGFrZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mjc3CgkvLyB0aGlzLnRva2VuQ2lyY3VsYXRpbmdTdXBwbHkudmFsdWUgKz0gYW1vdW50VG9NaW50CglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAxIC8vIGFtb3VudFRvTWludDogdWludDY0CgkrCglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gYnVyblZhbGlkYXRvckNvbW1pdCh1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9idXJuVmFsaWRhdG9yQ29tbWl0OgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhcHBUb0J1cm5Gcm9tOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGJ1cm5WYWxpZGF0b3JDb21taXQodWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGJ1cm5WYWxpZGF0b3JDb21taXQKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGJ1cm5WYWxpZGF0b3JDb21taXQoYXBwVG9CdXJuRnJvbTogQXBwSUQsIGFtb3VudDogdWludDY0KTogdm9pZApidXJuVmFsaWRhdG9yQ29tbWl0OgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyODMKCS8vIHRoaXMuaXNQb29sKGFwcFRvQnVybkZyb20pCglmcmFtZV9kaWcgLTEgLy8gYXBwVG9CdXJuRnJvbTogQXBwSUQKCWNhbGxzdWIgaXNQb29sCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mjg0CgkvLyB2ZXJpZnlUeG4odGhpcy50eG4sIHsKCS8vICAgICAgIHNlbmRlcjogYXBwVG9CdXJuRnJvbS5nbG9iYWxTdGF0ZSgnb3BlcmF0b3InKSBhcyBBZGRyZXNzLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gYXBwVG9CdXJuRnJvbTogQXBwSUQKCWJ5dGVjIDIwIC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogYXBwVG9CdXJuRnJvbS5nbG9iYWxTdGF0ZSgnb3BlcmF0b3InKQoJYXNzZXJ0Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoidGhpcy50eG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoiYXBwVG9CdXJuRnJvbS5nbG9iYWxTdGF0ZSgnb3BlcmF0b3InKSBhcyBBZGRyZXNzIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI4NwoJLy8gdG9CdXJuID0gdGhpcy5nZXRCdXJuQW1vdW50KGFtb3VudCkKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJY2FsbHN1YiBnZXRCdXJuQW1vdW50CglmcmFtZV9idXJ5IDAgLy8gdG9CdXJuOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyODgKCS8vIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNWYWxpZGF0b3JQb29sLnByb3RvdHlwZS5yZW1vdmVGcm9tT3BlcmF0b3JDb21taXQsIHZvaWQ+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IGFwcFRvQnVybkZyb20sCgkvLyAgICAgICBtZXRob2RBcmdzOiBbdG9CdXJuLCBhbW91bnRdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweDMxYjdlYzE5IC8vIG1ldGhvZCAicmVtb3ZlRnJvbU9wZXJhdG9yQ29tbWl0KHVpbnQ2NCx1aW50NjQpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mjg5CgkvLyBhcHBsaWNhdGlvbklEOiBhcHBUb0J1cm5Gcm9tCglmcmFtZV9kaWcgLTEgLy8gYXBwVG9CdXJuRnJvbTogQXBwSUQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI5MAoJLy8gbWV0aG9kQXJnczogW3RvQnVybiwgYW1vdW50XQoJZnJhbWVfZGlnIDAgLy8gdG9CdXJuOiB1aW50NjQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50NjQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI5MgoJLy8gdGhpcy50b3RhbFN0YWtlLnZhbHVlIC09IHRvQnVybgoJYnl0ZWMgNCAvLyAgInRvdGFsX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIHRvQnVybjogdWludDY0CgktCglieXRlYyA0IC8vICAidG90YWxfc3Rha2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI5MwoJLy8gdGhpcy50b2tlbkNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlIC09IGFtb3VudAoJYnl0ZWMgMiAvLyAgImNpcmN1bGF0aW5nX3N1cHBseSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50NjQKCS0KCWJ5dGVjIDIgLy8gICJjaXJjdWxhdGluZ19zdXBwbHkiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBidXJuVG9EZWxpbnF1ZW50VmFsaWRhdG9yKGF4ZmVyLHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvcjoKCS8vIHZhbGlkYXRvckFwcElEOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBidXJuVHhuOiBheGZlcgoJdHhuIEdyb3VwSW5kZXgKCWludGMgMSAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDcgLy8gIGF4ZmVyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKGJ1cm5UeG4pIGZvciBidXJuVG9EZWxpbnF1ZW50VmFsaWRhdG9yIG11c3QgYmUgYSBheGZlciB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBidXJuVG9EZWxpbnF1ZW50VmFsaWRhdG9yKGF4ZmVyLHVpbnQ2NCl2b2lkCgljYWxsc3ViIGJ1cm5Ub0RlbGlucXVlbnRWYWxpZGF0b3IKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGJ1cm5Ub0RlbGlucXVlbnRWYWxpZGF0b3IoYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4biwgdmFsaWRhdG9yQXBwSUQ6IEFwcElEKTogdm9pZApidXJuVG9EZWxpbnF1ZW50VmFsaWRhdG9yOgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cG4gNQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMwNAoJLy8gdGhpcy5pc1Bvb2wodmFsaWRhdG9yQXBwSUQpCglmcmFtZV9kaWcgLTIgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECgljYWxsc3ViIGlzUG9vbAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMwNQoJLy8gYXNzZXJ0KGdsb2JhbHMucm91bmQgLSB0aGlzLmxhc3RFeGhhdXN0QmxvY2sudmFsdWUgPiBCVVJOX0NPT0xET1dOLCAiY2FuIG9ubHkgYnVybiBpZiB3ZSdyZSBub3QgZXhoYXVzdGVkIikKCWdsb2JhbCBSb3VuZAoJYnl0ZWMgMTIgLy8gICJsYXN0X2V4aGF1c3RfYmxvY2siCglhcHBfZ2xvYmFsX2dldAoJLQoJaW50YyA0IC8vIDUKCT4KCgkvLyBjYW4gb25seSBidXJuIGlmIHdlJ3JlIG5vdCBleGhhdXN0ZWQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMwNgoJLy8gdmVyaWZ5QXNzZXRUcmFuc2ZlclR4bihidXJuVHhuLCB7CgkvLyAgICAgICB4ZmVyQXNzZXQ6IHRoaXMudG9rZW5JZC52YWx1ZSwKCS8vICAgICAgIGFzc2V0U2VuZGVyOiB2YWxpZGF0b3JBcHBJRC5hZGRyZXNzLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgeGZlckFzc2V0CglmcmFtZV9kaWcgLTEgLy8gYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglieXRlYyAzIC8vICAidG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6ImJ1cm5UeG4iLCJmaWVsZCI6InhmZXJBc3NldCIsImV4cGVjdGVkIjoidGhpcy50b2tlbklkLnZhbHVlIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0U2VuZGVyCglmcmFtZV9kaWcgLTIgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJidXJuVHhuIiwiZmllbGQiOiJhc3NldFNlbmRlciIsImV4cGVjdGVkIjoidmFsaWRhdG9yQXBwSUQuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTAKCS8vIGFzc2VydCgodmFsaWRhdG9yQXBwSUQuZ2xvYmFsU3RhdGUoJ3N0YXR1cycpIGFzIHVpbnQ2NCkgIT09IDIpCglmcmFtZV9kaWcgLTIgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglieXRlYyAxNSAvLyAgInN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiB2YWxpZGF0b3JBcHBJRC5nbG9iYWxTdGF0ZSgnc3RhdHVzJykKCWFzc2VydAoJaW50YyA1IC8vIDIKCSE9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTEKCS8vIGFtb3VudFRvVXBkYXRlOiB1aW50NjQgPSAwCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAwIC8vIGFtb3VudFRvVXBkYXRlOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTIKCS8vIHRvQnVybjogdWludDY0ID0KCS8vICAgICAgIHRoaXMuZ2V0QnVybkFtb3VudChidXJuVHhuLmFzc2V0QW1vdW50KSAtICh2YWxpZGF0b3JBcHBJRC5nbG9iYWxTdGF0ZSgnb3BlcmF0b3JfY29tbWl0JykgYXMgdWludDY0KQoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CgljYWxsc3ViIGdldEJ1cm5BbW91bnQKCWZyYW1lX2RpZyAtMiAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWJ5dGVjIDE5IC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHZhbGlkYXRvckFwcElELmdsb2JhbFN0YXRlKCdvcGVyYXRvcl9jb21taXQnKQoJYXNzZXJ0CgktCglmcmFtZV9idXJ5IDEgLy8gdG9CdXJuOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTQKCS8vIGFtdEJ1cm5lZCA9IDAKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDIgLy8gYW10QnVybmVkOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTUKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5idXJuUXVldWUudmFsdWUubGVuZ3RoOyBpICs9IDEpCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAzIC8vIGk6IHVpbnQ2NAoKKmZvcl8xOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzE1CgkvLyBpIDwgdGhpcy5idXJuUXVldWUudmFsdWUubGVuZ3RoCglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWJ5dGVjIDEgLy8gICJidXJuX3F1ZXVlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgNCAvLyA1Cgk8CglieiAqZm9yXzFfZW5kCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzE2CgkvLyBjdXJyZW50VGFyZ2V0SW5RdWV1ZSA9IHRoaXMuYnVyblF1ZXVlLnZhbHVlW2ldCglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJZnJhbWVfYnVyeSA0IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCgkvLyAqaWY4X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzE3CgkvLyB0aGlzLmlzUG9vbChjdXJyZW50VGFyZ2V0SW5RdWV1ZSkKCWZyYW1lX2RpZyA0IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCWNhbGxzdWIgaXNQb29sCglieiAqaWY4X2VuZAoKCS8vICppZjhfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzE4CgkvLyBkZWxlZ2F0ZWRUb1RhcmdldCA9IGN1cnJlbnRUYXJnZXRJblF1ZXVlLmdsb2JhbFN0YXRlKCdkZWxlZ2F0ZWRfc3Rha2UnKSBhcyB1aW50NjQKCWZyYW1lX2RpZyA0IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCWJ5dGVjIDE4IC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGN1cnJlbnRUYXJnZXRJblF1ZXVlLmdsb2JhbFN0YXRlKCdkZWxlZ2F0ZWRfc3Rha2UnKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDUgLy8gZGVsZWdhdGVkVG9UYXJnZXQ6IHVpbnQ2NAoKCS8vICppZjlfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTkKCS8vIGRlbGVnYXRlZFRvVGFyZ2V0ID49IHRvQnVybgoJZnJhbWVfZGlnIDUgLy8gZGVsZWdhdGVkVG9UYXJnZXQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDEgLy8gdG9CdXJuOiB1aW50NjQKCT49CglieiAqaWY5X2Vsc2UKCgkvLyAqaWY5X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMyMAoJLy8gdGhpcy5kb0J1cm5UeG4oY3VycmVudFRhcmdldEluUXVldWUsIFt0b0J1cm4sIHRoaXMuYXBwLmFkZHJlc3NdKQoJZnJhbWVfZGlnIDEgLy8gdG9CdXJuOiB1aW50NjQKCWl0b2IKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyA0IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCWNhbGxzdWIgZG9CdXJuVHhuCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzIxCgkvLyBhbXRCdXJuZWQgKz0gdG9CdXJuCglmcmFtZV9kaWcgMiAvLyBhbXRCdXJuZWQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDEgLy8gdG9CdXJuOiB1aW50NjQKCSsKCWZyYW1lX2J1cnkgMiAvLyBhbXRCdXJuZWQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMyMgoJLy8gdG9CdXJuID0gMAoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgMSAvLyB0b0J1cm46IHVpbnQ2NAoJYiAqZm9yXzFfZW5kCgliICppZjlfZW5kCgoqaWY5X2Vsc2U6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMjUKCS8vIHRoaXMuZG9CdXJuVHhuKGN1cnJlbnRUYXJnZXRJblF1ZXVlLCBbZGVsZWdhdGVkVG9UYXJnZXQsIHRoaXMuYXBwLmFkZHJlc3NdKQoJZnJhbWVfZGlnIDUgLy8gZGVsZWdhdGVkVG9UYXJnZXQ6IHVpbnQ2NAoJaXRvYgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIDQgLy8gY3VycmVudFRhcmdldEluUXVldWU6IHVpbnQ2NAoJY2FsbHN1YiBkb0J1cm5UeG4KCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMjYKCS8vIGFtdEJ1cm5lZCArPSBkZWxlZ2F0ZWRUb1RhcmdldAoJZnJhbWVfZGlnIDIgLy8gYW10QnVybmVkOiB1aW50NjQKCWZyYW1lX2RpZyA1IC8vIGRlbGVnYXRlZFRvVGFyZ2V0OiB1aW50NjQKCSsKCWZyYW1lX2J1cnkgMiAvLyBhbXRCdXJuZWQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMyNwoJLy8gdG9CdXJuIC09IGRlbGVnYXRlZFRvVGFyZ2V0CglmcmFtZV9kaWcgMSAvLyB0b0J1cm46IHVpbnQ2NAoJZnJhbWVfZGlnIDUgLy8gZGVsZWdhdGVkVG9UYXJnZXQ6IHVpbnQ2NAoJLQoJZnJhbWVfYnVyeSAxIC8vIHRvQnVybjogdWludDY0CgoqaWY5X2VuZDoKCippZjhfZW5kOgoKKmZvcl8xX2NvbnRpbnVlOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzE1CgkvLyBpICs9IDEKCWZyYW1lX2RpZyAzIC8vIGk6IHVpbnQ2NAoJaW50YyAxIC8vIDEKCSsKCWZyYW1lX2J1cnkgMyAvLyBpOiB1aW50NjQKCWIgKmZvcl8xCgoqZm9yXzFfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzMxCgkvLyBhbW91bnRUb1VwZGF0ZSA9IHRoaXMuZ2V0QnVybkFtb3VudCh0b0J1cm4gLSBhbXRCdXJuZWQpCglmcmFtZV9kaWcgMSAvLyB0b0J1cm46IHVpbnQ2NAoJZnJhbWVfZGlnIDIgLy8gYW10QnVybmVkOiB1aW50NjQKCS0KCWNhbGxzdWIgZ2V0QnVybkFtb3VudAoJZnJhbWVfYnVyeSAwIC8vIGFtb3VudFRvVXBkYXRlOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMzIKCS8vIHRoaXMudG9rZW5DaXJjdWxhdGluZ1N1cHBseS52YWx1ZSAtPSBidXJuVHhuLmFzc2V0QW1vdW50IC0gYW1vdW50VG9VcGRhdGUKCWJ5dGVjIDIgLy8gICJjaXJjdWxhdGluZ19zdXBwbHkiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgMCAvLyBhbW91bnRUb1VwZGF0ZTogdWludDY0CgktCgktCglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMzMKCS8vIHRoaXMudG90YWxTdGFrZS52YWx1ZSAtPSBhbXRCdXJuZWQKCWJ5dGVjIDQgLy8gICJ0b3RhbF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMiAvLyBhbXRCdXJuZWQ6IHVpbnQ2NAoJLQoJYnl0ZWMgNCAvLyAgInRvdGFsX3N0YWtlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyAqaWYxMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMzNAoJLy8gYW1vdW50VG9VcGRhdGUgPiAwCglmcmFtZV9kaWcgMCAvLyBhbW91bnRUb1VwZGF0ZTogdWludDY0CglpbnRjIDAgLy8gMAoJPgoJYnogKmlmMTBfZW5kCgoJLy8gKmlmMTBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzM1CgkvLyB0aGlzLmRvQXhmZXIoYnVyblR4bi5zZW5kZXIsIGFtb3VudFRvVXBkYXRlLCB0aGlzLnRva2VuSWQudmFsdWUpCglieXRlYyAzIC8vICAidG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDAgLy8gYW1vdW50VG9VcGRhdGU6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFNlbmRlcgoJY2FsbHN1YiBkb0F4ZmVyCgoqaWYxMF9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMzcKCS8vIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNWYWxpZGF0b3JQb29sLnByb3RvdHlwZS5hZGRUb09wZXJhdG9yQ29tbWl0Pih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiB2YWxpZGF0b3JBcHBJRCwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgewoJLy8gICAgICAgICAgIHJlY2VpdmVyOiB2YWxpZGF0b3JBcHBJRC5hZGRyZXNzLAoJLy8gICAgICAgICAgIGFtb3VudDogYW10QnVybmVkLAoJLy8gICAgICAgICB9LAoJLy8gICAgICAgXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAxIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNDEKCS8vIHJlY2VpdmVyOiB2YWxpZGF0b3JBcHBJRC5hZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNDIKCS8vIGFtb3VudDogYW10QnVybmVkCglmcmFtZV9kaWcgMiAvLyBhbXRCdXJuZWQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCWl0eG5fbmV4dAoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglieXRlYyAyMyAvLyAgbWV0aG9kICJhZGRUb09wZXJhdG9yQ29tbWl0KHBheSl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMzgKCS8vIGFwcGxpY2F0aW9uSUQ6IHZhbGlkYXRvckFwcElECglmcmFtZV9kaWcgLTIgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMzkKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgewoJLy8gICAgICAgICAgIHJlY2VpdmVyOiB2YWxpZGF0b3JBcHBJRC5hZGRyZXNzLAoJLy8gICAgICAgICAgIGFtb3VudDogYW10QnVybmVkLAoJLy8gICAgICAgICB9LAoJLy8gICAgICAgXQoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM0NwoJLy8gdGhpcy5idXJuRXZlbnQubG9nKHsKCS8vICAgICAgIGZpbGxlZDogYW1vdW50VG9VcGRhdGUgPiAwLAoJLy8gICAgICAgYW1vdW50OiBidXJuVHhuLmFzc2V0QW1vdW50LAoJLy8gICAgICAgb3V0cHV0OiBhbXRCdXJuZWQsCgkvLyAgICAgfSkKCWJ5dGVjIDIyIC8vICBidXJuRXZlbnQoYm9vbCx1aW50NjQsdWludDY0KQoJYnl0ZWMgOCAvLyAweDAwCglpbnRjIDAgLy8gMAoJZnJhbWVfZGlnIDAgLy8gYW1vdW50VG9VcGRhdGU6IHVpbnQ2NAoJaW50YyAwIC8vIDAKCT4KCXNldGJpdAoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAyIC8vIGFtdEJ1cm5lZDogdWludDY0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIHJlTWludERlbGlucXVlbnRDb21taXQodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9yZU1pbnREZWxpbnF1ZW50Q29tbWl0OgoJLy8gYXBwOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHJlTWludERlbGlucXVlbnRDb21taXQodWludDY0KXZvaWQKCWNhbGxzdWIgcmVNaW50RGVsaW5xdWVudENvbW1pdAoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gcmVNaW50RGVsaW5xdWVudENvbW1pdChhcHA6IEFwcElEKTogdm9pZApyZU1pbnREZWxpbnF1ZW50Q29tbWl0OgoJcHJvdG8gMSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM1OQoJLy8gdGhpcy5pc1Bvb2woYXBwKQoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWNhbGxzdWIgaXNQb29sCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzYwCgkvLyBhc3NlcnQoKGFwcC5nbG9iYWxTdGF0ZSgnc3RhdHVzJykgYXMgdWludDY0KSAhPT0gMiwgJ211c3Qgc29sdmUgZGVsaW5xdWVuY3kgZmlyc3QnKQoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWJ5dGVjIDE1IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcC5nbG9iYWxTdGF0ZSgnc3RhdHVzJykKCWFzc2VydAoJaW50YyA1IC8vIDIKCSE9CgoJLy8gbXVzdCBzb2x2ZSBkZWxpbnF1ZW5jeSBmaXJzdAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzYxCgkvLyBhbW91bnQgPSBhcHAuZ2xvYmFsU3RhdGUoJ29wZXJhdG9yX2NvbW1pdCcpIGFzIHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWJ5dGVjIDE5IC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcC5nbG9iYWxTdGF0ZSgnb3BlcmF0b3JfY29tbWl0JykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIGFtb3VudDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzYyCgkvLyBhc3NlcnQoCgkvLyAgICAgICBhcHAuYWRkcmVzcy5hc3NldEJhbGFuY2UodGhpcy50b2tlbklkLnZhbHVlKSA9PT0gMCwKCS8vICAgICAgICdJZiB0aGUgYXBwIGFscmVhZHkgaGFzIHZBTEdPIGl0IGNhbm5vdCBtaW50IHdpdGggdGhpcyBtZXRob2QnCgkvLyAgICAgKQoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJYnl0ZWMgMyAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglpbnRjIDAgLy8gMAoJPT0KCgkvLyBJZiB0aGUgYXBwIGFscmVhZHkgaGFzIHZBTEdPIGl0IGNhbm5vdCBtaW50IHdpdGggdGhpcyBtZXRob2QKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM2NgoJLy8gYW1vdW50VG9NaW50ID0gdGhpcy5nZXRNaW50QW1vdW50KGFtb3VudCkKCWZyYW1lX2RpZyAwIC8vIGFtb3VudDogdWludDY0CgljYWxsc3ViIGdldE1pbnRBbW91bnQKCWZyYW1lX2J1cnkgMSAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM2NwoJLy8gdGhpcy5kb0F4ZmVyKGFwcC5hZGRyZXNzLCBhbW91bnRUb01pbnQsIHRoaXMudG9rZW5JZC52YWx1ZSkKCWJ5dGVjIDMgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMSAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJY2FsbHN1YiBkb0F4ZmVyCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzY4CgkvLyB0aGlzLnRva2VuQ2lyY3VsYXRpbmdTdXBwbHkudmFsdWUgKz0gYW1vdW50VG9NaW50CglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAxIC8vIGFtb3VudFRvTWludDogdWludDY0CgkrCglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNzAKCS8vIHRoaXMubWludEV2ZW50LmxvZyh7CgkvLyAgICAgICBpbnN0YW50OiB0cnVlLAoJLy8gICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICBvdXRwdXQ6IGFtb3VudFRvTWludCwKCS8vICAgICB9KQoJYnl0ZWMgMjEgLy8gIG1pbnRFdmVudChib29sLHVpbnQ2NCx1aW50NjQpCglieXRlYyA4IC8vIDB4MDAKCWludGMgMCAvLyAwCglpbnRjIDEgLy8gMQoJc2V0Yml0CglmcmFtZV9kaWcgMCAvLyBhbW91bnQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMSAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBiaWQodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9iaWQ6CgkvLyB2YWxpZGF0b3JBcHBJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBiaWQodWludDY0KXZvaWQKCWNhbGxzdWIgYmlkCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBiaWQodmFsaWRhdG9yQXBwSUQ6IEFwcElEKTogdm9pZApiaWQ6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiAyCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzgwCgkvLyBhc3NlcnQodGhpcy5pc1Bvb2wodmFsaWRhdG9yQXBwSUQpKQoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJY2FsbHN1YiBpc1Bvb2wKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM4MQoJLy8gaXNEZWxlZ2F0YWJsZSA9ICh2YWxpZGF0b3JBcHBJRC5nbG9iYWxTdGF0ZSgnc3RhdHVzJykgYXMgdWludDY0KSA9PT0gMAoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJYnl0ZWMgMTUgLy8gICJzdGF0dXMiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdmFsaWRhdG9yQXBwSUQuZ2xvYmFsU3RhdGUoJ3N0YXR1cycpCglhc3NlcnQKCWludGMgMCAvLyAwCgk9PQoJZnJhbWVfYnVyeSAwIC8vIGlzRGVsZWdhdGFibGU6IGJvb2wKCgkvLyAqaWYxMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM4MgoJLy8gIXRoaXMuaXNQb29sKHRoaXMuaGlnaGVzdEJpZGRlci52YWx1ZSkKCWJ5dGVjIDcgLy8gICJoaWdoZXN0X2JpZGRlciIKCWFwcF9nbG9iYWxfZ2V0CgljYWxsc3ViIGlzUG9vbAoJIQoJYnogKmlmMTFfZW5kCgoJLy8gKmlmMTFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzgzCgkvLyB0aGlzLmhpZ2hlc3RCaWRkZXIudmFsdWUgPSB2YWxpZGF0b3JBcHBJRAoJYnl0ZWMgNyAvLyAgImhpZ2hlc3RfYmlkZGVyIgoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozODQKCS8vIHJldHVybjsKCXJldHN1YgoKKmlmMTFfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mzg2CgkvLyBjaGFsbGVuZ2VyQnVmZmVyID0gdmFsaWRhdG9yQXBwSUQuZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25fYnVmZmVyJykgYXMgdWludDY0CglmcmFtZV9kaWcgLTEgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglieXRlYyAxMSAvLyAgInNhdHVyYXRpb25fYnVmZmVyIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHZhbGlkYXRvckFwcElELmdsb2JhbFN0YXRlKCdzYXR1cmF0aW9uX2J1ZmZlcicpCglhc3NlcnQKCWZyYW1lX2J1cnkgMSAvLyBjaGFsbGVuZ2VyQnVmZmVyOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozODcKCS8vIGhpZ2hlc3RCdWZmZXIgPSB0aGlzLmhpZ2hlc3RCaWRkZXIudmFsdWUuZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25fYnVmZmVyJykgYXMgdWludDY0CglieXRlYyA3IC8vICAiaGlnaGVzdF9iaWRkZXIiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMTEgLy8gICJzYXR1cmF0aW9uX2J1ZmZlciIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmhpZ2hlc3RCaWRkZXIudmFsdWUuZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25fYnVmZmVyJykKCWFzc2VydAoJZnJhbWVfYnVyeSAyIC8vIGhpZ2hlc3RCdWZmZXI6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM4OAoJLy8gYXNzZXJ0KGlzRGVsZWdhdGFibGUsICdvbmx5IGJpZCBkZWxlZ2F0YWJsZSBBcHBzJykKCWZyYW1lX2RpZyAwIC8vIGlzRGVsZWdhdGFibGU6IGJvb2wKCgkvLyBvbmx5IGJpZCBkZWxlZ2F0YWJsZSBBcHBzCglhc3NlcnQKCgkvLyAqaWYxMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM4OQoJLy8gY2hhbGxlbmdlckJ1ZmZlciA+IGhpZ2hlc3RCdWZmZXIKCWZyYW1lX2RpZyAxIC8vIGNoYWxsZW5nZXJCdWZmZXI6IHVpbnQ2NAoJZnJhbWVfZGlnIDIgLy8gaGlnaGVzdEJ1ZmZlcjogdWludDY0Cgk+CglieiAqaWYxMl9lbmQKCgkvLyAqaWYxMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozOTAKCS8vIHRoaXMuaGlnaGVzdEJpZGRlci52YWx1ZSA9IHZhbGlkYXRvckFwcElECglieXRlYyA3IC8vICAiaGlnaGVzdF9iaWRkZXIiCglmcmFtZV9kaWcgLTEgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglhcHBfZ2xvYmFsX3B1dAoKKmlmMTJfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzkzCgkvLyB0aGlzLmJpZEV2ZW50LmxvZyh7CgkvLyAgICAgICBhcHA6IHZhbGlkYXRvckFwcElELAoJLy8gICAgICAgaXNIZWlnaGVzdDogdGhpcy5oaWdoZXN0QmlkZGVyLnZhbHVlID09PSB2YWxpZGF0b3JBcHBJRCwKCS8vICAgICB9KQoJcHVzaGJ5dGVzIDB4NzZlMDg5NjEgLy8gYmlkRXZlbnQodWludDY0LGJvb2wpCglmcmFtZV9kaWcgLTEgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglpdG9iCglieXRlYyA4IC8vIDB4MDAKCWludGMgMCAvLyAwCglieXRlYyA3IC8vICAiaGlnaGVzdF9iaWRkZXIiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJPT0KCXNldGJpdAoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBkZWxlZ2F0ZVN0YWtlKHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2RlbGVnYXRlU3Rha2U6CgkvLyB2YWxpZGF0b3JBcHBJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGRlbGVnYXRlU3Rha2UodWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGRlbGVnYXRlU3Rha2UKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGRlbGVnYXRlU3Rha2UoYW1vdW50OiB1aW50NjQsIHZhbGlkYXRvckFwcElEOiBBcHBJRCk6IHZvaWQKZGVsZWdhdGVTdGFrZToKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQwMQoJLy8gYXNzZXJ0KHRoaXMuaXNQb29sKHZhbGlkYXRvckFwcElEKSkKCWZyYW1lX2RpZyAtMiAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWNhbGxzdWIgaXNQb29sCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MDIKCS8vIGFzc2VydCh2YWxpZGF0b3JBcHBJRCA9PT0gdGhpcy5oaWdoZXN0QmlkZGVyLnZhbHVlLCAnY2FuIG9ubHkgZGVsZWdhdGUgdG8gaGlnaGVzdCBiaWRkZXIgYWNjb3VudCcpCglmcmFtZV9kaWcgLTIgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglieXRlYyA3IC8vICAiaGlnaGVzdF9iaWRkZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBjYW4gb25seSBkZWxlZ2F0ZSB0byBoaWdoZXN0IGJpZGRlciBhY2NvdW50Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MDMKCS8vIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNWYWxpZGF0b3JQb29sLnByb3RvdHlwZS5hZGRTdGFrZSwgdm9pZD4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogdmFsaWRhdG9yQXBwSUQsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcywKCS8vICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKCS8vICAgICAgICAgfSwKCS8vICAgICAgIF0sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDA3CgkvLyByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDA4CgkvLyBhbW91bnQ6IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudDogdWludDY0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoJaXR4bl9uZXh0CglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweGQ0NTAyMTAwIC8vIG1ldGhvZCAiYWRkU3Rha2UocGF5KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQwNAoJLy8gYXBwbGljYXRpb25JRDogdmFsaWRhdG9yQXBwSUQKCWZyYW1lX2RpZyAtMiAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQwNQoJLy8gbWV0aG9kQXJnczogWwoJLy8gICAgICAgICB7CgkvLyAgICAgICAgICAgcmVjZWl2ZXI6IHZhbGlkYXRvckFwcElELmFkZHJlc3MsCgkvLyAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICBdCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIHNuaXRjaFRvQnVybih1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3NuaXRjaFRvQnVybjoKCS8vIGFwcDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzbml0Y2hUb0J1cm4odWludDY0KXZvaWQKCWNhbGxzdWIgc25pdGNoVG9CdXJuCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBzbml0Y2hUb0J1cm4oYXBwOiBBcHBJRCk6IHZvaWQKc25pdGNoVG9CdXJuOgoJcHJvdG8gMSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cG4gNAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQxNgoJLy8gYXNzZXJ0KHRoaXMuaXNQb29sKGFwcCkpCglmcmFtZV9kaWcgLTEgLy8gYXBwOiBBcHBJRAoJY2FsbHN1YiBpc1Bvb2wKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQxNwoJLy8gc2F0U25pdGNoID0gYXBwLmdsb2JhbFN0YXRlKCdzYXR1cmF0aW9uX2J1ZmZlcicpIGFzIHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWJ5dGVjIDExIC8vICAic2F0dXJhdGlvbl9idWZmZXIiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogYXBwLmdsb2JhbFN0YXRlKCdzYXR1cmF0aW9uX2J1ZmZlcicpCglhc3NlcnQKCWZyYW1lX2J1cnkgMCAvLyBzYXRTbml0Y2g6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQxOAoJLy8gbWluUHJpbyA9IGFwcAoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWZyYW1lX2J1cnkgMSAvLyBtaW5QcmlvOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MTkKCS8vIG1pblNhdCA9IHNhdFNuaXRjaAoJZnJhbWVfZGlnIDAgLy8gc2F0U25pdGNoOiB1aW50NjQKCWZyYW1lX2J1cnkgMiAvLyBtaW5TYXQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQyMgoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkgKz0gMSkKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDMgLy8gaTogdWludDY0CgoqZm9yXzI6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MjIKCS8vIGkgPCBxdWV1ZS5sZW5ndGgKCWZyYW1lX2RpZyAzIC8vIGk6IHVpbnQ2NAoJaW50YyA0IC8vIDUKCTwKCWJ6ICpmb3JfMl9lbmQKCgkvLyAqaWYxM19jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQyMwoJLy8gIXRoaXMuaXNQb29sKHF1ZXVlW2ldKQoJYnl0ZWMgMSAvLyAgImJ1cm5fcXVldWUiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDMgLy8gaTogdWludDY0CglpbnRjIDIgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCglpbnRjIDIgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWNhbGxzdWIgaXNQb29sCgkhCglieiAqaWYxM19lbmQKCgkvLyAqaWYxM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MjQKCS8vIHF1ZXVlW2ldID0gbWluUHJpbwoJYnl0ZWMgMSAvLyAgImJ1cm5fcXVldWUiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDMgLy8gaTogdWludDY0CglpbnRjIDIgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCglmcmFtZV9kaWcgMSAvLyBtaW5QcmlvOiB1aW50NjQKCWl0b2IKCXJlcGxhY2UzCglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgliICpmb3JfMl9lbmQKCippZjEzX2VuZDoKCS8vICppZjE0X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDI3CgkvLyAocXVldWVbaV0uZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25fYnVmZmVyJykgYXMgdWludDY0KSA8IG1pblNhdAoJYnl0ZWMgMSAvLyAgImJ1cm5fcXVldWUiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDMgLy8gaTogdWludDY0CglpbnRjIDIgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCglpbnRjIDIgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWJ5dGVjIDExIC8vICAic2F0dXJhdGlvbl9idWZmZXIiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogcXVldWVbaV0uZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25fYnVmZmVyJykKCWFzc2VydAoJZnJhbWVfZGlnIDIgLy8gbWluU2F0OiB1aW50NjQKCTwKCWJ6ICppZjE0X2VuZAoKCS8vICppZjE0X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQyOAoJLy8gdGVtcCA9IG1pblByaW8KCWZyYW1lX2RpZyAxIC8vIG1pblByaW86IHVpbnQ2NAoJZnJhbWVfYnVyeSA0IC8vIHRlbXA6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQyOQoJLy8gbWluUHJpbyA9IHF1ZXVlW2ldCglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJZnJhbWVfYnVyeSAxIC8vIG1pblByaW86IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQzMAoJLy8gbWluU2F0ID0gcXVldWVbaV0uZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25fYnVmZmVyJykgYXMgdWludDY0CglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJYnl0ZWMgMTEgLy8gICJzYXR1cmF0aW9uX2J1ZmZlciIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBxdWV1ZVtpXS5nbG9iYWxTdGF0ZSgnc2F0dXJhdGlvbl9idWZmZXInKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDIgLy8gbWluU2F0OiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MzEKCS8vIHF1ZXVlW2ldID0gdGVtcAoJYnl0ZWMgMSAvLyAgImJ1cm5fcXVldWUiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDMgLy8gaTogdWludDY0CglpbnRjIDIgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCglmcmFtZV9kaWcgNCAvLyB0ZW1wOiB1aW50NjQKCWl0b2IKCXJlcGxhY2UzCglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoqaWYxNF9lbmQ6CgoqZm9yXzJfY29udGludWU6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MjIKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDMgLy8gaTogdWludDY0CglpbnRjIDEgLy8gMQoJKwoJZnJhbWVfYnVyeSAzIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzIKCipmb3JfMl9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MzUKCS8vIHRoaXMuc25pdGNoUXVldWVFdmVudC5sb2coewoJLy8gICAgICAgcXVldWU6IHRoaXMuYnVyblF1ZXVlLnZhbHVlLAoJLy8gICAgIH0pCglwdXNoYnl0ZXMgMHhmMTgwNjAyMyAvLyBzbml0Y2hRdWV1ZUV2ZW50KHVpbnQ2NFs1XSkKCWJ5dGVjIDEgLy8gICJidXJuX3F1ZXVlIgoJYXBwX2dsb2JhbF9nZXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIG11bHRpU25pdGNoVG9CdXJuKHVpbnQ2NFtdKXZvaWQKKmFiaV9yb3V0ZV9tdWx0aVNuaXRjaFRvQnVybjoKCS8vIGFwcHM6IHVpbnQ2NFtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgbXVsdGlTbml0Y2hUb0J1cm4odWludDY0W10pdm9pZAoJY2FsbHN1YiBtdWx0aVNuaXRjaFRvQnVybgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gbXVsdGlTbml0Y2hUb0J1cm4oYXBwczogQXBwSURbXSk6IHZvaWQKbXVsdGlTbml0Y2hUb0J1cm46Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDQ0CgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IGFwcHMubGVuZ3RoOyBpICs9IDEpCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAwIC8vIGk6IHVpbnQ2NAoKKmZvcl8zOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDQ0CgkvLyBpIDwgYXBwcy5sZW5ndGgKCWZyYW1lX2RpZyAwIC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGFwcHM6IEFwcElEW10KCWxlbgoJaW50YyAyIC8vIDgKCS8KCTwKCWJ6ICpmb3JfM19lbmQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NDUKCS8vIGFwcFRvU25pdGNoID0gYXBwc1tpXQoJZnJhbWVfZGlnIC0xIC8vIGFwcHM6IEFwcElEW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJZnJhbWVfYnVyeSAxIC8vIGFwcFRvU25pdGNoOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NDYKCS8vIHRoaXMuc25pdGNoVG9CdXJuKGFwcFRvU25pdGNoKQoJZnJhbWVfZGlnIDEgLy8gYXBwVG9Tbml0Y2g6IHVpbnQ2NAoJY2FsbHN1YiBzbml0Y2hUb0J1cm4KCipmb3JfM19jb250aW51ZToKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ0NAoJLy8gaSArPSAxCglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWludGMgMSAvLyAxCgkrCglmcmFtZV9idXJ5IDAgLy8gaTogdWludDY0CgliICpmb3JfMwoKKmZvcl8zX2VuZDoKCXJldHN1YgoKLy8gc25pdGNoQ2hlY2sodWludDY0LChib29sLGJvb2wsYm9vbCx1aW50NjQsYm9vbCx1aW50NjQpKWJvb2wKKmFiaV9yb3V0ZV9zbml0Y2hDaGVjazoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMTYgLy8gMHgxNTFmN2M3NQoKCS8vIHBhcmFtczogKGJvb2wsYm9vbCxib29sLHVpbnQ2NCxib29sLHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglwdXNoaW50IDE4Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKHBhcmFtcykgZm9yIHNuaXRjaENoZWNrIG11c3QgYmUgYSAoYm9vbCxib29sLGJvb2wsdWludDY0LGJvb2wsdWludDY0KQoJYXNzZXJ0CgoJLy8gYXBwVG9DaGVjazogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzbml0Y2hDaGVjayh1aW50NjQsKGJvb2wsYm9vbCxib29sLHVpbnQ2NCxib29sLHVpbnQ2NCkpYm9vbAoJY2FsbHN1YiBzbml0Y2hDaGVjawoJYnl0ZWMgOCAvLyAweDAwCglpbnRjIDAgLy8gMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBzbml0Y2hDaGVjayhhcHBUb0NoZWNrOiBBcHBJRCwgcGFyYW1zOiBTbml0Y2hJbmZvKTogYm9vbGVhbgovLwovLyBVc2VkIHRvIGNoZWNrIHRoZSBiZWhhdmlvciBvZiBhIFZhbGlkYXRvciBBcHAKLy8KLy8gQHBhcmFtIHtBcHBJRH0gYXBwVG9DaGVjayAtIFZhbGlkYXRvciBBcHBJRCB0byBzbml0Y2gKLy8gQHBhcmFtIHtTbml0Y2hJbmZvfSBwYXJhbXMgLSBTbml0Y2hJbmZvIG9iamVjdCBjb250YWluaW5nIHRoZSBpbmZvcm1hdGlvbnMgdG8gY2hlY2sKLy8gQHJldHVybnMge2Jvb2xlYW59IHJlc3VsdCBvZiB0aGUgc25pdGNoIGlmIHN1Y2Nlc3NmdWxsIC0+IHRydWUKc25pdGNoQ2hlY2s6Cglwcm90byAyIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ1OAoJLy8gYXNzZXJ0KHRoaXMuaXNQb29sKGFwcFRvQ2hlY2spKQoJZnJhbWVfZGlnIC0xIC8vIGFwcFRvQ2hlY2s6IEFwcElECgljYWxsc3ViIGlzUG9vbAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDU5CgkvLyBhc3NlcnQodGhpcy5pc1Bvb2wocGFyYW1zLnJlY2lwaWVudCkgfHwgcGFyYW1zLnJlY2lwaWVudC5hZGRyZXNzID09PSB0aGlzLmFwcC5hZGRyZXNzKQoJZnJhbWVfZGlnIC0yIC8vIHBhcmFtczogU25pdGNoSW5mbwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMSA4CglidG9pCgljYWxsc3ViIGlzUG9vbAoJZHVwCglibnogKnNraXBfb3IwCglmcmFtZV9kaWcgLTIgLy8gcGFyYW1zOiBTbml0Y2hJbmZvCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAxIDgKCWJ0b2kKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cgl8fAoKKnNraXBfb3IwOgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDYxCgkvLyByZXN1bHQgPSBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzVmFsaWRhdG9yUG9vbC5wcm90b3R5cGUuZ2V0U25pdGNoZWQsIGJvb2xlYW4+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IGFwcFRvQ2hlY2ssCgkvLyAgICAgICBtZXRob2RBcmdzOiBbcGFyYW1zXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHg1YjY3NGYyZiAvLyBtZXRob2QgImdldFNuaXRjaGVkKChib29sLGJvb2wsYm9vbCx1aW50NjQsYm9vbCx1aW50NjQpKWJvb2wiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ2MgoJLy8gYXBwbGljYXRpb25JRDogYXBwVG9DaGVjawoJZnJhbWVfZGlnIC0xIC8vIGFwcFRvQ2hlY2s6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NjMKCS8vIG1ldGhvZEFyZ3M6IFtwYXJhbXNdCglmcmFtZV9kaWcgLTIgLy8gcGFyYW1zOiBTbml0Y2hJbmZvCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50YyAxIC8vIDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJaW50YyAwIC8vIDAKCWdldGJpdAoJZnJhbWVfYnVyeSAwIC8vIHJlc3VsdDogYm9vbAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ2NgoJLy8gdGhpcy5zbml0Y2hWYWxpZGF0b3JFdmVudC5sb2coewoJLy8gICAgICAgcmVxdWVzdDogcGFyYW1zLAoJLy8gICAgICAgcmVzdWx0OiByZXN1bHQsCgkvLyAgICAgfSkKCXB1c2hieXRlcyAweDlhZTcwN2EyIC8vIHNuaXRjaFZhbGlkYXRvckV2ZW50KChib29sLGJvb2wsYm9vbCx1aW50NjQsYm9vbCx1aW50NjQpLGJvb2wpCglmcmFtZV9kaWcgLTIgLy8gcGFyYW1zOiBTbml0Y2hJbmZvCglieXRlYyA4IC8vIDB4MDAKCWludGMgMCAvLyAwCglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IGJvb2wKCXNldGJpdAoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ3MQoJLy8gcmV0dXJuIHJlc3VsdDsKCWZyYW1lX2RpZyAwIC8vIHJlc3VsdDogYm9vbAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyByZVN0YWtlRnJvbVNuaXRjaCh1aW50NjQsdWludDY0LHBheSl2b2lkCiphYmlfcm91dGVfcmVTdGFrZUZyb21Tbml0Y2g6CgkvLyByZXN0YWtlVHhuOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAocmVzdGFrZVR4bikgZm9yIHJlU3Rha2VGcm9tU25pdGNoIG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIHJlY2VpdmVyQXBwOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBzbml0Y2hlZEFwcDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSByZVN0YWtlRnJvbVNuaXRjaCh1aW50NjQsdWludDY0LHBheSl2b2lkCgljYWxsc3ViIHJlU3Rha2VGcm9tU25pdGNoCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyByZVN0YWtlRnJvbVNuaXRjaChzbml0Y2hlZEFwcDogQXBwSUQsIHJlY2VpdmVyQXBwOiBBcHBJRCwgcmVzdGFrZVR4bjogUGF5VHhuKTogdm9pZAovLwovLyBGb2xsb3cgdXAgb3BlcmF0aW9uIGNhbGxlZCBieSB0aGUgc25pdGNoZWQgQXBwIHRvIHBlcmZvcm0gcmVzdGFraW5nIG9mIHRoZSBkZWxlZ2F0ZWQgQWxnbyBjbGF3ZWQgYmFjawovLwovLyBAcGFyYW0ge0FwcElEfSBzbml0Y2hlZEFwcCAtIFRoZSBBcHBJRCBvZiB0aGUgdmFsaWRhdG9yIHRvIHNuaXRjaAovLyBAcGFyYW0ge0FwcElEfSByZWNlaXZlckFwcCAtIFRoZSBBcHBJRCBvZiB0aGUgcmVjZWl2ZXIgb2YgdGhlIGRlbGVnYXRlZCBBbGdvCi8vIEBwYXJhbSB7UGF5VHhufSByZXN0YWtlVHhuIC0gVGhlIFBheVR4biBmb2xsb3dpbmcgdGhlIHNuaXRjaCB0aGF0IHNlbmRzIHRoZSBkZWxlZ2F0ZWQgQWxnbyB0byBiZSBtb3ZlZCBiYWNrIGFuZCByZXN0YWtlZApyZVN0YWtlRnJvbVNuaXRjaDoKCXByb3RvIDMgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ4MgoJLy8gYXNzZXJ0KAoJLy8gICAgICAgdGhpcy5pc1Bvb2woc25pdGNoZWRBcHApICYmIHRoaXMudHhuLnNlbmRlciA9PT0gc25pdGNoZWRBcHAuYWRkcmVzcywKCS8vICAgICAgICdvbmx5IHRoZSBzbml0Y2hlZCBhcHAgY2FuIGluaXRpYXRlIHRoaXMgbWV0aG9kJwoJLy8gICAgICkKCWZyYW1lX2RpZyAtMSAvLyBzbml0Y2hlZEFwcDogQXBwSUQKCWNhbGxzdWIgaXNQb29sCglkdXAKCWJ6ICpza2lwX2FuZDAKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBzbml0Y2hlZEFwcDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJPT0KCSYmCgoqc2tpcF9hbmQwOgoJLy8gb25seSB0aGUgc25pdGNoZWQgYXBwIGNhbiBpbml0aWF0ZSB0aGlzIG1ldGhvZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDg2CgkvLyBhc3NlcnQodGhpcy5pc1Bvb2wocmVjZWl2ZXJBcHApIHx8IHJlY2VpdmVyQXBwID09PSB0aGlzLmFwcCwgJ3JlY2VpdmVyIG11c3QgYmUgYSBwb29sIG9yIHRoZSBhZG1pbicpCglmcmFtZV9kaWcgLTIgLy8gcmVjZWl2ZXJBcHA6IEFwcElECgljYWxsc3ViIGlzUG9vbAoJZHVwCglibnogKnNraXBfb3IxCglmcmFtZV9kaWcgLTIgLy8gcmVjZWl2ZXJBcHA6IEFwcElECgl0eG5hIEFwcGxpY2F0aW9ucyAwCgk9PQoJfHwKCipza2lwX29yMToKCS8vIHJlY2VpdmVyIG11c3QgYmUgYSBwb29sIG9yIHRoZSBhZG1pbgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDg3CgkvLyB2ZXJpZnlQYXlUeG4ocmVzdGFrZVR4biwgewoJLy8gICAgICAgc2VuZGVyOiBzbml0Y2hlZEFwcC5hZGRyZXNzLAoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMyAvLyByZXN0YWtlVHhuOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHNuaXRjaGVkQXBwOiBBcHBJRAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicmVzdGFrZVR4biIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJzbml0Y2hlZEFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0zIC8vIHJlc3Rha2VUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicmVzdGFrZVR4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gKmlmMTVfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0OTEKCS8vIHJlY2VpdmVyQXBwICE9PSB0aGlzLmFwcAoJZnJhbWVfZGlnIC0yIC8vIHJlY2VpdmVyQXBwOiBBcHBJRAoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJIT0KCWJ6ICppZjE1X2VuZAoKCS8vICppZjE1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ5MgoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLmdldENsYXdiYWNrZWRTdGFrZSwgdm9pZD4oewoJLy8gICAgICAgICBhcHBsaWNhdGlvbklEOiByZWNlaXZlckFwcCwKCS8vICAgICAgICAgbWV0aG9kQXJnczogWwoJLy8gICAgICAgICAgIHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiByZWNlaXZlckFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiByZXN0YWtlVHhuLmFtb3VudCwKCS8vICAgICAgICAgICB9LAoJLy8gICAgICAgICBdLAoJLy8gICAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDk2CgkvLyByZWNlaXZlcjogcmVjZWl2ZXJBcHAuYWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIHJlY2VpdmVyQXBwOiBBcHBJRAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDk3CgkvLyBhbW91bnQ6IHJlc3Rha2VUeG4uYW1vdW50CglmcmFtZV9kaWcgLTMgLy8gcmVzdGFrZVR4bjogUGF5VHhuCglndHhucyBBbW91bnQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4YmRmMDFlOGUgLy8gbWV0aG9kICJnZXRDbGF3YmFja2VkU3Rha2UocGF5KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ5MwoJLy8gYXBwbGljYXRpb25JRDogcmVjZWl2ZXJBcHAKCWZyYW1lX2RpZyAtMiAvLyByZWNlaXZlckFwcDogQXBwSUQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ5NAoJLy8gbWV0aG9kQXJnczogWwoJLy8gICAgICAgICAgIHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiByZWNlaXZlckFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiByZXN0YWtlVHhuLmFtb3VudCwKCS8vICAgICAgICAgICB9LAoJLy8gICAgICAgICBdCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoqaWYxNV9lbmQ6CglyZXRzdWIKCi8vIG1ha2VGbGFzaExvYW5SZXF1ZXN0KHBheSx1aW50NjRbXSx1aW50NjRbXSl2b2lkCiphYmlfcm91dGVfbWFrZUZsYXNoTG9hblJlcXVlc3Q6CgkvLyBhcHBUb0luY2x1ZGU6IHVpbnQ2NFtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGFtb3VudHM6IHVpbnQ2NFtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIHBheUZlZVR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAxIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMSAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDIgKHBheUZlZVR4bikgZm9yIG1ha2VGbGFzaExvYW5SZXF1ZXN0IG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgbWFrZUZsYXNoTG9hblJlcXVlc3QocGF5LHVpbnQ2NFtdLHVpbnQ2NFtdKXZvaWQKCWNhbGxzdWIgbWFrZUZsYXNoTG9hblJlcXVlc3QKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIG1ha2VGbGFzaExvYW5SZXF1ZXN0KHBheUZlZVR4bjogUGF5VHhuLCBhbW91bnRzOiB1aW50NjRbXSwgYXBwVG9JbmNsdWRlOiBBcHBJRFtdKTogdm9pZAptYWtlRmxhc2hMb2FuUmVxdWVzdDoKCXByb3RvIDMgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXBuIDQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MDYKCS8vIHRoaXMuZ2V0Rkxjb3VudGVyKCkKCWNhbGxzdWIgZ2V0Rkxjb3VudGVyCglwb3AKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MDcKCS8vIHRoaXMuZmxhc2hMb2FuQ291bnRlci52YWx1ZSArPSBhcHBUb0luY2x1ZGUubGVuZ3RoCglieXRlYyA1IC8vICAiZmxhc2hsb2FuX2NvdW50ZXIiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0zIC8vIGFwcFRvSW5jbHVkZTogQXBwSURbXQoJbGVuCglpbnRjIDIgLy8gOAoJLwoJKwoJYnl0ZWMgNSAvLyAgImZsYXNobG9hbl9jb3VudGVyIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MDgKCS8vIGtlZXBGZWUgPSB0aGlzLmZsYXNoTG9hbkNvdW50ZXIudmFsdWUgKyBGTEFTSF9MT0FOX0ZFRQoJYnl0ZWMgNSAvLyAgImZsYXNobG9hbl9jb3VudGVyIgoJYXBwX2dsb2JhbF9nZXQKCXB1c2hpbnQgMTAwMDAwMDAKCSsKCWZyYW1lX2J1cnkgMCAvLyBrZWVwRmVlOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MTAKCS8vIHZlcmlmeVBheVR4bihwYXlGZWVUeG4sIHsKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiBrZWVwRmVlLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXlGZWVUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicGF5RmVlVHhuIiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gcGF5RmVlVHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZnJhbWVfZGlnIDAgLy8ga2VlcEZlZTogdWludDY0Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicGF5RmVlVHhuIiwiZmllbGQiOiJhbW91bnQiLCJleHBlY3RlZCI6ImtlZXBGZWUifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTE1CgkvLyBhc3NlcnQoYW1vdW50cy5sZW5ndGggPT09IGFwcFRvSW5jbHVkZS5sZW5ndGgsICdhcnJheSBsZW5ndGggW2Ftb3VudCwgYXBwVG9JbmNsdWRlXSBtaXNtYXRjaCcpCglmcmFtZV9kaWcgLTIgLy8gYW1vdW50czogdWludDY0W10KCWxlbgoJaW50YyAyIC8vIDgKCS8KCWZyYW1lX2RpZyAtMyAvLyBhcHBUb0luY2x1ZGU6IEFwcElEW10KCWxlbgoJaW50YyAyIC8vIDgKCS8KCT09CgoJLy8gYXJyYXkgbGVuZ3RoIFthbW91bnQsIGFwcFRvSW5jbHVkZV0gbWlzbWF0Y2gKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUxNgoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBhcHBUb0luY2x1ZGUubGVuZ3RoOyBpICs9IDEpCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAxIC8vIGk6IHVpbnQ2NAoKKmZvcl80OgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTE2CgkvLyBpIDwgYXBwVG9JbmNsdWRlLmxlbmd0aAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTMgLy8gYXBwVG9JbmNsdWRlOiBBcHBJRFtdCglsZW4KCWludGMgMiAvLyA4CgkvCgk8CglieiAqZm9yXzRfZW5kCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTE3CgkvLyB0aGlzLnBlbmRpbmdHcm91cC5hZGRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNWYWxpZGF0b3JQb29sLnByb3RvdHlwZS5mbGFzaGxvYW4sIHZvaWQ+KHsKCS8vICAgICAgICAgYXBwbGljYXRpb25JRDogYXBwVG9JbmNsdWRlW2ldLAoJLy8gICAgICAgICBtZXRob2RBcmdzOiBbYW1vdW50c1tpXSwgdGhpcy50eG4uc2VuZGVyXSwKCS8vICAgICAgIH0pCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4NGE1MzU2Y2MgLy8gbWV0aG9kICJmbGFzaGxvYW4odWludDY0LGFkZHJlc3Mpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTE4CgkvLyBhcHBsaWNhdGlvbklEOiBhcHBUb0luY2x1ZGVbaV0KCWZyYW1lX2RpZyAtMyAvLyBhcHBUb0luY2x1ZGU6IEFwcElEW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTE5CgkvLyBtZXRob2RBcmdzOiBbYW1vdW50c1tpXSwgdGhpcy50eG4uc2VuZGVyXQoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudHM6IHVpbnQ2NFtdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglpbnRjIDIgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDIgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUyMgoJLy8gZm9yIChsZXQgaiA9IHRoaXMudHhuLmdyb3VwSW5kZXg7IGogPCB0aGlzLnR4bkdyb3VwLmxlbmd0aDsgaiArPSAxKQoJdHhuIEdyb3VwSW5kZXgKCWZyYW1lX2J1cnkgMiAvLyBqOiB1aW50NjQKCipmb3JfNToKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUyMgoJLy8gaiA8IHRoaXMudHhuR3JvdXAubGVuZ3RoCglmcmFtZV9kaWcgMiAvLyBqOiB1aW50NjQKCWdsb2JhbCBHcm91cFNpemUKCTwKCWJ6ICpmb3JfNV9lbmQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MjMKCS8vIHR4biA9IHRoaXMudHhuR3JvdXBbal0KCWZyYW1lX2RpZyAyIC8vIGo6IHVpbnQ2NAoJZnJhbWVfYnVyeSAzIC8vIHR4bjogdHhuCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTI0CgkvLyByZXBhaWQgPSBmYWxzZQoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgNCAvLyByZXBhaWQ6IGJvb2wKCgkvLyAqaWYxNl9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUyNgoJLy8gdHhuLnR5cGVFbnVtID09PSBUcmFuc2FjdGlvblR5cGUuQXBwbGljYXRpb25DYWxsICYmCgkvLyAgICAgICAgICAgdHhuLmFwcGxpY2F0aW9uSUQgPT09IGFwcFRvSW5jbHVkZVtpXSAmJgoJLy8gICAgICAgICAgIHR4bi5vbkNvbXBsZXRpb24gPT09IDAgJiYKCS8vICAgICAgICAgICB0eG4ubnVtQXBwQXJncyA9PT0gMSAmJgoJLy8gICAgICAgICAgIHR4bi5hcHBsaWNhdGlvbkFyZ3NbMF0gPT09IG1ldGhvZCgnY2hlY2tCYWxhbmNlKCk6dm9pZCcpCglmcmFtZV9kaWcgMyAvLyB0eG46IHR4bgoJZ3R4bnMgVHlwZUVudW0KCWludGMgMyAvLyAgYXBwbAoJPT0KCWR1cAoJYnogKnNraXBfYW5kMQoJZnJhbWVfZGlnIDMgLy8gdHhuOiB0eG4KCWd0eG5zIEFwcGxpY2F0aW9uSUQKCWZyYW1lX2RpZyAtMyAvLyBhcHBUb0luY2x1ZGU6IEFwcElEW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJPT0KCSYmCgoqc2tpcF9hbmQxOgoJZHVwCglieiAqc2tpcF9hbmQyCglmcmFtZV9kaWcgMyAvLyB0eG46IHR4bgoJZ3R4bnMgT25Db21wbGV0aW9uCglpbnRjIDAgLy8gMAoJPT0KCSYmCgoqc2tpcF9hbmQyOgoJZHVwCglieiAqc2tpcF9hbmQzCglmcmFtZV9kaWcgMyAvLyB0eG46IHR4bgoJZ3R4bnMgTnVtQXBwQXJncwoJaW50YyAxIC8vIDEKCT09CgkmJgoKKnNraXBfYW5kMzoKCWR1cAoJYnogKnNraXBfYW5kNAoJZnJhbWVfZGlnIDMgLy8gdHhuOiB0eG4KCWd0eG5zIEFwcGxpY2F0aW9uQXJncyAwCglwdXNoYnl0ZXMgMHgzZmE4OGZkMCAvLyBtZXRob2QgImNoZWNrQmFsYW5jZSgpOnZvaWQiCgk9PQoJJiYKCipza2lwX2FuZDQ6CglieiAqaWYxNl9lbmQKCgkvLyAqaWYxNl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MzIKCS8vIHJlcGFpZCA9IHRydWUKCWludGMgMSAvLyAxCglmcmFtZV9idXJ5IDQgLy8gcmVwYWlkOiBib29sCgoqaWYxNl9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MzQKCS8vIGFzc2VydChyZXBhaWQpCglmcmFtZV9kaWcgNCAvLyByZXBhaWQ6IGJvb2wKCWFzc2VydAoKKmZvcl81X2NvbnRpbnVlOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTIyCgkvLyBqICs9IDEKCWZyYW1lX2RpZyAyIC8vIGo6IHVpbnQ2NAoJaW50YyAxIC8vIDEKCSsKCWZyYW1lX2J1cnkgMiAvLyBqOiB1aW50NjQKCWIgKmZvcl81CgoqZm9yXzVfZW5kOgoKKmZvcl80X2NvbnRpbnVlOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTE2CgkvLyBpICs9IDEKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJaW50YyAxIC8vIDEKCSsKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCWIgKmZvcl80CgoqZm9yXzRfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTM3CgkvLyB0aGlzLnBlbmRpbmdHcm91cC5zdWJtaXQoKQoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MzgKCS8vIHRoaXMuZmxhc2hMb2FuRXZlbnQubG9nKHsgYXBwczogYXBwVG9JbmNsdWRlLCBhbW91bnRzOiBhbW91bnRzIH0pCglwdXNoYnl0ZXMgMHhhYTRlNjQxYSAvLyBmbGFzaExvYW5FdmVudCh1aW50NjRbXSx1aW50NjRbXSkKCWJ5dGVjIDAgLy8gIGluaXRpYWwgaGVhZAoJYnl0ZWMgMCAvLyAgaW5pdGlhbCB0YWlsCglwdXNoYnl0ZXMgMHgwMDA0IC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMyAvLyBhcHBUb0luY2x1ZGU6IEFwcElEW10KCWR1cAoJbGVuCglpbnRjIDIgLy8gOAoJLwoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnRzOiB1aW50NjRbXQoJZHVwCglsZW4KCWludGMgMiAvLyA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJcG9wIC8vIHBvcCBoZWFkIG9mZnNldAoJY29uY2F0IC8vIGNvbmNhdCBoZWFkIGFuZCB0YWlsCgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBnZXRGTGNvdW50ZXIoKXVpbnQ2NAoqYWJpX3JvdXRlX2dldEZMY291bnRlcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMTYgLy8gMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZ2V0Rkxjb3VudGVyKCl1aW50NjQKCWNhbGxzdWIgZ2V0Rkxjb3VudGVyCglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gZ2V0Rkxjb3VudGVyKCk6IHVpbnQ2NApnZXRGTGNvdW50ZXI6Cglwcm90byAwIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoKCS8vICppZjE3X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTQzCgkvLyB0aGlzLmxhc3RGbGFzaGxvYW5CbG9jay52YWx1ZSA9PT0gZ2xvYmFscy5yb3VuZAoJYnl0ZWMgMTcgLy8gICJsYXN0X2ZsYXNobG9hbl9ibG9jayIKCWFwcF9nbG9iYWxfZ2V0CglnbG9iYWwgUm91bmQKCT09CglieiAqaWYxN19lbmQKCgkvLyAqaWYxN19jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1NDQKCS8vIHJldHVybiB0aGlzLmZsYXNoTG9hbkNvdW50ZXIudmFsdWU7CglieXRlYyA1IC8vICAiZmxhc2hsb2FuX2NvdW50ZXIiCglhcHBfZ2xvYmFsX2dldAoJYiAqZ2V0Rkxjb3VudGVyKnJldHVybgoKKmlmMTdfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTQ2CgkvLyByZWR1Y2UgPSBnbG9iYWxzLnJvdW5kIC0gdGhpcy5sYXN0Rmxhc2hsb2FuQmxvY2sudmFsdWUKCWdsb2JhbCBSb3VuZAoJYnl0ZWMgMTcgLy8gICJsYXN0X2ZsYXNobG9hbl9ibG9jayIKCWFwcF9nbG9iYWxfZ2V0CgktCglmcmFtZV9idXJ5IDAgLy8gcmVkdWNlOiB1aW50NjQKCgkvLyAqaWYxOF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU0NwoJLy8gcmVkdWNlID4gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlCglmcmFtZV9kaWcgMCAvLyByZWR1Y2U6IHVpbnQ2NAoJYnl0ZWMgNSAvLyAgImZsYXNobG9hbl9jb3VudGVyIgoJYXBwX2dsb2JhbF9nZXQKCT4KCWJ6ICppZjE4X2VuZAoKCS8vICppZjE4X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU0OAoJLy8gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlID0gMAoJYnl0ZWMgNSAvLyAgImZsYXNobG9hbl9jb3VudGVyIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTQ5CgkvLyByZXR1cm4gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlOwoJYnl0ZWMgNSAvLyAgImZsYXNobG9hbl9jb3VudGVyIgoJYXBwX2dsb2JhbF9nZXQKCWIgKmdldEZMY291bnRlcipyZXR1cm4KCippZjE4X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU1MQoJLy8gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlIC09IHJlZHVjZSAqIDIgPiB0aGlzLmZsYXNoTG9hbkNvdW50ZXIudmFsdWUgPyByZWR1Y2UgKiAyIDogcmVkdWNlCglieXRlYyA1IC8vICAiZmxhc2hsb2FuX2NvdW50ZXIiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDAgLy8gcmVkdWNlOiB1aW50NjQKCWludGMgNSAvLyAyCgkqCglieXRlYyA1IC8vICAiZmxhc2hsb2FuX2NvdW50ZXIiCglhcHBfZ2xvYmFsX2dldAoJPgoJYnogKnRlcm5hcnkyX2ZhbHNlCglmcmFtZV9kaWcgMCAvLyByZWR1Y2U6IHVpbnQ2NAoJaW50YyA1IC8vIDIKCSoKCWIgKnRlcm5hcnkyX2VuZAoKKnRlcm5hcnkyX2ZhbHNlOgoJZnJhbWVfZGlnIDAgLy8gcmVkdWNlOiB1aW50NjQKCip0ZXJuYXJ5Ml9lbmQ6CgktCglieXRlYyA1IC8vICAiZmxhc2hsb2FuX2NvdW50ZXIiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU1MgoJLy8gcmV0dXJuIHRoaXMuZmxhc2hMb2FuQ291bnRlci52YWx1ZTsKCWJ5dGVjIDUgLy8gICJmbGFzaGxvYW5fY291bnRlciIKCWFwcF9nbG9iYWxfZ2V0CgoqZ2V0Rkxjb3VudGVyKnJldHVybjoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBhcmM2Ml9nZXRfY2lyY3VsYXRpbmdfc3VwcGx5KHVpbnQ2NCl1aW50NjQKKmFiaV9yb3V0ZV9hcmM2Ml9nZXRfY2lyY3VsYXRpbmdfc3VwcGx5OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAxNiAvLyAweDE1MWY3Yzc1CgoJLy8gYXNzZXRJZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBhcmM2Ml9nZXRfY2lyY3VsYXRpbmdfc3VwcGx5KHVpbnQ2NCl1aW50NjQKCWNhbGxzdWIgYXJjNjJfZ2V0X2NpcmN1bGF0aW5nX3N1cHBseQoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGFyYzYyX2dldF9jaXJjdWxhdGluZ19zdXBwbHkoYXNzZXRJZDogQXNzZXRJRCk6IHVpbnQ2NAphcmM2Ml9nZXRfY2lyY3VsYXRpbmdfc3VwcGx5OgoJcHJvdG8gMSAxCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTU3CgkvLyBhc3NlcnQoYXNzZXRJZCA9PT0gdGhpcy50b2tlbklkLnZhbHVlLCAnaW52YWxpZCBhc3NldCBpZCcpCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZDogQXNzZXRJRAoJYnl0ZWMgMyAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gaW52YWxpZCBhc3NldCBpZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTU4CgkvLyByZXR1cm4gdGhpcy50b2tlbkNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlOwoJYnl0ZWMgMiAvLyAgImNpcmN1bGF0aW5nX3N1cHBseSIKCWFwcF9nbG9iYWxfZ2V0CglyZXRzdWIKCi8vIGNhbGN1bGF0ZUxTVFJhdGlvKCk6IHZvaWQKY2FsY3VsYXRlTFNUUmF0aW86Cglwcm90byAwIDAKCgkvLyAqaWYxOV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU2MgoJLy8gdGhpcy50b2tlbkNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlID09PSAwCglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAwCgk9PQoJYnogKmlmMTlfZW5kCgoJLy8gKmlmMTlfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTYzCgkvLyByZXR1cm47CglyZXRzdWIKCippZjE5X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU2NQoJLy8gdGhpcy5wZWdSYXRpby52YWx1ZSA9IHdpZGVSYXRpbyhbdGhpcy50b3RhbFN0YWtlLnZhbHVlLCBTQ0FMRV0sIFt0aGlzLnRva2VuQ2lyY3VsYXRpbmdTdXBwbHkudmFsdWVdKQoJYnl0ZWMgMTMgLy8gICJwZWdfcmF0aW8iCglieXRlYyA0IC8vICAidG90YWxfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJaW50YyA2IC8vIDEwMDAwMAoJbXVsdwoJaW50YyAwIC8vIDAKCWJ5dGVjIDIgLy8gICJjaXJjdWxhdGluZ19zdXBwbHkiCglhcHBfZ2xvYmFsX2dldAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCgkvLyB3aWRlUmF0aW8gZmFpbGVkCglhc3NlcnQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGdldE1pbnRBbW91bnQoYW1vdW50OiB1aW50NjQpOiB1aW50NjQKZ2V0TWludEFtb3VudDoKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU2OQoJLy8gdGhpcy5jYWxjdWxhdGVMU1RSYXRpbygpCgljYWxsc3ViIGNhbGN1bGF0ZUxTVFJhdGlvCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTcwCgkvLyByZXR1cm4gd2lkZVJhdGlvKFthbW91bnQsIFNDQUxFXSwgW3RoaXMucGVnUmF0aW8udmFsdWVdKTsKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJaW50YyA2IC8vIDEwMDAwMAoJbXVsdwoJaW50YyAwIC8vIDAKCWJ5dGVjIDEzIC8vICAicGVnX3JhdGlvIgoJYXBwX2dsb2JhbF9nZXQKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglyZXRzdWIKCi8vIGdldEJ1cm5BbW91bnQoYW1vdW50OiB1aW50NjQpOiB1aW50NjQKZ2V0QnVybkFtb3VudDoKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU3NAoJLy8gdGhpcy5jYWxjdWxhdGVMU1RSYXRpbygpCgljYWxsc3ViIGNhbGN1bGF0ZUxTVFJhdGlvCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTc1CgkvLyByZXR1cm4gd2lkZVJhdGlvKFthbW91bnQsIHRoaXMucGVnUmF0aW8udmFsdWVdLCBbU0NBTEVdKTsKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJYnl0ZWMgMTMgLy8gICJwZWdfcmF0aW8iCglhcHBfZ2xvYmFsX2dldAoJbXVsdwoJaW50YyAwIC8vIDAKCWludGMgNiAvLyAxMDAwMDAKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglyZXRzdWIKCi8vIGRvQnVyblR4bih0YXJnZXQ6IEFwcElELCBhcmdzOiBbdWludDY0LCBBZGRyZXNzXSk6IHZvaWQKZG9CdXJuVHhuOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTc5CgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzVmFsaWRhdG9yUG9vbC5wcm90b3R5cGUuYnVyblN0YWtlLCB2b2lkPih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiB0YXJnZXQsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbYXJnc1swXSwgYXJnc1sxXV0sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4M2RjN2FlNzkgLy8gbWV0aG9kICJidXJuU3Rha2UodWludDY0LGFkZHJlc3Mpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTgwCgkvLyBhcHBsaWNhdGlvbklEOiB0YXJnZXQKCWZyYW1lX2RpZyAtMSAvLyB0YXJnZXQ6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1ODEKCS8vIG1ldGhvZEFyZ3M6IFthcmdzWzBdLCBhcmdzWzFdXQoJZnJhbWVfZGlnIC0yIC8vIGFyZ3M6IFt1aW50NjQsIEFkZHJlc3NdCglleHRyYWN0IDAgOAoJYnRvaQoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMiAvLyBhcmdzOiBbdWludDY0LCBBZGRyZXNzXQoJZXh0cmFjdCA4IDMyCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gZG9BeGZlcihyZWNlaXZlcjogQWRkcmVzcywgYW1vdW50OiB1aW50NjQsIGFzc2V0OiBBc3NldElEKTogdm9pZApkb0F4ZmVyOgoJcHJvdG8gMyAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTg2CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiByZWNlaXZlciwKCS8vICAgICAgIGFzc2V0QW1vdW50OiBhbW91bnQsCgkvLyAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDcgLy8gIGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTg3CgkvLyBhc3NldFJlY2VpdmVyOiByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHJlY2VpdmVyOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1ODgKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU4OQoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gaXNQb29sKGFwcDogQXBwSUQpOiBib29sZWFuCmlzUG9vbDoKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU5NAoJLy8gcmV0dXJuIGFwcC5jcmVhdG9yID09PSB0aGlzLmFwcC5hZGRyZXNzOwoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CglyZXRzdWIKCi8vIHF1ZXVlSXNFbXB0eSgpOiBib29sZWFuCnF1ZXVlSXNFbXB0eToKCXByb3RvIDAgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTk4CgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYnVyblF1ZXVlLnZhbHVlLmxlbmd0aDsgaSArPSAxKQoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgMCAvLyBpOiB1aW50NjQKCipmb3JfNjoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU5OAoJLy8gaSA8IHRoaXMuYnVyblF1ZXVlLnZhbHVlLmxlbmd0aAoJZnJhbWVfZGlnIDAgLy8gaTogdWludDY0CglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDQgLy8gNQoJPAoJYnogKmZvcl82X2VuZAoKCS8vICppZjIwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTk5CgkvLyB0aGlzLmJ1cm5RdWV1ZS52YWx1ZVtpXSAhPT0gQXBwSUQuemVyb0luZGV4CglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJaW50YyAwIC8vIDAKCSE9CglieiAqaWYyMF9lbmQKCgkvLyAqaWYyMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2MDAKCS8vIHJldHVybiBmYWxzZTsKCWludGMgMCAvLyAwCgliICpxdWV1ZUlzRW1wdHkqcmV0dXJuCgoqaWYyMF9lbmQ6CgoqZm9yXzZfY29udGludWU6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1OTgKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDAgLy8gaTogdWludDY0CglpbnRjIDEgLy8gMQoJKwoJZnJhbWVfYnVyeSAwIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzYKCipmb3JfNl9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2MDMKCS8vIHJldHVybiB0cnVlOwoJaW50YyAxIC8vIDEKCipxdWV1ZUlzRW1wdHkqcmV0dXJuOgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCipjcmVhdGVfTm9PcDoKCXR4biBOdW1BcHBBcmdzCglieiAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCglwdXNoYnl0ZXMgMHhiODQ0N2IzNiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4YmI2ZDg0MWMgLy8gbWV0aG9kICJNQU5BR0VSX2NyZWF0ZVRva2VuKCl2b2lkIgoJcHVzaGJ5dGVzIDB4NTkzNWEyN2YgLy8gbWV0aG9kICJNQU5BR0VSX3VwZGF0ZVZlc3RUb2tlbnNJRCh1aW50NjQsdWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHgzY2U1OTgzYSAvLyBtZXRob2QgIk1BTkFHRVJfY2hhbmdlTWFuYWdlcihhZGRyZXNzKXZvaWQiCglwdXNoYnl0ZXMgMHgyNmE5OTI4MyAvLyBtZXRob2QgIk1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0Q29zdCh1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweDA5OWU1Y2ZkIC8vIG1ldGhvZCAiTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtKHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4YTRiNTAzYzEgLy8gbWV0aG9kICJNQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbSh1aW50NjQsYnl0ZVtdKXZvaWQiCglwdXNoYnl0ZXMgMHg1MDc1ZDhmMCAvLyBtZXRob2QgImFkZFZhbGlkYXRvcihwYXkpdm9pZCIKCXB1c2hieXRlcyAweDY3NTM5NmY0IC8vIG1ldGhvZCAibWludFJlcXVlc3QocGF5KXZvaWQiCglwdXNoYnl0ZXMgMHg1MTlhYmZhMCAvLyBtZXRob2QgImJ1cm5SZXF1ZXN0KGF4ZmVyLGFkZHJlc3Mpdm9pZCIKCXB1c2hieXRlcyAweGU1NzQ3ZTA3IC8vIG1ldGhvZCAibWludFZhbGlkYXRvckNvbW1pdCh1aW50NjQscGF5KXZvaWQiCglwdXNoYnl0ZXMgMHgyZjkxMDhlNCAvLyBtZXRob2QgImJ1cm5WYWxpZGF0b3JDb21taXQodWludDY0LHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4YjEzY2MwYjEgLy8gbWV0aG9kICJidXJuVG9EZWxpbnF1ZW50VmFsaWRhdG9yKGF4ZmVyLHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4MDM3NDc5MzMgLy8gbWV0aG9kICJyZU1pbnREZWxpbnF1ZW50Q29tbWl0KHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4ZWRkZmU1OTggLy8gbWV0aG9kICJiaWQodWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHhlNDVjNDBlMCAvLyBtZXRob2QgImRlbGVnYXRlU3Rha2UodWludDY0LHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4MzE3NTZhOTUgLy8gbWV0aG9kICJzbml0Y2hUb0J1cm4odWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHg2NjU5OTcwMyAvLyBtZXRob2QgIm11bHRpU25pdGNoVG9CdXJuKHVpbnQ2NFtdKXZvaWQiCglwdXNoYnl0ZXMgMHhkMmJlNTg2YSAvLyBtZXRob2QgInNuaXRjaENoZWNrKHVpbnQ2NCwoYm9vbCxib29sLGJvb2wsdWludDY0LGJvb2wsdWludDY0KSlib29sIgoJcHVzaGJ5dGVzIDB4OTExYzNjNDYgLy8gbWV0aG9kICJyZVN0YWtlRnJvbVNuaXRjaCh1aW50NjQsdWludDY0LHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4OGJmYTExNTcgLy8gbWV0aG9kICJtYWtlRmxhc2hMb2FuUmVxdWVzdChwYXksdWludDY0W10sdWludDY0W10pdm9pZCIKCXB1c2hieXRlcyAweDdjOTQxYjM1IC8vIG1ldGhvZCAiZ2V0Rkxjb3VudGVyKCl1aW50NjQiCglwdXNoYnl0ZXMgMHg1Y2MyYzUzNSAvLyBtZXRob2QgImFyYzYyX2dldF9jaXJjdWxhdGluZ19zdXBwbHkodWludDY0KXVpbnQ2NCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfTUFOQUdFUl9jcmVhdGVUb2tlbiAqYWJpX3JvdXRlX01BTkFHRVJfdXBkYXRlVmVzdFRva2Vuc0lEICphYmlfcm91dGVfTUFOQUdFUl9jaGFuZ2VNYW5hZ2VyICphYmlfcm91dGVfTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RDb3N0ICphYmlfcm91dGVfTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtICphYmlfcm91dGVfTUFOQUdFUl93cml0ZVBvb2xDb250cmFjdFByb2dyYW0gKmFiaV9yb3V0ZV9hZGRWYWxpZGF0b3IgKmFiaV9yb3V0ZV9taW50UmVxdWVzdCAqYWJpX3JvdXRlX2J1cm5SZXF1ZXN0ICphYmlfcm91dGVfbWludFZhbGlkYXRvckNvbW1pdCAqYWJpX3JvdXRlX2J1cm5WYWxpZGF0b3JDb21taXQgKmFiaV9yb3V0ZV9idXJuVG9EZWxpbnF1ZW50VmFsaWRhdG9yICphYmlfcm91dGVfcmVNaW50RGVsaW5xdWVudENvbW1pdCAqYWJpX3JvdXRlX2JpZCAqYWJpX3JvdXRlX2RlbGVnYXRlU3Rha2UgKmFiaV9yb3V0ZV9zbml0Y2hUb0J1cm4gKmFiaV9yb3V0ZV9tdWx0aVNuaXRjaFRvQnVybiAqYWJpX3JvdXRlX3NuaXRjaENoZWNrICphYmlfcm91dGVfcmVTdGFrZUZyb21Tbml0Y2ggKmFiaV9yb3V0ZV9tYWtlRmxhc2hMb2FuUmVxdWVzdCAqYWJpX3JvdXRlX2dldEZMY291bnRlciAqYWJpX3JvdXRlX2FyYzYyX2dldF9jaXJjdWxhdGluZ19zdXBwbHkKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnIKCipjYWxsX1VwZGF0ZUFwcGxpY2F0aW9uOgoJcHVzaGJ5dGVzIDB4NDZmNzY1MzMgLy8gbWV0aG9kICJ1cGRhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfdXBkYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBVcGRhdGVBcHBsaWNhdGlvbgoJZXJyCgoqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQ6Cglwcm90byA0IDMKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTEgLy8gZWxlbWVudAoJZHVwCglsZW4KCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJYnRvaQoJKwoJaXRvYgoJZXh0cmFjdCA2IDIKCWZyYW1lX2J1cnkgLTIgLy8gaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCXJldHN1Yg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CaelusAdmin contract
 */
export type CaelusAdminArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'updateApplication()void': Record<string, never>
    'MANAGER_createToken()void': Record<string, never>
    'MANAGER_updateVestTokensID(uint64,uint64)void': {
      vestId: bigint | number
      stVestId: bigint | number
    }
    'MANAGER_changeManager(address)void': {
      manager: string
    }
    'MANAGER_updatePoolContractCost(uint64)void': {
      validatorPoolContractCost: bigint | number
    }
    'MANAGER_updatePoolContractProgram(uint64)void': {
      programSize: bigint | number
    }
    'MANAGER_writePoolContractProgram(uint64,byte[])void': {
      offset: bigint | number
      data: Uint8Array
    }
    'addValidator(pay)void': {
      mbrPay: AppMethodCallTransactionArgument
    }
    'mintRequest(pay)void': {
      mintTxn: AppMethodCallTransactionArgument
    }
    'burnRequest(axfer,address)void': {
      burnTxn: AppMethodCallTransactionArgument
      burnTo: string
    }
    'mintValidatorCommit(uint64,pay)void': {
      validatorAppId: bigint | number
      stakeCommit: AppMethodCallTransactionArgument
    }
    'burnValidatorCommit(uint64,uint64)void': {
      appToBurnFrom: bigint | number
      amount: bigint | number
    }
    'burnToDelinquentValidator(axfer,uint64)void': {
      burnTxn: AppMethodCallTransactionArgument
      validatorAppId: bigint | number
    }
    'reMintDelinquentCommit(uint64)void': {
      app: bigint | number
    }
    'bid(uint64)void': {
      validatorAppId: bigint | number
    }
    'delegateStake(uint64,uint64)void': {
      amount: bigint | number
      validatorAppId: bigint | number
    }
    'snitchToBurn(uint64)void': {
      app: bigint | number
    }
    'multiSnitchToBurn(uint64[])void': {
      apps: bigint[] | number[]
    }
    'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool': {
      /**
       * Validator AppID to snitch
       */
      appToCheck: bigint | number
      /**
       * SnitchInfo object containing the informations to check
       */
      params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]
    }
    'reStakeFromSnitch(uint64,uint64,pay)void': {
      /**
       * The AppID of the validator to snitch
       */
      snitchedApp: bigint | number
      /**
       * The AppID of the receiver of the delegated Algo
       */
      receiverApp: bigint | number
      /**
       * The PayTxn following the snitch that sends the delegated Algo to be moved back and restaked
       */
      restakeTxn: AppMethodCallTransactionArgument
    }
    'makeFlashLoanRequest(pay,uint64[],uint64[])void': {
      payFeeTxn: AppMethodCallTransactionArgument
      amounts: bigint[] | number[]
      appToInclude: bigint[] | number[]
    }
    'getFLcounter()uint64': Record<string, never>
    'arc62_get_circulating_supply(uint64)uint64': {
      assetId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'updateApplication()void': []
    'MANAGER_createToken()void': []
    'MANAGER_updateVestTokensID(uint64,uint64)void': [vestId: bigint | number, stVestId: bigint | number]
    'MANAGER_changeManager(address)void': [manager: string]
    'MANAGER_updatePoolContractCost(uint64)void': [validatorPoolContractCost: bigint | number]
    'MANAGER_updatePoolContractProgram(uint64)void': [programSize: bigint | number]
    'MANAGER_writePoolContractProgram(uint64,byte[])void': [offset: bigint | number, data: Uint8Array]
    'addValidator(pay)void': [mbrPay: AppMethodCallTransactionArgument]
    'mintRequest(pay)void': [mintTxn: AppMethodCallTransactionArgument]
    'burnRequest(axfer,address)void': [burnTxn: AppMethodCallTransactionArgument, burnTo: string]
    'mintValidatorCommit(uint64,pay)void': [validatorAppId: bigint | number, stakeCommit: AppMethodCallTransactionArgument]
    'burnValidatorCommit(uint64,uint64)void': [appToBurnFrom: bigint | number, amount: bigint | number]
    'burnToDelinquentValidator(axfer,uint64)void': [burnTxn: AppMethodCallTransactionArgument, validatorAppId: bigint | number]
    'reMintDelinquentCommit(uint64)void': [app: bigint | number]
    'bid(uint64)void': [validatorAppId: bigint | number]
    'delegateStake(uint64,uint64)void': [amount: bigint | number, validatorAppId: bigint | number]
    'snitchToBurn(uint64)void': [app: bigint | number]
    'multiSnitchToBurn(uint64[])void': [apps: bigint[] | number[]]
    'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool': [appToCheck: bigint | number, params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]]
    'reStakeFromSnitch(uint64,uint64,pay)void': [snitchedApp: bigint | number, receiverApp: bigint | number, restakeTxn: AppMethodCallTransactionArgument]
    'makeFlashLoanRequest(pay,uint64[],uint64[])void': [payFeeTxn: AppMethodCallTransactionArgument, amounts: bigint[] | number[], appToInclude: bigint[] | number[]]
    'getFLcounter()uint64': []
    'arc62_get_circulating_supply(uint64)uint64': [assetId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type CaelusAdminReturns = {
  'createApplication()void': void
  'updateApplication()void': void
  'MANAGER_createToken()void': void
  'MANAGER_updateVestTokensID(uint64,uint64)void': void
  'MANAGER_changeManager(address)void': void
  'MANAGER_updatePoolContractCost(uint64)void': void
  'MANAGER_updatePoolContractProgram(uint64)void': void
  'MANAGER_writePoolContractProgram(uint64,byte[])void': void
  'addValidator(pay)void': void
  'mintRequest(pay)void': void
  'burnRequest(axfer,address)void': void
  'mintValidatorCommit(uint64,pay)void': void
  'burnValidatorCommit(uint64,uint64)void': void
  'burnToDelinquentValidator(axfer,uint64)void': void
  'reMintDelinquentCommit(uint64)void': void
  'bid(uint64)void': void
  'delegateStake(uint64,uint64)void': void
  'snitchToBurn(uint64)void': void
  'multiSnitchToBurn(uint64[])void': void
  'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool': boolean
  'reStakeFromSnitch(uint64,uint64,pay)void': void
  'makeFlashLoanRequest(pay,uint64[],uint64[])void': void
  'getFLcounter()uint64': bigint
  'arc62_get_circulating_supply(uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the CaelusAdmin smart contract.
 */
export type CaelusAdminTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CaelusAdminArgs['obj']['createApplication()void']
      argsTuple: CaelusAdminArgs['tuple']['createApplication()void']
      returns: CaelusAdminReturns['createApplication()void']
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: CaelusAdminArgs['obj']['updateApplication()void']
      argsTuple: CaelusAdminArgs['tuple']['updateApplication()void']
      returns: CaelusAdminReturns['updateApplication()void']
    }>
    & Record<'MANAGER_createToken()void' | 'MANAGER_createToken', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_createToken()void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_createToken()void']
      returns: CaelusAdminReturns['MANAGER_createToken()void']
    }>
    & Record<'MANAGER_updateVestTokensID(uint64,uint64)void' | 'MANAGER_updateVestTokensID', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_updateVestTokensID(uint64,uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_updateVestTokensID(uint64,uint64)void']
      returns: CaelusAdminReturns['MANAGER_updateVestTokensID(uint64,uint64)void']
    }>
    & Record<'MANAGER_changeManager(address)void' | 'MANAGER_changeManager', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_changeManager(address)void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']
      returns: CaelusAdminReturns['MANAGER_changeManager(address)void']
    }>
    & Record<'MANAGER_updatePoolContractCost(uint64)void' | 'MANAGER_updatePoolContractCost', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']
      returns: CaelusAdminReturns['MANAGER_updatePoolContractCost(uint64)void']
    }>
    & Record<'MANAGER_updatePoolContractProgram(uint64)void' | 'MANAGER_updatePoolContractProgram', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']
      returns: CaelusAdminReturns['MANAGER_updatePoolContractProgram(uint64)void']
    }>
    & Record<'MANAGER_writePoolContractProgram(uint64,byte[])void' | 'MANAGER_writePoolContractProgram', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      returns: CaelusAdminReturns['MANAGER_writePoolContractProgram(uint64,byte[])void']
    }>
    & Record<'addValidator(pay)void' | 'addValidator', {
      argsObj: CaelusAdminArgs['obj']['addValidator(pay)void']
      argsTuple: CaelusAdminArgs['tuple']['addValidator(pay)void']
      returns: CaelusAdminReturns['addValidator(pay)void']
    }>
    & Record<'mintRequest(pay)void' | 'mintRequest', {
      argsObj: CaelusAdminArgs['obj']['mintRequest(pay)void']
      argsTuple: CaelusAdminArgs['tuple']['mintRequest(pay)void']
      returns: CaelusAdminReturns['mintRequest(pay)void']
    }>
    & Record<'burnRequest(axfer,address)void' | 'burnRequest', {
      argsObj: CaelusAdminArgs['obj']['burnRequest(axfer,address)void']
      argsTuple: CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']
      returns: CaelusAdminReturns['burnRequest(axfer,address)void']
    }>
    & Record<'mintValidatorCommit(uint64,pay)void' | 'mintValidatorCommit', {
      argsObj: CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void']
      argsTuple: CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']
      returns: CaelusAdminReturns['mintValidatorCommit(uint64,pay)void']
    }>
    & Record<'burnValidatorCommit(uint64,uint64)void' | 'burnValidatorCommit', {
      argsObj: CaelusAdminArgs['obj']['burnValidatorCommit(uint64,uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,uint64)void']
      returns: CaelusAdminReturns['burnValidatorCommit(uint64,uint64)void']
    }>
    & Record<'burnToDelinquentValidator(axfer,uint64)void' | 'burnToDelinquentValidator', {
      argsObj: CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']
      returns: CaelusAdminReturns['burnToDelinquentValidator(axfer,uint64)void']
    }>
    & Record<'reMintDelinquentCommit(uint64)void' | 'reMintDelinquentCommit', {
      argsObj: CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']
      returns: CaelusAdminReturns['reMintDelinquentCommit(uint64)void']
    }>
    & Record<'bid(uint64)void' | 'bid', {
      argsObj: CaelusAdminArgs['obj']['bid(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['bid(uint64)void']
      returns: CaelusAdminReturns['bid(uint64)void']
    }>
    & Record<'delegateStake(uint64,uint64)void' | 'delegateStake', {
      argsObj: CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']
      returns: CaelusAdminReturns['delegateStake(uint64,uint64)void']
    }>
    & Record<'snitchToBurn(uint64)void' | 'snitchToBurn', {
      argsObj: CaelusAdminArgs['obj']['snitchToBurn(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']
      returns: CaelusAdminReturns['snitchToBurn(uint64)void']
    }>
    & Record<'multiSnitchToBurn(uint64[])void' | 'multiSnitchToBurn', {
      argsObj: CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void']
      argsTuple: CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']
      returns: CaelusAdminReturns['multiSnitchToBurn(uint64[])void']
    }>
    & Record<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool' | 'snitchCheck', {
      argsObj: CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']
      argsTuple: CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']
      /**
       * boolean result of the snitch if successfull - true
       */
      returns: CaelusAdminReturns['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']
    }>
    & Record<'reStakeFromSnitch(uint64,uint64,pay)void' | 'reStakeFromSnitch', {
      argsObj: CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void']
      argsTuple: CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']
      returns: CaelusAdminReturns['reStakeFromSnitch(uint64,uint64,pay)void']
    }>
    & Record<'makeFlashLoanRequest(pay,uint64[],uint64[])void' | 'makeFlashLoanRequest', {
      argsObj: CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void']
      argsTuple: CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']
      returns: CaelusAdminReturns['makeFlashLoanRequest(pay,uint64[],uint64[])void']
    }>
    & Record<'getFLcounter()uint64' | 'getFLcounter', {
      argsObj: CaelusAdminArgs['obj']['getFLcounter()uint64']
      argsTuple: CaelusAdminArgs['tuple']['getFLcounter()uint64']
      returns: CaelusAdminReturns['getFLcounter()uint64']
    }>
    & Record<'arc62_get_circulating_supply(uint64)uint64' | 'arc62_get_circulating_supply', {
      argsObj: CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64']
      argsTuple: CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']
      returns: CaelusAdminReturns['arc62_get_circulating_supply(uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: BinaryState
        validatorPoolContractVersion: bigint
        validatorPoolContractCost: bigint
        totalStake: bigint
        pegRatio: bigint
        tokenId: bigint
        vestId: bigint
        stVestId: bigint
        tokenCirculatingSupply: bigint
        highestBidder: bigint
        burnQueue: BinaryState
        lastExhaustBlock: bigint
        lastFlashloanBlock: bigint
        flashLoanCounter: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CaelusAdminSignatures = keyof CaelusAdminTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CaelusAdminNonVoidMethodSignatures = keyof CaelusAdminTypes['methods'] extends infer T ? T extends keyof CaelusAdminTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CaelusAdminSignatures> = CaelusAdminTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CaelusAdminSignatures> = CaelusAdminTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CaelusAdminTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CaelusAdminCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type CaelusAdminUpdateCallParams =
  | Expand<CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & {method: 'updateApplication'}>
  | Expand<CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & {method: 'updateApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type CaelusAdminDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CaelusAdminCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: CaelusAdminUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CaelusAdmin smart contract
 */
export abstract class CaelusAdminParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CaelusAdminCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CaelusAdminParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CaelusAdmin smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends CaelusAdminUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication()void':
            return CaelusAdminParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the CaelusAdmin smart contract using the updateApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the MANAGER_createToken()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerCreateToken(params: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_createToken()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updateVestTokensID(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdateVestTokensId(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updateVestTokensID(uint64,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateVestTokensID(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updateVestTokensID(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.vestId, params.args.stVestId],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_changeManager(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerChangeManager(params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_changeManager(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.manager],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updatePoolContractCost(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdatePoolContractCost(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updatePoolContractCost(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorPoolContractCost],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updatePoolContractProgram(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdatePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updatePoolContractProgram(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.programSize],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerWritePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_writePoolContractProgram(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the addValidator(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addValidator(params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addValidator(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the mintRequest(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintRequest(params: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mintRequest(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mintTxn],
    }
  }
  /**
   * Constructs a no op call for the burnRequest(axfer,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnRequest(params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnRequest(axfer,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.burnTxn, params.args.burnTo],
    }
  }
  /**
   * Constructs a no op call for the mintValidatorCommit(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mintValidatorCommit(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorAppId, params.args.stakeCommit],
    }
  }
  /**
   * Constructs a no op call for the burnValidatorCommit(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnValidatorCommit(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appToBurnFrom, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the burnToDelinquentValidator(axfer,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnToDelinquentValidator(params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnToDelinquentValidator(axfer,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.burnTxn, params.args.validatorAppId],
    }
  }
  /**
   * Constructs a no op call for the reMintDelinquentCommit(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static reMintDelinquentCommit(params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reMintDelinquentCommit(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app],
    }
  }
  /**
   * Constructs a no op call for the bid(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bid(params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bid(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorAppId],
    }
  }
  /**
   * Constructs a no op call for the delegateStake(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delegateStake(params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delegateStake(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.validatorAppId],
    }
  }
  /**
   * Constructs a no op call for the snitchToBurn(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static snitchToBurn(params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'snitchToBurn(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app],
    }
  }
  /**
   * Constructs a no op call for the multiSnitchToBurn(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static multiSnitchToBurn(params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'multiSnitchToBurn(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.apps],
    }
  }
  /**
   * Constructs a no op call for the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method
   *
   * Used to check the behavior of a Validator App
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static snitchCheck(params: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appToCheck, params.args.params],
    }
  }
  /**
   * Constructs a no op call for the reStakeFromSnitch(uint64,uint64,pay)void ABI method
   *
   * Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static reStakeFromSnitch(params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reStakeFromSnitch(uint64,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.snitchedApp, params.args.receiverApp, params.args.restakeTxn],
    }
  }
  /**
   * Constructs a no op call for the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static makeFlashLoanRequest(params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'makeFlashLoanRequest(pay,uint64[],uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payFeeTxn, params.args.amounts, params.args.appToInclude],
    }
  }
  /**
   * Constructs a no op call for the getFLcounter()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getFLcounter(params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getFLcounter()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc62_get_circulating_supply(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc62GetCirculatingSupply(params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc62_get_circulating_supply(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CaelusAdmin smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CaelusAdminFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CaelusAdminFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CaelusAdminClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CaelusAdminClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CaelusAdmin smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CaelusAdminDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CaelusAdminParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CaelusAdminCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? CaelusAdminParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (CaelusAdminUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CaelusAdminClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
      /**
       * Creates a new instance of the CaelusAdmin smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CaelusAdminParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the CaelusAdmin smart contract using the updateApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(CaelusAdminParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
      /**
       * Creates a new instance of the CaelusAdmin smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CaelusAdminParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new CaelusAdminClient(result.appClient) }
      },
      /**
       * Creates a new instance of the CaelusAdmin smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CaelusAdminParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CaelusAdminReturns['createApplication()void']) }, appClient: new CaelusAdminClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CaelusAdmin smart contract
 */
export class CaelusAdminClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CaelusAdminClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CaelusAdmin app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CaelusAdminClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CaelusAdminNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CaelusAdminClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CaelusAdminClient> {
    return new CaelusAdminClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CaelusAdminClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CaelusAdminClient> {
    return new CaelusAdminClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the CaelusAdmin smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(CaelusAdminParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_createToken()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerCreateToken: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerCreateToken(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updateVestTokensID(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdateVestTokensId: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updateVestTokensID(uint64,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateVestTokensID(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerUpdateVestTokensId(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeManager(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerChangeManager: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerChangeManager(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractCost(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdatePoolContractCost: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerUpdatePoolContractCost(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdatePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerWritePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `addValidator(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addValidator: (params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.addValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintRequest(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintRequest: (params: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.mintRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnRequest(axfer,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnRequest: (params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.burnRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintValidatorCommit(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.mintValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnValidatorCommit(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.burnValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnToDelinquentValidator(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnToDelinquentValidator: (params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.burnToDelinquentValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reMintDelinquentCommit(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    reMintDelinquentCommit: (params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.reMintDelinquentCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `bid(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bid: (params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.bid(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delegateStake(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delegateStake: (params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.delegateStake(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchToBurn(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    snitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.snitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `multiSnitchToBurn(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    multiSnitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.multiSnitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool` ABI method.
     *
     * Used to check the behavior of a Validator App
     *
     * @param params The params for the smart contract call
     * @returns The call params: boolean result of the snitch if successfull - true
     */
    snitchCheck: (params: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.snitchCheck(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reStakeFromSnitch(uint64,uint64,pay)void` ABI method.
     *
     * Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    reStakeFromSnitch: (params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.reStakeFromSnitch(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `makeFlashLoanRequest(pay,uint64[],uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    makeFlashLoanRequest: (params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.makeFlashLoanRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getFLcounter()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getFLcounter: (params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.getFLcounter(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc62GetCirculatingSupply: (params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.arc62GetCirculatingSupply(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the CaelusAdmin smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(CaelusAdminParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_createToken()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerCreateToken: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerCreateToken(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updateVestTokensID(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdateVestTokensId: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updateVestTokensID(uint64,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateVestTokensID(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerUpdateVestTokensId(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeManager(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerChangeManager: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerChangeManager(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractCost(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdatePoolContractCost: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerUpdatePoolContractCost(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdatePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerWritePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `addValidator(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addValidator: (params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.addValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintRequest(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintRequest: (params: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.mintRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnRequest(axfer,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnRequest: (params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.burnRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintValidatorCommit(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.mintValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnValidatorCommit(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.burnValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnToDelinquentValidator(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnToDelinquentValidator: (params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.burnToDelinquentValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reMintDelinquentCommit(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    reMintDelinquentCommit: (params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.reMintDelinquentCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `bid(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bid: (params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.bid(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delegateStake(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delegateStake: (params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.delegateStake(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchToBurn(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    snitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.snitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `multiSnitchToBurn(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    multiSnitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.multiSnitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool` ABI method.
     *
     * Used to check the behavior of a Validator App
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: boolean result of the snitch if successfull - true
     */
    snitchCheck: (params: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.snitchCheck(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reStakeFromSnitch(uint64,uint64,pay)void` ABI method.
     *
     * Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    reStakeFromSnitch: (params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.reStakeFromSnitch(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `makeFlashLoanRequest(pay,uint64[],uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    makeFlashLoanRequest: (params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.makeFlashLoanRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getFLcounter()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getFLcounter: (params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.getFLcounter(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc62GetCirculatingSupply: (params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.arc62GetCirculatingSupply(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the CaelusAdmin smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(CaelusAdminParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['updateApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_createToken()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerCreateToken: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerCreateToken(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_createToken()void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updateVestTokensID(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdateVestTokensId: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updateVestTokensID(uint64,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateVestTokensID(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerUpdateVestTokensId(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_updateVestTokensID(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeManager(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerChangeManager: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerChangeManager(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_changeManager(address)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractCost(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdatePoolContractCost: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerUpdatePoolContractCost(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_updatePoolContractCost(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdatePoolContractProgram: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerUpdatePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_updatePoolContractProgram(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerWritePoolContractProgram: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerWritePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `addValidator(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addValidator: async (params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.addValidator(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['addValidator(pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintRequest(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintRequest: async (params: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.mintRequest(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['mintRequest(pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnRequest(axfer,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnRequest: async (params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.burnRequest(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['burnRequest(axfer,address)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintValidatorCommit(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintValidatorCommit: async (params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.mintValidatorCommit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['mintValidatorCommit(uint64,pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnValidatorCommit(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnValidatorCommit: async (params: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.burnValidatorCommit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['burnValidatorCommit(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnToDelinquentValidator(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnToDelinquentValidator: async (params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.burnToDelinquentValidator(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['burnToDelinquentValidator(axfer,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reMintDelinquentCommit(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    reMintDelinquentCommit: async (params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.reMintDelinquentCommit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['reMintDelinquentCommit(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `bid(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bid: async (params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.bid(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['bid(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delegateStake(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delegateStake: async (params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.delegateStake(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['delegateStake(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchToBurn(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    snitchToBurn: async (params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.snitchToBurn(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['snitchToBurn(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `multiSnitchToBurn(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    multiSnitchToBurn: async (params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.multiSnitchToBurn(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['multiSnitchToBurn(uint64[])void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool` ABI method.
     *
     * Used to check the behavior of a Validator App
     *
     * @param params The params for the smart contract call
     * @returns The call result: boolean result of the snitch if successfull - true
     */
    snitchCheck: async (params: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.snitchCheck(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reStakeFromSnitch(uint64,uint64,pay)void` ABI method.
     *
     * Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    reStakeFromSnitch: async (params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.reStakeFromSnitch(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['reStakeFromSnitch(uint64,uint64,pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `makeFlashLoanRequest(pay,uint64[],uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    makeFlashLoanRequest: async (params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.makeFlashLoanRequest(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['makeFlashLoanRequest(pay,uint64[],uint64[])void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getFLcounter()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getFLcounter: async (params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.getFLcounter(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['getFLcounter()uint64'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc62GetCirculatingSupply: async (params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.arc62GetCirculatingSupply(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['arc62_get_circulating_supply(uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CaelusAdminClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CaelusAdmin app
   */
  state = {
    /**
     * Methods to access global state for the current CaelusAdmin app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: new BinaryStateValue(result.manager),
          validatorPoolContractVersion: result.validatorPoolContractVersion,
          validatorPoolContractCost: result.validatorPoolContractCost,
          totalStake: result.totalStake,
          pegRatio: result.pegRatio,
          tokenId: result.tokenId,
          vestId: result.vestId,
          stVestId: result.stVestId,
          tokenCirculatingSupply: result.tokenCirculatingSupply,
          highestBidder: result.highestBidder,
          burnQueue: new BinaryStateValue(result.burnQueue),
          lastExhaustBlock: result.lastExhaustBlock,
          lastFlashloanBlock: result.lastFlashloanBlock,
          flashLoanCounter: result.flashLoanCounter,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("manager")) as Uint8Array | undefined) },
      /**
       * Get the current value of the validatorPoolContractVersion key in global state
       */
      validatorPoolContractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("validatorPoolContractVersion")) as bigint | undefined },
      /**
       * Get the current value of the validatorPoolContractCost key in global state
       */
      validatorPoolContractCost: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("validatorPoolContractCost")) as bigint | undefined },
      /**
       * Get the current value of the totalStake key in global state
       */
      totalStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalStake")) as bigint | undefined },
      /**
       * Get the current value of the pegRatio key in global state
       */
      pegRatio: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("pegRatio")) as bigint | undefined },
      /**
       * Get the current value of the tokenId key in global state
       */
      tokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tokenId")) as bigint | undefined },
      /**
       * Get the current value of the vestId key in global state
       */
      vestId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("vestId")) as bigint | undefined },
      /**
       * Get the current value of the stVestId key in global state
       */
      stVestId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("stVestId")) as bigint | undefined },
      /**
       * Get the current value of the tokenCirculatingSupply key in global state
       */
      tokenCirculatingSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tokenCirculatingSupply")) as bigint | undefined },
      /**
       * Get the current value of the highestBidder key in global state
       */
      highestBidder: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("highestBidder")) as bigint | undefined },
      /**
       * Get the current value of the burnQueue key in global state
       */
      burnQueue: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("burnQueue")) as Uint8Array | undefined) },
      /**
       * Get the current value of the lastExhaustBlock key in global state
       */
      lastExhaustBlock: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastExhaustBlock")) as bigint | undefined },
      /**
       * Get the current value of the lastFlashloanBlock key in global state
       */
      lastFlashloanBlock: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastFlashloanBlock")) as bigint | undefined },
      /**
       * Get the current value of the flashLoanCounter key in global state
       */
      flashLoanCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("flashLoanCounter")) as bigint | undefined },
    },
  }

  public newGroup(): CaelusAdminComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a MANAGER_createToken()void method call against the CaelusAdmin contract
       */
      managerCreateToken(params: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerCreateToken(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updateVestTokensID(uint64,uint64)void method call against the CaelusAdmin contract
       */
      managerUpdateVestTokensId(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updateVestTokensID(uint64,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateVestTokensID(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdateVestTokensId(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_changeManager(address)void method call against the CaelusAdmin contract
       */
      managerChangeManager(params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerChangeManager(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updatePoolContractCost(uint64)void method call against the CaelusAdmin contract
       */
      managerUpdatePoolContractCost(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdatePoolContractCost(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updatePoolContractProgram(uint64)void method call against the CaelusAdmin contract
       */
      managerUpdatePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdatePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_writePoolContractProgram(uint64,byte[])void method call against the CaelusAdmin contract
       */
      managerWritePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerWritePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addValidator(pay)void method call against the CaelusAdmin contract
       */
      addValidator(params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addValidator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a mintRequest(pay)void method call against the CaelusAdmin contract
       */
      mintRequest(params: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnRequest(axfer,address)void method call against the CaelusAdmin contract
       */
      burnRequest(params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a mintValidatorCommit(uint64,pay)void method call against the CaelusAdmin contract
       */
      mintValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintValidatorCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnValidatorCommit(uint64,uint64)void method call against the CaelusAdmin contract
       */
      burnValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnValidatorCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnToDelinquentValidator(axfer,uint64)void method call against the CaelusAdmin contract
       */
      burnToDelinquentValidator(params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnToDelinquentValidator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reMintDelinquentCommit(uint64)void method call against the CaelusAdmin contract
       */
      reMintDelinquentCommit(params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.reMintDelinquentCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a bid(uint64)void method call against the CaelusAdmin contract
       */
      bid(params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bid(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delegateStake(uint64,uint64)void method call against the CaelusAdmin contract
       */
      delegateStake(params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delegateStake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a snitchToBurn(uint64)void method call against the CaelusAdmin contract
       */
      snitchToBurn(params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.snitchToBurn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a multiSnitchToBurn(uint64[])void method call against the CaelusAdmin contract
       */
      multiSnitchToBurn(params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.multiSnitchToBurn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool method call against the CaelusAdmin contract
       */
      snitchCheck(params: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.snitchCheck(params)))
        resultMappers.push((v) => client.decodeReturnValue('snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool', v))
        return this
      },
      /**
       * Add a reStakeFromSnitch(uint64,uint64,pay)void method call against the CaelusAdmin contract
       */
      reStakeFromSnitch(params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.reStakeFromSnitch(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a makeFlashLoanRequest(pay,uint64[],uint64[])void method call against the CaelusAdmin contract
       */
      makeFlashLoanRequest(params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.makeFlashLoanRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getFLcounter()uint64 method call against the CaelusAdmin contract
       */
      getFLcounter(params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getFLcounter(params)))
        resultMappers.push((v) => client.decodeReturnValue('getFLcounter()uint64', v))
        return this
      },
      /**
       * Add a arc62_get_circulating_supply(uint64)uint64 method call against the CaelusAdmin contract
       */
      arc62GetCirculatingSupply(params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc62GetCirculatingSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc62_get_circulating_supply(uint64)uint64', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the CaelusAdmin contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CaelusAdminComposer
  }
}
export type CaelusAdminComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the MANAGER_createToken()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerCreateToken(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_createToken()void'] | undefined]>

  /**
   * Calls the MANAGER_updateVestTokensID(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdateVestTokensId(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_updateVestTokensID(uint64,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateVestTokensID(uint64,uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_updateVestTokensID(uint64,uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_changeManager(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerChangeManager(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_changeManager(address)void'] | undefined]>

  /**
   * Calls the MANAGER_updatePoolContractCost(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdatePoolContractCost(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_updatePoolContractCost(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_updatePoolContractProgram(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdatePoolContractProgram(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_updatePoolContractProgram(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerWritePoolContractProgram(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'] | undefined]>

  /**
   * Calls the addValidator(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addValidator(params?: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['addValidator(pay)void'] | undefined]>

  /**
   * Calls the mintRequest(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintRequest(params?: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['mintRequest(pay)void'] | undefined]>

  /**
   * Calls the burnRequest(axfer,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnRequest(params?: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['burnRequest(axfer,address)void'] | undefined]>

  /**
   * Calls the mintValidatorCommit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintValidatorCommit(params?: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['mintValidatorCommit(uint64,pay)void'] | undefined]>

  /**
   * Calls the burnValidatorCommit(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnValidatorCommit(params?: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['burnValidatorCommit(uint64,uint64)void'] | undefined]>

  /**
   * Calls the burnToDelinquentValidator(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnToDelinquentValidator(params?: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['burnToDelinquentValidator(axfer,uint64)void'] | undefined]>

  /**
   * Calls the reMintDelinquentCommit(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reMintDelinquentCommit(params?: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['reMintDelinquentCommit(uint64)void'] | undefined]>

  /**
   * Calls the bid(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bid(params?: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['bid(uint64)void'] | undefined]>

  /**
   * Calls the delegateStake(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delegateStake(params?: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['delegateStake(uint64,uint64)void'] | undefined]>

  /**
   * Calls the snitchToBurn(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchToBurn(params?: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['snitchToBurn(uint64)void'] | undefined]>

  /**
   * Calls the multiSnitchToBurn(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  multiSnitchToBurn(params?: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['multiSnitchToBurn(uint64[])void'] | undefined]>

  /**
   * Calls the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method.
   *
   * Used to check the behavior of a Validator App
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchCheck(params?: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | undefined]>

  /**
   * Calls the reStakeFromSnitch(uint64,uint64,pay)void ABI method.
   *
   * Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reStakeFromSnitch(params?: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['reStakeFromSnitch(uint64,uint64,pay)void'] | undefined]>

  /**
   * Calls the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeFlashLoanRequest(params?: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | undefined]>

  /**
   * Calls the getFLcounter()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFLcounter(params?: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['getFLcounter()uint64'] | undefined]>

  /**
   * Calls the arc62_get_circulating_supply(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc62GetCirculatingSupply(params?: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['arc62_get_circulating_supply(uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CaelusAdminComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CaelusAdminComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CaelusAdminComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CaelusAdminComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CaelusAdminComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CaelusAdminComposerResults<TReturns>>
}
export type CaelusAdminComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

