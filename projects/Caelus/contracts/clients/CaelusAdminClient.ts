/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"CaelusAdmin","desc":"","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"MANAGER_config","args":[{"name":"manager","type":"address"},{"name":"validatorPoolContractCost","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updatePoolContractProgram","args":[{"name":"programSize","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_writePoolContractProgram","args":[{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"addValidator","args":[{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delayedMintRequest","args":[{"name":"mintTxn","type":"pay"},{"name":"coverMBR","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"claimMint","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"getPremiumAmount","args":[{"name":"amount","type":"uint64"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"instantMintRequest","args":[{"name":"mintTxn","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"burnRequest","args":[{"name":"burnTxn","type":"axfer"},{"name":"burnTo","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"mintValidatorCommit","args":[{"name":"validatorAppID","type":"uint64"},{"name":"stakeCommit","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"burnValidatorCommit","args":[{"name":"appToBurnFrom","type":"uint64"},{"name":"burnTxn","type":"axfer"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"burnToDelinquentValidator","args":[{"name":"burnTxn","type":"axfer"},{"name":"validatorAppID","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reMintDelinquentCommit","args":[{"name":"app","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"bid","args":[{"name":"validatorAppID","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delegateStake","args":[{"name":"amount","type":"uint64"},{"name":"validatorAppID","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"snitchToBurn","args":[{"name":"app","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"multiSnitchToBurn","args":[{"name":"apps","type":"uint64[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"snitchCheck","args":[{"name":"appToCheck","type":"uint64"},{"name":"params","type":"(bool,bool,bool,uint64,bool,uint64)"}],"returns":{"type":"bool"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reStakeFromSnitch","args":[{"name":"snitchedApp","type":"uint64"},{"name":"receiverApp","type":"uint64"},{"name":"restakeTxn","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"declareRewards","args":[{"name":"txn","type":"pay"},{"name":"ifValidator","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"onOperatorExit","args":[{"name":"appToClose","type":"uint64"},{"name":"closeTxn","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"makeFlashLoanRequest","args":[{"name":"payFeeTxn","type":"pay"},{"name":"amounts","type":"uint64[]"},{"name":"appToInclude","type":"uint64[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"getFLcounter","args":[],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc62_get_circulating_supply","args":[{"name":"asset_id","type":"uint64"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":12,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMString","valueType":"AVMBytes"},"validatorPoolContractVersion":{"key":"dmFsaWRhdG9yX3Bvb2xfdmVyc2lvbg==","keyType":"AVMString","valueType":"AVMUint64"},"validatorPoolContractCost":{"key":"dmFsaWRhdG9yX3Bvb2xfY29zdA==","keyType":"AVMString","valueType":"AVMUint64"},"totalStake":{"key":"dG90YWxfc3Rha2U=","keyType":"AVMString","valueType":"AVMUint64"},"idleStake":{"key":"aWRsZV9zdGFrZQ==","keyType":"AVMString","valueType":"AVMUint64"},"pegRatio":{"key":"cGVnX3JhdGlv","keyType":"AVMString","valueType":"AVMUint64"},"tokenId":{"key":"dG9rZW5faWQ=","keyType":"AVMString","valueType":"AVMUint64"},"tokenCirculatingSupply":{"key":"dG9rZW5fY2lyY3VsYXRpbmdfc3VwcGx5","keyType":"AVMString","valueType":"AVMUint64"},"highestBidder":{"key":"aGlnaGVzdF9iaWRkZXI=","keyType":"AVMString","valueType":"AVMUint64"},"burnQueue":{"key":"YnVybl9xdWV1ZQ==","keyType":"AVMString","valueType":"AVMBytes"},"burnTarget":{"key":"YnVybl90YXJnZXQ=","keyType":"AVMString","valueType":"AVMUint64"},"lastExhaustBlock":{"key":"bGFzdF9leGhhdXN0X2Jsb2Nr","keyType":"AVMString","valueType":"AVMUint64"},"lastFlashloanBlock":{"key":"bGFzdF9mbGFzaGxvYW5fYmxvY2s=","keyType":"AVMString","valueType":"AVMUint64"},"flashLoanCounter":{"key":"Zmxhc2hsb2FuX2NvdW50ZXI=","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CaelusAdmin contract
 */
export type CaelusAdminArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'MANAGER_config(address,uint64)void': {
      manager: string
      validatorPoolContractCost: bigint | number
    }
    'MANAGER_updatePoolContractProgram(uint64)void': {
      programSize: bigint | number
    }
    'MANAGER_writePoolContractProgram(uint64,byte[])void': {
      offset: bigint | number
      data: Uint8Array
    }
    'addValidator(pay)void': {
      mbrPay: AppMethodCallTransactionArgument
    }
    'delayedMintRequest(pay,pay)void': {
      mintTxn: AppMethodCallTransactionArgument
      coverMbr: AppMethodCallTransactionArgument
    }
    'claimMint()void': Record<string, never>
    'getPremiumAmount(uint64)uint64': {
      amount: bigint | number
    }
    'instantMintRequest(pay)void': {
      mintTxn: AppMethodCallTransactionArgument
    }
    'burnRequest(axfer,address)void': {
      burnTxn: AppMethodCallTransactionArgument
      burnTo: string
    }
    'mintValidatorCommit(uint64,pay)void': {
      validatorAppId: bigint | number
      stakeCommit: AppMethodCallTransactionArgument
    }
    'burnValidatorCommit(uint64,axfer)void': {
      appToBurnFrom: bigint | number
      burnTxn: AppMethodCallTransactionArgument
    }
    'burnToDelinquentValidator(axfer,uint64)void': {
      burnTxn: AppMethodCallTransactionArgument
      validatorAppId: bigint | number
    }
    'reMintDelinquentCommit(uint64)void': {
      app: bigint | number
    }
    'bid(uint64)void': {
      validatorAppId: bigint | number
    }
    'delegateStake(uint64,uint64)void': {
      amount: bigint | number
      validatorAppId: bigint | number
    }
    'snitchToBurn(uint64)void': {
      app: bigint | number
    }
    'multiSnitchToBurn(uint64[])void': {
      apps: bigint[] | number[]
    }
    'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool': {
      appToCheck: bigint | number
      params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]
    }
    'reStakeFromSnitch(uint64,uint64,pay)void': {
      snitchedApp: bigint | number
      receiverApp: bigint | number
      restakeTxn: AppMethodCallTransactionArgument
    }
    'declareRewards(pay,uint64)void': {
      txn: AppMethodCallTransactionArgument
      ifValidator: bigint | number
    }
    'onOperatorExit(uint64,pay)void': {
      appToClose: bigint | number
      closeTxn: AppMethodCallTransactionArgument
    }
    'makeFlashLoanRequest(pay,uint64[],uint64[])void': {
      payFeeTxn: AppMethodCallTransactionArgument
      amounts: bigint[] | number[]
      appToInclude: bigint[] | number[]
    }
    'getFLcounter()uint64': Record<string, never>
    'arc62_get_circulating_supply(uint64)uint64': {
      assetId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'MANAGER_config(address,uint64)void': [manager: string, validatorPoolContractCost: bigint | number]
    'MANAGER_updatePoolContractProgram(uint64)void': [programSize: bigint | number]
    'MANAGER_writePoolContractProgram(uint64,byte[])void': [offset: bigint | number, data: Uint8Array]
    'addValidator(pay)void': [mbrPay: AppMethodCallTransactionArgument]
    'delayedMintRequest(pay,pay)void': [mintTxn: AppMethodCallTransactionArgument, coverMbr: AppMethodCallTransactionArgument]
    'claimMint()void': []
    'getPremiumAmount(uint64)uint64': [amount: bigint | number]
    'instantMintRequest(pay)void': [mintTxn: AppMethodCallTransactionArgument]
    'burnRequest(axfer,address)void': [burnTxn: AppMethodCallTransactionArgument, burnTo: string]
    'mintValidatorCommit(uint64,pay)void': [validatorAppId: bigint | number, stakeCommit: AppMethodCallTransactionArgument]
    'burnValidatorCommit(uint64,axfer)void': [appToBurnFrom: bigint | number, burnTxn: AppMethodCallTransactionArgument]
    'burnToDelinquentValidator(axfer,uint64)void': [burnTxn: AppMethodCallTransactionArgument, validatorAppId: bigint | number]
    'reMintDelinquentCommit(uint64)void': [app: bigint | number]
    'bid(uint64)void': [validatorAppId: bigint | number]
    'delegateStake(uint64,uint64)void': [amount: bigint | number, validatorAppId: bigint | number]
    'snitchToBurn(uint64)void': [app: bigint | number]
    'multiSnitchToBurn(uint64[])void': [apps: bigint[] | number[]]
    'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool': [appToCheck: bigint | number, params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]]
    'reStakeFromSnitch(uint64,uint64,pay)void': [snitchedApp: bigint | number, receiverApp: bigint | number, restakeTxn: AppMethodCallTransactionArgument]
    'declareRewards(pay,uint64)void': [txn: AppMethodCallTransactionArgument, ifValidator: bigint | number]
    'onOperatorExit(uint64,pay)void': [appToClose: bigint | number, closeTxn: AppMethodCallTransactionArgument]
    'makeFlashLoanRequest(pay,uint64[],uint64[])void': [payFeeTxn: AppMethodCallTransactionArgument, amounts: bigint[] | number[], appToInclude: bigint[] | number[]]
    'getFLcounter()uint64': []
    'arc62_get_circulating_supply(uint64)uint64': [assetId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type CaelusAdminReturns = {
  'createApplication()void': void
  'MANAGER_config(address,uint64)void': void
  'MANAGER_updatePoolContractProgram(uint64)void': void
  'MANAGER_writePoolContractProgram(uint64,byte[])void': void
  'addValidator(pay)void': void
  'delayedMintRequest(pay,pay)void': void
  'claimMint()void': void
  'getPremiumAmount(uint64)uint64': bigint
  'instantMintRequest(pay)void': void
  'burnRequest(axfer,address)void': void
  'mintValidatorCommit(uint64,pay)void': void
  'burnValidatorCommit(uint64,axfer)void': void
  'burnToDelinquentValidator(axfer,uint64)void': void
  'reMintDelinquentCommit(uint64)void': void
  'bid(uint64)void': void
  'delegateStake(uint64,uint64)void': void
  'snitchToBurn(uint64)void': void
  'multiSnitchToBurn(uint64[])void': void
  'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool': boolean
  'reStakeFromSnitch(uint64,uint64,pay)void': void
  'declareRewards(pay,uint64)void': void
  'onOperatorExit(uint64,pay)void': void
  'makeFlashLoanRequest(pay,uint64[],uint64[])void': void
  'getFLcounter()uint64': bigint
  'arc62_get_circulating_supply(uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the CaelusAdmin smart contract.
 */
export type CaelusAdminTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CaelusAdminArgs['obj']['createApplication()void']
      argsTuple: CaelusAdminArgs['tuple']['createApplication()void']
      returns: CaelusAdminReturns['createApplication()void']
    }>
    & Record<'MANAGER_config(address,uint64)void' | 'MANAGER_config', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_config(address,uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_config(address,uint64)void']
      returns: CaelusAdminReturns['MANAGER_config(address,uint64)void']
    }>
    & Record<'MANAGER_updatePoolContractProgram(uint64)void' | 'MANAGER_updatePoolContractProgram', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']
      returns: CaelusAdminReturns['MANAGER_updatePoolContractProgram(uint64)void']
    }>
    & Record<'MANAGER_writePoolContractProgram(uint64,byte[])void' | 'MANAGER_writePoolContractProgram', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      returns: CaelusAdminReturns['MANAGER_writePoolContractProgram(uint64,byte[])void']
    }>
    & Record<'addValidator(pay)void' | 'addValidator', {
      argsObj: CaelusAdminArgs['obj']['addValidator(pay)void']
      argsTuple: CaelusAdminArgs['tuple']['addValidator(pay)void']
      returns: CaelusAdminReturns['addValidator(pay)void']
    }>
    & Record<'delayedMintRequest(pay,pay)void' | 'delayedMintRequest', {
      argsObj: CaelusAdminArgs['obj']['delayedMintRequest(pay,pay)void']
      argsTuple: CaelusAdminArgs['tuple']['delayedMintRequest(pay,pay)void']
      returns: CaelusAdminReturns['delayedMintRequest(pay,pay)void']
    }>
    & Record<'claimMint()void' | 'claimMint', {
      argsObj: CaelusAdminArgs['obj']['claimMint()void']
      argsTuple: CaelusAdminArgs['tuple']['claimMint()void']
      returns: CaelusAdminReturns['claimMint()void']
    }>
    & Record<'getPremiumAmount(uint64)uint64' | 'getPremiumAmount', {
      argsObj: CaelusAdminArgs['obj']['getPremiumAmount(uint64)uint64']
      argsTuple: CaelusAdminArgs['tuple']['getPremiumAmount(uint64)uint64']
      returns: CaelusAdminReturns['getPremiumAmount(uint64)uint64']
    }>
    & Record<'instantMintRequest(pay)void' | 'instantMintRequest', {
      argsObj: CaelusAdminArgs['obj']['instantMintRequest(pay)void']
      argsTuple: CaelusAdminArgs['tuple']['instantMintRequest(pay)void']
      returns: CaelusAdminReturns['instantMintRequest(pay)void']
    }>
    & Record<'burnRequest(axfer,address)void' | 'burnRequest', {
      argsObj: CaelusAdminArgs['obj']['burnRequest(axfer,address)void']
      argsTuple: CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']
      returns: CaelusAdminReturns['burnRequest(axfer,address)void']
    }>
    & Record<'mintValidatorCommit(uint64,pay)void' | 'mintValidatorCommit', {
      argsObj: CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void']
      argsTuple: CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']
      returns: CaelusAdminReturns['mintValidatorCommit(uint64,pay)void']
    }>
    & Record<'burnValidatorCommit(uint64,axfer)void' | 'burnValidatorCommit', {
      argsObj: CaelusAdminArgs['obj']['burnValidatorCommit(uint64,axfer)void']
      argsTuple: CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,axfer)void']
      returns: CaelusAdminReturns['burnValidatorCommit(uint64,axfer)void']
    }>
    & Record<'burnToDelinquentValidator(axfer,uint64)void' | 'burnToDelinquentValidator', {
      argsObj: CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']
      returns: CaelusAdminReturns['burnToDelinquentValidator(axfer,uint64)void']
    }>
    & Record<'reMintDelinquentCommit(uint64)void' | 'reMintDelinquentCommit', {
      argsObj: CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']
      returns: CaelusAdminReturns['reMintDelinquentCommit(uint64)void']
    }>
    & Record<'bid(uint64)void' | 'bid', {
      argsObj: CaelusAdminArgs['obj']['bid(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['bid(uint64)void']
      returns: CaelusAdminReturns['bid(uint64)void']
    }>
    & Record<'delegateStake(uint64,uint64)void' | 'delegateStake', {
      argsObj: CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']
      returns: CaelusAdminReturns['delegateStake(uint64,uint64)void']
    }>
    & Record<'snitchToBurn(uint64)void' | 'snitchToBurn', {
      argsObj: CaelusAdminArgs['obj']['snitchToBurn(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']
      returns: CaelusAdminReturns['snitchToBurn(uint64)void']
    }>
    & Record<'multiSnitchToBurn(uint64[])void' | 'multiSnitchToBurn', {
      argsObj: CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void']
      argsTuple: CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']
      returns: CaelusAdminReturns['multiSnitchToBurn(uint64[])void']
    }>
    & Record<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool' | 'snitchCheck', {
      argsObj: CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']
      argsTuple: CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']
      returns: CaelusAdminReturns['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']
    }>
    & Record<'reStakeFromSnitch(uint64,uint64,pay)void' | 'reStakeFromSnitch', {
      argsObj: CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void']
      argsTuple: CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']
      returns: CaelusAdminReturns['reStakeFromSnitch(uint64,uint64,pay)void']
    }>
    & Record<'declareRewards(pay,uint64)void' | 'declareRewards', {
      argsObj: CaelusAdminArgs['obj']['declareRewards(pay,uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['declareRewards(pay,uint64)void']
      returns: CaelusAdminReturns['declareRewards(pay,uint64)void']
    }>
    & Record<'onOperatorExit(uint64,pay)void' | 'onOperatorExit', {
      argsObj: CaelusAdminArgs['obj']['onOperatorExit(uint64,pay)void']
      argsTuple: CaelusAdminArgs['tuple']['onOperatorExit(uint64,pay)void']
      returns: CaelusAdminReturns['onOperatorExit(uint64,pay)void']
    }>
    & Record<'makeFlashLoanRequest(pay,uint64[],uint64[])void' | 'makeFlashLoanRequest', {
      argsObj: CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void']
      argsTuple: CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']
      returns: CaelusAdminReturns['makeFlashLoanRequest(pay,uint64[],uint64[])void']
    }>
    & Record<'getFLcounter()uint64' | 'getFLcounter', {
      argsObj: CaelusAdminArgs['obj']['getFLcounter()uint64']
      argsTuple: CaelusAdminArgs['tuple']['getFLcounter()uint64']
      returns: CaelusAdminReturns['getFLcounter()uint64']
    }>
    & Record<'arc62_get_circulating_supply(uint64)uint64' | 'arc62_get_circulating_supply', {
      argsObj: CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64']
      argsTuple: CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']
      returns: CaelusAdminReturns['arc62_get_circulating_supply(uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: BinaryState
        validatorPoolContractVersion: bigint
        validatorPoolContractCost: bigint
        totalStake: bigint
        idleStake: bigint
        pegRatio: bigint
        tokenId: bigint
        tokenCirculatingSupply: bigint
        highestBidder: bigint
        burnQueue: BinaryState
        burnTarget: bigint
        lastExhaustBlock: bigint
        lastFlashloanBlock: bigint
        flashLoanCounter: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CaelusAdminSignatures = keyof CaelusAdminTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CaelusAdminNonVoidMethodSignatures = keyof CaelusAdminTypes['methods'] extends infer T ? T extends keyof CaelusAdminTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CaelusAdminSignatures> = CaelusAdminTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CaelusAdminSignatures> = CaelusAdminTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CaelusAdminTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CaelusAdminCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CaelusAdminDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CaelusAdminCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CaelusAdmin smart contract
 */
export abstract class CaelusAdminParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CaelusAdminCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CaelusAdminParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CaelusAdmin smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the MANAGER_config(address,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerConfig(params: CallParams<CaelusAdminArgs['obj']['MANAGER_config(address,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_config(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_config(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.manager, params.args.validatorPoolContractCost],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updatePoolContractProgram(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdatePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updatePoolContractProgram(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.programSize],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerWritePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_writePoolContractProgram(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the addValidator(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addValidator(params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addValidator(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the delayedMintRequest(pay,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delayedMintRequest(params: CallParams<CaelusAdminArgs['obj']['delayedMintRequest(pay,pay)void'] | CaelusAdminArgs['tuple']['delayedMintRequest(pay,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delayedMintRequest(pay,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mintTxn, params.args.coverMbr],
    }
  }
  /**
   * Constructs a no op call for the claimMint()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimMint(params: CallParams<CaelusAdminArgs['obj']['claimMint()void'] | CaelusAdminArgs['tuple']['claimMint()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimMint()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPremiumAmount(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPremiumAmount(params: CallParams<CaelusAdminArgs['obj']['getPremiumAmount(uint64)uint64'] | CaelusAdminArgs['tuple']['getPremiumAmount(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPremiumAmount(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the instantMintRequest(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static instantMintRequest(params: CallParams<CaelusAdminArgs['obj']['instantMintRequest(pay)void'] | CaelusAdminArgs['tuple']['instantMintRequest(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'instantMintRequest(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mintTxn],
    }
  }
  /**
   * Constructs a no op call for the burnRequest(axfer,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnRequest(params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnRequest(axfer,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.burnTxn, params.args.burnTo],
    }
  }
  /**
   * Constructs a no op call for the mintValidatorCommit(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mintValidatorCommit(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorAppId, params.args.stakeCommit],
    }
  }
  /**
   * Constructs a no op call for the burnValidatorCommit(uint64,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,axfer)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnValidatorCommit(uint64,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appToBurnFrom, params.args.burnTxn],
    }
  }
  /**
   * Constructs a no op call for the burnToDelinquentValidator(axfer,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnToDelinquentValidator(params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnToDelinquentValidator(axfer,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.burnTxn, params.args.validatorAppId],
    }
  }
  /**
   * Constructs a no op call for the reMintDelinquentCommit(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static reMintDelinquentCommit(params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reMintDelinquentCommit(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app],
    }
  }
  /**
   * Constructs a no op call for the bid(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bid(params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bid(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorAppId],
    }
  }
  /**
   * Constructs a no op call for the delegateStake(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delegateStake(params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delegateStake(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.validatorAppId],
    }
  }
  /**
   * Constructs a no op call for the snitchToBurn(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static snitchToBurn(params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'snitchToBurn(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app],
    }
  }
  /**
   * Constructs a no op call for the multiSnitchToBurn(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static multiSnitchToBurn(params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'multiSnitchToBurn(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.apps],
    }
  }
  /**
   * Constructs a no op call for the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static snitchCheck(params: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appToCheck, params.args.params],
    }
  }
  /**
   * Constructs a no op call for the reStakeFromSnitch(uint64,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static reStakeFromSnitch(params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reStakeFromSnitch(uint64,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.snitchedApp, params.args.receiverApp, params.args.restakeTxn],
    }
  }
  /**
   * Constructs a no op call for the declareRewards(pay,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static declareRewards(params: CallParams<CaelusAdminArgs['obj']['declareRewards(pay,uint64)void'] | CaelusAdminArgs['tuple']['declareRewards(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'declareRewards(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txn, params.args.ifValidator],
    }
  }
  /**
   * Constructs a no op call for the onOperatorExit(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static onOperatorExit(params: CallParams<CaelusAdminArgs['obj']['onOperatorExit(uint64,pay)void'] | CaelusAdminArgs['tuple']['onOperatorExit(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'onOperatorExit(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appToClose, params.args.closeTxn],
    }
  }
  /**
   * Constructs a no op call for the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static makeFlashLoanRequest(params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'makeFlashLoanRequest(pay,uint64[],uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payFeeTxn, params.args.amounts, params.args.appToInclude],
    }
  }
  /**
   * Constructs a no op call for the getFLcounter()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getFLcounter(params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getFLcounter()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc62_get_circulating_supply(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc62GetCirculatingSupply(params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc62_get_circulating_supply(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CaelusAdmin smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CaelusAdminFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CaelusAdminFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CaelusAdminClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CaelusAdminClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CaelusAdmin smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CaelusAdminDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CaelusAdminParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CaelusAdminCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CaelusAdminClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
      /**
       * Creates a new instance of the CaelusAdmin smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CaelusAdminParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
      /**
       * Creates a new instance of the CaelusAdmin smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CaelusAdminParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new CaelusAdminClient(result.appClient) }
      },
      /**
       * Creates a new instance of the CaelusAdmin smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CaelusAdminParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CaelusAdminReturns['createApplication()void']) }, appClient: new CaelusAdminClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CaelusAdmin smart contract
 */
export class CaelusAdminClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CaelusAdminClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CaelusAdmin app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CaelusAdminClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CaelusAdminNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CaelusAdminClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CaelusAdminClient> {
    return new CaelusAdminClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CaelusAdminClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CaelusAdminClient> {
    return new CaelusAdminClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_config(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerConfig: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_config(address,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_config(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerConfig(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdatePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerWritePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `addValidator(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addValidator: (params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.addValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delayedMintRequest(pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delayedMintRequest: (params: CallParams<CaelusAdminArgs['obj']['delayedMintRequest(pay,pay)void'] | CaelusAdminArgs['tuple']['delayedMintRequest(pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.delayedMintRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `claimMint()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimMint: (params: CallParams<CaelusAdminArgs['obj']['claimMint()void'] | CaelusAdminArgs['tuple']['claimMint()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.claimMint(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getPremiumAmount(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPremiumAmount: (params: CallParams<CaelusAdminArgs['obj']['getPremiumAmount(uint64)uint64'] | CaelusAdminArgs['tuple']['getPremiumAmount(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.getPremiumAmount(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `instantMintRequest(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    instantMintRequest: (params: CallParams<CaelusAdminArgs['obj']['instantMintRequest(pay)void'] | CaelusAdminArgs['tuple']['instantMintRequest(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.instantMintRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnRequest(axfer,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnRequest: (params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.burnRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintValidatorCommit(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.mintValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnValidatorCommit(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,axfer)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.burnValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnToDelinquentValidator(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnToDelinquentValidator: (params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.burnToDelinquentValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reMintDelinquentCommit(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    reMintDelinquentCommit: (params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.reMintDelinquentCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `bid(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bid: (params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.bid(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delegateStake(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delegateStake: (params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.delegateStake(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchToBurn(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    snitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.snitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `multiSnitchToBurn(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    multiSnitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.multiSnitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    snitchCheck: (params: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.snitchCheck(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reStakeFromSnitch(uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    reStakeFromSnitch: (params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.reStakeFromSnitch(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `declareRewards(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    declareRewards: (params: CallParams<CaelusAdminArgs['obj']['declareRewards(pay,uint64)void'] | CaelusAdminArgs['tuple']['declareRewards(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.declareRewards(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `onOperatorExit(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    onOperatorExit: (params: CallParams<CaelusAdminArgs['obj']['onOperatorExit(uint64,pay)void'] | CaelusAdminArgs['tuple']['onOperatorExit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.onOperatorExit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `makeFlashLoanRequest(pay,uint64[],uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    makeFlashLoanRequest: (params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.makeFlashLoanRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getFLcounter()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getFLcounter: (params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.getFLcounter(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc62GetCirculatingSupply: (params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.arc62GetCirculatingSupply(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_config(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerConfig: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_config(address,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_config(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerConfig(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdatePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerWritePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `addValidator(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addValidator: (params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.addValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delayedMintRequest(pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delayedMintRequest: (params: CallParams<CaelusAdminArgs['obj']['delayedMintRequest(pay,pay)void'] | CaelusAdminArgs['tuple']['delayedMintRequest(pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.delayedMintRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `claimMint()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimMint: (params: CallParams<CaelusAdminArgs['obj']['claimMint()void'] | CaelusAdminArgs['tuple']['claimMint()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.claimMint(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getPremiumAmount(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPremiumAmount: (params: CallParams<CaelusAdminArgs['obj']['getPremiumAmount(uint64)uint64'] | CaelusAdminArgs['tuple']['getPremiumAmount(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.getPremiumAmount(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `instantMintRequest(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    instantMintRequest: (params: CallParams<CaelusAdminArgs['obj']['instantMintRequest(pay)void'] | CaelusAdminArgs['tuple']['instantMintRequest(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.instantMintRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnRequest(axfer,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnRequest: (params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.burnRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintValidatorCommit(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.mintValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnValidatorCommit(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,axfer)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.burnValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnToDelinquentValidator(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnToDelinquentValidator: (params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.burnToDelinquentValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reMintDelinquentCommit(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    reMintDelinquentCommit: (params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.reMintDelinquentCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `bid(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bid: (params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.bid(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delegateStake(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delegateStake: (params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.delegateStake(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchToBurn(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    snitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.snitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `multiSnitchToBurn(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    multiSnitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.multiSnitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    snitchCheck: (params: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.snitchCheck(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reStakeFromSnitch(uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    reStakeFromSnitch: (params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.reStakeFromSnitch(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `declareRewards(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    declareRewards: (params: CallParams<CaelusAdminArgs['obj']['declareRewards(pay,uint64)void'] | CaelusAdminArgs['tuple']['declareRewards(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.declareRewards(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `onOperatorExit(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    onOperatorExit: (params: CallParams<CaelusAdminArgs['obj']['onOperatorExit(uint64,pay)void'] | CaelusAdminArgs['tuple']['onOperatorExit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.onOperatorExit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `makeFlashLoanRequest(pay,uint64[],uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    makeFlashLoanRequest: (params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.makeFlashLoanRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getFLcounter()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getFLcounter: (params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.getFLcounter(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc62GetCirculatingSupply: (params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.arc62GetCirculatingSupply(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_config(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerConfig: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_config(address,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_config(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerConfig(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_config(address,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdatePoolContractProgram: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerUpdatePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_updatePoolContractProgram(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerWritePoolContractProgram: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerWritePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `addValidator(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addValidator: async (params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.addValidator(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['addValidator(pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delayedMintRequest(pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delayedMintRequest: async (params: CallParams<CaelusAdminArgs['obj']['delayedMintRequest(pay,pay)void'] | CaelusAdminArgs['tuple']['delayedMintRequest(pay,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.delayedMintRequest(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['delayedMintRequest(pay,pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `claimMint()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimMint: async (params: CallParams<CaelusAdminArgs['obj']['claimMint()void'] | CaelusAdminArgs['tuple']['claimMint()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.claimMint(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['claimMint()void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getPremiumAmount(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPremiumAmount: async (params: CallParams<CaelusAdminArgs['obj']['getPremiumAmount(uint64)uint64'] | CaelusAdminArgs['tuple']['getPremiumAmount(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.getPremiumAmount(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['getPremiumAmount(uint64)uint64'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `instantMintRequest(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    instantMintRequest: async (params: CallParams<CaelusAdminArgs['obj']['instantMintRequest(pay)void'] | CaelusAdminArgs['tuple']['instantMintRequest(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.instantMintRequest(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['instantMintRequest(pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnRequest(axfer,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnRequest: async (params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.burnRequest(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['burnRequest(axfer,address)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintValidatorCommit(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintValidatorCommit: async (params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.mintValidatorCommit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['mintValidatorCommit(uint64,pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnValidatorCommit(uint64,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnValidatorCommit: async (params: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,axfer)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.burnValidatorCommit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['burnValidatorCommit(uint64,axfer)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnToDelinquentValidator(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnToDelinquentValidator: async (params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.burnToDelinquentValidator(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['burnToDelinquentValidator(axfer,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reMintDelinquentCommit(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    reMintDelinquentCommit: async (params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.reMintDelinquentCommit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['reMintDelinquentCommit(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `bid(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bid: async (params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.bid(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['bid(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delegateStake(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delegateStake: async (params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.delegateStake(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['delegateStake(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchToBurn(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    snitchToBurn: async (params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.snitchToBurn(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['snitchToBurn(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `multiSnitchToBurn(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    multiSnitchToBurn: async (params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.multiSnitchToBurn(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['multiSnitchToBurn(uint64[])void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    snitchCheck: async (params: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.snitchCheck(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reStakeFromSnitch(uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    reStakeFromSnitch: async (params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.reStakeFromSnitch(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['reStakeFromSnitch(uint64,uint64,pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `declareRewards(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    declareRewards: async (params: CallParams<CaelusAdminArgs['obj']['declareRewards(pay,uint64)void'] | CaelusAdminArgs['tuple']['declareRewards(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.declareRewards(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['declareRewards(pay,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `onOperatorExit(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    onOperatorExit: async (params: CallParams<CaelusAdminArgs['obj']['onOperatorExit(uint64,pay)void'] | CaelusAdminArgs['tuple']['onOperatorExit(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.onOperatorExit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['onOperatorExit(uint64,pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `makeFlashLoanRequest(pay,uint64[],uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    makeFlashLoanRequest: async (params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.makeFlashLoanRequest(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['makeFlashLoanRequest(pay,uint64[],uint64[])void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getFLcounter()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getFLcounter: async (params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.getFLcounter(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['getFLcounter()uint64'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc62GetCirculatingSupply: async (params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.arc62GetCirculatingSupply(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['arc62_get_circulating_supply(uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CaelusAdminClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CaelusAdmin app
   */
  state = {
    /**
     * Methods to access global state for the current CaelusAdmin app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: new BinaryStateValue(result.manager),
          validatorPoolContractVersion: result.validatorPoolContractVersion,
          validatorPoolContractCost: result.validatorPoolContractCost,
          totalStake: result.totalStake,
          idleStake: result.idleStake,
          pegRatio: result.pegRatio,
          tokenId: result.tokenId,
          tokenCirculatingSupply: result.tokenCirculatingSupply,
          highestBidder: result.highestBidder,
          burnQueue: new BinaryStateValue(result.burnQueue),
          burnTarget: result.burnTarget,
          lastExhaustBlock: result.lastExhaustBlock,
          lastFlashloanBlock: result.lastFlashloanBlock,
          flashLoanCounter: result.flashLoanCounter,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("manager")) as Uint8Array | undefined) },
      /**
       * Get the current value of the validatorPoolContractVersion key in global state
       */
      validatorPoolContractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("validatorPoolContractVersion")) as bigint | undefined },
      /**
       * Get the current value of the validatorPoolContractCost key in global state
       */
      validatorPoolContractCost: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("validatorPoolContractCost")) as bigint | undefined },
      /**
       * Get the current value of the totalStake key in global state
       */
      totalStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalStake")) as bigint | undefined },
      /**
       * Get the current value of the idleStake key in global state
       */
      idleStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("idleStake")) as bigint | undefined },
      /**
       * Get the current value of the pegRatio key in global state
       */
      pegRatio: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("pegRatio")) as bigint | undefined },
      /**
       * Get the current value of the tokenId key in global state
       */
      tokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tokenId")) as bigint | undefined },
      /**
       * Get the current value of the tokenCirculatingSupply key in global state
       */
      tokenCirculatingSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tokenCirculatingSupply")) as bigint | undefined },
      /**
       * Get the current value of the highestBidder key in global state
       */
      highestBidder: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("highestBidder")) as bigint | undefined },
      /**
       * Get the current value of the burnQueue key in global state
       */
      burnQueue: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("burnQueue")) as Uint8Array | undefined) },
      /**
       * Get the current value of the burnTarget key in global state
       */
      burnTarget: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("burnTarget")) as bigint | undefined },
      /**
       * Get the current value of the lastExhaustBlock key in global state
       */
      lastExhaustBlock: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastExhaustBlock")) as bigint | undefined },
      /**
       * Get the current value of the lastFlashloanBlock key in global state
       */
      lastFlashloanBlock: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastFlashloanBlock")) as bigint | undefined },
      /**
       * Get the current value of the flashLoanCounter key in global state
       */
      flashLoanCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("flashLoanCounter")) as bigint | undefined },
    },
  }

  public newGroup(): CaelusAdminComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a MANAGER_config(address,uint64)void method call against the CaelusAdmin contract
       */
      managerConfig(params: CallParams<CaelusAdminArgs['obj']['MANAGER_config(address,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_config(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerConfig(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updatePoolContractProgram(uint64)void method call against the CaelusAdmin contract
       */
      managerUpdatePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdatePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_writePoolContractProgram(uint64,byte[])void method call against the CaelusAdmin contract
       */
      managerWritePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerWritePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addValidator(pay)void method call against the CaelusAdmin contract
       */
      addValidator(params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addValidator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delayedMintRequest(pay,pay)void method call against the CaelusAdmin contract
       */
      delayedMintRequest(params: CallParams<CaelusAdminArgs['obj']['delayedMintRequest(pay,pay)void'] | CaelusAdminArgs['tuple']['delayedMintRequest(pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delayedMintRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimMint()void method call against the CaelusAdmin contract
       */
      claimMint(params: CallParams<CaelusAdminArgs['obj']['claimMint()void'] | CaelusAdminArgs['tuple']['claimMint()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimMint(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPremiumAmount(uint64)uint64 method call against the CaelusAdmin contract
       */
      getPremiumAmount(params: CallParams<CaelusAdminArgs['obj']['getPremiumAmount(uint64)uint64'] | CaelusAdminArgs['tuple']['getPremiumAmount(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPremiumAmount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPremiumAmount(uint64)uint64', v))
        return this
      },
      /**
       * Add a instantMintRequest(pay)void method call against the CaelusAdmin contract
       */
      instantMintRequest(params: CallParams<CaelusAdminArgs['obj']['instantMintRequest(pay)void'] | CaelusAdminArgs['tuple']['instantMintRequest(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.instantMintRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnRequest(axfer,address)void method call against the CaelusAdmin contract
       */
      burnRequest(params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a mintValidatorCommit(uint64,pay)void method call against the CaelusAdmin contract
       */
      mintValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintValidatorCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnValidatorCommit(uint64,axfer)void method call against the CaelusAdmin contract
       */
      burnValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,axfer)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnValidatorCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnToDelinquentValidator(axfer,uint64)void method call against the CaelusAdmin contract
       */
      burnToDelinquentValidator(params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnToDelinquentValidator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reMintDelinquentCommit(uint64)void method call against the CaelusAdmin contract
       */
      reMintDelinquentCommit(params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.reMintDelinquentCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a bid(uint64)void method call against the CaelusAdmin contract
       */
      bid(params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bid(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delegateStake(uint64,uint64)void method call against the CaelusAdmin contract
       */
      delegateStake(params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delegateStake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a snitchToBurn(uint64)void method call against the CaelusAdmin contract
       */
      snitchToBurn(params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.snitchToBurn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a multiSnitchToBurn(uint64[])void method call against the CaelusAdmin contract
       */
      multiSnitchToBurn(params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.multiSnitchToBurn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool method call against the CaelusAdmin contract
       */
      snitchCheck(params: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.snitchCheck(params)))
        resultMappers.push((v) => client.decodeReturnValue('snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool', v))
        return this
      },
      /**
       * Add a reStakeFromSnitch(uint64,uint64,pay)void method call against the CaelusAdmin contract
       */
      reStakeFromSnitch(params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.reStakeFromSnitch(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a declareRewards(pay,uint64)void method call against the CaelusAdmin contract
       */
      declareRewards(params: CallParams<CaelusAdminArgs['obj']['declareRewards(pay,uint64)void'] | CaelusAdminArgs['tuple']['declareRewards(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.declareRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a onOperatorExit(uint64,pay)void method call against the CaelusAdmin contract
       */
      onOperatorExit(params: CallParams<CaelusAdminArgs['obj']['onOperatorExit(uint64,pay)void'] | CaelusAdminArgs['tuple']['onOperatorExit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.onOperatorExit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a makeFlashLoanRequest(pay,uint64[],uint64[])void method call against the CaelusAdmin contract
       */
      makeFlashLoanRequest(params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.makeFlashLoanRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getFLcounter()uint64 method call against the CaelusAdmin contract
       */
      getFLcounter(params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getFLcounter(params)))
        resultMappers.push((v) => client.decodeReturnValue('getFLcounter()uint64', v))
        return this
      },
      /**
       * Add a arc62_get_circulating_supply(uint64)uint64 method call against the CaelusAdmin contract
       */
      arc62GetCirculatingSupply(params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc62GetCirculatingSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc62_get_circulating_supply(uint64)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the CaelusAdmin contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CaelusAdminComposer
  }
}
export type CaelusAdminComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the MANAGER_config(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerConfig(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_config(address,uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_config(address,uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_config(address,uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_updatePoolContractProgram(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdatePoolContractProgram(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_updatePoolContractProgram(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerWritePoolContractProgram(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'] | undefined]>

  /**
   * Calls the addValidator(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addValidator(params?: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['addValidator(pay)void'] | undefined]>

  /**
   * Calls the delayedMintRequest(pay,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delayedMintRequest(params?: CallParams<CaelusAdminArgs['obj']['delayedMintRequest(pay,pay)void'] | CaelusAdminArgs['tuple']['delayedMintRequest(pay,pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['delayedMintRequest(pay,pay)void'] | undefined]>

  /**
   * Calls the claimMint()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimMint(params?: CallParams<CaelusAdminArgs['obj']['claimMint()void'] | CaelusAdminArgs['tuple']['claimMint()void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['claimMint()void'] | undefined]>

  /**
   * Calls the getPremiumAmount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPremiumAmount(params?: CallParams<CaelusAdminArgs['obj']['getPremiumAmount(uint64)uint64'] | CaelusAdminArgs['tuple']['getPremiumAmount(uint64)uint64']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['getPremiumAmount(uint64)uint64'] | undefined]>

  /**
   * Calls the instantMintRequest(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  instantMintRequest(params?: CallParams<CaelusAdminArgs['obj']['instantMintRequest(pay)void'] | CaelusAdminArgs['tuple']['instantMintRequest(pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['instantMintRequest(pay)void'] | undefined]>

  /**
   * Calls the burnRequest(axfer,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnRequest(params?: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['burnRequest(axfer,address)void'] | undefined]>

  /**
   * Calls the mintValidatorCommit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintValidatorCommit(params?: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['mintValidatorCommit(uint64,pay)void'] | undefined]>

  /**
   * Calls the burnValidatorCommit(uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnValidatorCommit(params?: CallParams<CaelusAdminArgs['obj']['burnValidatorCommit(uint64,axfer)void'] | CaelusAdminArgs['tuple']['burnValidatorCommit(uint64,axfer)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['burnValidatorCommit(uint64,axfer)void'] | undefined]>

  /**
   * Calls the burnToDelinquentValidator(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnToDelinquentValidator(params?: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['burnToDelinquentValidator(axfer,uint64)void'] | undefined]>

  /**
   * Calls the reMintDelinquentCommit(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reMintDelinquentCommit(params?: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['reMintDelinquentCommit(uint64)void'] | undefined]>

  /**
   * Calls the bid(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bid(params?: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['bid(uint64)void'] | undefined]>

  /**
   * Calls the delegateStake(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delegateStake(params?: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['delegateStake(uint64,uint64)void'] | undefined]>

  /**
   * Calls the snitchToBurn(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchToBurn(params?: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['snitchToBurn(uint64)void'] | undefined]>

  /**
   * Calls the multiSnitchToBurn(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  multiSnitchToBurn(params?: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['multiSnitchToBurn(uint64[])void'] | undefined]>

  /**
   * Calls the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchCheck(params?: CallParams<CaelusAdminArgs['obj']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | CaelusAdminArgs['tuple']['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'] | undefined]>

  /**
   * Calls the reStakeFromSnitch(uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reStakeFromSnitch(params?: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['reStakeFromSnitch(uint64,uint64,pay)void'] | undefined]>

  /**
   * Calls the declareRewards(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  declareRewards(params?: CallParams<CaelusAdminArgs['obj']['declareRewards(pay,uint64)void'] | CaelusAdminArgs['tuple']['declareRewards(pay,uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['declareRewards(pay,uint64)void'] | undefined]>

  /**
   * Calls the onOperatorExit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  onOperatorExit(params?: CallParams<CaelusAdminArgs['obj']['onOperatorExit(uint64,pay)void'] | CaelusAdminArgs['tuple']['onOperatorExit(uint64,pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['onOperatorExit(uint64,pay)void'] | undefined]>

  /**
   * Calls the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeFlashLoanRequest(params?: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | undefined]>

  /**
   * Calls the getFLcounter()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFLcounter(params?: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['getFLcounter()uint64'] | undefined]>

  /**
   * Calls the arc62_get_circulating_supply(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc62GetCirculatingSupply(params?: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['arc62_get_circulating_supply(uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CaelusAdminComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CaelusAdminComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CaelusAdminComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CaelusAdminComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CaelusAdminComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CaelusAdminComposerResults<TReturns>>
}
export type CaelusAdminComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

