/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "initLST()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateLSTRatio()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintRequest()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnRequest()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintValidatorCommit(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnValidatorCommit()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnToDelinquentValidator()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reMintDeliquentCommit()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delegateStake(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitch()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reStakeFromSnitch(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "onOperatorExit(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "declareRewards(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeFlashLoanRequest(pay,uint64[],uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getFLcounter()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "creatorChangeCreatorRelatedParams()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "pegRatio": {
          "type": "uint64",
          "key": "peg"
        },
        "epochLen": {
          "type": "uint64",
          "key": "epochlen"
        },
        "initializedPoolContract": {
          "type": "bytes",
          "key": "initPoolContract"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "validatorPoolVersion"
        },
        "totalAlgoStaked": {
          "type": "uint64",
          "key": "totalstake"
        },
        "validatorPoolContractApprovalProgram": {
          "type": "bytes",
          "key": "validatorApprovalProgram"
        },
        "init_vALGO": {
          "type": "bytes",
          "key": "init_vALGO"
        },
        "vALGOid": {
          "type": "uint64",
          "key": "vALGOid"
        },
        "highestBidder": {
          "type": "uint64",
          "key": "highestBidder"
        },
        "idleAlgoToStake": {
          "type": "uint64",
          "key": "idleAlgo"
        },
        "vestigeAddress": {
          "type": "bytes",
          "key": "vestigeAddress"
        },
        "flashLoanCounter": {
          "type": "uint64",
          "key": "flashLoanCounter"
        },
        "lastFlashloanBlock": {
          "type": "uint64",
          "key": "lastFlashloanBlock"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 9
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusAdmin",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initLST",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "calculateLSTRatio",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mintRequest",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnRequest",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mintValidatorCommit",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          },
          {
            "name": "stakeCommit",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnValidatorCommit",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnToDelinquentValidator",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reMintDeliquentCommit",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "delegateStake",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitch",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reStakeFromSnitch",
        "args": [
          {
            "name": "snitchedApp",
            "type": "uint64"
          },
          {
            "name": "receiverApp",
            "type": "uint64"
          },
          {
            "name": "restakeTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "onOperatorExit",
        "args": [
          {
            "name": "appToClose",
            "type": "uint64"
          },
          {
            "name": "closeTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "declareRewards",
        "args": [
          {
            "name": "txn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchCheck",
        "args": [
          {
            "name": "appToCheck",
            "type": "uint64"
          },
          {
            "name": "params",
            "type": "(bool,bool,bool,uint64,bool,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "makeFlashLoanRequest",
        "args": [
          {
            "name": "payFeeTxn",
            "type": "pay"
          },
          {
            "name": "amounts",
            "type": "uint64[]"
          },
          {
            "name": "appToInclude",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getFLcounter",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "creatorChangeCreatorRelatedParams",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the CaelusAdmin smart contract.
 */
export type CaelusAdmin = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'initLST()void' | 'initLST', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'calculateLSTRatio()void' | 'calculateLSTRatio', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'mintRequest()void' | 'mintRequest', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'burnRequest()void' | 'burnRequest', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'mintValidatorCommit(uint64,pay)void' | 'mintValidatorCommit', {
      argsObj: {
        validatorAppID: bigint | number
        stakeCommit: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [validatorAppID: bigint | number, stakeCommit: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'burnValidatorCommit()void' | 'burnValidatorCommit', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'burnToDelinquentValidator()void' | 'burnToDelinquentValidator', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'reMintDeliquentCommit()void' | 'reMintDeliquentCommit', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'delegateStake(uint64,uint64)void' | 'delegateStake', {
      argsObj: {
        amount: bigint | number
        validatorAppID: bigint | number
      }
      argsTuple: [amount: bigint | number, validatorAppID: bigint | number]
      returns: void
    }>
    & Record<'snitch()void' | 'snitch', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'reStakeFromSnitch(uint64,uint64,pay)void' | 'reStakeFromSnitch', {
      argsObj: {
        snitchedApp: bigint | number
        receiverApp: bigint | number
        restakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [snitchedApp: bigint | number, receiverApp: bigint | number, restakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'onOperatorExit(uint64,pay)void' | 'onOperatorExit', {
      argsObj: {
        appToClose: bigint | number
        closeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [appToClose: bigint | number, closeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'declareRewards(pay)void' | 'declareRewards', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool' | 'snitchCheck', {
      argsObj: {
        appToCheck: bigint | number
        params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]
      }
      argsTuple: [appToCheck: bigint | number, params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]]
      returns: boolean
    }>
    & Record<'makeFlashLoanRequest(pay,uint64[],uint64[])void' | 'makeFlashLoanRequest', {
      argsObj: {
        payFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        amounts: bigint | number[]
        appToInclude: bigint | number[]
      }
      argsTuple: [payFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, amounts: bigint | number[], appToInclude: bigint | number[]]
      returns: void
    }>
    & Record<'getFLcounter()uint64' | 'getFLcounter', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'creatorChangeCreatorRelatedParams()void' | 'creatorChangeCreatorRelatedParams', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'peg'?: IntegerState
      'epochlen'?: IntegerState
      'initPoolContract'?: BinaryState
      'validatorPoolVersion'?: IntegerState
      'totalstake'?: IntegerState
      'validatorApprovalProgram'?: BinaryState
      'init_vALGO'?: BinaryState
      'vALGOid'?: IntegerState
      'highestBidder'?: IntegerState
      'idleAlgo'?: IntegerState
      'vestigeAddress'?: BinaryState
      'flashLoanCounter'?: IntegerState
      'lastFlashloanBlock'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CaelusAdminSig = keyof CaelusAdmin['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CaelusAdminSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CaelusAdminSig> = CaelusAdmin['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CaelusAdminSig> = CaelusAdmin['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CaelusAdminCreateCalls = (typeof CaelusAdminCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CaelusAdminCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CaelusAdminDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CaelusAdminCreateCalls) => CaelusAdminCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CaelusAdminCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CaelusAdmin smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initLST()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initLst(args: MethodArgs<'initLST()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initLST()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateLSTRatio()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateLSTRatio()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mintRequest()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintRequest(args: MethodArgs<'mintRequest()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mintRequest()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burnRequest()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnRequest(args: MethodArgs<'burnRequest()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burnRequest()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mintValidatorCommit(uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mintValidatorCommit(uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorAppID, args.stakeCommit],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burnValidatorCommit()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnValidatorCommit(args: MethodArgs<'burnValidatorCommit()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burnValidatorCommit()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burnToDelinquentValidator()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burnToDelinquentValidator()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reMintDeliquentCommit()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reMintDeliquentCommit()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delegateStake(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delegateStake(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.validatorAppID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the snitch()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static snitch(args: MethodArgs<'snitch()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'snitch()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reStakeFromSnitch(uint64,uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reStakeFromSnitch(uint64,uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.snitchedApp, args.receiverApp, args.restakeTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the onOperatorExit(uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'onOperatorExit(uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.appToClose, args.closeTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the declareRewards(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static declareRewards(args: MethodArgs<'declareRewards(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'declareRewards(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.appToCheck, args.params],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'makeFlashLoanRequest(pay,uint64[],uint64[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payFeeTxn, args.amounts, args.appToInclude],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getFLcounter()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getFLcounter()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the creatorChangeCreatorRelatedParams()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'creatorChangeCreatorRelatedParams()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CaelusAdmin smart contract
 */
export class CaelusAdminClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CaelusAdminClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CaelusAdmin['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CaelusAdmin smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CaelusAdminDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CaelusAdminCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(CaelusAdminCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the initLST()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initLst(args: MethodArgs<'initLST()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.initLst(args, params))
  }

  /**
   * Calls the calculateLSTRatio()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.calculateLstRatio(args, params))
  }

  /**
   * Calls the mintRequest()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintRequest(args: MethodArgs<'mintRequest()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.mintRequest(args, params))
  }

  /**
   * Calls the burnRequest()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnRequest(args: MethodArgs<'burnRequest()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.burnRequest(args, params))
  }

  /**
   * Calls the mintValidatorCommit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.mintValidatorCommit(args, params))
  }

  /**
   * Calls the burnValidatorCommit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnValidatorCommit(args: MethodArgs<'burnValidatorCommit()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.burnValidatorCommit(args, params))
  }

  /**
   * Calls the burnToDelinquentValidator()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.burnToDelinquentValidator(args, params))
  }

  /**
   * Calls the reMintDeliquentCommit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.reMintDeliquentCommit(args, params))
  }

  /**
   * Calls the delegateStake(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.delegateStake(args, params))
  }

  /**
   * Calls the snitch()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public snitch(args: MethodArgs<'snitch()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.snitch(args, params))
  }

  /**
   * Calls the reStakeFromSnitch(uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.reStakeFromSnitch(args, params))
  }

  /**
   * Calls the onOperatorExit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.onOperatorExit(args, params))
  }

  /**
   * Calls the declareRewards(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public declareRewards(args: MethodArgs<'declareRewards(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.declareRewards(args, params))
  }

  /**
   * Calls the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.snitchCheck(args, params))
  }

  /**
   * Calls the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.makeFlashLoanRequest(args, params))
  }

  /**
   * Calls the getFLcounter()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.getFLcounter(args, params))
  }

  /**
   * Calls the creatorChangeCreatorRelatedParams()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.creatorChangeCreatorRelatedParams(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CaelusAdmin['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get peg() {
        return CaelusAdminClient.getIntegerState(state, 'peg')
      },
      get epochlen() {
        return CaelusAdminClient.getIntegerState(state, 'epochlen')
      },
      get initPoolContract() {
        return CaelusAdminClient.getBinaryState(state, 'initPoolContract')
      },
      get validatorPoolVersion() {
        return CaelusAdminClient.getIntegerState(state, 'validatorPoolVersion')
      },
      get totalstake() {
        return CaelusAdminClient.getIntegerState(state, 'totalstake')
      },
      get validatorApprovalProgram() {
        return CaelusAdminClient.getBinaryState(state, 'validatorApprovalProgram')
      },
      get init_vALGO() {
        return CaelusAdminClient.getBinaryState(state, 'init_vALGO')
      },
      get vALGOid() {
        return CaelusAdminClient.getIntegerState(state, 'vALGOid')
      },
      get highestBidder() {
        return CaelusAdminClient.getIntegerState(state, 'highestBidder')
      },
      get idleAlgo() {
        return CaelusAdminClient.getIntegerState(state, 'idleAlgo')
      },
      get vestigeAddress() {
        return CaelusAdminClient.getBinaryState(state, 'vestigeAddress')
      },
      get flashLoanCounter() {
        return CaelusAdminClient.getIntegerState(state, 'flashLoanCounter')
      },
      get lastFlashloanBlock() {
        return CaelusAdminClient.getIntegerState(state, 'lastFlashloanBlock')
      },
    }
  }

  public compose(): CaelusAdminComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      initLst(args: MethodArgs<'initLST()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initLst(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateLstRatio(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mintRequest(args: MethodArgs<'mintRequest()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnRequest(args: MethodArgs<'burnRequest()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintValidatorCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnValidatorCommit(args: MethodArgs<'burnValidatorCommit()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnValidatorCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnToDelinquentValidator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reMintDeliquentCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.delegateStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      snitch(args: MethodArgs<'snitch()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.snitch(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reStakeFromSnitch(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.onOperatorExit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      declareRewards(args: MethodArgs<'declareRewards(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.declareRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.snitchCheck(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.makeFlashLoanRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getFLcounter(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.creatorChangeCreatorRelatedParams(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CaelusAdminComposer
  }
}
export type CaelusAdminComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initLST()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initLst(args: MethodArgs<'initLST()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'initLST()void'>]>

  /**
   * Calls the calculateLSTRatio()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'calculateLSTRatio()void'>]>

  /**
   * Calls the mintRequest()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintRequest(args: MethodArgs<'mintRequest()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'mintRequest()void'>]>

  /**
   * Calls the burnRequest()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnRequest(args: MethodArgs<'burnRequest()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'burnRequest()void'>]>

  /**
   * Calls the mintValidatorCommit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'mintValidatorCommit(uint64,pay)void'>]>

  /**
   * Calls the burnValidatorCommit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnValidatorCommit(args: MethodArgs<'burnValidatorCommit()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'burnValidatorCommit()void'>]>

  /**
   * Calls the burnToDelinquentValidator()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'burnToDelinquentValidator()void'>]>

  /**
   * Calls the reMintDeliquentCommit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'reMintDeliquentCommit()void'>]>

  /**
   * Calls the delegateStake(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'delegateStake(uint64,uint64)void'>]>

  /**
   * Calls the snitch()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitch(args: MethodArgs<'snitch()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'snitch()void'>]>

  /**
   * Calls the reStakeFromSnitch(uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'reStakeFromSnitch(uint64,uint64,pay)void'>]>

  /**
   * Calls the onOperatorExit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'onOperatorExit(uint64,pay)void'>]>

  /**
   * Calls the declareRewards(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  declareRewards(args: MethodArgs<'declareRewards(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'declareRewards(pay)void'>]>

  /**
   * Calls the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>]>

  /**
   * Calls the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>]>

  /**
   * Calls the getFLcounter()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'getFLcounter()uint64'>]>

  /**
   * Calls the creatorChangeCreatorRelatedParams()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'creatorChangeCreatorRelatedParams()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CaelusAdminComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CaelusAdminComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CaelusAdminComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CaelusAdminComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CaelusAdminComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
