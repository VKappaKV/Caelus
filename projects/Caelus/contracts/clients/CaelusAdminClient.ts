/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"CaelusAdmin","desc":"","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","desc":"Temporary method to update the application. This method will be removed in the future.\nHere to improve open beta testing iterations. Planned to be removed on mainnet launch.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"MANAGER_createToken","desc":"MANAGER METHODS","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updateBoostTokenID","args":[{"name":"boostTokenID","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_changeBoostTier","args":[{"name":"amounts","type":"uint64[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"getBoostTier","desc":"The getBoostTier method is needed to be kept public so that on state update Validator Pool can fetch their current tier.","args":[{"name":"amount","type":"uint64","desc":"The amount of the boost token to calculate the boost tier for"}],"returns":{"type":"uint64","desc":"uint64 - The boost tier for the given amount"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_changeManager","args":[{"name":"manager","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_changeProtocolFee","args":[{"name":"amount","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_lockContract","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updatePoolContractCost","args":[{"name":"validatorPoolContractCost","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_updatePoolContractProgram","args":[{"name":"programSize","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"MANAGER_writePoolContractProgram","args":[{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"addValidator","desc":"ARC4 PUBLIC METHODS","args":[{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"mintRequest","desc":"On Mint the Algo deposited by the user are kept in the Admin Contract Account balance waiting for the highest bidder to claim them.","args":[{"name":"mintTxn","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"burnRequest","desc":"On Burn the contract gradually checks where to take Algo from, first in the idle Admin balance, then from the burn queue.\nIn case the amount of Algo exceeds the current queue max amount the remaining vAlgo are sent back to the user.\nThis situation triggers the exhaust flag, that will prevent the contract from burning Algo for the next 5 blocks.\nThe Cooldown period is necessary to ensure that the queue is filled with the Validators more fit for the burn.\nThis to disallow possible spam looping of burning to target from specific pools.","args":[{"name":"burnTxn","type":"axfer"},{"name":"burnTo","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"mintValidatorCommit","desc":"Specific method to mint the LST for the Validator Pool Contract.\nThe mint is done by the Admin Contract and the LST is sent to the Validator Pool Contract.","args":[{"name":"validatorAppID","type":"uint64"},{"name":"stakeCommit","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"removeValidatorCommit","desc":"Specific method to remove from the operator commit in the Validator Pool Contract.\n\n\nThe Validator Pool Contract will send the vAlgo to the operator address.","args":[{"name":"appToBurnFrom","type":"uint64"},{"name":"amount","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"burnToDelinquentValidator","desc":"FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT EITHER ON DELINQUENCY OR ON SNITCH\n\n\nOn Delinquency Validators SHOULD not have vAlgo in their balance.\nIt's first called when deliquency is set, can be called again if the entire vAlgo amount is not burned.\nThe vAlgo will be turned to Algo and added to the operator commit","args":[{"name":"burnTxn","type":"axfer"},{"name":"validatorAppID","type":"uint64"},{"name":"amountOperator","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reMintDelinquentCommit","desc":"FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT WHEN DELINQUENCY IS SOLVED\n\n\nWhen Delinquency is solved the operator will mint his commit back into vAlgo.","args":[{"name":"app","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"bid","desc":"Bid Validator App, highest bidder should have the lowest saturation buffer value.","args":[{"name":"validatorAppID","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"declareRewards","desc":"The method is called by the Validator Pool Contract to declare the rewards.\n\n\nIt doesn't utilize stricter checks on call since as long as the rewardPay is sent to the Admin contract we welcome free money to the protocol :)\nThere's no other state getting changed aside from the totalStake","args":[{"name":"proposer","type":"uint64"},{"name":"block","type":"uint64"},{"name":"rewardPay","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delegateStake","args":[{"name":"amount","type":"uint64"},{"name":"validatorAppID","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"snitchToBurn","desc":"Push new Validator App to the burn queue. If the saturation buffer is higher than the current lowest in the queue, the new App will be snitched.","args":[{"name":"app","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"multiSnitchToBurn","args":[{"name":"apps","type":"uint64[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reStakeFromSnitch","desc":"Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back","args":[{"name":"snitchedApp","type":"uint64","desc":"The AppID of the validator to snitch"},{"name":"receiverApp","type":"uint64","desc":"The AppID of the receiver of the delegated Algo"},{"name":"restakeTxn","type":"pay","desc":"The PayTxn following the snitch that sends the delegated Algo to be moved back and restaked"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"makeFlashLoanRequest","desc":"Algo balances in the Validator Pool Contracts sit idle, but can be efficiently use for flashloans.\nThis creates a new route of revenue for the protocol.\nThe method checks that each flashloan call is repaid through the subsequent checkBalance method call.","args":[{"name":"payFeeTxn","type":"pay","desc":"FlashLoan fee payment; the fee is flat and grows with demand for the flashloan service"},{"name":"amounts","type":"uint64[]","desc":"The amount of Algo to take from each app, the value has to be correlated to the app in the appToInclude array at the same index"},{"name":"appToInclude","type":"uint64[]","desc":"The AppID of the Validator Pool Contracts to execute the flashloan request on"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"getFLcounter","args":[],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc62_get_circulating_supply","args":[{"name":"assetId","type":"uint64"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":13,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMString","valueType":"AVMBytes"},"validatorPoolContractVersion":{"key":"dmFsaWRhdG9yX3Bvb2xfdmVyc2lvbg==","keyType":"AVMString","valueType":"AVMUint64"},"validatorPoolContractCost":{"key":"dmFsaWRhdG9yX3Bvb2xfY29zdA==","keyType":"AVMString","valueType":"AVMUint64"},"poolContractLock":{"key":"cG9vbF9jb250cmFjdF9sb2NrX2ZsYWc=","keyType":"AVMString","valueType":"AVMUint64"},"protocolFee":{"key":"cHJvdG9jb2xfZmVl","keyType":"AVMString","valueType":"AVMUint64"},"totalStake":{"key":"dG90YWxfc3Rha2U=","keyType":"AVMString","valueType":"AVMUint64"},"pegRatio":{"key":"cGVnX3JhdGlv","keyType":"AVMString","valueType":"AVMUint64"},"tokenId":{"key":"dG9rZW5faWQ=","keyType":"AVMString","valueType":"AVMUint64"},"boostTokenID":{"key":"Ym9vc3RfdG9rZW5faWQ=","keyType":"AVMString","valueType":"AVMUint64"},"tiers":{"key":"dGllcnM=","keyType":"AVMString","valueType":"AVMBytes"},"tokenCirculatingSupply":{"key":"Y2lyY3VsYXRpbmdfc3VwcGx5","keyType":"AVMString","valueType":"AVMUint64"},"highestBidder":{"key":"aGlnaGVzdF9iaWRkZXI=","keyType":"AVMString","valueType":"AVMUint64"},"burnQueue":{"key":"YnVybl9xdWV1ZQ==","keyType":"AVMString","valueType":"AVMBytes"},"lastExhaustBlock":{"key":"bGFzdF9leGhhdXN0X2Jsb2Nr","keyType":"AVMString","valueType":"AVMUint64"},"lastFlashloanBlock":{"key":"bGFzdF9mbGFzaGxvYW5fYmxvY2s=","keyType":"AVMString","valueType":"AVMUint64"},"flashLoanCounter":{"key":"Zmxhc2hsb2FuX2NvdW50ZXI=","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CaelusAdmin contract
 */
export type CaelusAdminArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'updateApplication()void': Record<string, never>
    'MANAGER_createToken()void': Record<string, never>
    'MANAGER_updateBoostTokenID(uint64)void': {
      boostTokenId: bigint | number
    }
    'MANAGER_changeBoostTier(uint64[])void': {
      amounts: bigint[] | number[]
    }
    'getBoostTier(uint64)uint64': {
      /**
       * The amount of the boost token to calculate the boost tier for
       */
      amount: bigint | number
    }
    'MANAGER_changeManager(address)void': {
      manager: string
    }
    'MANAGER_changeProtocolFee(uint64)void': {
      amount: bigint | number
    }
    'MANAGER_lockContract()void': Record<string, never>
    'MANAGER_updatePoolContractCost(uint64)void': {
      validatorPoolContractCost: bigint | number
    }
    'MANAGER_updatePoolContractProgram(uint64)void': {
      programSize: bigint | number
    }
    'MANAGER_writePoolContractProgram(uint64,byte[])void': {
      offset: bigint | number
      data: Uint8Array
    }
    'addValidator(pay)void': {
      mbrPay: AppMethodCallTransactionArgument
    }
    'mintRequest(pay)void': {
      mintTxn: AppMethodCallTransactionArgument
    }
    'burnRequest(axfer,address)void': {
      burnTxn: AppMethodCallTransactionArgument
      burnTo: string
    }
    'mintValidatorCommit(uint64,pay)void': {
      validatorAppId: bigint | number
      stakeCommit: AppMethodCallTransactionArgument
    }
    'removeValidatorCommit(uint64,uint64)void': {
      appToBurnFrom: bigint | number
      amount: bigint | number
    }
    'burnToDelinquentValidator(axfer,uint64,uint64)void': {
      burnTxn: AppMethodCallTransactionArgument
      validatorAppId: bigint | number
      amountOperator: bigint | number
    }
    'reMintDelinquentCommit(uint64)void': {
      app: bigint | number
    }
    'bid(uint64)void': {
      validatorAppId: bigint | number
    }
    'declareRewards(uint64,uint64,pay)void': {
      proposer: bigint | number
      block: bigint | number
      rewardPay: AppMethodCallTransactionArgument
    }
    'delegateStake(uint64,uint64)void': {
      amount: bigint | number
      validatorAppId: bigint | number
    }
    'snitchToBurn(uint64)void': {
      app: bigint | number
    }
    'multiSnitchToBurn(uint64[])void': {
      apps: bigint[] | number[]
    }
    'reStakeFromSnitch(uint64,uint64,pay)void': {
      /**
       * The AppID of the validator to snitch
       */
      snitchedApp: bigint | number
      /**
       * The AppID of the receiver of the delegated Algo
       */
      receiverApp: bigint | number
      /**
       * The PayTxn following the snitch that sends the delegated Algo to be moved back and restaked
       */
      restakeTxn: AppMethodCallTransactionArgument
    }
    'makeFlashLoanRequest(pay,uint64[],uint64[])void': {
      /**
       * FlashLoan fee payment; the fee is flat and grows with demand for the flashloan service
       */
      payFeeTxn: AppMethodCallTransactionArgument
      /**
       * The amount of Algo to take from each app, the value has to be correlated to the app in the appToInclude array at the same index
       */
      amounts: bigint[] | number[]
      /**
       * The AppID of the Validator Pool Contracts to execute the flashloan request on
       */
      appToInclude: bigint[] | number[]
    }
    'getFLcounter()uint64': Record<string, never>
    'arc62_get_circulating_supply(uint64)uint64': {
      assetId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'updateApplication()void': []
    'MANAGER_createToken()void': []
    'MANAGER_updateBoostTokenID(uint64)void': [boostTokenId: bigint | number]
    'MANAGER_changeBoostTier(uint64[])void': [amounts: bigint[] | number[]]
    'getBoostTier(uint64)uint64': [amount: bigint | number]
    'MANAGER_changeManager(address)void': [manager: string]
    'MANAGER_changeProtocolFee(uint64)void': [amount: bigint | number]
    'MANAGER_lockContract()void': []
    'MANAGER_updatePoolContractCost(uint64)void': [validatorPoolContractCost: bigint | number]
    'MANAGER_updatePoolContractProgram(uint64)void': [programSize: bigint | number]
    'MANAGER_writePoolContractProgram(uint64,byte[])void': [offset: bigint | number, data: Uint8Array]
    'addValidator(pay)void': [mbrPay: AppMethodCallTransactionArgument]
    'mintRequest(pay)void': [mintTxn: AppMethodCallTransactionArgument]
    'burnRequest(axfer,address)void': [burnTxn: AppMethodCallTransactionArgument, burnTo: string]
    'mintValidatorCommit(uint64,pay)void': [validatorAppId: bigint | number, stakeCommit: AppMethodCallTransactionArgument]
    'removeValidatorCommit(uint64,uint64)void': [appToBurnFrom: bigint | number, amount: bigint | number]
    'burnToDelinquentValidator(axfer,uint64,uint64)void': [burnTxn: AppMethodCallTransactionArgument, validatorAppId: bigint | number, amountOperator: bigint | number]
    'reMintDelinquentCommit(uint64)void': [app: bigint | number]
    'bid(uint64)void': [validatorAppId: bigint | number]
    'declareRewards(uint64,uint64,pay)void': [proposer: bigint | number, block: bigint | number, rewardPay: AppMethodCallTransactionArgument]
    'delegateStake(uint64,uint64)void': [amount: bigint | number, validatorAppId: bigint | number]
    'snitchToBurn(uint64)void': [app: bigint | number]
    'multiSnitchToBurn(uint64[])void': [apps: bigint[] | number[]]
    'reStakeFromSnitch(uint64,uint64,pay)void': [snitchedApp: bigint | number, receiverApp: bigint | number, restakeTxn: AppMethodCallTransactionArgument]
    'makeFlashLoanRequest(pay,uint64[],uint64[])void': [payFeeTxn: AppMethodCallTransactionArgument, amounts: bigint[] | number[], appToInclude: bigint[] | number[]]
    'getFLcounter()uint64': []
    'arc62_get_circulating_supply(uint64)uint64': [assetId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type CaelusAdminReturns = {
  'createApplication()void': void
  'updateApplication()void': void
  'MANAGER_createToken()void': void
  'MANAGER_updateBoostTokenID(uint64)void': void
  'MANAGER_changeBoostTier(uint64[])void': void
  'getBoostTier(uint64)uint64': bigint
  'MANAGER_changeManager(address)void': void
  'MANAGER_changeProtocolFee(uint64)void': void
  'MANAGER_lockContract()void': void
  'MANAGER_updatePoolContractCost(uint64)void': void
  'MANAGER_updatePoolContractProgram(uint64)void': void
  'MANAGER_writePoolContractProgram(uint64,byte[])void': void
  'addValidator(pay)void': void
  'mintRequest(pay)void': void
  'burnRequest(axfer,address)void': void
  'mintValidatorCommit(uint64,pay)void': void
  'removeValidatorCommit(uint64,uint64)void': void
  'burnToDelinquentValidator(axfer,uint64,uint64)void': void
  'reMintDelinquentCommit(uint64)void': void
  'bid(uint64)void': void
  'declareRewards(uint64,uint64,pay)void': void
  'delegateStake(uint64,uint64)void': void
  'snitchToBurn(uint64)void': void
  'multiSnitchToBurn(uint64[])void': void
  'reStakeFromSnitch(uint64,uint64,pay)void': void
  'makeFlashLoanRequest(pay,uint64[],uint64[])void': void
  'getFLcounter()uint64': bigint
  'arc62_get_circulating_supply(uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the CaelusAdmin smart contract.
 */
export type CaelusAdminTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CaelusAdminArgs['obj']['createApplication()void']
      argsTuple: CaelusAdminArgs['tuple']['createApplication()void']
      returns: CaelusAdminReturns['createApplication()void']
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: CaelusAdminArgs['obj']['updateApplication()void']
      argsTuple: CaelusAdminArgs['tuple']['updateApplication()void']
      returns: CaelusAdminReturns['updateApplication()void']
    }>
    & Record<'MANAGER_createToken()void' | 'MANAGER_createToken', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_createToken()void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_createToken()void']
      returns: CaelusAdminReturns['MANAGER_createToken()void']
    }>
    & Record<'MANAGER_updateBoostTokenID(uint64)void' | 'MANAGER_updateBoostTokenID', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_updateBoostTokenID(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_updateBoostTokenID(uint64)void']
      returns: CaelusAdminReturns['MANAGER_updateBoostTokenID(uint64)void']
    }>
    & Record<'MANAGER_changeBoostTier(uint64[])void' | 'MANAGER_changeBoostTier', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_changeBoostTier(uint64[])void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_changeBoostTier(uint64[])void']
      returns: CaelusAdminReturns['MANAGER_changeBoostTier(uint64[])void']
    }>
    & Record<'getBoostTier(uint64)uint64' | 'getBoostTier', {
      argsObj: CaelusAdminArgs['obj']['getBoostTier(uint64)uint64']
      argsTuple: CaelusAdminArgs['tuple']['getBoostTier(uint64)uint64']
      /**
       * uint64 - The boost tier for the given amount
       */
      returns: CaelusAdminReturns['getBoostTier(uint64)uint64']
    }>
    & Record<'MANAGER_changeManager(address)void' | 'MANAGER_changeManager', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_changeManager(address)void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']
      returns: CaelusAdminReturns['MANAGER_changeManager(address)void']
    }>
    & Record<'MANAGER_changeProtocolFee(uint64)void' | 'MANAGER_changeProtocolFee', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_changeProtocolFee(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_changeProtocolFee(uint64)void']
      returns: CaelusAdminReturns['MANAGER_changeProtocolFee(uint64)void']
    }>
    & Record<'MANAGER_lockContract()void' | 'MANAGER_lockContract', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_lockContract()void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_lockContract()void']
      returns: CaelusAdminReturns['MANAGER_lockContract()void']
    }>
    & Record<'MANAGER_updatePoolContractCost(uint64)void' | 'MANAGER_updatePoolContractCost', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']
      returns: CaelusAdminReturns['MANAGER_updatePoolContractCost(uint64)void']
    }>
    & Record<'MANAGER_updatePoolContractProgram(uint64)void' | 'MANAGER_updatePoolContractProgram', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']
      returns: CaelusAdminReturns['MANAGER_updatePoolContractProgram(uint64)void']
    }>
    & Record<'MANAGER_writePoolContractProgram(uint64,byte[])void' | 'MANAGER_writePoolContractProgram', {
      argsObj: CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      argsTuple: CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']
      returns: CaelusAdminReturns['MANAGER_writePoolContractProgram(uint64,byte[])void']
    }>
    & Record<'addValidator(pay)void' | 'addValidator', {
      argsObj: CaelusAdminArgs['obj']['addValidator(pay)void']
      argsTuple: CaelusAdminArgs['tuple']['addValidator(pay)void']
      returns: CaelusAdminReturns['addValidator(pay)void']
    }>
    & Record<'mintRequest(pay)void' | 'mintRequest', {
      argsObj: CaelusAdminArgs['obj']['mintRequest(pay)void']
      argsTuple: CaelusAdminArgs['tuple']['mintRequest(pay)void']
      returns: CaelusAdminReturns['mintRequest(pay)void']
    }>
    & Record<'burnRequest(axfer,address)void' | 'burnRequest', {
      argsObj: CaelusAdminArgs['obj']['burnRequest(axfer,address)void']
      argsTuple: CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']
      returns: CaelusAdminReturns['burnRequest(axfer,address)void']
    }>
    & Record<'mintValidatorCommit(uint64,pay)void' | 'mintValidatorCommit', {
      argsObj: CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void']
      argsTuple: CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']
      returns: CaelusAdminReturns['mintValidatorCommit(uint64,pay)void']
    }>
    & Record<'removeValidatorCommit(uint64,uint64)void' | 'removeValidatorCommit', {
      argsObj: CaelusAdminArgs['obj']['removeValidatorCommit(uint64,uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['removeValidatorCommit(uint64,uint64)void']
      returns: CaelusAdminReturns['removeValidatorCommit(uint64,uint64)void']
    }>
    & Record<'burnToDelinquentValidator(axfer,uint64,uint64)void' | 'burnToDelinquentValidator', {
      argsObj: CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64,uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64,uint64)void']
      returns: CaelusAdminReturns['burnToDelinquentValidator(axfer,uint64,uint64)void']
    }>
    & Record<'reMintDelinquentCommit(uint64)void' | 'reMintDelinquentCommit', {
      argsObj: CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']
      returns: CaelusAdminReturns['reMintDelinquentCommit(uint64)void']
    }>
    & Record<'bid(uint64)void' | 'bid', {
      argsObj: CaelusAdminArgs['obj']['bid(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['bid(uint64)void']
      returns: CaelusAdminReturns['bid(uint64)void']
    }>
    & Record<'declareRewards(uint64,uint64,pay)void' | 'declareRewards', {
      argsObj: CaelusAdminArgs['obj']['declareRewards(uint64,uint64,pay)void']
      argsTuple: CaelusAdminArgs['tuple']['declareRewards(uint64,uint64,pay)void']
      returns: CaelusAdminReturns['declareRewards(uint64,uint64,pay)void']
    }>
    & Record<'delegateStake(uint64,uint64)void' | 'delegateStake', {
      argsObj: CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']
      returns: CaelusAdminReturns['delegateStake(uint64,uint64)void']
    }>
    & Record<'snitchToBurn(uint64)void' | 'snitchToBurn', {
      argsObj: CaelusAdminArgs['obj']['snitchToBurn(uint64)void']
      argsTuple: CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']
      returns: CaelusAdminReturns['snitchToBurn(uint64)void']
    }>
    & Record<'multiSnitchToBurn(uint64[])void' | 'multiSnitchToBurn', {
      argsObj: CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void']
      argsTuple: CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']
      returns: CaelusAdminReturns['multiSnitchToBurn(uint64[])void']
    }>
    & Record<'reStakeFromSnitch(uint64,uint64,pay)void' | 'reStakeFromSnitch', {
      argsObj: CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void']
      argsTuple: CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']
      returns: CaelusAdminReturns['reStakeFromSnitch(uint64,uint64,pay)void']
    }>
    & Record<'makeFlashLoanRequest(pay,uint64[],uint64[])void' | 'makeFlashLoanRequest', {
      argsObj: CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void']
      argsTuple: CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']
      returns: CaelusAdminReturns['makeFlashLoanRequest(pay,uint64[],uint64[])void']
    }>
    & Record<'getFLcounter()uint64' | 'getFLcounter', {
      argsObj: CaelusAdminArgs['obj']['getFLcounter()uint64']
      argsTuple: CaelusAdminArgs['tuple']['getFLcounter()uint64']
      returns: CaelusAdminReturns['getFLcounter()uint64']
    }>
    & Record<'arc62_get_circulating_supply(uint64)uint64' | 'arc62_get_circulating_supply', {
      argsObj: CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64']
      argsTuple: CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']
      returns: CaelusAdminReturns['arc62_get_circulating_supply(uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: BinaryState
        validatorPoolContractVersion: bigint
        validatorPoolContractCost: bigint
        poolContractLock: bigint
        protocolFee: bigint
        totalStake: bigint
        pegRatio: bigint
        tokenId: bigint
        boostTokenId: bigint
        tiers: BinaryState
        tokenCirculatingSupply: bigint
        highestBidder: bigint
        burnQueue: BinaryState
        lastExhaustBlock: bigint
        lastFlashloanBlock: bigint
        flashLoanCounter: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CaelusAdminSignatures = keyof CaelusAdminTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CaelusAdminNonVoidMethodSignatures = keyof CaelusAdminTypes['methods'] extends infer T ? T extends keyof CaelusAdminTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CaelusAdminSignatures> = CaelusAdminTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CaelusAdminSignatures> = CaelusAdminTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CaelusAdminTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CaelusAdminCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type CaelusAdminUpdateCallParams =
  | Expand<CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & {method: 'updateApplication'}>
  | Expand<CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & {method: 'updateApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type CaelusAdminDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CaelusAdminCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: CaelusAdminUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CaelusAdmin smart contract
 */
export abstract class CaelusAdminParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CaelusAdminCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CaelusAdminParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CaelusAdmin smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends CaelusAdminUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication()void':
            return CaelusAdminParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the CaelusAdmin smart contract using the updateApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the MANAGER_createToken()void ABI method
   *
   * MANAGER METHODS
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerCreateToken(params: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_createToken()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updateBoostTokenID(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdateBoostTokenId(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updateBoostTokenID(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateBoostTokenID(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updateBoostTokenID(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boostTokenId],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_changeBoostTier(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerChangeBoostTier(params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeBoostTier(uint64[])void'] | CaelusAdminArgs['tuple']['MANAGER_changeBoostTier(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_changeBoostTier(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amounts],
    }
  }
  /**
   * Constructs a no op call for the getBoostTier(uint64)uint64 ABI method
   *
   * The getBoostTier method is needed to be kept public so that on state update Validator Pool can fetch their current tier.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoostTier(params: CallParams<CaelusAdminArgs['obj']['getBoostTier(uint64)uint64'] | CaelusAdminArgs['tuple']['getBoostTier(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoostTier(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_changeManager(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerChangeManager(params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_changeManager(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.manager],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_changeProtocolFee(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerChangeProtocolFee(params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeProtocolFee(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_changeProtocolFee(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_changeProtocolFee(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_lockContract()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerLockContract(params: CallParams<CaelusAdminArgs['obj']['MANAGER_lockContract()void'] | CaelusAdminArgs['tuple']['MANAGER_lockContract()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_lockContract()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updatePoolContractCost(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdatePoolContractCost(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updatePoolContractCost(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorPoolContractCost],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_updatePoolContractProgram(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerUpdatePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_updatePoolContractProgram(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.programSize],
    }
  }
  /**
   * Constructs a no op call for the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static managerWritePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'MANAGER_writePoolContractProgram(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the addValidator(pay)void ABI method
   *
   * ARC4 PUBLIC METHODS
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addValidator(params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addValidator(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the mintRequest(pay)void ABI method
   *
   * On Mint the Algo deposited by the user are kept in the Admin Contract Account balance waiting for the highest bidder to claim them.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintRequest(params: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mintRequest(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mintTxn],
    }
  }
  /**
   * Constructs a no op call for the burnRequest(axfer,address)void ABI method
   *
  * On Burn the contract gradually checks where to take Algo from, first in the idle Admin balance, then from the burn queue.
  In case the amount of Algo exceeds the current queue max amount the remaining vAlgo are sent back to the user.
  This situation triggers the exhaust flag, that will prevent the contract from burning Algo for the next 5 blocks.
  The Cooldown period is necessary to ensure that the queue is filled with the Validators more fit for the burn.
  This to disallow possible spam looping of burning to target from specific pools.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnRequest(params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnRequest(axfer,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.burnTxn, params.args.burnTo],
    }
  }
  /**
   * Constructs a no op call for the mintValidatorCommit(uint64,pay)void ABI method
   *
  * Specific method to mint the LST for the Validator Pool Contract.
  The mint is done by the Admin Contract and the LST is sent to the Validator Pool Contract.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mintValidatorCommit(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorAppId, params.args.stakeCommit],
    }
  }
  /**
   * Constructs a no op call for the removeValidatorCommit(uint64,uint64)void ABI method
   *
  * Specific method to remove from the operator commit in the Validator Pool Contract.
  
  
  The Validator Pool Contract will send the vAlgo to the operator address.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['removeValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['removeValidatorCommit(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeValidatorCommit(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appToBurnFrom, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the burnToDelinquentValidator(axfer,uint64,uint64)void ABI method
   *
  * FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT EITHER ON DELINQUENCY OR ON SNITCH
  
  
  On Delinquency Validators SHOULD not have vAlgo in their balance.
  It's first called when deliquency is set, can be called again if the entire vAlgo amount is not burned.
  The vAlgo will be turned to Algo and added to the operator commit

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnToDelinquentValidator(params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnToDelinquentValidator(axfer,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.burnTxn, params.args.validatorAppId, params.args.amountOperator],
    }
  }
  /**
   * Constructs a no op call for the reMintDelinquentCommit(uint64)void ABI method
   *
  * FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT WHEN DELINQUENCY IS SOLVED
  
  
  When Delinquency is solved the operator will mint his commit back into vAlgo.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static reMintDelinquentCommit(params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reMintDelinquentCommit(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app],
    }
  }
  /**
   * Constructs a no op call for the bid(uint64)void ABI method
   *
   * Bid Validator App, highest bidder should have the lowest saturation buffer value.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bid(params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bid(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorAppId],
    }
  }
  /**
   * Constructs a no op call for the declareRewards(uint64,uint64,pay)void ABI method
   *
  * The method is called by the Validator Pool Contract to declare the rewards.
  
  
  It doesn't utilize stricter checks on call since as long as the rewardPay is sent to the Admin contract we welcome free money to the protocol :)
  There's no other state getting changed aside from the totalStake

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static declareRewards(params: CallParams<CaelusAdminArgs['obj']['declareRewards(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['declareRewards(uint64,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'declareRewards(uint64,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposer, params.args.block, params.args.rewardPay],
    }
  }
  /**
   * Constructs a no op call for the delegateStake(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delegateStake(params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delegateStake(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.validatorAppId],
    }
  }
  /**
   * Constructs a no op call for the snitchToBurn(uint64)void ABI method
   *
   * Push new Validator App to the burn queue. If the saturation buffer is higher than the current lowest in the queue, the new App will be snitched.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static snitchToBurn(params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'snitchToBurn(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app],
    }
  }
  /**
   * Constructs a no op call for the multiSnitchToBurn(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static multiSnitchToBurn(params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'multiSnitchToBurn(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.apps],
    }
  }
  /**
   * Constructs a no op call for the reStakeFromSnitch(uint64,uint64,pay)void ABI method
   *
   * Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static reStakeFromSnitch(params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reStakeFromSnitch(uint64,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.snitchedApp, params.args.receiverApp, params.args.restakeTxn],
    }
  }
  /**
   * Constructs a no op call for the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method
   *
  * Algo balances in the Validator Pool Contracts sit idle, but can be efficiently use for flashloans.
  This creates a new route of revenue for the protocol.
  The method checks that each flashloan call is repaid through the subsequent checkBalance method call.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static makeFlashLoanRequest(params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'makeFlashLoanRequest(pay,uint64[],uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payFeeTxn, params.args.amounts, params.args.appToInclude],
    }
  }
  /**
   * Constructs a no op call for the getFLcounter()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getFLcounter(params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getFLcounter()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc62_get_circulating_supply(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc62GetCirculatingSupply(params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc62_get_circulating_supply(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CaelusAdmin smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CaelusAdminFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CaelusAdminFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CaelusAdminClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CaelusAdminClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CaelusAdmin smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CaelusAdminDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CaelusAdminParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CaelusAdminCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? CaelusAdminParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (CaelusAdminUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CaelusAdminClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
      /**
       * Creates a new instance of the CaelusAdmin smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CaelusAdminParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the CaelusAdmin smart contract using the updateApplication()void ABI method.
       *
      * Temporary method to update the application. This method will be removed in the future.
      Here to improve open beta testing iterations. Planned to be removed on mainnet launch.

       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(CaelusAdminParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
      /**
       * Creates a new instance of the CaelusAdmin smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CaelusAdminParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new CaelusAdminClient(result.appClient) }
      },
      /**
       * Creates a new instance of the CaelusAdmin smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CaelusAdminArgs['obj']['createApplication()void'] | CaelusAdminArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CaelusAdminParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CaelusAdminReturns['createApplication()void']) }, appClient: new CaelusAdminClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CaelusAdmin smart contract
 */
export class CaelusAdminClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CaelusAdminClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CaelusAdmin app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CaelusAdminClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CaelusAdminNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CaelusAdminClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CaelusAdminClient> {
    return new CaelusAdminClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CaelusAdminClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CaelusAdminClient> {
    return new CaelusAdminClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the CaelusAdmin smart contract using the `updateApplication()void` ABI method.
       *
      * Temporary method to update the application. This method will be removed in the future.
      Here to improve open beta testing iterations. Planned to be removed on mainnet launch.

       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(CaelusAdminParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_createToken()void` ABI method.
     *
     * MANAGER METHODS
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerCreateToken: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerCreateToken(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updateBoostTokenID(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdateBoostTokenId: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updateBoostTokenID(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateBoostTokenID(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerUpdateBoostTokenId(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeBoostTier(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerChangeBoostTier: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeBoostTier(uint64[])void'] | CaelusAdminArgs['tuple']['MANAGER_changeBoostTier(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerChangeBoostTier(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getBoostTier(uint64)uint64` ABI method.
     *
     * The getBoostTier method is needed to be kept public so that on state update Validator Pool can fetch their current tier.
     *
     * @param params The params for the smart contract call
     * @returns The call params: uint64 - The boost tier for the given amount
     */
    getBoostTier: (params: CallParams<CaelusAdminArgs['obj']['getBoostTier(uint64)uint64'] | CaelusAdminArgs['tuple']['getBoostTier(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.getBoostTier(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeManager(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerChangeManager: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerChangeManager(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeProtocolFee(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerChangeProtocolFee: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeProtocolFee(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_changeProtocolFee(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerChangeProtocolFee(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_lockContract()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerLockContract: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_lockContract()void'] | CaelusAdminArgs['tuple']['MANAGER_lockContract()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerLockContract(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractCost(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdatePoolContractCost: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerUpdatePoolContractCost(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerUpdatePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    managerWritePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `addValidator(pay)void` ABI method.
     *
     * ARC4 PUBLIC METHODS
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addValidator: (params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.addValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintRequest(pay)void` ABI method.
     *
     * On Mint the Algo deposited by the user are kept in the Admin Contract Account balance waiting for the highest bidder to claim them.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintRequest: (params: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.mintRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnRequest(axfer,address)void` ABI method.
     *
    * On Burn the contract gradually checks where to take Algo from, first in the idle Admin balance, then from the burn queue.
    In case the amount of Algo exceeds the current queue max amount the remaining vAlgo are sent back to the user.
    This situation triggers the exhaust flag, that will prevent the contract from burning Algo for the next 5 blocks.
    The Cooldown period is necessary to ensure that the queue is filled with the Validators more fit for the burn.
    This to disallow possible spam looping of burning to target from specific pools.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnRequest: (params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.burnRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintValidatorCommit(uint64,pay)void` ABI method.
     *
    * Specific method to mint the LST for the Validator Pool Contract.
    The mint is done by the Admin Contract and the LST is sent to the Validator Pool Contract.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.mintValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `removeValidatorCommit(uint64,uint64)void` ABI method.
     *
    * Specific method to remove from the operator commit in the Validator Pool Contract.
    
    
    The Validator Pool Contract will send the vAlgo to the operator address.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['removeValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['removeValidatorCommit(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.removeValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnToDelinquentValidator(axfer,uint64,uint64)void` ABI method.
     *
    * FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT EITHER ON DELINQUENCY OR ON SNITCH
    
    
    On Delinquency Validators SHOULD not have vAlgo in their balance.
    It's first called when deliquency is set, can be called again if the entire vAlgo amount is not burned.
    The vAlgo will be turned to Algo and added to the operator commit

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnToDelinquentValidator: (params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.burnToDelinquentValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reMintDelinquentCommit(uint64)void` ABI method.
     *
    * FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT WHEN DELINQUENCY IS SOLVED
    
    
    When Delinquency is solved the operator will mint his commit back into vAlgo.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    reMintDelinquentCommit: (params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.reMintDelinquentCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `bid(uint64)void` ABI method.
     *
     * Bid Validator App, highest bidder should have the lowest saturation buffer value.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bid: (params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.bid(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `declareRewards(uint64,uint64,pay)void` ABI method.
     *
    * The method is called by the Validator Pool Contract to declare the rewards.
    
    
    It doesn't utilize stricter checks on call since as long as the rewardPay is sent to the Admin contract we welcome free money to the protocol :)
    There's no other state getting changed aside from the totalStake

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    declareRewards: (params: CallParams<CaelusAdminArgs['obj']['declareRewards(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['declareRewards(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.declareRewards(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delegateStake(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delegateStake: (params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.delegateStake(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchToBurn(uint64)void` ABI method.
     *
     * Push new Validator App to the burn queue. If the saturation buffer is higher than the current lowest in the queue, the new App will be snitched.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    snitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.snitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `multiSnitchToBurn(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    multiSnitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.multiSnitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reStakeFromSnitch(uint64,uint64,pay)void` ABI method.
     *
     * Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    reStakeFromSnitch: (params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.reStakeFromSnitch(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `makeFlashLoanRequest(pay,uint64[],uint64[])void` ABI method.
     *
    * Algo balances in the Validator Pool Contracts sit idle, but can be efficiently use for flashloans.
    This creates a new route of revenue for the protocol.
    The method checks that each flashloan call is repaid through the subsequent checkBalance method call.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    makeFlashLoanRequest: (params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.makeFlashLoanRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getFLcounter()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getFLcounter: (params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.getFLcounter(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc62GetCirculatingSupply: (params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusAdminParamsFactory.arc62GetCirculatingSupply(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the CaelusAdmin smart contract using the `updateApplication()void` ABI method.
       *
      * Temporary method to update the application. This method will be removed in the future.
      Here to improve open beta testing iterations. Planned to be removed on mainnet launch.

       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(CaelusAdminParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_createToken()void` ABI method.
     *
     * MANAGER METHODS
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerCreateToken: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerCreateToken(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updateBoostTokenID(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdateBoostTokenId: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updateBoostTokenID(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateBoostTokenID(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerUpdateBoostTokenId(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeBoostTier(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerChangeBoostTier: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeBoostTier(uint64[])void'] | CaelusAdminArgs['tuple']['MANAGER_changeBoostTier(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerChangeBoostTier(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getBoostTier(uint64)uint64` ABI method.
     *
     * The getBoostTier method is needed to be kept public so that on state update Validator Pool can fetch their current tier.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: uint64 - The boost tier for the given amount
     */
    getBoostTier: (params: CallParams<CaelusAdminArgs['obj']['getBoostTier(uint64)uint64'] | CaelusAdminArgs['tuple']['getBoostTier(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.getBoostTier(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeManager(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerChangeManager: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerChangeManager(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeProtocolFee(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerChangeProtocolFee: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeProtocolFee(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_changeProtocolFee(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerChangeProtocolFee(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_lockContract()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerLockContract: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_lockContract()void'] | CaelusAdminArgs['tuple']['MANAGER_lockContract()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerLockContract(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractCost(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdatePoolContractCost: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerUpdatePoolContractCost(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerUpdatePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerUpdatePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    managerWritePoolContractProgram: (params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.managerWritePoolContractProgram(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `addValidator(pay)void` ABI method.
     *
     * ARC4 PUBLIC METHODS
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addValidator: (params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.addValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintRequest(pay)void` ABI method.
     *
     * On Mint the Algo deposited by the user are kept in the Admin Contract Account balance waiting for the highest bidder to claim them.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintRequest: (params: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.mintRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnRequest(axfer,address)void` ABI method.
     *
    * On Burn the contract gradually checks where to take Algo from, first in the idle Admin balance, then from the burn queue.
    In case the amount of Algo exceeds the current queue max amount the remaining vAlgo are sent back to the user.
    This situation triggers the exhaust flag, that will prevent the contract from burning Algo for the next 5 blocks.
    The Cooldown period is necessary to ensure that the queue is filled with the Validators more fit for the burn.
    This to disallow possible spam looping of burning to target from specific pools.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnRequest: (params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.burnRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintValidatorCommit(uint64,pay)void` ABI method.
     *
    * Specific method to mint the LST for the Validator Pool Contract.
    The mint is done by the Admin Contract and the LST is sent to the Validator Pool Contract.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.mintValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `removeValidatorCommit(uint64,uint64)void` ABI method.
     *
    * Specific method to remove from the operator commit in the Validator Pool Contract.
    
    
    The Validator Pool Contract will send the vAlgo to the operator address.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeValidatorCommit: (params: CallParams<CaelusAdminArgs['obj']['removeValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['removeValidatorCommit(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.removeValidatorCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnToDelinquentValidator(axfer,uint64,uint64)void` ABI method.
     *
    * FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT EITHER ON DELINQUENCY OR ON SNITCH
    
    
    On Delinquency Validators SHOULD not have vAlgo in their balance.
    It's first called when deliquency is set, can be called again if the entire vAlgo amount is not burned.
    The vAlgo will be turned to Algo and added to the operator commit

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnToDelinquentValidator: (params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.burnToDelinquentValidator(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reMintDelinquentCommit(uint64)void` ABI method.
     *
    * FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT WHEN DELINQUENCY IS SOLVED
    
    
    When Delinquency is solved the operator will mint his commit back into vAlgo.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    reMintDelinquentCommit: (params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.reMintDelinquentCommit(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `bid(uint64)void` ABI method.
     *
     * Bid Validator App, highest bidder should have the lowest saturation buffer value.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bid: (params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.bid(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `declareRewards(uint64,uint64,pay)void` ABI method.
     *
    * The method is called by the Validator Pool Contract to declare the rewards.
    
    
    It doesn't utilize stricter checks on call since as long as the rewardPay is sent to the Admin contract we welcome free money to the protocol :)
    There's no other state getting changed aside from the totalStake

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    declareRewards: (params: CallParams<CaelusAdminArgs['obj']['declareRewards(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['declareRewards(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.declareRewards(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delegateStake(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delegateStake: (params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.delegateStake(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchToBurn(uint64)void` ABI method.
     *
     * Push new Validator App to the burn queue. If the saturation buffer is higher than the current lowest in the queue, the new App will be snitched.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    snitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.snitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `multiSnitchToBurn(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    multiSnitchToBurn: (params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.multiSnitchToBurn(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reStakeFromSnitch(uint64,uint64,pay)void` ABI method.
     *
     * Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    reStakeFromSnitch: (params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.reStakeFromSnitch(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `makeFlashLoanRequest(pay,uint64[],uint64[])void` ABI method.
     *
    * Algo balances in the Validator Pool Contracts sit idle, but can be efficiently use for flashloans.
    This creates a new route of revenue for the protocol.
    The method checks that each flashloan call is repaid through the subsequent checkBalance method call.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    makeFlashLoanRequest: (params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.makeFlashLoanRequest(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getFLcounter()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getFLcounter: (params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.getFLcounter(params))
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc62GetCirculatingSupply: (params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusAdminParamsFactory.arc62GetCirculatingSupply(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the CaelusAdmin smart contract using the `updateApplication()void` ABI method.
       *
      * Temporary method to update the application. This method will be removed in the future.
      Here to improve open beta testing iterations. Planned to be removed on mainnet launch.

       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(CaelusAdminParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['updateApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_createToken()void` ABI method.
     *
     * MANAGER METHODS
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerCreateToken: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerCreateToken(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_createToken()void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updateBoostTokenID(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdateBoostTokenId: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updateBoostTokenID(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateBoostTokenID(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerUpdateBoostTokenId(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_updateBoostTokenID(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeBoostTier(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerChangeBoostTier: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeBoostTier(uint64[])void'] | CaelusAdminArgs['tuple']['MANAGER_changeBoostTier(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerChangeBoostTier(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_changeBoostTier(uint64[])void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getBoostTier(uint64)uint64` ABI method.
     *
     * The getBoostTier method is needed to be kept public so that on state update Validator Pool can fetch their current tier.
     *
     * @param params The params for the smart contract call
     * @returns The call result: uint64 - The boost tier for the given amount
     */
    getBoostTier: async (params: CallParams<CaelusAdminArgs['obj']['getBoostTier(uint64)uint64'] | CaelusAdminArgs['tuple']['getBoostTier(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.getBoostTier(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['getBoostTier(uint64)uint64'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeManager(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerChangeManager: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerChangeManager(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_changeManager(address)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_changeProtocolFee(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerChangeProtocolFee: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeProtocolFee(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_changeProtocolFee(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerChangeProtocolFee(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_changeProtocolFee(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_lockContract()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerLockContract: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_lockContract()void'] | CaelusAdminArgs['tuple']['MANAGER_lockContract()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerLockContract(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_lockContract()void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractCost(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdatePoolContractCost: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerUpdatePoolContractCost(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_updatePoolContractCost(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_updatePoolContractProgram(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerUpdatePoolContractProgram: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerUpdatePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_updatePoolContractProgram(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `MANAGER_writePoolContractProgram(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    managerWritePoolContractProgram: async (params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.managerWritePoolContractProgram(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `addValidator(pay)void` ABI method.
     *
     * ARC4 PUBLIC METHODS
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addValidator: async (params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.addValidator(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['addValidator(pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintRequest(pay)void` ABI method.
     *
     * On Mint the Algo deposited by the user are kept in the Admin Contract Account balance waiting for the highest bidder to claim them.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintRequest: async (params: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.mintRequest(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['mintRequest(pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnRequest(axfer,address)void` ABI method.
     *
    * On Burn the contract gradually checks where to take Algo from, first in the idle Admin balance, then from the burn queue.
    In case the amount of Algo exceeds the current queue max amount the remaining vAlgo are sent back to the user.
    This situation triggers the exhaust flag, that will prevent the contract from burning Algo for the next 5 blocks.
    The Cooldown period is necessary to ensure that the queue is filled with the Validators more fit for the burn.
    This to disallow possible spam looping of burning to target from specific pools.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnRequest: async (params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.burnRequest(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['burnRequest(axfer,address)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `mintValidatorCommit(uint64,pay)void` ABI method.
     *
    * Specific method to mint the LST for the Validator Pool Contract.
    The mint is done by the Admin Contract and the LST is sent to the Validator Pool Contract.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintValidatorCommit: async (params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.mintValidatorCommit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['mintValidatorCommit(uint64,pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `removeValidatorCommit(uint64,uint64)void` ABI method.
     *
    * Specific method to remove from the operator commit in the Validator Pool Contract.
    
    
    The Validator Pool Contract will send the vAlgo to the operator address.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeValidatorCommit: async (params: CallParams<CaelusAdminArgs['obj']['removeValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['removeValidatorCommit(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.removeValidatorCommit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['removeValidatorCommit(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `burnToDelinquentValidator(axfer,uint64,uint64)void` ABI method.
     *
    * FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT EITHER ON DELINQUENCY OR ON SNITCH
    
    
    On Delinquency Validators SHOULD not have vAlgo in their balance.
    It's first called when deliquency is set, can be called again if the entire vAlgo amount is not burned.
    The vAlgo will be turned to Algo and added to the operator commit

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnToDelinquentValidator: async (params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.burnToDelinquentValidator(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['burnToDelinquentValidator(axfer,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reMintDelinquentCommit(uint64)void` ABI method.
     *
    * FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT WHEN DELINQUENCY IS SOLVED
    
    
    When Delinquency is solved the operator will mint his commit back into vAlgo.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    reMintDelinquentCommit: async (params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.reMintDelinquentCommit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['reMintDelinquentCommit(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `bid(uint64)void` ABI method.
     *
     * Bid Validator App, highest bidder should have the lowest saturation buffer value.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bid: async (params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.bid(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['bid(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `declareRewards(uint64,uint64,pay)void` ABI method.
     *
    * The method is called by the Validator Pool Contract to declare the rewards.
    
    
    It doesn't utilize stricter checks on call since as long as the rewardPay is sent to the Admin contract we welcome free money to the protocol :)
    There's no other state getting changed aside from the totalStake

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    declareRewards: async (params: CallParams<CaelusAdminArgs['obj']['declareRewards(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['declareRewards(uint64,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.declareRewards(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['declareRewards(uint64,uint64,pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `delegateStake(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delegateStake: async (params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.delegateStake(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['delegateStake(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `snitchToBurn(uint64)void` ABI method.
     *
     * Push new Validator App to the burn queue. If the saturation buffer is higher than the current lowest in the queue, the new App will be snitched.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    snitchToBurn: async (params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.snitchToBurn(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['snitchToBurn(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `multiSnitchToBurn(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    multiSnitchToBurn: async (params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.multiSnitchToBurn(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['multiSnitchToBurn(uint64[])void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `reStakeFromSnitch(uint64,uint64,pay)void` ABI method.
     *
     * Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    reStakeFromSnitch: async (params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.reStakeFromSnitch(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['reStakeFromSnitch(uint64,uint64,pay)void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `makeFlashLoanRequest(pay,uint64[],uint64[])void` ABI method.
     *
    * Algo balances in the Validator Pool Contracts sit idle, but can be efficiently use for flashloans.
    This creates a new route of revenue for the protocol.
    The method checks that each flashloan call is repaid through the subsequent checkBalance method call.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    makeFlashLoanRequest: async (params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.makeFlashLoanRequest(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['makeFlashLoanRequest(pay,uint64[],uint64[])void'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `getFLcounter()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getFLcounter: async (params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.getFLcounter(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['getFLcounter()uint64'])}
    },

    /**
     * Makes a call to the CaelusAdmin smart contract using the `arc62_get_circulating_supply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc62GetCirculatingSupply: async (params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusAdminParamsFactory.arc62GetCirculatingSupply(params))
      return {...result, return: result.return as unknown as (undefined | CaelusAdminReturns['arc62_get_circulating_supply(uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CaelusAdminClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CaelusAdmin app
   */
  state = {
    /**
     * Methods to access global state for the current CaelusAdmin app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: new BinaryStateValue(result.manager),
          validatorPoolContractVersion: result.validatorPoolContractVersion,
          validatorPoolContractCost: result.validatorPoolContractCost,
          poolContractLock: result.poolContractLock,
          protocolFee: result.protocolFee,
          totalStake: result.totalStake,
          pegRatio: result.pegRatio,
          tokenId: result.tokenId,
          boostTokenId: result.boostTokenID,
          tiers: new BinaryStateValue(result.tiers),
          tokenCirculatingSupply: result.tokenCirculatingSupply,
          highestBidder: result.highestBidder,
          burnQueue: new BinaryStateValue(result.burnQueue),
          lastExhaustBlock: result.lastExhaustBlock,
          lastFlashloanBlock: result.lastFlashloanBlock,
          flashLoanCounter: result.flashLoanCounter,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("manager")) as Uint8Array | undefined) },
      /**
       * Get the current value of the validatorPoolContractVersion key in global state
       */
      validatorPoolContractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("validatorPoolContractVersion")) as bigint | undefined },
      /**
       * Get the current value of the validatorPoolContractCost key in global state
       */
      validatorPoolContractCost: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("validatorPoolContractCost")) as bigint | undefined },
      /**
       * Get the current value of the poolContractLock key in global state
       */
      poolContractLock: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("poolContractLock")) as bigint | undefined },
      /**
       * Get the current value of the protocolFee key in global state
       */
      protocolFee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("protocolFee")) as bigint | undefined },
      /**
       * Get the current value of the totalStake key in global state
       */
      totalStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalStake")) as bigint | undefined },
      /**
       * Get the current value of the pegRatio key in global state
       */
      pegRatio: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("pegRatio")) as bigint | undefined },
      /**
       * Get the current value of the tokenId key in global state
       */
      tokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tokenId")) as bigint | undefined },
      /**
       * Get the current value of the boostTokenID key in global state
       */
      boostTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("boostTokenId")) as bigint | undefined },
      /**
       * Get the current value of the tiers key in global state
       */
      tiers: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("tiers")) as Uint8Array | undefined) },
      /**
       * Get the current value of the tokenCirculatingSupply key in global state
       */
      tokenCirculatingSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tokenCirculatingSupply")) as bigint | undefined },
      /**
       * Get the current value of the highestBidder key in global state
       */
      highestBidder: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("highestBidder")) as bigint | undefined },
      /**
       * Get the current value of the burnQueue key in global state
       */
      burnQueue: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("burnQueue")) as Uint8Array | undefined) },
      /**
       * Get the current value of the lastExhaustBlock key in global state
       */
      lastExhaustBlock: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastExhaustBlock")) as bigint | undefined },
      /**
       * Get the current value of the lastFlashloanBlock key in global state
       */
      lastFlashloanBlock: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastFlashloanBlock")) as bigint | undefined },
      /**
       * Get the current value of the flashLoanCounter key in global state
       */
      flashLoanCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("flashLoanCounter")) as bigint | undefined },
    },
  }

  public newGroup(): CaelusAdminComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a MANAGER_createToken()void method call against the CaelusAdmin contract
       */
      managerCreateToken(params: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerCreateToken(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updateBoostTokenID(uint64)void method call against the CaelusAdmin contract
       */
      managerUpdateBoostTokenId(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updateBoostTokenID(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateBoostTokenID(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdateBoostTokenId(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_changeBoostTier(uint64[])void method call against the CaelusAdmin contract
       */
      managerChangeBoostTier(params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeBoostTier(uint64[])void'] | CaelusAdminArgs['tuple']['MANAGER_changeBoostTier(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerChangeBoostTier(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getBoostTier(uint64)uint64 method call against the CaelusAdmin contract
       */
      getBoostTier(params: CallParams<CaelusAdminArgs['obj']['getBoostTier(uint64)uint64'] | CaelusAdminArgs['tuple']['getBoostTier(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoostTier(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoostTier(uint64)uint64', v))
        return this
      },
      /**
       * Add a MANAGER_changeManager(address)void method call against the CaelusAdmin contract
       */
      managerChangeManager(params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerChangeManager(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_changeProtocolFee(uint64)void method call against the CaelusAdmin contract
       */
      managerChangeProtocolFee(params: CallParams<CaelusAdminArgs['obj']['MANAGER_changeProtocolFee(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_changeProtocolFee(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerChangeProtocolFee(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_lockContract()void method call against the CaelusAdmin contract
       */
      managerLockContract(params: CallParams<CaelusAdminArgs['obj']['MANAGER_lockContract()void'] | CaelusAdminArgs['tuple']['MANAGER_lockContract()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerLockContract(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updatePoolContractCost(uint64)void method call against the CaelusAdmin contract
       */
      managerUpdatePoolContractCost(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdatePoolContractCost(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_updatePoolContractProgram(uint64)void method call against the CaelusAdmin contract
       */
      managerUpdatePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerUpdatePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a MANAGER_writePoolContractProgram(uint64,byte[])void method call against the CaelusAdmin contract
       */
      managerWritePoolContractProgram(params: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.managerWritePoolContractProgram(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addValidator(pay)void method call against the CaelusAdmin contract
       */
      addValidator(params: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addValidator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a mintRequest(pay)void method call against the CaelusAdmin contract
       */
      mintRequest(params: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnRequest(axfer,address)void method call against the CaelusAdmin contract
       */
      burnRequest(params: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a mintValidatorCommit(uint64,pay)void method call against the CaelusAdmin contract
       */
      mintValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintValidatorCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeValidatorCommit(uint64,uint64)void method call against the CaelusAdmin contract
       */
      removeValidatorCommit(params: CallParams<CaelusAdminArgs['obj']['removeValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['removeValidatorCommit(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeValidatorCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnToDelinquentValidator(axfer,uint64,uint64)void method call against the CaelusAdmin contract
       */
      burnToDelinquentValidator(params: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnToDelinquentValidator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reMintDelinquentCommit(uint64)void method call against the CaelusAdmin contract
       */
      reMintDelinquentCommit(params: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.reMintDelinquentCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a bid(uint64)void method call against the CaelusAdmin contract
       */
      bid(params: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bid(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a declareRewards(uint64,uint64,pay)void method call against the CaelusAdmin contract
       */
      declareRewards(params: CallParams<CaelusAdminArgs['obj']['declareRewards(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['declareRewards(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.declareRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delegateStake(uint64,uint64)void method call against the CaelusAdmin contract
       */
      delegateStake(params: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delegateStake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a snitchToBurn(uint64)void method call against the CaelusAdmin contract
       */
      snitchToBurn(params: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.snitchToBurn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a multiSnitchToBurn(uint64[])void method call against the CaelusAdmin contract
       */
      multiSnitchToBurn(params: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.multiSnitchToBurn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reStakeFromSnitch(uint64,uint64,pay)void method call against the CaelusAdmin contract
       */
      reStakeFromSnitch(params: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.reStakeFromSnitch(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a makeFlashLoanRequest(pay,uint64[],uint64[])void method call against the CaelusAdmin contract
       */
      makeFlashLoanRequest(params: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.makeFlashLoanRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getFLcounter()uint64 method call against the CaelusAdmin contract
       */
      getFLcounter(params: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getFLcounter(params)))
        resultMappers.push((v) => client.decodeReturnValue('getFLcounter()uint64', v))
        return this
      },
      /**
       * Add a arc62_get_circulating_supply(uint64)uint64 method call against the CaelusAdmin contract
       */
      arc62GetCirculatingSupply(params: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc62GetCirculatingSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc62_get_circulating_supply(uint64)uint64', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<CaelusAdminArgs['obj']['updateApplication()void'] | CaelusAdminArgs['tuple']['updateApplication()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the CaelusAdmin contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CaelusAdminComposer
  }
}
export type CaelusAdminComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the MANAGER_createToken()void ABI method.
   *
   * MANAGER METHODS
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerCreateToken(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_createToken()void'] | CaelusAdminArgs['tuple']['MANAGER_createToken()void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_createToken()void'] | undefined]>

  /**
   * Calls the MANAGER_updateBoostTokenID(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdateBoostTokenId(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_updateBoostTokenID(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updateBoostTokenID(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_updateBoostTokenID(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_changeBoostTier(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerChangeBoostTier(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_changeBoostTier(uint64[])void'] | CaelusAdminArgs['tuple']['MANAGER_changeBoostTier(uint64[])void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_changeBoostTier(uint64[])void'] | undefined]>

  /**
   * Calls the getBoostTier(uint64)uint64 ABI method.
   *
   * The getBoostTier method is needed to be kept public so that on state update Validator Pool can fetch their current tier.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoostTier(params?: CallParams<CaelusAdminArgs['obj']['getBoostTier(uint64)uint64'] | CaelusAdminArgs['tuple']['getBoostTier(uint64)uint64']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['getBoostTier(uint64)uint64'] | undefined]>

  /**
   * Calls the MANAGER_changeManager(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerChangeManager(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_changeManager(address)void'] | CaelusAdminArgs['tuple']['MANAGER_changeManager(address)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_changeManager(address)void'] | undefined]>

  /**
   * Calls the MANAGER_changeProtocolFee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerChangeProtocolFee(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_changeProtocolFee(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_changeProtocolFee(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_changeProtocolFee(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_lockContract()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerLockContract(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_lockContract()void'] | CaelusAdminArgs['tuple']['MANAGER_lockContract()void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_lockContract()void'] | undefined]>

  /**
   * Calls the MANAGER_updatePoolContractCost(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdatePoolContractCost(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractCost(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractCost(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_updatePoolContractCost(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_updatePoolContractProgram(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerUpdatePoolContractProgram(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_updatePoolContractProgram(uint64)void'] | CaelusAdminArgs['tuple']['MANAGER_updatePoolContractProgram(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_updatePoolContractProgram(uint64)void'] | undefined]>

  /**
   * Calls the MANAGER_writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  managerWritePoolContractProgram(params?: CallParams<CaelusAdminArgs['obj']['MANAGER_writePoolContractProgram(uint64,byte[])void'] | CaelusAdminArgs['tuple']['MANAGER_writePoolContractProgram(uint64,byte[])void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['MANAGER_writePoolContractProgram(uint64,byte[])void'] | undefined]>

  /**
   * Calls the addValidator(pay)void ABI method.
   *
   * ARC4 PUBLIC METHODS
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addValidator(params?: CallParams<CaelusAdminArgs['obj']['addValidator(pay)void'] | CaelusAdminArgs['tuple']['addValidator(pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['addValidator(pay)void'] | undefined]>

  /**
   * Calls the mintRequest(pay)void ABI method.
   *
   * On Mint the Algo deposited by the user are kept in the Admin Contract Account balance waiting for the highest bidder to claim them.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintRequest(params?: CallParams<CaelusAdminArgs['obj']['mintRequest(pay)void'] | CaelusAdminArgs['tuple']['mintRequest(pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['mintRequest(pay)void'] | undefined]>

  /**
   * Calls the burnRequest(axfer,address)void ABI method.
   *
  * On Burn the contract gradually checks where to take Algo from, first in the idle Admin balance, then from the burn queue.
  In case the amount of Algo exceeds the current queue max amount the remaining vAlgo are sent back to the user.
  This situation triggers the exhaust flag, that will prevent the contract from burning Algo for the next 5 blocks.
  The Cooldown period is necessary to ensure that the queue is filled with the Validators more fit for the burn.
  This to disallow possible spam looping of burning to target from specific pools.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnRequest(params?: CallParams<CaelusAdminArgs['obj']['burnRequest(axfer,address)void'] | CaelusAdminArgs['tuple']['burnRequest(axfer,address)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['burnRequest(axfer,address)void'] | undefined]>

  /**
   * Calls the mintValidatorCommit(uint64,pay)void ABI method.
   *
  * Specific method to mint the LST for the Validator Pool Contract.
  The mint is done by the Admin Contract and the LST is sent to the Validator Pool Contract.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintValidatorCommit(params?: CallParams<CaelusAdminArgs['obj']['mintValidatorCommit(uint64,pay)void'] | CaelusAdminArgs['tuple']['mintValidatorCommit(uint64,pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['mintValidatorCommit(uint64,pay)void'] | undefined]>

  /**
   * Calls the removeValidatorCommit(uint64,uint64)void ABI method.
   *
  * Specific method to remove from the operator commit in the Validator Pool Contract.
  
  
  The Validator Pool Contract will send the vAlgo to the operator address.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeValidatorCommit(params?: CallParams<CaelusAdminArgs['obj']['removeValidatorCommit(uint64,uint64)void'] | CaelusAdminArgs['tuple']['removeValidatorCommit(uint64,uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['removeValidatorCommit(uint64,uint64)void'] | undefined]>

  /**
   * Calls the burnToDelinquentValidator(axfer,uint64,uint64)void ABI method.
   *
  * FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT EITHER ON DELINQUENCY OR ON SNITCH
  
  
  On Delinquency Validators SHOULD not have vAlgo in their balance.
  It's first called when deliquency is set, can be called again if the entire vAlgo amount is not burned.
  The vAlgo will be turned to Algo and added to the operator commit

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnToDelinquentValidator(params?: CallParams<CaelusAdminArgs['obj']['burnToDelinquentValidator(axfer,uint64,uint64)void'] | CaelusAdminArgs['tuple']['burnToDelinquentValidator(axfer,uint64,uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['burnToDelinquentValidator(axfer,uint64,uint64)void'] | undefined]>

  /**
   * Calls the reMintDelinquentCommit(uint64)void ABI method.
   *
  * FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT WHEN DELINQUENCY IS SOLVED
  
  
  When Delinquency is solved the operator will mint his commit back into vAlgo.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reMintDelinquentCommit(params?: CallParams<CaelusAdminArgs['obj']['reMintDelinquentCommit(uint64)void'] | CaelusAdminArgs['tuple']['reMintDelinquentCommit(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['reMintDelinquentCommit(uint64)void'] | undefined]>

  /**
   * Calls the bid(uint64)void ABI method.
   *
   * Bid Validator App, highest bidder should have the lowest saturation buffer value.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bid(params?: CallParams<CaelusAdminArgs['obj']['bid(uint64)void'] | CaelusAdminArgs['tuple']['bid(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['bid(uint64)void'] | undefined]>

  /**
   * Calls the declareRewards(uint64,uint64,pay)void ABI method.
   *
  * The method is called by the Validator Pool Contract to declare the rewards.
  
  
  It doesn't utilize stricter checks on call since as long as the rewardPay is sent to the Admin contract we welcome free money to the protocol :)
  There's no other state getting changed aside from the totalStake

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  declareRewards(params?: CallParams<CaelusAdminArgs['obj']['declareRewards(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['declareRewards(uint64,uint64,pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['declareRewards(uint64,uint64,pay)void'] | undefined]>

  /**
   * Calls the delegateStake(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delegateStake(params?: CallParams<CaelusAdminArgs['obj']['delegateStake(uint64,uint64)void'] | CaelusAdminArgs['tuple']['delegateStake(uint64,uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['delegateStake(uint64,uint64)void'] | undefined]>

  /**
   * Calls the snitchToBurn(uint64)void ABI method.
   *
   * Push new Validator App to the burn queue. If the saturation buffer is higher than the current lowest in the queue, the new App will be snitched.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchToBurn(params?: CallParams<CaelusAdminArgs['obj']['snitchToBurn(uint64)void'] | CaelusAdminArgs['tuple']['snitchToBurn(uint64)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['snitchToBurn(uint64)void'] | undefined]>

  /**
   * Calls the multiSnitchToBurn(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  multiSnitchToBurn(params?: CallParams<CaelusAdminArgs['obj']['multiSnitchToBurn(uint64[])void'] | CaelusAdminArgs['tuple']['multiSnitchToBurn(uint64[])void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['multiSnitchToBurn(uint64[])void'] | undefined]>

  /**
   * Calls the reStakeFromSnitch(uint64,uint64,pay)void ABI method.
   *
   * Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reStakeFromSnitch(params?: CallParams<CaelusAdminArgs['obj']['reStakeFromSnitch(uint64,uint64,pay)void'] | CaelusAdminArgs['tuple']['reStakeFromSnitch(uint64,uint64,pay)void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['reStakeFromSnitch(uint64,uint64,pay)void'] | undefined]>

  /**
   * Calls the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method.
   *
  * Algo balances in the Validator Pool Contracts sit idle, but can be efficiently use for flashloans.
  This creates a new route of revenue for the protocol.
  The method checks that each flashloan call is repaid through the subsequent checkBalance method call.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeFlashLoanRequest(params?: CallParams<CaelusAdminArgs['obj']['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | CaelusAdminArgs['tuple']['makeFlashLoanRequest(pay,uint64[],uint64[])void']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['makeFlashLoanRequest(pay,uint64[],uint64[])void'] | undefined]>

  /**
   * Calls the getFLcounter()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFLcounter(params?: CallParams<CaelusAdminArgs['obj']['getFLcounter()uint64'] | CaelusAdminArgs['tuple']['getFLcounter()uint64']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['getFLcounter()uint64'] | undefined]>

  /**
   * Calls the arc62_get_circulating_supply(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc62GetCirculatingSupply(params?: CallParams<CaelusAdminArgs['obj']['arc62_get_circulating_supply(uint64)uint64'] | CaelusAdminArgs['tuple']['arc62_get_circulating_supply(uint64)uint64']>): CaelusAdminComposer<[...TReturns, CaelusAdminReturns['arc62_get_circulating_supply(uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CaelusAdminComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CaelusAdminComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CaelusAdminComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CaelusAdminComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CaelusAdminComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CaelusAdminComposerResults<TReturns>>
}
export type CaelusAdminComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

