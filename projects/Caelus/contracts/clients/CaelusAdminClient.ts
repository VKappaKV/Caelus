/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "creatorChangeCreatorRelatedParams(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initPoolContract(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "loadPoolContractProgram(uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "poolContractIsSet()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initLST(string,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initBurnQueue()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addCaelusValidator(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateLSTRatio()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMintAmount(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBurnAmount(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintRequest(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnRequest(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintValidatorCommit(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnValidatorCommit()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnToDelinquentValidator(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reMintDeliquentCommit(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delegateStake(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitch(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reStakeFromSnitch(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "onOperatorExit(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "declareRewards(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeFlashLoanRequest(pay,uint64[],uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getFLcounter()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "pegRatio": {
          "type": "uint64",
          "key": "peg"
        },
        "initializedPoolContract": {
          "type": "bytes",
          "key": "initPoolContract"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "validatorPoolVersion"
        },
        "totalAlgoStaked": {
          "type": "uint64",
          "key": "totalstake"
        },
        "init_vALGO": {
          "type": "bytes",
          "key": "init_vALGO"
        },
        "vALGOid": {
          "type": "uint64",
          "key": "vALGOid"
        },
        "vestID": {
          "type": "uint64",
          "key": "vestID"
        },
        "stVestID": {
          "type": "uint64",
          "key": "stVestID"
        },
        "circulatingSupply": {
          "type": "uint64",
          "key": "circulatingSupply"
        },
        "highestBidder": {
          "type": "uint64",
          "key": "highestBidder"
        },
        "idleAlgoToStake": {
          "type": "uint64",
          "key": "idleAlgo"
        },
        "vestigeAddress": {
          "type": "bytes",
          "key": "vestigeAddress"
        },
        "flashLoanCounter": {
          "type": "uint64",
          "key": "flashLoanCounter"
        },
        "lastFlashloanBlock": {
          "type": "uint64",
          "key": "lastFlashloanBlock"
        },
        "burnPrio": {
          "type": "uint64",
          "key": "burnPrio"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 12
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCmludGNibG9jayAxIDAgOCA2IDQgMTAwMDAwIDEwMDAwIDQwOTYgMyAxMDAwIDI4NTAwIDUwMDAwIDIgMTAgMTQgODAKYnl0ZWNibG9jayAweCAweDY5NjQ2YzY1NDE2YzY3NmYgMHg2MzY5NzI2Mzc1NmM2MTc0Njk2ZTY3NTM3NTcwNzA2Yzc5IDB4NjY2YzYxNzM2ODRjNmY2MTZlNDM2Zjc1NmU3NDY1NzIgMHg3NDZmNzQ2MTZjNzM3NDYxNmI2NSAweDYyNzU3MjZlNTA3MjY5NmYgMHg3NjQxNGM0NzRmNjk2NCAweDYyNzU3MjZlNTE3NTY1NzU2NSAweDc2NjE2YzY5NjQ2MTc0NmY3MjQxNzA3MDcyNmY3NjYxNmM1MDcyNmY2NzcyNjE2ZCAweDczNjE3NDc1NzI2MTc0Njk2ZjZlNDI3NTY2NjY2NTcyIDB4MDAgMHg3NjYxNmM2OTY0NjE3NDZmNzI1MDZmNmY2YzU2NjU3MjczNjk2ZjZlIDB4Njg2OTY3Njg2NTczNzQ0MjY5NjQ2NDY1NzIgMHgxNTFmN2M3NSAweDNkYzdhZTc5IDB4NzA2NTY3IDB4Njk2ZTY5NzQ1MDZmNmY2YzQzNmY2ZTc0NzI2MTYzNzQgMHg2ZjcwNjU3MjYxNzQ2ZjcyNDE2NDY0NzI2NTczNzMgMHg2OTZlNjk3NDVmNzY0MTRjNDc0ZiAweDZjNjE3Mzc0NDY2YzYxNzM2ODZjNmY2MTZlNDI2YzZmNjM2YiAweDc2NjU3Mzc0Njk2NzY1NDE2NDY0NzI2NTczNzMgMHg2NDY1NmM2NTY3NjE3NDY1NjQ1Mzc0NjE2YjY1IDB4NjQ2NTZjNjU2NzYxNzQ2NTY0NTM1NDYxNmI2NSAweDZmNzA2NTcyNjE3NDZmNzI0MzZmNmQ2ZDY5NzQgMHg3Mzc0NTY2NTczNzQ0OTQ0IDB4NzY2NTczNzQ0OTQ0CgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNS41Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnRjIDMgLy8gNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKTogdm9pZApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjY5CgkvLyB0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSA9IDAKCWJ5dGVjIDQgLy8gICJ0b3RhbHN0YWtlIgoJaW50YyAxIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NzAKCS8vIHRoaXMuaW5pdF92QUxHTy52YWx1ZSA9IGZhbHNlCglieXRlYyAxOCAvLyAgImluaXRfdkFMR08iCglpbnRjIDEgLy8gMAoJYnl0ZWMgMTAgLy8gMHgwMAoJaW50YyAxIC8vIDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjcxCgkvLyB0aGlzLmluaXRpYWxpemVkUG9vbENvbnRyYWN0LnZhbHVlID0gZmFsc2UKCWJ5dGVjIDE2IC8vICAiaW5pdFBvb2xDb250cmFjdCIKCWludGMgMSAvLyAwCglieXRlYyAxMCAvLyAweDAwCglpbnRjIDEgLy8gMAoJdW5jb3ZlciAyCglzZXRiaXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NzIKCS8vIHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0VmVyc2lvbi52YWx1ZSA9IDAKCWJ5dGVjIDExIC8vICAidmFsaWRhdG9yUG9vbFZlcnNpb24iCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo3MwoJLy8gdGhpcy5wZWdSYXRpby52YWx1ZSA9IDEgKiBTQ0FMRQoJYnl0ZWMgMTUgLy8gICJwZWciCglpbnRjIDYgLy8gMTAwMDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NzQKCS8vIHRoaXMuY2lyY3VsYXRpbmdTdXBwbHkudmFsdWUgPSAwCglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdTdXBwbHkiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo3NQoJLy8gdGhpcy5pZGxlQWxnb1RvU3Rha2UudmFsdWUgPSAwCglieXRlYyAxIC8vICAiaWRsZUFsZ28iCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo3NgoJLy8gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlID0gMAoJYnl0ZWMgMyAvLyAgImZsYXNoTG9hbkNvdW50ZXIiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gY3JlYXRvckNoYW5nZUNyZWF0b3JSZWxhdGVkUGFyYW1zKGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfY3JlYXRvckNoYW5nZUNyZWF0b3JSZWxhdGVkUGFyYW1zOgoJLy8gc3RWZXN0SUQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIHZlc3RJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gbmV3VmVzdGlnZUFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglwdXNoaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDIgKG5ld1Zlc3RpZ2VBZGRyZXNzKSBmb3IgY3JlYXRvckNoYW5nZUNyZWF0b3JSZWxhdGVkUGFyYW1zIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIGNyZWF0b3JDaGFuZ2VDcmVhdG9yUmVsYXRlZFBhcmFtcyhhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBjcmVhdG9yQ2hhbmdlQ3JlYXRvclJlbGF0ZWRQYXJhbXMKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0b3JDaGFuZ2VDcmVhdG9yUmVsYXRlZFBhcmFtcyhuZXdWZXN0aWdlQWRkcmVzczogQWRkcmVzcywgdmVzdElEOiBBc3NldElELCBzdFZlc3RJRDogQXNzZXRJRCk6IHZvaWQKY3JlYXRvckNoYW5nZUNyZWF0b3JSZWxhdGVkUGFyYW1zOgoJcHJvdG8gMyAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6ODAKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYXBwLmNyZWF0b3IpCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo4MQoJLy8gdGhpcy52ZXN0aWdlQWRkcmVzcy52YWx1ZSA9IG5ld1Zlc3RpZ2VBZGRyZXNzCglieXRlYyAyMCAvLyAgInZlc3RpZ2VBZGRyZXNzIgoJZnJhbWVfZGlnIC0xIC8vIG5ld1Zlc3RpZ2VBZGRyZXNzOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjgyCgkvLyB0aGlzLnZlc3RJRC52YWx1ZSA9IHZlc3RJRAoJYnl0ZWMgMjUgLy8gICJ2ZXN0SUQiCglmcmFtZV9kaWcgLTIgLy8gdmVzdElEOiBBc3NldElECglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjgzCgkvLyB0aGlzLnN0VmVzdElELnZhbHVlID0gc3RWZXN0SUQKCWJ5dGVjIDI0IC8vICAic3RWZXN0SUQiCglmcmFtZV9kaWcgLTMgLy8gc3RWZXN0SUQ6IEFzc2V0SUQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGluaXRQb29sQ29udHJhY3QodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9pbml0UG9vbENvbnRyYWN0OgoJLy8gcHJvZ3JhbVNpemU6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgaW5pdFBvb2xDb250cmFjdCh1aW50NjQpdm9pZAoJY2FsbHN1YiBpbml0UG9vbENvbnRyYWN0CglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBpbml0UG9vbENvbnRyYWN0KHByb2dyYW1TaXplOiB1aW50NjQpOiB2b2lkCmluaXRQb29sQ29udHJhY3Q6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo4NwoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hcHAuY3JlYXRvcikKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjg4CgkvLyB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS5jcmVhdGUocHJvZ3JhbVNpemUpCglieXRlYyA4IC8vICAidmFsaWRhdG9yQXBwcm92YWxQcm9ncmFtIgoJZnJhbWVfZGlnIC0xIC8vIHByb2dyYW1TaXplOiB1aW50NjQKCWJveF9jcmVhdGUKCXBvcAoJcmV0c3ViCgovLyBsb2FkUG9vbENvbnRyYWN0UHJvZ3JhbSh1aW50NjQsYnl0ZVtdKXZvaWQKKmFiaV9yb3V0ZV9sb2FkUG9vbENvbnRyYWN0UHJvZ3JhbToKCS8vIGRhdGE6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBvZmZzZXR0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGxvYWRQb29sQ29udHJhY3RQcm9ncmFtKHVpbnQ2NCxieXRlW10pdm9pZAoJY2FsbHN1YiBsb2FkUG9vbENvbnRyYWN0UHJvZ3JhbQoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gbG9hZFBvb2xDb250cmFjdFByb2dyYW0ob2Zmc2V0dDogdWludDY0LCBkYXRhOiBieXRlcyk6IHZvaWQKbG9hZFBvb2xDb250cmFjdFByb2dyYW06Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo5MgoJLy8gYXNzZXJ0KCF0aGlzLmluaXRpYWxpemVkUG9vbENvbnRyYWN0LnZhbHVlKQoJYnl0ZWMgMTYgLy8gICJpbml0UG9vbENvbnRyYWN0IgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMSAvLyAwCglnZXRiaXQKCSEKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjkzCgkvLyB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS5yZXBsYWNlKG9mZnNldHQsIGRhdGEpCglieXRlYyA4IC8vICAidmFsaWRhdG9yQXBwcm92YWxQcm9ncmFtIgoJZnJhbWVfZGlnIC0xIC8vIG9mZnNldHQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIGRhdGE6IGJ5dGVzCglib3hfcmVwbGFjZQoJcmV0c3ViCgovLyBwb29sQ29udHJhY3RJc1NldCgpdm9pZAoqYWJpX3JvdXRlX3Bvb2xDb250cmFjdElzU2V0OgoJLy8gZXhlY3V0ZSBwb29sQ29udHJhY3RJc1NldCgpdm9pZAoJY2FsbHN1YiBwb29sQ29udHJhY3RJc1NldAoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gcG9vbENvbnRyYWN0SXNTZXQoKTogdm9pZApwb29sQ29udHJhY3RJc1NldDoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjk3CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFwcC5jcmVhdG9yKQoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6OTgKCS8vIHRoaXMuaW5pdGlhbGl6ZWRQb29sQ29udHJhY3QudmFsdWUgPSB0cnVlCglieXRlYyAxNiAvLyAgImluaXRQb29sQ29udHJhY3QiCglpbnRjIDAgLy8gMQoJYnl0ZWMgMTAgLy8gMHgwMAoJaW50YyAxIC8vIDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjk5CgkvLyB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdFZlcnNpb24udmFsdWUgKz0gMQoJYnl0ZWMgMTEgLy8gICJ2YWxpZGF0b3JQb29sVmVyc2lvbiIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDAgLy8gMQoJKwoJYnl0ZWMgMTEgLy8gICJ2YWxpZGF0b3JQb29sVmVyc2lvbiIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGluaXRMU1Qoc3RyaW5nLHN0cmluZyxzdHJpbmcpdm9pZAoqYWJpX3JvdXRlX2luaXRMU1Q6CgkvLyB1cmw6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZXh0cmFjdCAyIDAKCgkvLyB1bml0TmFtZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIG5hbWU6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIGluaXRMU1Qoc3RyaW5nLHN0cmluZyxzdHJpbmcpdm9pZAoJY2FsbHN1YiBpbml0TFNUCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBpbml0TFNUKG5hbWU6IHN0cmluZywgdW5pdE5hbWU6IHN0cmluZywgdXJsOiBzdHJpbmcpOiB2b2lkCmluaXRMU1Q6Cglwcm90byAzIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMDMKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYXBwLmNyZWF0b3IpCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMDQKCS8vIGFzc2VydCghdGhpcy5pbml0X3ZBTEdPLnZhbHVlKQoJYnl0ZWMgMTggLy8gICJpbml0X3ZBTEdPIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMSAvLyAwCglnZXRiaXQKCSEKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjEwNQoJLy8gdGhpcy52QUxHT2lkLnZhbHVlID0gc2VuZEFzc2V0Q3JlYXRpb24oewoJLy8gICAgICAgY29uZmlnQXNzZXRUb3RhbDogMTBfMDAwXzAwMCwKCS8vICAgICAgIGNvbmZpZ0Fzc2V0RGVjaW1hbHM6IDYsCgkvLyAgICAgICBjb25maWdBc3NldFJlc2VydmU6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICBjb25maWdBc3NldE1hbmFnZXI6IGdsb2JhbHMuemVyb0FkZHJlc3MsCgkvLyAgICAgICBjb25maWdBc3NldENsYXdiYWNrOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgY29uZmlnQXNzZXRGcmVlemU6IGdsb2JhbHMuemVyb0FkZHJlc3MsCgkvLyAgICAgICBjb25maWdBc3NldERlZmF1bHRGcm96ZW46IDAsCgkvLyAgICAgICBjb25maWdBc3NldE5hbWU6IG5hbWUsCgkvLyAgICAgICBjb25maWdBc3NldFVuaXROYW1lOiB1bml0TmFtZSwKCS8vICAgICAgIGNvbmZpZ0Fzc2V0VVJMOiB1cmwsCgkvLyAgICAgfSkKCWJ5dGVjIDYgLy8gICJ2QUxHT2lkIgoJaXR4bl9iZWdpbgoJaW50YyA4IC8vICBhY2ZnCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTA2CgkvLyBjb25maWdBc3NldFRvdGFsOiAxMF8wMDBfMDAwCglwdXNoaW50IDEwXzAwMF8wMDAKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjEwNwoJLy8gY29uZmlnQXNzZXREZWNpbWFsczogNgoJaW50YyAzIC8vIDYKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjEwOAoJLy8gY29uZmlnQXNzZXRSZXNlcnZlOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldFJlc2VydmUKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMDkKCS8vIGNvbmZpZ0Fzc2V0TWFuYWdlcjogZ2xvYmFscy56ZXJvQWRkcmVzcwoJZ2xvYmFsIFplcm9BZGRyZXNzCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjExMAoJLy8gY29uZmlnQXNzZXRDbGF3YmFjazogZ2xvYmFscy56ZXJvQWRkcmVzcwoJZ2xvYmFsIFplcm9BZGRyZXNzCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0Q2xhd2JhY2sKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMTEKCS8vIGNvbmZpZ0Fzc2V0RnJlZXplOiBnbG9iYWxzLnplcm9BZGRyZXNzCglnbG9iYWwgWmVyb0FkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRGcmVlemUKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMTIKCS8vIGNvbmZpZ0Fzc2V0RGVmYXVsdEZyb3plbjogMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWZhdWx0RnJvemVuCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTEzCgkvLyBjb25maWdBc3NldE5hbWU6IG5hbWUKCWZyYW1lX2RpZyAtMSAvLyBuYW1lOiBzdHJpbmcKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTE0CgkvLyBjb25maWdBc3NldFVuaXROYW1lOiB1bml0TmFtZQoJZnJhbWVfZGlnIC0yIC8vIHVuaXROYW1lOiBzdHJpbmcKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjExNQoJLy8gY29uZmlnQXNzZXRVUkw6IHVybAoJZnJhbWVfZGlnIC0zIC8vIHVybDogc3RyaW5nCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VVJMCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBDcmVhdGVkQXNzZXRJRAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMTcKCS8vIHRoaXMuaW5pdF92QUxHTy52YWx1ZSA9IHRydWUKCWJ5dGVjIDE4IC8vICAiaW5pdF92QUxHTyIKCWludGMgMCAvLyAxCglieXRlYyAxMCAvLyAweDAwCglpbnRjIDEgLy8gMAoJdW5jb3ZlciAyCglzZXRiaXQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGluaXRCdXJuUXVldWUoKXZvaWQKKmFiaV9yb3V0ZV9pbml0QnVyblF1ZXVlOgoJLy8gZXhlY3V0ZSBpbml0QnVyblF1ZXVlKCl2b2lkCgljYWxsc3ViIGluaXRCdXJuUXVldWUKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGluaXRCdXJuUXVldWUoKTogdm9pZAppbml0QnVyblF1ZXVlOgoJcHJvdG8gMCAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMjEKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYXBwLmNyZWF0b3IpCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMjIKCS8vIGZpeGVkUXVldWVMZW5ndGggPSA4ICogMTAKCWludGMgMTUgLy8gODAKCWZyYW1lX2J1cnkgMCAvLyBmaXhlZFF1ZXVlTGVuZ3RoOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMjMKCS8vIHRoaXMuYnVyblF1ZXVlLmNyZWF0ZShmaXhlZFF1ZXVlTGVuZ3RoKQoJYnl0ZWMgNyAvLyAgImJ1cm5RdWV1ZSIKCWludGMgMTUgLy8gIGZpeGVkUXVldWVMZW5ndGg6IHVpbnQ2NAoJYm94X2NyZWF0ZQoJcG9wCglyZXRzdWIKCi8vIGFkZENhZWx1c1ZhbGlkYXRvcihwYXkpdm9pZAoqYWJpX3JvdXRlX2FkZENhZWx1c1ZhbGlkYXRvcjoKCS8vIG1iclBheTogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKG1iclBheSkgZm9yIGFkZENhZWx1c1ZhbGlkYXRvciBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIGFkZENhZWx1c1ZhbGlkYXRvcihwYXkpdm9pZAoJY2FsbHN1YiBhZGRDYWVsdXNWYWxpZGF0b3IKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGFkZENhZWx1c1ZhbGlkYXRvcihtYnJQYXk6IFBheVR4bik6IHZvaWQKYWRkQ2FlbHVzVmFsaWRhdG9yOgoJcHJvdG8gMSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMjcKCS8vIG1iciA9IHRoaXMubWluQmFsYW5jZUZvckFjY291bnQoCgkvLyAgICAgICAxLAoJLy8gICAgICAgMywKCS8vICAgICAgIDEsCgkvLyAgICAgICAwLAoJLy8gICAgICAgMCwKCS8vICAgICAgIENhZWx1c1ZhbGlkYXRvclBvb2wuc2NoZW1hLmdsb2JhbC5udW1VaW50LAoJLy8gICAgICAgQ2FlbHVzVmFsaWRhdG9yUG9vbC5zY2hlbWEuZ2xvYmFsLm51bUJ5dGVTbGljZQoJLy8gICAgICkKCWludGMgNCAvLyA0CglpbnRjIDE0IC8vIDE0CglpbnRjIDEgLy8gMAoJZHVwCglpbnRjIDAgLy8gMQoJaW50YyA4IC8vIDMKCWludGMgMCAvLyAxCgljYWxsc3ViIG1pbkJhbGFuY2VGb3JBY2NvdW50CglmcmFtZV9idXJ5IDAgLy8gbWJyOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMzYKCS8vIHZlcmlmeVBheVR4bihtYnJQYXksIHsKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiBtYnIsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJtYnJQYXkiLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBtYnJQYXk6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglmcmFtZV9kaWcgMCAvLyBtYnI6IHVpbnQ2NAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoiYW1vdW50IiwiZXhwZWN0ZWQiOiJtYnIifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTQxCgkvLyBzZW5kQXBwQ2FsbCh7CgkvLyAgICAgICBvbkNvbXBsZXRpb246IE9uQ29tcGxldGlvbi5Ob09wLAoJLy8gICAgICAgYXBwcm92YWxQcm9ncmFtOiBbCgkvLyAgICAgICAgIHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLmV4dHJhY3QoMCwgNDA5NiksCgkvLyAgICAgICAgIHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLmV4dHJhY3QoNDA5NiwgdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RBcHByb3ZhbFByb2dyYW0uc2l6ZSAtIDQwOTYpLAoJLy8gICAgICAgXSwKCS8vICAgICAgIGNsZWFyU3RhdGVQcm9ncmFtOiBDYWVsdXNWYWxpZGF0b3JQb29sLmNsZWFyUHJvZ3JhbSgpLAoJLy8gICAgICAgZ2xvYmFsTnVtVWludDogQ2FlbHVzVmFsaWRhdG9yUG9vbC5zY2hlbWEuZ2xvYmFsLm51bVVpbnQsCgkvLyAgICAgICBnbG9iYWxOdW1CeXRlU2xpY2U6IENhZWx1c1ZhbGlkYXRvclBvb2wuc2NoZW1hLmdsb2JhbC5udW1CeXRlU2xpY2UsCgkvLyAgICAgICBleHRyYVByb2dyYW1QYWdlczogMywKCS8vICAgICAgIGFwcGxpY2F0aW9uQXJnczogWwoJLy8gICAgICAgICBtZXRob2QoJ2NyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCxieXRlcyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCcpLAoJLy8gICAgICAgICBpdG9iKHRoaXMuYXBwLmlkKSwKCS8vICAgICAgICAgdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICBpdG9iKHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0VmVyc2lvbi52YWx1ZSksCgkvLyAgICAgICAgIGl0b2IodGhpcy52ZXN0SUQudmFsdWUpLAoJLy8gICAgICAgICBpdG9iKHRoaXMuc3RWZXN0SUQudmFsdWUpLAoJLy8gICAgICAgICBpdG9iKHRoaXMudkFMR09pZC52YWx1ZSksCgkvLyAgICAgICBdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNDIKCS8vIG9uQ29tcGxldGlvbjogT25Db21wbGV0aW9uLk5vT3AKCWludGMgMSAvLyAgTm9PcAoJaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNDMKCS8vIGFwcHJvdmFsUHJvZ3JhbTogWwoJLy8gICAgICAgICB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS5leHRyYWN0KDAsIDQwOTYpLAoJLy8gICAgICAgICB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS5leHRyYWN0KDQwOTYsIHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLnNpemUgLSA0MDk2KSwKCS8vICAgICAgIF0KCWJ5dGVjIDggLy8gICJ2YWxpZGF0b3JBcHByb3ZhbFByb2dyYW0iCglpbnRjIDEgLy8gMAoJaW50YyA3IC8vIDQwOTYKCWJveF9leHRyYWN0CglpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbVBhZ2VzCglieXRlYyA4IC8vICAidmFsaWRhdG9yQXBwcm92YWxQcm9ncmFtIgoJaW50YyA3IC8vIDQwOTYKCWJ5dGVjIDggLy8gICJ2YWxpZGF0b3JBcHByb3ZhbFByb2dyYW0iCglib3hfbGVuCgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS5zaXplCglhc3NlcnQKCWludGMgNyAvLyA0MDk2CgktCglib3hfZXh0cmFjdAoJaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW1QYWdlcwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE0NwoJLy8gY2xlYXJTdGF0ZVByb2dyYW06IENhZWx1c1ZhbGlkYXRvclBvb2wuY2xlYXJQcm9ncmFtKCkKCXB1c2hieXRlcyAweDBiCglpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTQ4CgkvLyBnbG9iYWxOdW1VaW50OiBDYWVsdXNWYWxpZGF0b3JQb29sLnNjaGVtYS5nbG9iYWwubnVtVWludAoJaW50YyAxNCAvLyAxNAoJaXR4bl9maWVsZCBHbG9iYWxOdW1VaW50CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTQ5CgkvLyBnbG9iYWxOdW1CeXRlU2xpY2U6IENhZWx1c1ZhbGlkYXRvclBvb2wuc2NoZW1hLmdsb2JhbC5udW1CeXRlU2xpY2UKCWludGMgNCAvLyA0CglpdHhuX2ZpZWxkIEdsb2JhbE51bUJ5dGVTbGljZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE1MAoJLy8gZXh0cmFQcm9ncmFtUGFnZXM6IDMKCWludGMgOCAvLyAzCglpdHhuX2ZpZWxkIEV4dHJhUHJvZ3JhbVBhZ2VzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTUxCgkvLyBhcHBsaWNhdGlvbkFyZ3M6IFsKCS8vICAgICAgICAgbWV0aG9kKCdjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsYnl0ZXMsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQnKSwKCS8vICAgICAgICAgaXRvYih0aGlzLmFwcC5pZCksCgkvLyAgICAgICAgIHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgaXRvYih0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdFZlcnNpb24udmFsdWUpLAoJLy8gICAgICAgICBpdG9iKHRoaXMudmVzdElELnZhbHVlKSwKCS8vICAgICAgICAgaXRvYih0aGlzLnN0VmVzdElELnZhbHVlKSwKCS8vICAgICAgICAgaXRvYih0aGlzLnZBTEdPaWQudmFsdWUpLAoJLy8gICAgICAgXQoJcHVzaGJ5dGVzIDB4Nzg2OWMzODcgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsYnl0ZXMsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglieXRlYyAxMSAvLyAgInZhbGlkYXRvclBvb2xWZXJzaW9uIgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglieXRlYyAyNSAvLyAgInZlc3RJRCIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJYnl0ZWMgMjQgLy8gICJzdFZlc3RJRCIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJYnl0ZWMgNiAvLyAgInZBTEdPaWQiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGNhbGN1bGF0ZUxTVFJhdGlvKCl2b2lkCiphYmlfcm91dGVfY2FsY3VsYXRlTFNUUmF0aW86CgkvLyBleGVjdXRlIGNhbGN1bGF0ZUxTVFJhdGlvKCl2b2lkCgljYWxsc3ViIGNhbGN1bGF0ZUxTVFJhdGlvCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBjYWxjdWxhdGVMU1RSYXRpbygpOiB2b2lkCmNhbGN1bGF0ZUxTVFJhdGlvOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTY4CgkvLyB0aGlzLnBlZ1JhdGlvLnZhbHVlID0gd2lkZVJhdGlvKFt0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSwgU0NBTEVdLCBbdGhpcy5jaXJjdWxhdGluZ1N1cHBseS52YWx1ZV0pCglieXRlYyAxNSAvLyAgInBlZyIKCWJ5dGVjIDQgLy8gICJ0b3RhbHN0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgNiAvLyAxMDAwMAoJbXVsdwoJaW50YyAxIC8vIDAKCWJ5dGVjIDIgLy8gICJjaXJjdWxhdGluZ1N1cHBseSIKCWFwcF9nbG9iYWxfZ2V0CglkaXZtb2R3Cglwb3AKCXBvcAoJc3dhcAoJIQoKCS8vIHdpZGVSYXRpbyBmYWlsZWQKCWFzc2VydAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gZ2V0TWludEFtb3VudCh1aW50NjQpdWludDY0CiphYmlfcm91dGVfZ2V0TWludEFtb3VudDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMTMgLy8gMHgxNTFmN2M3NQoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBnZXRNaW50QW1vdW50KHVpbnQ2NCl1aW50NjQKCWNhbGxzdWIgZ2V0TWludEFtb3VudAoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGdldE1pbnRBbW91bnQoYW1vdW50OiB1aW50NjQpOiB1aW50NjQKZ2V0TWludEFtb3VudDoKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE3MgoJLy8gdGhpcy5jYWxjdWxhdGVMU1RSYXRpbygpCgljYWxsc3ViIGNhbGN1bGF0ZUxTVFJhdGlvCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTczCgkvLyByZXR1cm4gd2lkZVJhdGlvKFthbW91bnQsIFNDQUxFXSwgW3RoaXMucGVnUmF0aW8udmFsdWVdKTsKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJaW50YyA2IC8vIDEwMDAwCgltdWx3CglpbnRjIDEgLy8gMAoJYnl0ZWMgMTUgLy8gICJwZWciCglhcHBfZ2xvYmFsX2dldAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCgkvLyB3aWRlUmF0aW8gZmFpbGVkCglhc3NlcnQKCXJldHN1YgoKLy8gZ2V0QnVybkFtb3VudCh1aW50NjQpdWludDY0CiphYmlfcm91dGVfZ2V0QnVybkFtb3VudDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMTMgLy8gMHgxNTFmN2M3NQoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBnZXRCdXJuQW1vdW50KHVpbnQ2NCl1aW50NjQKCWNhbGxzdWIgZ2V0QnVybkFtb3VudAoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGdldEJ1cm5BbW91bnQoYW1vdW50OiB1aW50NjQpOiB1aW50NjQKZ2V0QnVybkFtb3VudDoKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE3NwoJLy8gdGhpcy5jYWxjdWxhdGVMU1RSYXRpbygpCgljYWxsc3ViIGNhbGN1bGF0ZUxTVFJhdGlvCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTc4CgkvLyByZXR1cm4gd2lkZVJhdGlvKFthbW91bnQsIHRoaXMucGVnUmF0aW8udmFsdWVdLCBbU0NBTEVdKTsKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJYnl0ZWMgMTUgLy8gICJwZWciCglhcHBfZ2xvYmFsX2dldAoJbXVsdwoJaW50YyAxIC8vIDAKCWludGMgNiAvLyAxMDAwMAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCgkvLyB3aWRlUmF0aW8gZmFpbGVkCglhc3NlcnQKCXJldHN1YgoKLy8gbWludFJlcXVlc3QocGF5KXZvaWQKKmFiaV9yb3V0ZV9taW50UmVxdWVzdDoKCS8vIG1pbnRUeG46IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludGMgMCAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDAgLy8gIHBheQoJPT0KCgkvLyBhcmd1bWVudCAwIChtaW50VHhuKSBmb3IgbWludFJlcXVlc3QgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBtaW50UmVxdWVzdChwYXkpdm9pZAoJY2FsbHN1YiBtaW50UmVxdWVzdAoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gbWludFJlcXVlc3QobWludFR4bjogUGF5VHhuKTogdm9pZAptaW50UmVxdWVzdDoKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTgzCgkvLyBhc3NlcnQobWludFR4bi5hbW91bnQgPj0gQUxHT1JBTkRfQkFTRV9GRUUsICdtaW5pbXVtIGFtb3VudCB0byBzdGFrZSBpcyAwLjAwMSBBbGdvJykKCWZyYW1lX2RpZyAtMSAvLyBtaW50VHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaW50YyA5IC8vIDEwMDAKCT49CgoJLy8gbWluaW11bSBhbW91bnQgdG8gc3Rha2UgaXMgMC4wMDEgQWxnbwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTg0CgkvLyB2ZXJpZnlQYXlUeG4obWludFR4biwgewoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1pbnRUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibWludFR4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTg3CgkvLyB0aGlzLmlkbGVBbGdvVG9TdGFrZS52YWx1ZSArPSBtaW50VHhuLmFtb3VudAoJYnl0ZWMgMSAvLyAgImlkbGVBbGdvIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBtaW50VHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJKwoJYnl0ZWMgMSAvLyAgImlkbGVBbGdvIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxODgKCS8vIG1pbnRlZCA9IHRoaXMuZ2V0TWludEFtb3VudChtaW50VHhuLmFtb3VudCkKCWZyYW1lX2RpZyAtMSAvLyBtaW50VHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJY2FsbHN1YiBnZXRNaW50QW1vdW50CglmcmFtZV9idXJ5IDAgLy8gbWludGVkOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxODkKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIHhmZXJBc3NldDogdGhpcy52QUxHT2lkLnZhbHVlLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IG1pbnRlZCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyA0IC8vICBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE5MAoJLy8geGZlckFzc2V0OiB0aGlzLnZBTEdPaWQudmFsdWUKCWJ5dGVjIDYgLy8gICJ2QUxHT2lkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTkxCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE5MgoJLy8gYXNzZXRBbW91bnQ6IG1pbnRlZAoJZnJhbWVfZGlnIDAgLy8gbWludGVkOiB1aW50NjQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTk0CgkvLyB0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSArPSBtaW50VHhuLmFtb3VudAoJYnl0ZWMgNCAvLyAgInRvdGFsc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIG1pbnRUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CgkrCglieXRlYyA0IC8vICAidG90YWxzdGFrZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTk1CgkvLyB0aGlzLmNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlICs9IG1pbnRlZAoJYnl0ZWMgMiAvLyAgImNpcmN1bGF0aW5nU3VwcGx5IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIG1pbnRlZDogdWludDY0CgkrCglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdTdXBwbHkiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBidXJuUmVxdWVzdChheGZlcil2b2lkCiphYmlfcm91dGVfYnVyblJlcXVlc3Q6CgkvLyBidXJuVHhuOiBheGZlcgoJdHhuIEdyb3VwSW5kZXgKCWludGMgMCAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDQgLy8gIGF4ZmVyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGJ1cm5UeG4pIGZvciBidXJuUmVxdWVzdCBtdXN0IGJlIGEgYXhmZXIgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgYnVyblJlcXVlc3QoYXhmZXIpdm9pZAoJY2FsbHN1YiBidXJuUmVxdWVzdAoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gYnVyblJlcXVlc3QoYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4bik6IHZvaWQKYnVyblJlcXVlc3Q6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiA2CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjAxCgkvLyBhc3NlcnQoYnVyblR4bi5hc3NldEFtb3VudCA+PSBBTEdPUkFORF9CQVNFX0ZFRSkKCWZyYW1lX2RpZyAtMSAvLyBidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJaW50YyA5IC8vIDEwMDAKCT49Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMDIKCS8vIGFtdFRvQnVybiA9IHRoaXMuZ2V0QnVybkFtb3VudChidXJuVHhuLmFzc2V0QW1vdW50KQoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CgljYWxsc3ViIGdldEJ1cm5BbW91bnQKCWZyYW1lX2J1cnkgMCAvLyBhbXRUb0J1cm46IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIwMwoJLy8gZGxnVG9QcmlvID0gdGhpcy5idXJuUHJpby52YWx1ZS5nbG9iYWxTdGF0ZSgnZGVsZWdhdGVkU3Rha2UnKSBhcyB1aW50NjQKCWJ5dGVjIDUgLy8gICJidXJuUHJpbyIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAyMSAvLyAgImRlbGVnYXRlZFN0YWtlIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuYnVyblByaW8udmFsdWUuZ2xvYmFsU3RhdGUoJ2RlbGVnYXRlZFN0YWtlJykKCWFzc2VydAoJZnJhbWVfYnVyeSAxIC8vIGRsZ1RvUHJpbzogdWludDY0CgoJLy8gKmlmMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIwNAoJLy8gZGxnVG9QcmlvID49IGFtdFRvQnVybgoJZnJhbWVfZGlnIDEgLy8gZGxnVG9QcmlvOiB1aW50NjQKCWZyYW1lX2RpZyAwIC8vIGFtdFRvQnVybjogdWludDY0Cgk+PQoJYnogKmlmMF9lbmQKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIwNQoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLmJ1cm5TdGFrZSwgdm9pZD4oewoJLy8gICAgICAgICBhcHBsaWNhdGlvbklEOiB0aGlzLmJ1cm5QcmlvLnZhbHVlLAoJLy8gICAgICAgICBtZXRob2RBcmdzOiBbYW10VG9CdXJuLCB0aGlzLnR4bi5zZW5kZXJdLAoJLy8gICAgICAgICBmZWU6IDAsCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglieXRlYyAxNCAvLyAgbWV0aG9kICJidXJuU3Rha2UodWludDY0LGFkZHJlc3Mpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjA2CgkvLyBhcHBsaWNhdGlvbklEOiB0aGlzLmJ1cm5QcmlvLnZhbHVlCglieXRlYyA1IC8vICAiYnVyblByaW8iCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjA3CgkvLyBtZXRob2RBcmdzOiBbYW10VG9CdXJuLCB0aGlzLnR4bi5zZW5kZXJdCglmcmFtZV9kaWcgMCAvLyBhbXRUb0J1cm46IHVpbnQ2NAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjA4CgkvLyBmZWU6IDAKCWludGMgMSAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMTAKCS8vIHRoaXMuc25pdGNoKHRoaXMuYnVyblF1ZXVlLnZhbHVlWzBdKQoJYnl0ZWMgNyAvLyAgImJ1cm5RdWV1ZSIKCWludGMgMSAvLyAwCglpbnRjIDIgLy8gOAoJYm94X2V4dHJhY3QKCWJ0b2kKCWNhbGxzdWIgc25pdGNoCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjExCgkvLyByZXR1cm47CglyZXRzdWIKCippZjBfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjEzCgkvLyBidXJuaW5nID0gdGhpcy5idXJuUHJpby52YWx1ZS5nbG9iYWxTdGF0ZSgnZGVsZWdhdGVkU1Rha2UnKSBhcyB1aW50NjQKCWJ5dGVjIDUgLy8gICJidXJuUHJpbyIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAyMiAvLyAgImRlbGVnYXRlZFNUYWtlIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuYnVyblByaW8udmFsdWUuZ2xvYmFsU3RhdGUoJ2RlbGVnYXRlZFNUYWtlJykKCWFzc2VydAoJZnJhbWVfYnVyeSAyIC8vIGJ1cm5pbmc6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIxNAoJLy8gdGhpcy5wZW5kaW5nR3JvdXAuYWRkTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzVmFsaWRhdG9yUG9vbC5wcm90b3R5cGUuYnVyblN0YWtlLCB2b2lkPih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiB0aGlzLmJ1cm5QcmlvLnZhbHVlLAoJLy8gICAgICAgbWV0aG9kQXJnczogW2RsZ1RvUHJpbywgdGhpcy50eG4uc2VuZGVyXSwKCS8vICAgICAgIGZlZTogMCwKCS8vICAgICB9KQoJaXR4bl9uZXh0CglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCWJ5dGVjIDE0IC8vICBtZXRob2QgImJ1cm5TdGFrZSh1aW50NjQsYWRkcmVzcyl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMTUKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMuYnVyblByaW8udmFsdWUKCWJ5dGVjIDUgLy8gICJidXJuUHJpbyIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMTYKCS8vIG1ldGhvZEFyZ3M6IFtkbGdUb1ByaW8sIHRoaXMudHhuLnNlbmRlcl0KCWZyYW1lX2RpZyAxIC8vIGRsZ1RvUHJpbzogdWludDY0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMTcKCS8vIGZlZTogMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjE5CgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYnVyblF1ZXVlLnZhbHVlLmxlbmd0aDsgaSArPSAxKQoJaW50YyAxIC8vIDAKCWZyYW1lX2J1cnkgMyAvLyBpOiB1aW50NjQKCipmb3JfMDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIxOQoJLy8gaSA8IHRoaXMuYnVyblF1ZXVlLnZhbHVlLmxlbmd0aAoJZnJhbWVfZGlnIDMgLy8gaTogdWludDY0CglpbnRjIDEzIC8vIDEwCgk8CglieiAqZm9yXzBfZW5kCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjIwCgkvLyB2ID0gdGhpcy5idXJuUXVldWUudmFsdWVbaV0KCWZyYW1lX2RpZyAzIC8vIGk6IHVpbnQ2NAoJaW50YyAyIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJaW50YyAyIC8vIDgKCWJ5dGVjIDcgLy8gICJidXJuUXVldWUiCgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJZnJhbWVfYnVyeSA0IC8vIHY6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIyMQoJLy8gZGxnVG9WID0gdi5nbG9iYWxTdGF0ZSgnZGVsZWdhdGVkU1Rha2UnKSBhcyB1aW50NjQKCWZyYW1lX2RpZyA0IC8vIHY6IHVpbnQ2NAoJYnl0ZWMgMjIgLy8gICJkZWxlZ2F0ZWRTVGFrZSIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiB2Lmdsb2JhbFN0YXRlKCdkZWxlZ2F0ZWRTVGFrZScpCglhc3NlcnQKCWZyYW1lX2J1cnkgNSAvLyBkbGdUb1Y6IHVpbnQ2NAoKCS8vICppZjFfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMjIKCS8vIGRsZ1RvViA8IGFtdFRvQnVybiAtIGJ1cm5pbmcKCWZyYW1lX2RpZyA1IC8vIGRsZ1RvVjogdWludDY0CglmcmFtZV9kaWcgMCAvLyBhbXRUb0J1cm46IHVpbnQ2NAoJZnJhbWVfZGlnIDIgLy8gYnVybmluZzogdWludDY0CgktCgk8CglieiAqaWYxX2Vsc2UKCgkvLyAqaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIyMwoJLy8gdGhpcy5wZW5kaW5nR3JvdXAuYWRkTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzVmFsaWRhdG9yUG9vbC5wcm90b3R5cGUuYnVyblN0YWtlLCB2b2lkPih7CgkvLyAgICAgICAgICAgYXBwbGljYXRpb25JRDogdiwKCS8vICAgICAgICAgICBtZXRob2RBcmdzOiBbZGxnVG9WLCB0aGlzLnR4bi5zZW5kZXJdLAoJLy8gICAgICAgICAgIGZlZTogMCwKCS8vICAgICAgICAgfSkKCWl0eG5fbmV4dAoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglieXRlYyAxNCAvLyAgbWV0aG9kICJidXJuU3Rha2UodWludDY0LGFkZHJlc3Mpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjI0CgkvLyBhcHBsaWNhdGlvbklEOiB2CglmcmFtZV9kaWcgNCAvLyB2OiB1aW50NjQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIyNQoJLy8gbWV0aG9kQXJnczogW2RsZ1RvViwgdGhpcy50eG4uc2VuZGVyXQoJZnJhbWVfZGlnIDUgLy8gZGxnVG9WOiB1aW50NjQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIyNgoJLy8gZmVlOiAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMjgKCS8vIGJ1cm5pbmcgKz0gZGxnVG9WCglmcmFtZV9kaWcgMiAvLyBidXJuaW5nOiB1aW50NjQKCWZyYW1lX2RpZyA1IC8vIGRsZ1RvVjogdWludDY0CgkrCglmcmFtZV9idXJ5IDIgLy8gYnVybmluZzogdWludDY0CgliICppZjFfZW5kCgoqaWYxX2Vsc2U6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMzAKCS8vIHRoaXMucGVuZGluZ0dyb3VwLmFkZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLmJ1cm5TdGFrZSwgdm9pZD4oewoJLy8gICAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IHYsCgkvLyAgICAgICAgICAgbWV0aG9kQXJnczogW2FtdFRvQnVybiAtIGJ1cm5pbmcsIHRoaXMudHhuLnNlbmRlcl0sCgkvLyAgICAgICAgICAgZmVlOiAwLAoJLy8gICAgICAgICB9KQoJaXR4bl9uZXh0CglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCWJ5dGVjIDE0IC8vICBtZXRob2QgImJ1cm5TdGFrZSh1aW50NjQsYWRkcmVzcyl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMzEKCS8vIGFwcGxpY2F0aW9uSUQ6IHYKCWZyYW1lX2RpZyA0IC8vIHY6IHVpbnQ2NAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjMyCgkvLyBtZXRob2RBcmdzOiBbYW10VG9CdXJuIC0gYnVybmluZywgdGhpcy50eG4uc2VuZGVyXQoJZnJhbWVfZGlnIDAgLy8gYW10VG9CdXJuOiB1aW50NjQKCWZyYW1lX2RpZyAyIC8vIGJ1cm5pbmc6IHVpbnQ2NAoJLQoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjMzCgkvLyBmZWU6IDAKCWludGMgMSAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIzNQoJLy8gYnVybmluZyA9IGFtdFRvQnVybgoJZnJhbWVfZGlnIDAgLy8gYW10VG9CdXJuOiB1aW50NjQKCWZyYW1lX2J1cnkgMiAvLyBidXJuaW5nOiB1aW50NjQKCWIgKmZvcl8wX2VuZAoKKmlmMV9lbmQ6CgoqZm9yXzBfY29udGludWU6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMTkKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDMgLy8gaTogdWludDY0CglpbnRjIDAgLy8gMQoJKwoJZnJhbWVfYnVyeSAzIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzAKCipmb3JfMF9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNDAKCS8vIGFtdExlZnQgPSB0aGlzLmdldEJ1cm5BbW91bnQoYW10VG9CdXJuIC0gYnVybmluZykKCWZyYW1lX2RpZyAwIC8vIGFtdFRvQnVybjogdWludDY0CglmcmFtZV9kaWcgMiAvLyBidXJuaW5nOiB1aW50NjQKCS0KCWNhbGxzdWIgZ2V0QnVybkFtb3VudAoJZnJhbWVfYnVyeSA2IC8vIGFtdExlZnQ6IHVpbnQ2NAoKCS8vICppZjJfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNDEKCS8vIGFtdExlZnQgPiAwCglmcmFtZV9kaWcgNiAvLyBhbXRMZWZ0OiB1aW50NjQKCWludGMgMSAvLyAwCgk+CglieiAqaWYyX2VuZAoKCS8vICppZjJfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjQyCgkvLyB0aGlzLnBlbmRpbmdHcm91cC5hZGRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgeGZlckFzc2V0OiB0aGlzLnZBTEdPaWQudmFsdWUsCgkvLyAgICAgICAgIGFzc2V0QW1vdW50OiBhbXRMZWZ0LAoJLy8gICAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgIGZlZTogMCwKCS8vICAgICAgIH0pCglpdHhuX25leHQKCWludGMgNCAvLyAgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNDMKCS8vIHhmZXJBc3NldDogdGhpcy52QUxHT2lkLnZhbHVlCglieXRlYyA2IC8vICAidkFMR09pZCIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI0NAoJLy8gYXNzZXRBbW91bnQ6IGFtdExlZnQKCWZyYW1lX2RpZyA2IC8vIGFtdExlZnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI0NQoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNDYKCS8vIGZlZTogMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjQ4CgkvLyB0aGlzLmNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlIC09IGJ1cm5UeG4uYXNzZXRBbW91bnQgLSBhbXRMZWZ0CglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdTdXBwbHkiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgNiAvLyBhbXRMZWZ0OiB1aW50NjQKCS0KCS0KCWJ5dGVjIDIgLy8gICJjaXJjdWxhdGluZ1N1cHBseSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjQ5CgkvLyB0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSAtPSBidXJuaW5nCglieXRlYyA0IC8vICAidG90YWxzdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMiAvLyBidXJuaW5nOiB1aW50NjQKCS0KCWJ5dGVjIDQgLy8gICJ0b3RhbHN0YWtlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNTAKCS8vIHJldHVybjsKCXJldHN1YgoKKmlmMl9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNTIKCS8vIHRoaXMudG90YWxBbGdvU3Rha2VkLnZhbHVlIC09IGJ1cm5pbmcKCWJ5dGVjIDQgLy8gICJ0b3RhbHN0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAyIC8vIGJ1cm5pbmc6IHVpbnQ2NAoJLQoJYnl0ZWMgNCAvLyAgInRvdGFsc3Rha2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI1MwoJLy8gdGhpcy5jaXJjdWxhdGluZ1N1cHBseS52YWx1ZSAtPSBidXJuVHhuLmFzc2V0QW1vdW50CglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdTdXBwbHkiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CgktCglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdTdXBwbHkiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBtaW50VmFsaWRhdG9yQ29tbWl0KHVpbnQ2NCxwYXkpdm9pZAoqYWJpX3JvdXRlX21pbnRWYWxpZGF0b3JDb21taXQ6CgkvLyBzdGFrZUNvbW1pdDogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKHN0YWtlQ29tbWl0KSBmb3IgbWludFZhbGlkYXRvckNvbW1pdCBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyB2YWxpZGF0b3JBcHBJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBtaW50VmFsaWRhdG9yQ29tbWl0KHVpbnQ2NCxwYXkpdm9pZAoJY2FsbHN1YiBtaW50VmFsaWRhdG9yQ29tbWl0CglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBtaW50VmFsaWRhdG9yQ29tbWl0KHZhbGlkYXRvckFwcElEOiBBcHBJRCwgc3Rha2VDb21taXQ6IFBheVR4bik6IHZvaWQKbWludFZhbGlkYXRvckNvbW1pdDoKCXByb3RvIDIgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNjIKCS8vIGFzc2VydCh0aGlzLmlzUG9vbCh2YWxpZGF0b3JBcHBJRCkpCglmcmFtZV9kaWcgLTEgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECgljYWxsc3ViIGlzUG9vbAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjYzCgkvLyBvcGVyYXRvckFkZHJlc3MgPSB2YWxpZGF0b3JBcHBJRC5nbG9iYWxTdGF0ZSgnb3BlcmF0b3JBZGRyZXNzJykgYXMgQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJYnl0ZWMgMTcgLy8gICJvcGVyYXRvckFkZHJlc3MiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdmFsaWRhdG9yQXBwSUQuZ2xvYmFsU3RhdGUoJ29wZXJhdG9yQWRkcmVzcycpCglhc3NlcnQKCWZyYW1lX2J1cnkgMCAvLyBvcGVyYXRvckFkZHJlc3M6IGFkZHJlc3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNjQKCS8vIHZlcmlmeVBheVR4bihzdGFrZUNvbW1pdCwgewoJLy8gICAgICAgc2VuZGVyOiBvcGVyYXRvckFkZHJlc3MsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIHN0YWtlQ29tbWl0OiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJZnJhbWVfZGlnIDAgLy8gb3BlcmF0b3JBZGRyZXNzOiBhZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoic3Rha2VDb21taXQiLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoib3BlcmF0b3JBZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0yIC8vIHN0YWtlQ29tbWl0OiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InN0YWtlQ29tbWl0IiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNzAKCS8vIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNWYWxpZGF0b3JQb29sLnByb3RvdHlwZS5hZGRUb09wZXJhdG9yQ29tbWl0Pih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiB2YWxpZGF0b3JBcHBJRCwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgewoJLy8gICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcywKCS8vICAgICAgICAgICBhbW91bnQ6IHN0YWtlQ29tbWl0LmFtb3VudCwKCS8vICAgICAgICAgICBmZWU6IDAsCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICBdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDAgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI3NAoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNzUKCS8vIHJlY2VpdmVyOiB2YWxpZGF0b3JBcHBJRC5hZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNzYKCS8vIGFtb3VudDogc3Rha2VDb21taXQuYW1vdW50CglmcmFtZV9kaWcgLTIgLy8gc3Rha2VDb21taXQ6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI3NwoJLy8gZmVlOiAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCWl0eG5fbmV4dAoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHhkZmEyMDc2NCAvLyBtZXRob2QgImFkZFRvT3BlcmF0b3JDb21taXQocGF5KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI3MQoJLy8gYXBwbGljYXRpb25JRDogdmFsaWRhdG9yQXBwSUQKCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI3MgoJLy8gbWV0aG9kQXJnczogWwoJLy8gICAgICAgICB7CgkvLyAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgIHJlY2VpdmVyOiB2YWxpZGF0b3JBcHBJRC5hZGRyZXNzLAoJLy8gICAgICAgICAgIGFtb3VudDogc3Rha2VDb21taXQuYW1vdW50LAoJLy8gICAgICAgICAgIGZlZTogMCwKCS8vICAgICAgICAgfSwKCS8vICAgICAgIF0KCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMSAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyODIKCS8vIGFtb3VudFRvTWludCA9IHRoaXMuZ2V0TWludEFtb3VudChzdGFrZUNvbW1pdC5hbW91bnQpCglmcmFtZV9kaWcgLTIgLy8gc3Rha2VDb21taXQ6IFBheVR4bgoJZ3R4bnMgQW1vdW50CgljYWxsc3ViIGdldE1pbnRBbW91bnQKCWZyYW1lX2J1cnkgMSAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI4MwoJLy8gdGhpcy5jYWxjdWxhdGVMU1RSYXRpbygpCgljYWxsc3ViIGNhbGN1bGF0ZUxTVFJhdGlvCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mjg0CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICB4ZmVyQXNzZXQ6IHRoaXMudkFMR09pZC52YWx1ZSwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHZhbGlkYXRvckFwcElELmFkZHJlc3MsCgkvLyAgICAgICBhc3NldEFtb3VudDogYW1vdW50VG9NaW50LAoJLy8gICAgICAgZmVlOiAwLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDQgLy8gIGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mjg1CgkvLyB4ZmVyQXNzZXQ6IHRoaXMudkFMR09pZC52YWx1ZQoJYnl0ZWMgNiAvLyAgInZBTEdPaWQiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyODYKCS8vIGFzc2V0UmVjZWl2ZXI6IHZhbGlkYXRvckFwcElELmFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mjg3CgkvLyBhc3NldEFtb3VudDogYW1vdW50VG9NaW50CglmcmFtZV9kaWcgMSAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI4OAoJLy8gZmVlOiAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjkwCgkvLyB0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSArPSBzdGFrZUNvbW1pdC5hbW91bnQKCWJ5dGVjIDQgLy8gICJ0b3RhbHN0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMiAvLyBzdGFrZUNvbW1pdDogUGF5VHhuCglndHhucyBBbW91bnQKCSsKCWJ5dGVjIDQgLy8gICJ0b3RhbHN0YWtlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyOTEKCS8vIHRoaXMuY2lyY3VsYXRpbmdTdXBwbHkudmFsdWUgKz0gYW1vdW50VG9NaW50CglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdTdXBwbHkiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDEgLy8gYW1vdW50VG9NaW50OiB1aW50NjQKCSsKCWJ5dGVjIDIgLy8gICJjaXJjdWxhdGluZ1N1cHBseSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGJ1cm5WYWxpZGF0b3JDb21taXQoKXZvaWQKKmFiaV9yb3V0ZV9idXJuVmFsaWRhdG9yQ29tbWl0OgoJLy8gZXhlY3V0ZSBidXJuVmFsaWRhdG9yQ29tbWl0KCl2b2lkCgljYWxsc3ViIGJ1cm5WYWxpZGF0b3JDb21taXQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGJ1cm5WYWxpZGF0b3JDb21taXQoKTogdm9pZApidXJuVmFsaWRhdG9yQ29tbWl0OgoJcHJvdG8gMCAwCglyZXRzdWIKCi8vIGJ1cm5Ub0RlbGlucXVlbnRWYWxpZGF0b3IoYXhmZXIsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9idXJuVG9EZWxpbnF1ZW50VmFsaWRhdG9yOgoJLy8gdmFsaWRhdG9yQXBwSUQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGJ1cm5UeG46IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgNCAvLyAgYXhmZXIKCT09CgoJLy8gYXJndW1lbnQgMSAoYnVyblR4bikgZm9yIGJ1cm5Ub0RlbGlucXVlbnRWYWxpZGF0b3IgbXVzdCBiZSBhIGF4ZmVyIHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIGJ1cm5Ub0RlbGlucXVlbnRWYWxpZGF0b3IoYXhmZXIsdWludDY0KXZvaWQKCWNhbGxzdWIgYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvcgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvcihidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuLCB2YWxpZGF0b3JBcHBJRDogQXBwSUQpOiB2b2lkCmJ1cm5Ub0RlbGlucXVlbnRWYWxpZGF0b3I6Cglwcm90byAyIDAKCXJldHN1YgoKLy8gcmVNaW50RGVsaXF1ZW50Q29tbWl0KHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3JlTWludERlbGlxdWVudENvbW1pdDoKCS8vIGFwcDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHJlTWludERlbGlxdWVudENvbW1pdCh1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgcmVNaW50RGVsaXF1ZW50Q29tbWl0CglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyByZU1pbnREZWxpcXVlbnRDb21taXQoYW1vdW50OiB1aW50NjQsIGFwcDogQXBwSUQpOiB2b2lkCnJlTWludERlbGlxdWVudENvbW1pdDoKCXByb3RvIDIgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXBuIDcKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTYKCS8vIHRoaXMuaXNQb29sKGFwcCkKCWZyYW1lX2RpZyAtMiAvLyBhcHA6IEFwcElECgljYWxsc3ViIGlzUG9vbAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMxNwoJLy8gb3BBbW91bnQgPSBhcHAuZ2xvYmFsU3RhdGUoJ29wZXJhdG9yQ29tbWl0JykgYXMgdWludDY0CglmcmFtZV9kaWcgLTIgLy8gYXBwOiBBcHBJRAoJYnl0ZWMgMjMgLy8gICJvcGVyYXRvckNvbW1pdCIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBhcHAuZ2xvYmFsU3RhdGUoJ29wZXJhdG9yQ29tbWl0JykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIG9wQW1vdW50OiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTgKCS8vIG9wID0gYXBwLmdsb2JhbFN0YXRlKCdvcGVyYXRvckFkZHJlc3MnKSBhcyBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gYXBwOiBBcHBJRAoJYnl0ZWMgMTcgLy8gICJvcGVyYXRvckFkZHJlc3MiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogYXBwLmdsb2JhbFN0YXRlKCdvcGVyYXRvckFkZHJlc3MnKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDEgLy8gb3A6IGFkZHJlc3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTkKCS8vIGRlbG5RID0gYXBwLmdsb2JhbFN0YXRlKCdpc0RlbGlucXVlbnQnKSBhcyBib29sZWFuCglmcmFtZV9kaWcgLTIgLy8gYXBwOiBBcHBJRAoJcHVzaGJ5dGVzIDB4Njk3MzQ0NjU2YzY5NmU3MTc1NjU2ZTc0IC8vICJpc0RlbGlucXVlbnQiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogYXBwLmdsb2JhbFN0YXRlKCdpc0RlbGlucXVlbnQnKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDIgLy8gZGVsblE6IGJvb2wKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMjAKCS8vIGlzUmlnaHRBbW91bnQgPSBhbW91bnQgPT09IG9wQW1vdW50CglmcmFtZV9kaWcgLTEgLy8gYW1vdW50OiB1aW50NjQKCWZyYW1lX2RpZyAwIC8vIG9wQW1vdW50OiB1aW50NjQKCT09CglmcmFtZV9idXJ5IDMgLy8gaXNSaWdodEFtb3VudDogYm9vbAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMyMQoJLy8gaXNSaWdodE9wID0gb3AgPT09IHRoaXMudHhuLnNlbmRlcgoJZnJhbWVfZGlnIDEgLy8gb3A6IGFkZHJlc3MKCXR4biBTZW5kZXIKCT09CglmcmFtZV9idXJ5IDQgLy8gaXNSaWdodE9wOiBib29sCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzIyCgkvLyBpc05vdERlbGlucXVlbnQgPSAhZGVsblEKCWZyYW1lX2RpZyAyIC8vIGRlbG5ROiBib29sCgkhCglmcmFtZV9idXJ5IDUgLy8gaXNOb3REZWxpbnF1ZW50OiBib29sCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzIzCgkvLyBoYXNOb3ZBbGdvID0gYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMudkFMR09pZC52YWx1ZSkgPT09IDAKCWZyYW1lX2RpZyAtMiAvLyBhcHA6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCWJ5dGVjIDYgLy8gICJ2QUxHT2lkIgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglpbnRjIDEgLy8gMAoJPT0KCWZyYW1lX2J1cnkgNiAvLyBoYXNOb3ZBbGdvOiBib29sCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzI0CgkvLyBhbW91bnRUb01pbnQgPSB0aGlzLmdldE1pbnRBbW91bnQoYW1vdW50KQoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudDogdWludDY0CgljYWxsc3ViIGdldE1pbnRBbW91bnQKCWZyYW1lX2J1cnkgNyAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMyNQoJLy8gYXNzZXJ0KGlzTm90RGVsaW5xdWVudCAmJiBoYXNOb3ZBbGdvICYmIGlzUmlnaHRPcCAmJiBpc1JpZ2h0QW1vdW50KQoJZnJhbWVfZGlnIDUgLy8gaXNOb3REZWxpbnF1ZW50OiBib29sCglkdXAKCWJ6ICpza2lwX2FuZDAKCWZyYW1lX2RpZyA2IC8vIGhhc05vdkFsZ286IGJvb2wKCSYmCgoqc2tpcF9hbmQwOgoJZHVwCglieiAqc2tpcF9hbmQxCglmcmFtZV9kaWcgNCAvLyBpc1JpZ2h0T3A6IGJvb2wKCSYmCgoqc2tpcF9hbmQxOgoJZHVwCglieiAqc2tpcF9hbmQyCglmcmFtZV9kaWcgMyAvLyBpc1JpZ2h0QW1vdW50OiBib29sCgkmJgoKKnNraXBfYW5kMjoKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMyNgoJLy8gdGhpcy5jYWxjdWxhdGVMU1RSYXRpbygpCgljYWxsc3ViIGNhbGN1bGF0ZUxTVFJhdGlvCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzI3CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICB4ZmVyQXNzZXQ6IHRoaXMudkFMR09pZC52YWx1ZSwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IGFwcC5hZGRyZXNzLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IGFtb3VudFRvTWludCwKCS8vICAgICAgIGZlZTogMCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyA0IC8vICBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMyOAoJLy8geGZlckFzc2V0OiB0aGlzLnZBTEdPaWQudmFsdWUKCWJ5dGVjIDYgLy8gICJ2QUxHT2lkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzI5CgkvLyBhc3NldFJlY2VpdmVyOiBhcHAuYWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIGFwcDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzMwCgkvLyBhc3NldEFtb3VudDogYW1vdW50VG9NaW50CglmcmFtZV9kaWcgNyAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMzMQoJLy8gZmVlOiAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzMzCgkvLyB0aGlzLmNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlICs9IGFtb3VudFRvTWludAoJYnl0ZWMgMiAvLyAgImNpcmN1bGF0aW5nU3VwcGx5IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyA3IC8vIGFtb3VudFRvTWludDogdWludDY0CgkrCglieXRlYyAyIC8vICAiY2lyY3VsYXRpbmdTdXBwbHkiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBiaWQodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9iaWQ6CgkvLyB2YWxpZGF0b3JBcHBJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBiaWQodWludDY0KXZvaWQKCWNhbGxzdWIgYmlkCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBiaWQodmFsaWRhdG9yQXBwSUQ6IEFwcElEKTogdm9pZApiaWQ6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiAzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzQwCgkvLyBhc3NlcnQodGhpcy5pc1Bvb2wodmFsaWRhdG9yQXBwSUQpKQoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJY2FsbHN1YiBpc1Bvb2wKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM0MQoJLy8gZG9lc0V4aXN0ID0gdGhpcy5oaWdoZXN0QmlkZGVyLnZhbHVlLmNyZWF0b3IKCWJ5dGVjIDEyIC8vICAiaGlnaGVzdEJpZGRlciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCWZyYW1lX2J1cnkgMCAvLyBkb2VzRXhpc3Q6IGFkZHJlc3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNDIKCS8vIHZhbHVlQyA9IHZhbGlkYXRvckFwcElELmdsb2JhbFN0YXRlKCdzYXR1cmF0aW9uQnVmZmVyJykgYXMgdWludDY0CglmcmFtZV9kaWcgLTEgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglieXRlYyA5IC8vICAic2F0dXJhdGlvbkJ1ZmZlciIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiB2YWxpZGF0b3JBcHBJRC5nbG9iYWxTdGF0ZSgnc2F0dXJhdGlvbkJ1ZmZlcicpCglhc3NlcnQKCWZyYW1lX2J1cnkgMSAvLyB2YWx1ZUM6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM0MwoJLy8gaXNEZWxlZ2F0YWJsZSA9IHZhbGlkYXRvckFwcElELmdsb2JhbFN0YXRlKCdjYW5CZURlbGVnYXRlZCcpIGFzIGJvb2xlYW4KCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCXB1c2hieXRlcyAweDYzNjE2ZTQyNjU0NDY1NmM2NTY3NjE3NDY1NjQgLy8gImNhbkJlRGVsZWdhdGVkIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHZhbGlkYXRvckFwcElELmdsb2JhbFN0YXRlKCdjYW5CZURlbGVnYXRlZCcpCglhc3NlcnQKCWZyYW1lX2J1cnkgMiAvLyBpc0RlbGVnYXRhYmxlOiBib29sCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzQ0CgkvLyB2YWx1ZUIgPSB0aGlzLmhpZ2hlc3RCaWRkZXIudmFsdWUuZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25CdWZmZXInKSBhcyB1aW50NjQKCWJ5dGVjIDEyIC8vICAiaGlnaGVzdEJpZGRlciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyA5IC8vICAic2F0dXJhdGlvbkJ1ZmZlciIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmhpZ2hlc3RCaWRkZXIudmFsdWUuZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25CdWZmZXInKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDMgLy8gdmFsdWVCOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNDUKCS8vIGFzc2VydChpc0RlbGVnYXRhYmxlLCAnb25seSBiaWQgZGVsZWdhdGFibGUgQXBwcycpCglmcmFtZV9kaWcgMiAvLyBpc0RlbGVnYXRhYmxlOiBib29sCgoJLy8gb25seSBiaWQgZGVsZWdhdGFibGUgQXBwcwoJYXNzZXJ0CgoJLy8gKmlmM19jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM0NgoJLy8gdmFsdWVDID4gdmFsdWVCICYmIGRvZXNFeGlzdCAhPT0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJZnJhbWVfZGlnIDEgLy8gdmFsdWVDOiB1aW50NjQKCWZyYW1lX2RpZyAzIC8vIHZhbHVlQjogdWludDY0Cgk+CglkdXAKCWJ6ICpza2lwX2FuZDMKCWZyYW1lX2RpZyAwIC8vIGRvZXNFeGlzdDogYWRkcmVzcwoJZ2xvYmFsIFplcm9BZGRyZXNzCgkhPQoJJiYKCipza2lwX2FuZDM6CglieiAqaWYzX2VuZAoKCS8vICppZjNfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzQ3CgkvLyB0aGlzLmhpZ2hlc3RCaWRkZXIudmFsdWUgPSB2YWxpZGF0b3JBcHBJRAoJYnl0ZWMgMTIgLy8gICJoaWdoZXN0QmlkZGVyIgoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJYXBwX2dsb2JhbF9wdXQKCippZjNfZW5kOgoJcmV0c3ViCgovLyBkZWxlZ2F0ZVN0YWtlKHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2RlbGVnYXRlU3Rha2U6CgkvLyB2YWxpZGF0b3JBcHBJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGRlbGVnYXRlU3Rha2UodWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGRlbGVnYXRlU3Rha2UKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGRlbGVnYXRlU3Rha2UoYW1vdW50OiB1aW50NjQsIHZhbGlkYXRvckFwcElEOiBBcHBJRCk6IHZvaWQKZGVsZWdhdGVTdGFrZToKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM1MwoJLy8gYXNzZXJ0KHRoaXMuaXNQb29sKHZhbGlkYXRvckFwcElEKSkKCWZyYW1lX2RpZyAtMiAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWNhbGxzdWIgaXNQb29sCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNTQKCS8vIGFzc2VydCh2YWxpZGF0b3JBcHBJRCA9PT0gdGhpcy5oaWdoZXN0QmlkZGVyLnZhbHVlLCAnY2FuIG9ubHkgZGVsZWdhdGUgdG8gaGlnaGVzdCBiaWRkZXIgYWNjb3VudCcpCglmcmFtZV9kaWcgLTIgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglieXRlYyAxMiAvLyAgImhpZ2hlc3RCaWRkZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBjYW4gb25seSBkZWxlZ2F0ZSB0byBoaWdoZXN0IGJpZGRlciBhY2NvdW50Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNTUKCS8vIGFzc2VydChhbW91bnQgPD0gdGhpcy5pZGxlQWxnb1RvU3Rha2UudmFsdWUsICdjYW50IHdpdGhkcmF3IG1vcmUgdGhhbiB0aGUgYW1vdW50IG9mIGlkbGVBbGdvIGluIHRoZSBjb250cmFjdCcpCglmcmFtZV9kaWcgLTEgLy8gYW1vdW50OiB1aW50NjQKCWJ5dGVjIDEgLy8gICJpZGxlQWxnbyIKCWFwcF9nbG9iYWxfZ2V0Cgk8PQoKCS8vIGNhbnQgd2l0aGRyYXcgbW9yZSB0aGFuIHRoZSBhbW91bnQgb2YgaWRsZUFsZ28gaW4gdGhlIGNvbnRyYWN0Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNTYKCS8vIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNWYWxpZGF0b3JQb29sLnByb3RvdHlwZS5hZGRTdGFrZSwgdm9pZD4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogdmFsaWRhdG9yQXBwSUQsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcywKCS8vICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKCS8vICAgICAgICAgICBmZWU6IDAsCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICBdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDAgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM2MAoJLy8gcmVjZWl2ZXI6IHZhbGlkYXRvckFwcElELmFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM2MQoJLy8gYW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNjIKCS8vIGZlZTogMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4ZDQ1MDIxMDAgLy8gbWV0aG9kICJhZGRTdGFrZShwYXkpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzU3CgkvLyBhcHBsaWNhdGlvbklEOiB2YWxpZGF0b3JBcHBJRAoJZnJhbWVfZGlnIC0yIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzU4CgkvLyBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcywKCS8vICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKCS8vICAgICAgICAgICBmZWU6IDAsCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICBdCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzY2CgkvLyB0aGlzLmlkbGVBbGdvVG9TdGFrZS52YWx1ZSAtPSBhbW91bnQKCWJ5dGVjIDEgLy8gICJpZGxlQWxnbyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gYW1vdW50OiB1aW50NjQKCS0KCWJ5dGVjIDEgLy8gICJpZGxlQWxnbyIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIHNuaXRjaCh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3NuaXRjaDoKCS8vIGFwcDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzbml0Y2godWludDY0KXZvaWQKCWNhbGxzdWIgc25pdGNoCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzbml0Y2goYXBwOiBBcHBJRCk6IHZvaWQKc25pdGNoOgoJcHJvdG8gMSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cG4gNQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM3MQoJLy8gYXNzZXJ0KHRoaXMuaXNQb29sKGFwcCkpCglmcmFtZV9kaWcgLTEgLy8gYXBwOiBBcHBJRAoJY2FsbHN1YiBpc1Bvb2wKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM3MgoJLy8gc2F0U25pdGNoID0gYXBwLmdsb2JhbFN0YXRlKCdzYXR1cmF0aW9uQnVmZmVyJykgYXMgdWludDY0CglmcmFtZV9kaWcgLTEgLy8gYXBwOiBBcHBJRAoJYnl0ZWMgOSAvLyAgInNhdHVyYXRpb25CdWZmZXIiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogYXBwLmdsb2JhbFN0YXRlKCdzYXR1cmF0aW9uQnVmZmVyJykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIHNhdFNuaXRjaDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzczCgkvLyBzYXRQcmlvID0gdGhpcy5idXJuUHJpby52YWx1ZS5nbG9iYWxTdGF0ZSgnc2F0dXJhdGlvbkJ1ZmZlcicpIGFzIHVpbnQ2NAoJYnl0ZWMgNSAvLyAgImJ1cm5QcmlvIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDkgLy8gICJzYXR1cmF0aW9uQnVmZmVyIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuYnVyblByaW8udmFsdWUuZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25CdWZmZXInKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDEgLy8gc2F0UHJpbzogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mzc0CgkvLyBtaW5QcmlvID0gYXBwCglmcmFtZV9kaWcgLTEgLy8gYXBwOiBBcHBJRAoJZnJhbWVfYnVyeSAyIC8vIG1pblByaW86IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM3NQoJLy8gbWluU2F0ID0gc2F0U25pdGNoCglmcmFtZV9kaWcgMCAvLyBzYXRTbml0Y2g6IHVpbnQ2NAoJZnJhbWVfYnVyeSAzIC8vIG1pblNhdDogdWludDY0CgoJLy8gKmlmNF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM3NgoJLy8gc2F0U25pdGNoID4gc2F0UHJpbwoJZnJhbWVfZGlnIDAgLy8gc2F0U25pdGNoOiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIHNhdFByaW86IHVpbnQ2NAoJPgoJYnogKmlmNF9lbmQKCgkvLyAqaWY0X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM3NwoJLy8gbWluUHJpbyA9IHRoaXMuYnVyblByaW8udmFsdWUKCWJ5dGVjIDUgLy8gICJidXJuUHJpbyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9idXJ5IDIgLy8gbWluUHJpbzogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mzc4CgkvLyBtaW5TYXQgPSBzYXRQcmlvCglmcmFtZV9kaWcgMSAvLyBzYXRQcmlvOiB1aW50NjQKCWZyYW1lX2J1cnkgMyAvLyBtaW5TYXQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM3OQoJLy8gdGhpcy5idXJuUHJpby52YWx1ZSA9IGFwcAoJYnl0ZWMgNSAvLyAgImJ1cm5QcmlvIgoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWFwcF9nbG9iYWxfcHV0CgoqaWY0X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM4MgoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkgKz0gMSkKCWludGMgMSAvLyAwCglmcmFtZV9idXJ5IDQgLy8gaTogdWludDY0CgoqZm9yXzE6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozODIKCS8vIGkgPCBxdWV1ZS5sZW5ndGgKCWZyYW1lX2RpZyA0IC8vIGk6IHVpbnQ2NAoJaW50YyAxMyAvLyAxMAoJPAoJYnogKmZvcl8xX2VuZAoKCS8vICppZjVfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozODMKCS8vIChxdWV1ZVtpXS5nbG9iYWxTdGF0ZSgnc2F0dXJhdGlvbkJ1ZmZlcicpIGFzIHVpbnQ2NCkgPCBtaW5TYXQKCWZyYW1lX2RpZyA0IC8vIGk6IHVpbnQ2NAoJaW50YyAyIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJaW50YyAyIC8vIDgKCWJ5dGVjIDcgLy8gICJidXJuUXVldWUiCgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJYnl0ZWMgOSAvLyAgInNhdHVyYXRpb25CdWZmZXIiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogcXVldWVbaV0uZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25CdWZmZXInKQoJYXNzZXJ0CglmcmFtZV9kaWcgMyAvLyBtaW5TYXQ6IHVpbnQ2NAoJPAoJYnogKmlmNV9lbmQKCgkvLyAqaWY1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM4NAoJLy8gdGVtcCA9IG1pblByaW8KCWZyYW1lX2RpZyAyIC8vIG1pblByaW86IHVpbnQ2NAoJZnJhbWVfYnVyeSA1IC8vIHRlbXA6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM4NQoJLy8gbWluUHJpbyA9IHF1ZXVlW2ldCglmcmFtZV9kaWcgNCAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWludGMgMiAvLyA4CglieXRlYyA3IC8vICAiYnVyblF1ZXVlIgoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2J1cnkgMiAvLyBtaW5QcmlvOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozODYKCS8vIHF1ZXVlW2ldID0gdGVtcAoJZnJhbWVfZGlnIDQgLy8gaTogdWludDY0CglpbnRjIDIgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCglmcmFtZV9kaWcgNSAvLyB0ZW1wOiB1aW50NjQKCWl0b2IKCWJ5dGVjIDcgLy8gICJidXJuUXVldWUiCgljb3ZlciAyCglib3hfcmVwbGFjZQoKKmlmNV9lbmQ6CgoqZm9yXzFfY29udGludWU6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozODIKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDQgLy8gaTogdWludDY0CglpbnRjIDAgLy8gMQoJKwoJZnJhbWVfYnVyeSA0IC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzEKCipmb3JfMV9lbmQ6CglyZXRzdWIKCi8vIHJlU3Rha2VGcm9tU25pdGNoKHVpbnQ2NCx1aW50NjQscGF5KXZvaWQKKmFiaV9yb3V0ZV9yZVN0YWtlRnJvbVNuaXRjaDoKCS8vIHJlc3Rha2VUeG46IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludGMgMCAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDAgLy8gIHBheQoJPT0KCgkvLyBhcmd1bWVudCAwIChyZXN0YWtlVHhuKSBmb3IgcmVTdGFrZUZyb21Tbml0Y2ggbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gcmVjZWl2ZXJBcHA6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHNuaXRjaGVkQXBwOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHJlU3Rha2VGcm9tU25pdGNoKHVpbnQ2NCx1aW50NjQscGF5KXZvaWQKCWNhbGxzdWIgcmVTdGFrZUZyb21Tbml0Y2gKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHJlU3Rha2VGcm9tU25pdGNoKHNuaXRjaGVkQXBwOiBBcHBJRCwgcmVjZWl2ZXJBcHA6IEFwcElELCByZXN0YWtlVHhuOiBQYXlUeG4pOiB2b2lkCnJlU3Rha2VGcm9tU25pdGNoOgoJcHJvdG8gMyAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mzk2CgkvLyBhc3NlcnQodGhpcy5pc1Bvb2woc25pdGNoZWRBcHApKQoJZnJhbWVfZGlnIC0xIC8vIHNuaXRjaGVkQXBwOiBBcHBJRAoJY2FsbHN1YiBpc1Bvb2wKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM5NwoJLy8gYXNzZXJ0KHJlY2VpdmVyQXBwLmFkZHJlc3MgPT09IHJlc3Rha2VUeG4ucmVjZWl2ZXIpCglmcmFtZV9kaWcgLTIgLy8gcmVjZWl2ZXJBcHA6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCWZyYW1lX2RpZyAtMyAvLyByZXN0YWtlVHhuOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCgk9PQoJYXNzZXJ0CgoJLy8gKmlmNl9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM5OAoJLy8gcmVzdGFrZVR4bi5yZWNlaXZlciAhPT0gdGhpcy5hcHAuYWRkcmVzcwoJZnJhbWVfZGlnIC0zIC8vIHJlc3Rha2VUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgkhPQoJYnogKmlmNl9lbmQKCgkvLyAqaWY2X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM5OQoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLmdldENsYXdiYWNrZWRTdGFrZSwgdm9pZD4oewoJLy8gICAgICAgICBhcHBsaWNhdGlvbklEOiByZWNlaXZlckFwcCwKCS8vICAgICAgICAgbWV0aG9kQXJnczogWwoJLy8gICAgICAgICAgIHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiByZXN0YWtlVHhuLnJlY2VpdmVyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiByZXN0YWtlVHhuLmFtb3VudCwKCS8vICAgICAgICAgICAgIGZlZTogMCwKCS8vICAgICAgICAgICB9LAoJLy8gICAgICAgICBdLAoJLy8gICAgICAgICBmZWU6IDAsCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAwIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MDMKCS8vIHJlY2VpdmVyOiByZXN0YWtlVHhuLnJlY2VpdmVyCglmcmFtZV9kaWcgLTMgLy8gcmVzdGFrZVR4bjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQwNAoJLy8gYW1vdW50OiByZXN0YWtlVHhuLmFtb3VudAoJZnJhbWVfZGlnIC0zIC8vIHJlc3Rha2VUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQwNQoJLy8gZmVlOiAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCWl0eG5fbmV4dAoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHhiZGYwMWU4ZSAvLyBtZXRob2QgImdldENsYXdiYWNrZWRTdGFrZShwYXkpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDAwCgkvLyBhcHBsaWNhdGlvbklEOiByZWNlaXZlckFwcAoJZnJhbWVfZGlnIC0yIC8vIHJlY2VpdmVyQXBwOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDAxCgkvLyBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgICAgewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHJlc3Rha2VUeG4ucmVjZWl2ZXIsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IHJlc3Rha2VUeG4uYW1vdW50LAoJLy8gICAgICAgICAgICAgZmVlOiAwLAoJLy8gICAgICAgICAgIH0sCgkvLyAgICAgICAgIF0KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQwOAoJLy8gZmVlOiAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDEwCgkvLyByZXR1cm47CglyZXRzdWIKCippZjZfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDEyCgkvLyB2ZXJpZnlQYXlUeG4ocmVzdGFrZVR4biwgewoJLy8gICAgICAgc2VuZGVyOiBzbml0Y2hlZEFwcC5hZGRyZXNzLAoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMyAvLyByZXN0YWtlVHhuOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHNuaXRjaGVkQXBwOiBBcHBJRAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicmVzdGFrZVR4biIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJzbml0Y2hlZEFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0zIC8vIHJlc3Rha2VUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicmVzdGFrZVR4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDE2CgkvLyB0aGlzLmlkbGVBbGdvVG9TdGFrZS52YWx1ZSArPSByZXN0YWtlVHhuLmFtb3VudAoJYnl0ZWMgMSAvLyAgImlkbGVBbGdvIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMyAvLyByZXN0YWtlVHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJKwoJYnl0ZWMgMSAvLyAgImlkbGVBbGdvIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gb25PcGVyYXRvckV4aXQodWludDY0LHBheSl2b2lkCiphYmlfcm91dGVfb25PcGVyYXRvckV4aXQ6CgkvLyBjbG9zZVR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKGNsb3NlVHhuKSBmb3Igb25PcGVyYXRvckV4aXQgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gYXBwVG9DbG9zZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBvbk9wZXJhdG9yRXhpdCh1aW50NjQscGF5KXZvaWQKCWNhbGxzdWIgb25PcGVyYXRvckV4aXQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIG9uT3BlcmF0b3JFeGl0KGFwcFRvQ2xvc2U6IEFwcElELCBjbG9zZVR4bjogUGF5VHhuKTogdm9pZApvbk9wZXJhdG9yRXhpdDoKCXByb3RvIDIgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MjEKCS8vIG9wZXJhdG9yID0gYXBwVG9DbG9zZS5nbG9iYWxTdGF0ZSgnb3BlcmF0b3JBZGRyZXNzJykgYXMgQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIGFwcFRvQ2xvc2U6IEFwcElECglieXRlYyAxNyAvLyAgIm9wZXJhdG9yQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBhcHBUb0Nsb3NlLmdsb2JhbFN0YXRlKCdvcGVyYXRvckFkZHJlc3MnKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDAgLy8gb3BlcmF0b3I6IGFkZHJlc3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MjIKCS8vIHRvdGFsQ2hlY2sgPQoJLy8gICAgICAgKGFwcFRvQ2xvc2UuZ2xvYmFsU3RhdGUoJ29wZXJhdG9yQ29tbWl0JykgYXMgdWludDY0KSArIChhcHBUb0Nsb3NlLmdsb2JhbFN0YXRlKCdkZWxlZ2F0ZWRTdGFrZScpIGFzIHVpbnQ2NCkKCWZyYW1lX2RpZyAtMSAvLyBhcHBUb0Nsb3NlOiBBcHBJRAoJYnl0ZWMgMjMgLy8gICJvcGVyYXRvckNvbW1pdCIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBhcHBUb0Nsb3NlLmdsb2JhbFN0YXRlKCdvcGVyYXRvckNvbW1pdCcpCglhc3NlcnQKCWZyYW1lX2RpZyAtMSAvLyBhcHBUb0Nsb3NlOiBBcHBJRAoJYnl0ZWMgMjEgLy8gICJkZWxlZ2F0ZWRTdGFrZSIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBhcHBUb0Nsb3NlLmdsb2JhbFN0YXRlKCdkZWxlZ2F0ZWRTdGFrZScpCglhc3NlcnQKCSsKCWZyYW1lX2J1cnkgMSAvLyB0b3RhbENoZWNrOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MjQKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IG9wZXJhdG9yLCAnT25seSB0aGUgb3BlcmF0b3IgY2FuIGNsb3NlIG91dCB0aGUgY29udHJhY3QnKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIDAgLy8gb3BlcmF0b3I6IGFkZHJlc3MKCT09CgoJLy8gT25seSB0aGUgb3BlcmF0b3IgY2FuIGNsb3NlIG91dCB0aGUgY29udHJhY3QKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQyNQoJLy8gdmVyaWZ5UGF5VHhuKGNsb3NlVHhuLCB7CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIHNlbmRlcjogYXBwVG9DbG9zZS5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiB0b3RhbENoZWNrLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMiAvLyBjbG9zZVR4bjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJjbG9zZVR4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIGNsb3NlVHhuOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGFwcFRvQ2xvc2U6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJjbG9zZVR4biIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJhcHBUb0Nsb3NlLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0yIC8vIGNsb3NlVHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZnJhbWVfZGlnIDEgLy8gdG90YWxDaGVjazogdWludDY0Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoiY2xvc2VUeG4iLCJmaWVsZCI6ImFtb3VudCIsImV4cGVjdGVkIjoidG90YWxDaGVjayJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MzAKCS8vIHRoaXMuaWRsZUFsZ29Ub1N0YWtlLnZhbHVlICs9IGNsb3NlVHhuLmFtb3VudAoJYnl0ZWMgMSAvLyAgImlkbGVBbGdvIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMiAvLyBjbG9zZVR4bjogUGF5VHhuCglndHhucyBBbW91bnQKCSsKCWJ5dGVjIDEgLy8gICJpZGxlQWxnbyIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDMxCgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzVmFsaWRhdG9yUG9vbC5wcm90b3R5cGUuZGVsZXRlQXBwbGljYXRpb24sIHZvaWQ+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IGFwcFRvQ2xvc2UsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHgyNDg3YzMyYyAvLyBtZXRob2QgImRlbGV0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MzIKCS8vIGFwcGxpY2F0aW9uSUQ6IGFwcFRvQ2xvc2UKCWZyYW1lX2RpZyAtMSAvLyBhcHBUb0Nsb3NlOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDMzCgkvLyBtZXRob2RBcmdzOiBbXQoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBkZWNsYXJlUmV3YXJkcyhwYXkpdm9pZAoqYWJpX3JvdXRlX2RlY2xhcmVSZXdhcmRzOgoJLy8gdHhuOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDAgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAwIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAodHhuKSBmb3IgZGVjbGFyZVJld2FyZHMgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBkZWNsYXJlUmV3YXJkcyhwYXkpdm9pZAoJY2FsbHN1YiBkZWNsYXJlUmV3YXJkcwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZGVjbGFyZVJld2FyZHModHhuOiBQYXlUeG4pOiB2b2lkCmRlY2xhcmVSZXdhcmRzOgoJcHJvdG8gMSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQzOAoJLy8gYXNzZXJ0KHR4bi5yZWNlaXZlciA9PT0gdGhpcy5hcHAuYWRkcmVzcywgJ3BheW1lbnQgbXVzdCBiZSBkb25lIHRvIHRoaXMgYXBwIGFkZHJlc3MnKQoJZnJhbWVfZGlnIC0xIC8vIHR4bjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gcGF5bWVudCBtdXN0IGJlIGRvbmUgdG8gdGhpcyBhcHAgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDM5CgkvLyBwcm90b2NvbEN1dCA9IChQUk9UT0NPTF9DT01NSVNTSU9OICogdHhuLmFtb3VudCkgLyAxMDAKCWludGMgNCAvLyA0CglmcmFtZV9kaWcgLTEgLy8gdHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJKgoJcHVzaGludCAxMDAKCS8KCWZyYW1lX2J1cnkgMCAvLyBwcm90b2NvbEN1dDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDQwCgkvLyByZXN0YWtlUmV3YXJkcyA9IHR4bi5hbW91bnQgLSBwcm90b2NvbEN1dAoJZnJhbWVfZGlnIC0xIC8vIHR4bjogUGF5VHhuCglndHhucyBBbW91bnQKCWZyYW1lX2RpZyAwIC8vIHByb3RvY29sQ3V0OiB1aW50NjQKCS0KCWZyYW1lX2J1cnkgMSAvLyByZXN0YWtlUmV3YXJkczogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDQxCgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy52ZXN0aWdlQWRkcmVzcy52YWx1ZSwKCS8vICAgICAgIGFtb3VudDogcHJvdG9jb2xDdXQsCgkvLyAgICAgICBmZWU6IDAsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMCAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDQyCgkvLyByZWNlaXZlcjogdGhpcy52ZXN0aWdlQWRkcmVzcy52YWx1ZQoJYnl0ZWMgMjAgLy8gICJ2ZXN0aWdlQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDQzCgkvLyBhbW91bnQ6IHByb3RvY29sQ3V0CglmcmFtZV9kaWcgMCAvLyBwcm90b2NvbEN1dDogdWludDY0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ0NAoJLy8gZmVlOiAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDQ2CgkvLyB0aGlzLmlkbGVBbGdvVG9TdGFrZS52YWx1ZSArPSByZXN0YWtlUmV3YXJkcwoJYnl0ZWMgMSAvLyAgImlkbGVBbGdvIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAxIC8vIHJlc3Rha2VSZXdhcmRzOiB1aW50NjQKCSsKCWJ5dGVjIDEgLy8gICJpZGxlQWxnbyIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDQ3CgkvLyB0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSArPSByZXN0YWtlUmV3YXJkcwoJYnl0ZWMgNCAvLyAgInRvdGFsc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDEgLy8gcmVzdGFrZVJld2FyZHM6IHVpbnQ2NAoJKwoJYnl0ZWMgNCAvLyAgInRvdGFsc3Rha2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBzbml0Y2hDaGVjayh1aW50NjQsKGJvb2wsYm9vbCxib29sLHVpbnQ2NCxib29sLHVpbnQ2NCkpYm9vbAoqYWJpX3JvdXRlX3NuaXRjaENoZWNrOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAxMyAvLyAweDE1MWY3Yzc1CgoJLy8gcGFyYW1zOiAoYm9vbCxib29sLGJvb2wsdWludDY0LGJvb2wsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCXB1c2hpbnQgMTgKCT09CgoJLy8gYXJndW1lbnQgMCAocGFyYW1zKSBmb3Igc25pdGNoQ2hlY2sgbXVzdCBiZSBhIChib29sLGJvb2wsYm9vbCx1aW50NjQsYm9vbCx1aW50NjQpCglhc3NlcnQKCgkvLyBhcHBUb0NoZWNrOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHNuaXRjaENoZWNrKHVpbnQ2NCwoYm9vbCxib29sLGJvb2wsdWludDY0LGJvb2wsdWludDY0KSlib29sCgljYWxsc3ViIHNuaXRjaENoZWNrCglieXRlYyAxMCAvLyAweDAwCglpbnRjIDEgLy8gMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzbml0Y2hDaGVjayhhcHBUb0NoZWNrOiBBcHBJRCwgcGFyYW1zOiBTbml0Y2hJbmZvKTogYm9vbGVhbgpzbml0Y2hDaGVjazoKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ1MQoJLy8gYXNzZXJ0KHRoaXMuaXNQb29sKGFwcFRvQ2hlY2spKQoJZnJhbWVfZGlnIC0xIC8vIGFwcFRvQ2hlY2s6IEFwcElECgljYWxsc3ViIGlzUG9vbAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDUyCgkvLyBhc3NlcnQodGhpcy5pc1Bvb2wocGFyYW1zLnJlY2lwaWVudCkgfHwgcGFyYW1zLnJlY2lwaWVudC5hZGRyZXNzID09PSB0aGlzLmFwcC5hZGRyZXNzKQoJZnJhbWVfZGlnIC0yIC8vIHBhcmFtczogU25pdGNoSW5mbwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMSA4CglidG9pCgljYWxsc3ViIGlzUG9vbAoJZHVwCglibnogKnNraXBfb3IwCglmcmFtZV9kaWcgLTIgLy8gcGFyYW1zOiBTbml0Y2hJbmZvCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAxIDgKCWJ0b2kKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cgl8fAoKKnNraXBfb3IwOgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDU0CgkvLyByZXR1cm4gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLmdldFNuaXRjaGVkLCBib29sZWFuPih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiBhcHBUb0NoZWNrLAoJLy8gICAgICAgbWV0aG9kQXJnczogW3BhcmFtc10sCgkvLyAgICAgfSk7CglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweDViNjc0ZjJmIC8vIG1ldGhvZCAiZ2V0U25pdGNoZWQoKGJvb2wsYm9vbCxib29sLHVpbnQ2NCxib29sLHVpbnQ2NCkpYm9vbCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDU1CgkvLyBhcHBsaWNhdGlvbklEOiBhcHBUb0NoZWNrCglmcmFtZV9kaWcgLTEgLy8gYXBwVG9DaGVjazogQXBwSUQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ1NgoJLy8gbWV0aG9kQXJnczogW3BhcmFtc10KCWZyYW1lX2RpZyAtMiAvLyBwYXJhbXM6IFNuaXRjaEluZm8KCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnRjIDAgLy8gMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglpbnRjIDEgLy8gMAoJZ2V0Yml0CglyZXRzdWIKCi8vIG1ha2VGbGFzaExvYW5SZXF1ZXN0KHBheSx1aW50NjRbXSx1aW50NjRbXSl2b2lkCiphYmlfcm91dGVfbWFrZUZsYXNoTG9hblJlcXVlc3Q6CgkvLyBhcHBUb0luY2x1ZGU6IHVpbnQ2NFtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGFtb3VudHM6IHVpbnQ2NFtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIHBheUZlZVR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDIgKHBheUZlZVR4bikgZm9yIG1ha2VGbGFzaExvYW5SZXF1ZXN0IG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgbWFrZUZsYXNoTG9hblJlcXVlc3QocGF5LHVpbnQ2NFtdLHVpbnQ2NFtdKXZvaWQKCWNhbGxzdWIgbWFrZUZsYXNoTG9hblJlcXVlc3QKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIG1ha2VGbGFzaExvYW5SZXF1ZXN0KHBheUZlZVR4bjogUGF5VHhuLCBhbW91bnRzOiB1aW50NjRbXSwgYXBwVG9JbmNsdWRlOiBBcHBJRFtdKTogdm9pZAptYWtlRmxhc2hMb2FuUmVxdWVzdDoKCXByb3RvIDMgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXBuIDQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NjMKCS8vIHRoaXMuZ2V0Rkxjb3VudGVyKCkKCWNhbGxzdWIgZ2V0Rkxjb3VudGVyCglwb3AKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NjQKCS8vIHRoaXMuZmxhc2hMb2FuQ291bnRlci52YWx1ZSArPSBhcHBUb0luY2x1ZGUubGVuZ3RoCglieXRlYyAzIC8vICAiZmxhc2hMb2FuQ291bnRlciIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTMgLy8gYXBwVG9JbmNsdWRlOiBBcHBJRFtdCglsZW4KCWludGMgMiAvLyA4CgkvCgkrCglieXRlYyAzIC8vICAiZmxhc2hMb2FuQ291bnRlciIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDY1CgkvLyBrZWVwRmVlID0gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlICsgRkxBU0hfTE9BTl9GRUUKCWJ5dGVjIDMgLy8gICJmbGFzaExvYW5Db3VudGVyIgoJYXBwX2dsb2JhbF9nZXQKCXB1c2hpbnQgMTAwMDAwMDAKCSsKCWZyYW1lX2J1cnkgMCAvLyBrZWVwRmVlOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NjcKCS8vIHZlcmlmeVBheVR4bihwYXlGZWVUeG4sIHsKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiBrZWVwRmVlLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXlGZWVUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicGF5RmVlVHhuIiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gcGF5RmVlVHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZnJhbWVfZGlnIDAgLy8ga2VlcEZlZTogdWludDY0Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicGF5RmVlVHhuIiwiZmllbGQiOiJhbW91bnQiLCJleHBlY3RlZCI6ImtlZXBGZWUifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDcyCgkvLyB0aGlzLmlkbGVBbGdvVG9TdGFrZS52YWx1ZSArPSBrZWVwRmVlCglieXRlYyAxIC8vICAiaWRsZUFsZ28iCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDAgLy8ga2VlcEZlZTogdWludDY0CgkrCglieXRlYyAxIC8vICAiaWRsZUFsZ28iCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ3NAoJLy8gYXNzZXJ0KGFtb3VudHMubGVuZ3RoID09PSBhcHBUb0luY2x1ZGUubGVuZ3RoLCAnYXJyYXkgbGVuZ3RoIFthbW91bnQsIGFwcFRvSW5jbHVkZV0gbWlzbWF0Y2gnKQoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudHM6IHVpbnQ2NFtdCglsZW4KCWludGMgMiAvLyA4CgkvCglmcmFtZV9kaWcgLTMgLy8gYXBwVG9JbmNsdWRlOiBBcHBJRFtdCglsZW4KCWludGMgMiAvLyA4CgkvCgk9PQoKCS8vIGFycmF5IGxlbmd0aCBbYW1vdW50LCBhcHBUb0luY2x1ZGVdIG1pc21hdGNoCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NzYKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgYXBwVG9JbmNsdWRlLmxlbmd0aDsgaSArPSAxKQoJaW50YyAxIC8vIDAKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCipmb3JfMjoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ3NgoJLy8gaSA8IGFwcFRvSW5jbHVkZS5sZW5ndGgKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIGFwcFRvSW5jbHVkZTogQXBwSURbXQoJbGVuCglpbnRjIDIgLy8gOAoJLwoJPAoJYnogKmZvcl8yX2VuZAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ3NwoJLy8gdGhpcy5wZW5kaW5nR3JvdXAuYWRkTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzVmFsaWRhdG9yUG9vbC5wcm90b3R5cGUuZmxhc2hsb2FuLCB2b2lkPih7CgkvLyAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IGFwcFRvSW5jbHVkZVtpXSwKCS8vICAgICAgICAgbWV0aG9kQXJnczogW2Ftb3VudHNbaV0sIHRoaXMudHhuLnNlbmRlcl0sCgkvLyAgICAgICAgIGZlZTogMCwKCS8vICAgICAgIH0pCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4NGE1MzU2Y2MgLy8gbWV0aG9kICJmbGFzaGxvYW4odWludDY0LGFkZHJlc3Mpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDc4CgkvLyBhcHBsaWNhdGlvbklEOiBhcHBUb0luY2x1ZGVbaV0KCWZyYW1lX2RpZyAtMyAvLyBhcHBUb0luY2x1ZGU6IEFwcElEW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDEgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDc5CgkvLyBtZXRob2RBcmdzOiBbYW1vdW50c1tpXSwgdGhpcy50eG4uc2VuZGVyXQoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudHM6IHVpbnQ2NFtdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAxIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglpbnRjIDIgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDIgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ4MAoJLy8gZmVlOiAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0ODMKCS8vIGZvciAobGV0IGogPSB0aGlzLnR4bi5ncm91cEluZGV4OyBqIDwgdGhpcy50eG5Hcm91cC5sZW5ndGg7IGogKz0gMSkKCXR4biBHcm91cEluZGV4CglmcmFtZV9idXJ5IDIgLy8gajogdWludDY0CgoqZm9yXzM6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0ODMKCS8vIGogPCB0aGlzLnR4bkdyb3VwLmxlbmd0aAoJZnJhbWVfZGlnIDIgLy8gajogdWludDY0CglnbG9iYWwgR3JvdXBTaXplCgk8CglieiAqZm9yXzNfZW5kCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDg0CgkvLyB0eG4gPSB0aGlzLnR4bkdyb3VwW2pdCglmcmFtZV9kaWcgMiAvLyBqOiB1aW50NjQKCWZyYW1lX2J1cnkgMyAvLyB0eG46IHR4bgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ4NQoJLy8gcmVwYWlkID0gZmFsc2UKCWludGMgMSAvLyAwCglmcmFtZV9idXJ5IDQgLy8gcmVwYWlkOiBib29sCgoJLy8gKmlmN19jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ4NwoJLy8gdHhuLnR5cGVFbnVtID09PSBUcmFuc2FjdGlvblR5cGUuQXBwbGljYXRpb25DYWxsICYmCgkvLyAgICAgICAgICAgdHhuLmFwcGxpY2F0aW9uSUQgPT09IGFwcFRvSW5jbHVkZVtpXSAmJgoJLy8gICAgICAgICAgIHR4bi5vbkNvbXBsZXRpb24gPT09IDAgJiYKCS8vICAgICAgICAgICB0eG4ubnVtQXBwQXJncyA9PT0gMSAmJgoJLy8gICAgICAgICAgIHR4bi5hcHBsaWNhdGlvbkFyZ3NbMF0gPT09IG1ldGhvZCgnY2hlY2tCYWxhbmNlKCk6dm9pZCcpCglmcmFtZV9kaWcgMyAvLyB0eG46IHR4bgoJZ3R4bnMgVHlwZUVudW0KCWludGMgMyAvLyAgYXBwbAoJPT0KCWR1cAoJYnogKnNraXBfYW5kNAoJZnJhbWVfZGlnIDMgLy8gdHhuOiB0eG4KCWd0eG5zIEFwcGxpY2F0aW9uSUQKCWZyYW1lX2RpZyAtMyAvLyBhcHBUb0luY2x1ZGU6IEFwcElEW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDEgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJPT0KCSYmCgoqc2tpcF9hbmQ0OgoJZHVwCglieiAqc2tpcF9hbmQ1CglmcmFtZV9kaWcgMyAvLyB0eG46IHR4bgoJZ3R4bnMgT25Db21wbGV0aW9uCglpbnRjIDEgLy8gMAoJPT0KCSYmCgoqc2tpcF9hbmQ1OgoJZHVwCglieiAqc2tpcF9hbmQ2CglmcmFtZV9kaWcgMyAvLyB0eG46IHR4bgoJZ3R4bnMgTnVtQXBwQXJncwoJaW50YyAwIC8vIDEKCT09CgkmJgoKKnNraXBfYW5kNjoKCWR1cAoJYnogKnNraXBfYW5kNwoJZnJhbWVfZGlnIDMgLy8gdHhuOiB0eG4KCWd0eG5zIEFwcGxpY2F0aW9uQXJncyAwCglwdXNoYnl0ZXMgMHgzZmE4OGZkMCAvLyBtZXRob2QgImNoZWNrQmFsYW5jZSgpOnZvaWQiCgk9PQoJJiYKCipza2lwX2FuZDc6CglieiAqaWY3X2VuZAoKCS8vICppZjdfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDkzCgkvLyByZXBhaWQgPSB0cnVlCglpbnRjIDAgLy8gMQoJZnJhbWVfYnVyeSA0IC8vIHJlcGFpZDogYm9vbAoKKmlmN19lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0OTUKCS8vIGFzc2VydChyZXBhaWQpCglmcmFtZV9kaWcgNCAvLyByZXBhaWQ6IGJvb2wKCWFzc2VydAoKKmZvcl8zX2NvbnRpbnVlOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDgzCgkvLyBqICs9IDEKCWZyYW1lX2RpZyAyIC8vIGo6IHVpbnQ2NAoJaW50YyAwIC8vIDEKCSsKCWZyYW1lX2J1cnkgMiAvLyBqOiB1aW50NjQKCWIgKmZvcl8zCgoqZm9yXzNfZW5kOgoKKmZvcl8yX2NvbnRpbnVlOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDc2CgkvLyBpICs9IDEKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJaW50YyAwIC8vIDEKCSsKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCWIgKmZvcl8yCgoqZm9yXzJfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDk4CgkvLyB0aGlzLnBlbmRpbmdHcm91cC5zdWJtaXQoKQoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gZ2V0Rkxjb3VudGVyKCl1aW50NjQKKmFiaV9yb3V0ZV9nZXRGTGNvdW50ZXI6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDEzIC8vIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGdldEZMY291bnRlcigpdWludDY0CgljYWxsc3ViIGdldEZMY291bnRlcgoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGdldEZMY291bnRlcigpOiB1aW50NjQKZ2V0Rkxjb3VudGVyOgoJcHJvdG8gMCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCgkvLyAqaWY4X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTAzCgkvLyB0aGlzLmxhc3RGbGFzaGxvYW5CbG9jay52YWx1ZSA9PT0gZ2xvYmFscy5yb3VuZAoJYnl0ZWMgMTkgLy8gICJsYXN0Rmxhc2hsb2FuQmxvY2siCglhcHBfZ2xvYmFsX2dldAoJZ2xvYmFsIFJvdW5kCgk9PQoJYnogKmlmOF9lbmQKCgkvLyAqaWY4X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUwNAoJLy8gcmV0dXJuIHRoaXMuZmxhc2hMb2FuQ291bnRlci52YWx1ZTsKCWJ5dGVjIDMgLy8gICJmbGFzaExvYW5Db3VudGVyIgoJYXBwX2dsb2JhbF9nZXQKCWIgKmdldEZMY291bnRlcipyZXR1cm4KCippZjhfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTA2CgkvLyByZWR1Y2UgPSBnbG9iYWxzLnJvdW5kIC0gdGhpcy5sYXN0Rmxhc2hsb2FuQmxvY2sudmFsdWUKCWdsb2JhbCBSb3VuZAoJYnl0ZWMgMTkgLy8gICJsYXN0Rmxhc2hsb2FuQmxvY2siCglhcHBfZ2xvYmFsX2dldAoJLQoJZnJhbWVfYnVyeSAwIC8vIHJlZHVjZTogdWludDY0CgoJLy8gKmlmOV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUwNwoJLy8gcmVkdWNlID4gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlCglmcmFtZV9kaWcgMCAvLyByZWR1Y2U6IHVpbnQ2NAoJYnl0ZWMgMyAvLyAgImZsYXNoTG9hbkNvdW50ZXIiCglhcHBfZ2xvYmFsX2dldAoJPgoJYnogKmlmOV9lbmQKCgkvLyAqaWY5X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUwOAoJLy8gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlID0gMAoJYnl0ZWMgMyAvLyAgImZsYXNoTG9hbkNvdW50ZXIiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MDkKCS8vIHJldHVybiB0aGlzLmZsYXNoTG9hbkNvdW50ZXIudmFsdWU7CglieXRlYyAzIC8vICAiZmxhc2hMb2FuQ291bnRlciIKCWFwcF9nbG9iYWxfZ2V0CgliICpnZXRGTGNvdW50ZXIqcmV0dXJuCgoqaWY5X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUxMQoJLy8gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlIC09IHJlZHVjZSAqIDIgPiB0aGlzLmZsYXNoTG9hbkNvdW50ZXIudmFsdWUgPyByZWR1Y2UgKiAyIDogcmVkdWNlCglieXRlYyAzIC8vICAiZmxhc2hMb2FuQ291bnRlciIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyByZWR1Y2U6IHVpbnQ2NAoJaW50YyAxMiAvLyAyCgkqCglieXRlYyAzIC8vICAiZmxhc2hMb2FuQ291bnRlciIKCWFwcF9nbG9iYWxfZ2V0Cgk+CglieiAqdGVybmFyeTFfZmFsc2UKCWZyYW1lX2RpZyAwIC8vIHJlZHVjZTogdWludDY0CglpbnRjIDEyIC8vIDIKCSoKCWIgKnRlcm5hcnkxX2VuZAoKKnRlcm5hcnkxX2ZhbHNlOgoJZnJhbWVfZGlnIDAgLy8gcmVkdWNlOiB1aW50NjQKCip0ZXJuYXJ5MV9lbmQ6CgktCglieXRlYyAzIC8vICAiZmxhc2hMb2FuQ291bnRlciIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTEyCgkvLyByZXR1cm4gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlOwoJYnl0ZWMgMyAvLyAgImZsYXNoTG9hbkNvdW50ZXIiCglhcHBfZ2xvYmFsX2dldAoKKmdldEZMY291bnRlcipyZXR1cm46CgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKLy8gaXNQb29sKGFwcDogQXBwSUQpOiBib29sZWFuCmlzUG9vbDoKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTE2CgkvLyBpc1Bvb2wgPSAoYXBwLmdsb2JhbFN0YXRlKCdjcmVhdG9yJykgYXMgQXBwSUQpID09PSB0aGlzLmFwcAoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCXB1c2hieXRlcyAweDYzNzI2NTYxNzQ2ZjcyIC8vICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcC5nbG9iYWxTdGF0ZSgnY3JlYXRvcicpCglhc3NlcnQKCXR4bmEgQXBwbGljYXRpb25zIDAKCT09CglmcmFtZV9idXJ5IDAgLy8gaXNQb29sOiBib29sCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTE3CgkvLyByZXR1cm4gaXNQb29sOwoJZnJhbWVfZGlnIDAgLy8gaXNQb29sOiBib29sCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCi8vIG1pbkJhbGFuY2VGb3JBY2NvdW50KGNvbnRyYWN0czogdWludDY0LCBleHRyYVBhZ2VzOiB1aW50NjQsIGFzc2V0czogdWludDY0LCBsb2NhbEludHM6IHVpbnQ2NCwgbG9jYWxCeXRlczogdWludDY0LCBnbG9iYWxJbnRzOiB1aW50NjQsIGdsb2JhbEJ5dGVzOiB1aW50NjQpOiB1aW50NjQKbWluQmFsYW5jZUZvckFjY291bnQ6Cglwcm90byA3IDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUyOQoJLy8gbWluQmFsID0gQUxHT1JBTkRfQUNDT1VOVF9NSU5fQkFMQU5DRQoJaW50YyA1IC8vIDEwMDAwMAoJZnJhbWVfYnVyeSAwIC8vIG1pbkJhbDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTMwCgkvLyBtaW5CYWwgKz0gY29udHJhY3RzICogQVBQTElDQVRJT05fQkFTRV9GRUUKCWZyYW1lX2RpZyAwIC8vIG1pbkJhbDogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gY29udHJhY3RzOiB1aW50NjQKCWludGMgNSAvLyAxMDAwMDAKCSoKCSsKCWZyYW1lX2J1cnkgMCAvLyBtaW5CYWw6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUzMQoJLy8gbWluQmFsICs9IGV4dHJhUGFnZXMgKiBBUFBMSUNBVElPTl9CQVNFX0ZFRQoJZnJhbWVfZGlnIDAgLy8gbWluQmFsOiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBleHRyYVBhZ2VzOiB1aW50NjQKCWludGMgNSAvLyAxMDAwMDAKCSoKCSsKCWZyYW1lX2J1cnkgMCAvLyBtaW5CYWw6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUzMgoJLy8gbWluQmFsICs9IGFzc2V0cyAqIEFTU0VUX0hPTERJTkdfRkVFCglmcmFtZV9kaWcgMCAvLyBtaW5CYWw6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0czogdWludDY0CglpbnRjIDUgLy8gMTAwMDAwCgkqCgkrCglmcmFtZV9idXJ5IDAgLy8gbWluQmFsOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MzMKCS8vIG1pbkJhbCArPSBsb2NhbEludHMgKiBTU0NfVkFMVUVfVUlOVAoJZnJhbWVfZGlnIDAgLy8gbWluQmFsOiB1aW50NjQKCWZyYW1lX2RpZyAtNCAvLyBsb2NhbEludHM6IHVpbnQ2NAoJaW50YyAxMCAvLyAyODUwMAoJKgoJKwoJZnJhbWVfYnVyeSAwIC8vIG1pbkJhbDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTM0CgkvLyBtaW5CYWwgKz0gZ2xvYmFsSW50cyAqIFNTQ19WQUxVRV9VSU5UCglmcmFtZV9kaWcgMCAvLyBtaW5CYWw6IHVpbnQ2NAoJZnJhbWVfZGlnIC02IC8vIGdsb2JhbEludHM6IHVpbnQ2NAoJaW50YyAxMCAvLyAyODUwMAoJKgoJKwoJZnJhbWVfYnVyeSAwIC8vIG1pbkJhbDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTM1CgkvLyBtaW5CYWwgKz0gbG9jYWxCeXRlcyAqIFNTQ19WQUxVRV9CWVRFUwoJZnJhbWVfZGlnIDAgLy8gbWluQmFsOiB1aW50NjQKCWZyYW1lX2RpZyAtNSAvLyBsb2NhbEJ5dGVzOiB1aW50NjQKCWludGMgMTEgLy8gNTAwMDAKCSoKCSsKCWZyYW1lX2J1cnkgMCAvLyBtaW5CYWw6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUzNgoJLy8gbWluQmFsICs9IGdsb2JhbEJ5dGVzICogU1NDX1ZBTFVFX0JZVEVTCglmcmFtZV9kaWcgMCAvLyBtaW5CYWw6IHVpbnQ2NAoJZnJhbWVfZGlnIC03IC8vIGdsb2JhbEJ5dGVzOiB1aW50NjQKCWludGMgMTEgLy8gNTAwMDAKCSoKCSsKCWZyYW1lX2J1cnkgMCAvLyBtaW5CYWw6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUzNwoJLy8gcmV0dXJuIG1pbkJhbDsKCWZyYW1lX2RpZyAwIC8vIG1pbkJhbDogdWludDY0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCi8vIGNvc3RGb3JCb3hTdG9yYWdlKHRvdGFsTnVtQnl0ZXM6IHVpbnQ2NCk6IHVpbnQ2NApjb3N0Rm9yQm94U3RvcmFnZToKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU0NQoJLy8gcmV0dXJuIFNDQk9YX1BFUkJPWCArIHRvdGFsTnVtQnl0ZXMgKiBTQ0JPWF9QRVJCWVRFOwoJcHVzaGludCAyNTAwCglmcmFtZV9kaWcgLTEgLy8gdG90YWxOdW1CeXRlczogdWludDY0CglwdXNoaW50IDQwMAoJKgoJKwoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHhiODQ0N2IzNiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4ZDIyMDgzMmQgLy8gbWV0aG9kICJjcmVhdG9yQ2hhbmdlQ3JlYXRvclJlbGF0ZWRQYXJhbXMoYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHgzM2U0NjNlNSAvLyBtZXRob2QgImluaXRQb29sQ29udHJhY3QodWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHg0Y2EyOTM2MSAvLyBtZXRob2QgImxvYWRQb29sQ29udHJhY3RQcm9ncmFtKHVpbnQ2NCxieXRlW10pdm9pZCIKCXB1c2hieXRlcyAweDA1Nzg0Mzc5IC8vIG1ldGhvZCAicG9vbENvbnRyYWN0SXNTZXQoKXZvaWQiCglwdXNoYnl0ZXMgMHgxMjRhOWUzMCAvLyBtZXRob2QgImluaXRMU1Qoc3RyaW5nLHN0cmluZyxzdHJpbmcpdm9pZCIKCXB1c2hieXRlcyAweDFmMGViZjVmIC8vIG1ldGhvZCAiaW5pdEJ1cm5RdWV1ZSgpdm9pZCIKCXB1c2hieXRlcyAweDEyNjMxNzVhIC8vIG1ldGhvZCAiYWRkQ2FlbHVzVmFsaWRhdG9yKHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4NjkwMzVhMWMgLy8gbWV0aG9kICJjYWxjdWxhdGVMU1RSYXRpbygpdm9pZCIKCXB1c2hieXRlcyAweDhiODc0ZjFkIC8vIG1ldGhvZCAiZ2V0TWludEFtb3VudCh1aW50NjQpdWludDY0IgoJcHVzaGJ5dGVzIDB4MzczNDY1ZDcgLy8gbWV0aG9kICJnZXRCdXJuQW1vdW50KHVpbnQ2NCl1aW50NjQiCglwdXNoYnl0ZXMgMHg2NzUzOTZmNCAvLyBtZXRob2QgIm1pbnRSZXF1ZXN0KHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4NjI2NTU5NjAgLy8gbWV0aG9kICJidXJuUmVxdWVzdChheGZlcil2b2lkIgoJcHVzaGJ5dGVzIDB4ZTU3NDdlMDcgLy8gbWV0aG9kICJtaW50VmFsaWRhdG9yQ29tbWl0KHVpbnQ2NCxwYXkpdm9pZCIKCXB1c2hieXRlcyAweDgwMzZkNTI4IC8vIG1ldGhvZCAiYnVyblZhbGlkYXRvckNvbW1pdCgpdm9pZCIKCXB1c2hieXRlcyAweGIxM2NjMGIxIC8vIG1ldGhvZCAiYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvcihheGZlcix1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweGIxZDY4MTM5IC8vIG1ldGhvZCAicmVNaW50RGVsaXF1ZW50Q29tbWl0KHVpbnQ2NCx1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweGVkZGZlNTk4IC8vIG1ldGhvZCAiYmlkKHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4ZTQ1YzQwZTAgLy8gbWV0aG9kICJkZWxlZ2F0ZVN0YWtlKHVpbnQ2NCx1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweDYxMGExZmFkIC8vIG1ldGhvZCAic25pdGNoKHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4OTExYzNjNDYgLy8gbWV0aG9kICJyZVN0YWtlRnJvbVNuaXRjaCh1aW50NjQsdWludDY0LHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4NWUwNzNlNjcgLy8gbWV0aG9kICJvbk9wZXJhdG9yRXhpdCh1aW50NjQscGF5KXZvaWQiCglwdXNoYnl0ZXMgMHg1NDhiNTlmNiAvLyBtZXRob2QgImRlY2xhcmVSZXdhcmRzKHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4ZDJiZTU4NmEgLy8gbWV0aG9kICJzbml0Y2hDaGVjayh1aW50NjQsKGJvb2wsYm9vbCxib29sLHVpbnQ2NCxib29sLHVpbnQ2NCkpYm9vbCIKCXB1c2hieXRlcyAweDhiZmExMTU3IC8vIG1ldGhvZCAibWFrZUZsYXNoTG9hblJlcXVlc3QocGF5LHVpbnQ2NFtdLHVpbnQ2NFtdKXZvaWQiCglwdXNoYnl0ZXMgMHg3Yzk0MWIzNSAvLyBtZXRob2QgImdldEZMY291bnRlcigpdWludDY0IgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdG9yQ2hhbmdlQ3JlYXRvclJlbGF0ZWRQYXJhbXMgKmFiaV9yb3V0ZV9pbml0UG9vbENvbnRyYWN0ICphYmlfcm91dGVfbG9hZFBvb2xDb250cmFjdFByb2dyYW0gKmFiaV9yb3V0ZV9wb29sQ29udHJhY3RJc1NldCAqYWJpX3JvdXRlX2luaXRMU1QgKmFiaV9yb3V0ZV9pbml0QnVyblF1ZXVlICphYmlfcm91dGVfYWRkQ2FlbHVzVmFsaWRhdG9yICphYmlfcm91dGVfY2FsY3VsYXRlTFNUUmF0aW8gKmFiaV9yb3V0ZV9nZXRNaW50QW1vdW50ICphYmlfcm91dGVfZ2V0QnVybkFtb3VudCAqYWJpX3JvdXRlX21pbnRSZXF1ZXN0ICphYmlfcm91dGVfYnVyblJlcXVlc3QgKmFiaV9yb3V0ZV9taW50VmFsaWRhdG9yQ29tbWl0ICphYmlfcm91dGVfYnVyblZhbGlkYXRvckNvbW1pdCAqYWJpX3JvdXRlX2J1cm5Ub0RlbGlucXVlbnRWYWxpZGF0b3IgKmFiaV9yb3V0ZV9yZU1pbnREZWxpcXVlbnRDb21taXQgKmFiaV9yb3V0ZV9iaWQgKmFiaV9yb3V0ZV9kZWxlZ2F0ZVN0YWtlICphYmlfcm91dGVfc25pdGNoICphYmlfcm91dGVfcmVTdGFrZUZyb21Tbml0Y2ggKmFiaV9yb3V0ZV9vbk9wZXJhdG9yRXhpdCAqYWJpX3JvdXRlX2RlY2xhcmVSZXdhcmRzICphYmlfcm91dGVfc25pdGNoQ2hlY2sgKmFiaV9yb3V0ZV9tYWtlRmxhc2hMb2FuUmVxdWVzdCAqYWJpX3JvdXRlX2dldEZMY291bnRlcgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusAdmin",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "creatorChangeCreatorRelatedParams",
        "args": [
          {
            "name": "newVestigeAddress",
            "type": "address"
          },
          {
            "name": "vestID",
            "type": "uint64"
          },
          {
            "name": "stVestID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initPoolContract",
        "args": [
          {
            "name": "programSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "loadPoolContractProgram",
        "args": [
          {
            "name": "offsett",
            "type": "uint64"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "poolContractIsSet",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initLST",
        "args": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "unitName",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initBurnQueue",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addCaelusValidator",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "calculateLSTRatio",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMintAmount",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getBurnAmount",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "mintRequest",
        "args": [
          {
            "name": "mintTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnRequest",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mintValidatorCommit",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          },
          {
            "name": "stakeCommit",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnValidatorCommit",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnToDelinquentValidator",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          },
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reMintDeliquentCommit",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bid",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "delegateStake",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitch",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reStakeFromSnitch",
        "args": [
          {
            "name": "snitchedApp",
            "type": "uint64"
          },
          {
            "name": "receiverApp",
            "type": "uint64"
          },
          {
            "name": "restakeTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "onOperatorExit",
        "args": [
          {
            "name": "appToClose",
            "type": "uint64"
          },
          {
            "name": "closeTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "declareRewards",
        "args": [
          {
            "name": "txn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchCheck",
        "args": [
          {
            "name": "appToCheck",
            "type": "uint64"
          },
          {
            "name": "params",
            "type": "(bool,bool,bool,uint64,bool,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "makeFlashLoanRequest",
        "args": [
          {
            "name": "payFeeTxn",
            "type": "pay"
          },
          {
            "name": "amounts",
            "type": "uint64[]"
          },
          {
            "name": "appToInclude",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getFLcounter",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the CaelusAdmin smart contract.
 */
export type CaelusAdmin = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'creatorChangeCreatorRelatedParams(address,uint64,uint64)void' | 'creatorChangeCreatorRelatedParams', {
      argsObj: {
        newVestigeAddress: string
        vestID: bigint | number
        stVestID: bigint | number
      }
      argsTuple: [newVestigeAddress: string, vestID: bigint | number, stVestID: bigint | number]
      returns: void
    }>
    & Record<'initPoolContract(uint64)void' | 'initPoolContract', {
      argsObj: {
        programSize: bigint | number
      }
      argsTuple: [programSize: bigint | number]
      returns: void
    }>
    & Record<'loadPoolContractProgram(uint64,byte[])void' | 'loadPoolContractProgram', {
      argsObj: {
        offsett: bigint | number
        data: Uint8Array
      }
      argsTuple: [offsett: bigint | number, data: Uint8Array]
      returns: void
    }>
    & Record<'poolContractIsSet()void' | 'poolContractIsSet', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'initLST(string,string,string)void' | 'initLST', {
      argsObj: {
        name: string
        unitName: string
        url: string
      }
      argsTuple: [name: string, unitName: string, url: string]
      returns: void
    }>
    & Record<'initBurnQueue()void' | 'initBurnQueue', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'addCaelusValidator(pay)void' | 'addCaelusValidator', {
      argsObj: {
        mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'calculateLSTRatio()void' | 'calculateLSTRatio', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getMintAmount(uint64)uint64' | 'getMintAmount', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'getBurnAmount(uint64)uint64' | 'getBurnAmount', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'mintRequest(pay)void' | 'mintRequest', {
      argsObj: {
        mintTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mintTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'burnRequest(axfer)void' | 'burnRequest', {
      argsObj: {
        burnTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [burnTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'mintValidatorCommit(uint64,pay)void' | 'mintValidatorCommit', {
      argsObj: {
        validatorAppID: bigint | number
        stakeCommit: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [validatorAppID: bigint | number, stakeCommit: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'burnValidatorCommit()void' | 'burnValidatorCommit', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'burnToDelinquentValidator(axfer,uint64)void' | 'burnToDelinquentValidator', {
      argsObj: {
        burnTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        validatorAppID: bigint | number
      }
      argsTuple: [burnTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, validatorAppID: bigint | number]
      returns: void
    }>
    & Record<'reMintDeliquentCommit(uint64,uint64)void' | 'reMintDeliquentCommit', {
      argsObj: {
        amount: bigint | number
        app: bigint | number
      }
      argsTuple: [amount: bigint | number, app: bigint | number]
      returns: void
    }>
    & Record<'bid(uint64)void' | 'bid', {
      argsObj: {
        validatorAppID: bigint | number
      }
      argsTuple: [validatorAppID: bigint | number]
      returns: void
    }>
    & Record<'delegateStake(uint64,uint64)void' | 'delegateStake', {
      argsObj: {
        amount: bigint | number
        validatorAppID: bigint | number
      }
      argsTuple: [amount: bigint | number, validatorAppID: bigint | number]
      returns: void
    }>
    & Record<'snitch(uint64)void' | 'snitch', {
      argsObj: {
        app: bigint | number
      }
      argsTuple: [app: bigint | number]
      returns: void
    }>
    & Record<'reStakeFromSnitch(uint64,uint64,pay)void' | 'reStakeFromSnitch', {
      argsObj: {
        snitchedApp: bigint | number
        receiverApp: bigint | number
        restakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [snitchedApp: bigint | number, receiverApp: bigint | number, restakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'onOperatorExit(uint64,pay)void' | 'onOperatorExit', {
      argsObj: {
        appToClose: bigint | number
        closeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [appToClose: bigint | number, closeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'declareRewards(pay)void' | 'declareRewards', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool' | 'snitchCheck', {
      argsObj: {
        appToCheck: bigint | number
        params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]
      }
      argsTuple: [appToCheck: bigint | number, params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]]
      returns: boolean
    }>
    & Record<'makeFlashLoanRequest(pay,uint64[],uint64[])void' | 'makeFlashLoanRequest', {
      argsObj: {
        payFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        amounts: bigint | number[]
        appToInclude: bigint | number[]
      }
      argsTuple: [payFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, amounts: bigint | number[], appToInclude: bigint | number[]]
      returns: void
    }>
    & Record<'getFLcounter()uint64' | 'getFLcounter', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'peg'?: IntegerState
      'initPoolContract'?: BinaryState
      'validatorPoolVersion'?: IntegerState
      'totalstake'?: IntegerState
      'init_vALGO'?: BinaryState
      'vALGOid'?: IntegerState
      'vestID'?: IntegerState
      'stVestID'?: IntegerState
      'circulatingSupply'?: IntegerState
      'highestBidder'?: IntegerState
      'idleAlgo'?: IntegerState
      'vestigeAddress'?: BinaryState
      'flashLoanCounter'?: IntegerState
      'lastFlashloanBlock'?: IntegerState
      'burnPrio'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CaelusAdminSig = keyof CaelusAdmin['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CaelusAdminSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CaelusAdminSig> = CaelusAdmin['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CaelusAdminSig> = CaelusAdmin['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CaelusAdminCreateCalls = (typeof CaelusAdminCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CaelusAdminCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CaelusAdminDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CaelusAdminCreateCalls) => CaelusAdminCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CaelusAdminCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CaelusAdmin smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the creatorChangeCreatorRelatedParams(address,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'creatorChangeCreatorRelatedParams(address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newVestigeAddress, args.vestID, args.stVestID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initPoolContract(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initPoolContract(args: MethodArgs<'initPoolContract(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initPoolContract(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.programSize],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the loadPoolContractProgram(uint64,byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static loadPoolContractProgram(args: MethodArgs<'loadPoolContractProgram(uint64,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'loadPoolContractProgram(uint64,byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.offsett, args.data],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the poolContractIsSet()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static poolContractIsSet(args: MethodArgs<'poolContractIsSet()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'poolContractIsSet()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initLST(string,string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initLst(args: MethodArgs<'initLST(string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initLST(string,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.unitName, args.url],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initBurnQueue()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initBurnQueue(args: MethodArgs<'initBurnQueue()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initBurnQueue()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addCaelusValidator(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addCaelusValidator(args: MethodArgs<'addCaelusValidator(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addCaelusValidator(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrPay],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateLSTRatio()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateLSTRatio()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getMintAmount(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getMintAmount(args: MethodArgs<'getMintAmount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getMintAmount(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getBurnAmount(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getBurnAmount(args: MethodArgs<'getBurnAmount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getBurnAmount(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mintRequest(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintRequest(args: MethodArgs<'mintRequest(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mintRequest(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mintTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burnRequest(axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnRequest(args: MethodArgs<'burnRequest(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burnRequest(axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.burnTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mintValidatorCommit(uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mintValidatorCommit(uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorAppID, args.stakeCommit],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burnValidatorCommit()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnValidatorCommit(args: MethodArgs<'burnValidatorCommit()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burnValidatorCommit()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burnToDelinquentValidator(axfer,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burnToDelinquentValidator(axfer,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.burnTxn, args.validatorAppID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reMintDeliquentCommit(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reMintDeliquentCommit(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.app],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bid(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bid(args: MethodArgs<'bid(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bid(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorAppID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delegateStake(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delegateStake(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.validatorAppID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the snitch(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static snitch(args: MethodArgs<'snitch(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'snitch(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.app],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reStakeFromSnitch(uint64,uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reStakeFromSnitch(uint64,uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.snitchedApp, args.receiverApp, args.restakeTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the onOperatorExit(uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'onOperatorExit(uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.appToClose, args.closeTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the declareRewards(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static declareRewards(args: MethodArgs<'declareRewards(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'declareRewards(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.appToCheck, args.params],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'makeFlashLoanRequest(pay,uint64[],uint64[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payFeeTxn, args.amounts, args.appToInclude],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getFLcounter()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getFLcounter()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CaelusAdmin smart contract
 */
export class CaelusAdminClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CaelusAdminClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CaelusAdmin['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CaelusAdmin smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CaelusAdminDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CaelusAdminCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(CaelusAdminCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the creatorChangeCreatorRelatedParams(address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.creatorChangeCreatorRelatedParams(args, params))
  }

  /**
   * Calls the initPoolContract(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initPoolContract(args: MethodArgs<'initPoolContract(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.initPoolContract(args, params))
  }

  /**
   * Calls the loadPoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public loadPoolContractProgram(args: MethodArgs<'loadPoolContractProgram(uint64,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.loadPoolContractProgram(args, params))
  }

  /**
   * Calls the poolContractIsSet()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public poolContractIsSet(args: MethodArgs<'poolContractIsSet()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.poolContractIsSet(args, params))
  }

  /**
   * Calls the initLST(string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initLst(args: MethodArgs<'initLST(string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.initLst(args, params))
  }

  /**
   * Calls the initBurnQueue()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initBurnQueue(args: MethodArgs<'initBurnQueue()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.initBurnQueue(args, params))
  }

  /**
   * Calls the addCaelusValidator(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addCaelusValidator(args: MethodArgs<'addCaelusValidator(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.addCaelusValidator(args, params))
  }

  /**
   * Calls the calculateLSTRatio()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.calculateLstRatio(args, params))
  }

  /**
   * Calls the getMintAmount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getMintAmount(args: MethodArgs<'getMintAmount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.getMintAmount(args, params))
  }

  /**
   * Calls the getBurnAmount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getBurnAmount(args: MethodArgs<'getBurnAmount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.getBurnAmount(args, params))
  }

  /**
   * Calls the mintRequest(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintRequest(args: MethodArgs<'mintRequest(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.mintRequest(args, params))
  }

  /**
   * Calls the burnRequest(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnRequest(args: MethodArgs<'burnRequest(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.burnRequest(args, params))
  }

  /**
   * Calls the mintValidatorCommit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.mintValidatorCommit(args, params))
  }

  /**
   * Calls the burnValidatorCommit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnValidatorCommit(args: MethodArgs<'burnValidatorCommit()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.burnValidatorCommit(args, params))
  }

  /**
   * Calls the burnToDelinquentValidator(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.burnToDelinquentValidator(args, params))
  }

  /**
   * Calls the reMintDeliquentCommit(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.reMintDeliquentCommit(args, params))
  }

  /**
   * Calls the bid(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bid(args: MethodArgs<'bid(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.bid(args, params))
  }

  /**
   * Calls the delegateStake(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.delegateStake(args, params))
  }

  /**
   * Calls the snitch(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public snitch(args: MethodArgs<'snitch(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.snitch(args, params))
  }

  /**
   * Calls the reStakeFromSnitch(uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.reStakeFromSnitch(args, params))
  }

  /**
   * Calls the onOperatorExit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.onOperatorExit(args, params))
  }

  /**
   * Calls the declareRewards(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public declareRewards(args: MethodArgs<'declareRewards(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.declareRewards(args, params))
  }

  /**
   * Calls the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.snitchCheck(args, params))
  }

  /**
   * Calls the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.makeFlashLoanRequest(args, params))
  }

  /**
   * Calls the getFLcounter()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.getFLcounter(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CaelusAdmin['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get peg() {
        return CaelusAdminClient.getIntegerState(state, 'peg')
      },
      get initPoolContract() {
        return CaelusAdminClient.getBinaryState(state, 'initPoolContract')
      },
      get validatorPoolVersion() {
        return CaelusAdminClient.getIntegerState(state, 'validatorPoolVersion')
      },
      get totalstake() {
        return CaelusAdminClient.getIntegerState(state, 'totalstake')
      },
      get init_vALGO() {
        return CaelusAdminClient.getBinaryState(state, 'init_vALGO')
      },
      get vALGOid() {
        return CaelusAdminClient.getIntegerState(state, 'vALGOid')
      },
      get vestID() {
        return CaelusAdminClient.getIntegerState(state, 'vestID')
      },
      get stVestID() {
        return CaelusAdminClient.getIntegerState(state, 'stVestID')
      },
      get circulatingSupply() {
        return CaelusAdminClient.getIntegerState(state, 'circulatingSupply')
      },
      get highestBidder() {
        return CaelusAdminClient.getIntegerState(state, 'highestBidder')
      },
      get idleAlgo() {
        return CaelusAdminClient.getIntegerState(state, 'idleAlgo')
      },
      get vestigeAddress() {
        return CaelusAdminClient.getBinaryState(state, 'vestigeAddress')
      },
      get flashLoanCounter() {
        return CaelusAdminClient.getIntegerState(state, 'flashLoanCounter')
      },
      get lastFlashloanBlock() {
        return CaelusAdminClient.getIntegerState(state, 'lastFlashloanBlock')
      },
      get burnPrio() {
        return CaelusAdminClient.getIntegerState(state, 'burnPrio')
      },
    }
  }

  public compose(): CaelusAdminComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.creatorChangeCreatorRelatedParams(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initPoolContract(args: MethodArgs<'initPoolContract(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initPoolContract(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      loadPoolContractProgram(args: MethodArgs<'loadPoolContractProgram(uint64,byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.loadPoolContractProgram(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      poolContractIsSet(args: MethodArgs<'poolContractIsSet()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.poolContractIsSet(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initLst(args: MethodArgs<'initLST(string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initLst(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initBurnQueue(args: MethodArgs<'initBurnQueue()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initBurnQueue(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addCaelusValidator(args: MethodArgs<'addCaelusValidator(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addCaelusValidator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateLstRatio(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getMintAmount(args: MethodArgs<'getMintAmount(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getMintAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getBurnAmount(args: MethodArgs<'getBurnAmount(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getBurnAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mintRequest(args: MethodArgs<'mintRequest(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnRequest(args: MethodArgs<'burnRequest(axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintValidatorCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnValidatorCommit(args: MethodArgs<'burnValidatorCommit()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnValidatorCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnToDelinquentValidator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reMintDeliquentCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bid(args: MethodArgs<'bid(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bid(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.delegateStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      snitch(args: MethodArgs<'snitch(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.snitch(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reStakeFromSnitch(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.onOperatorExit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      declareRewards(args: MethodArgs<'declareRewards(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.declareRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.snitchCheck(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.makeFlashLoanRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getFLcounter(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CaelusAdminComposer
  }
}
export type CaelusAdminComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the creatorChangeCreatorRelatedParams(address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'creatorChangeCreatorRelatedParams(address,uint64,uint64)void'>]>

  /**
   * Calls the initPoolContract(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initPoolContract(args: MethodArgs<'initPoolContract(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'initPoolContract(uint64)void'>]>

  /**
   * Calls the loadPoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  loadPoolContractProgram(args: MethodArgs<'loadPoolContractProgram(uint64,byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'loadPoolContractProgram(uint64,byte[])void'>]>

  /**
   * Calls the poolContractIsSet()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  poolContractIsSet(args: MethodArgs<'poolContractIsSet()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'poolContractIsSet()void'>]>

  /**
   * Calls the initLST(string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initLst(args: MethodArgs<'initLST(string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'initLST(string,string,string)void'>]>

  /**
   * Calls the initBurnQueue()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initBurnQueue(args: MethodArgs<'initBurnQueue()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'initBurnQueue()void'>]>

  /**
   * Calls the addCaelusValidator(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addCaelusValidator(args: MethodArgs<'addCaelusValidator(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'addCaelusValidator(pay)void'>]>

  /**
   * Calls the calculateLSTRatio()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'calculateLSTRatio()void'>]>

  /**
   * Calls the getMintAmount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMintAmount(args: MethodArgs<'getMintAmount(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'getMintAmount(uint64)uint64'>]>

  /**
   * Calls the getBurnAmount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBurnAmount(args: MethodArgs<'getBurnAmount(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'getBurnAmount(uint64)uint64'>]>

  /**
   * Calls the mintRequest(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintRequest(args: MethodArgs<'mintRequest(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'mintRequest(pay)void'>]>

  /**
   * Calls the burnRequest(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnRequest(args: MethodArgs<'burnRequest(axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'burnRequest(axfer)void'>]>

  /**
   * Calls the mintValidatorCommit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'mintValidatorCommit(uint64,pay)void'>]>

  /**
   * Calls the burnValidatorCommit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnValidatorCommit(args: MethodArgs<'burnValidatorCommit()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'burnValidatorCommit()void'>]>

  /**
   * Calls the burnToDelinquentValidator(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'burnToDelinquentValidator(axfer,uint64)void'>]>

  /**
   * Calls the reMintDeliquentCommit(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'reMintDeliquentCommit(uint64,uint64)void'>]>

  /**
   * Calls the bid(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bid(args: MethodArgs<'bid(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'bid(uint64)void'>]>

  /**
   * Calls the delegateStake(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'delegateStake(uint64,uint64)void'>]>

  /**
   * Calls the snitch(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitch(args: MethodArgs<'snitch(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'snitch(uint64)void'>]>

  /**
   * Calls the reStakeFromSnitch(uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'reStakeFromSnitch(uint64,uint64,pay)void'>]>

  /**
   * Calls the onOperatorExit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'onOperatorExit(uint64,pay)void'>]>

  /**
   * Calls the declareRewards(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  declareRewards(args: MethodArgs<'declareRewards(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'declareRewards(pay)void'>]>

  /**
   * Calls the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>]>

  /**
   * Calls the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>]>

  /**
   * Calls the getFLcounter()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'getFLcounter()uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CaelusAdminComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CaelusAdminComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CaelusAdminComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CaelusAdminComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CaelusAdminComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
