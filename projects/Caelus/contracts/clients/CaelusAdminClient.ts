/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "creatorChangeCreatorRelatedParams(address,address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initPoolContract(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "writePoolContractProgram(uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatePoolContract(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initLST(string,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initBurnQueue()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addCaelusValidator(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateLSTRatio()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMintAmount(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBurnAmount(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delayedMintRequest(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimMint()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "instantMintRequest(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPremiumAmount(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnRequest(axfer,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintValidatorCommit(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnValidatorCommit(uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnToDelinquentValidator(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reMintDeliquentCommit(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delegateStake(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchToBurn(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "multiSnitchToBurn(uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reStakeFromSnitch(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "onOperatorExit(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "declareRewards(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeFlashLoanRequest(pay,uint64[],uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getFLcounter()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "initializedPoolContract": {
          "type": "bytes",
          "key": "initPoolContract"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "validatorPoolVersion"
        },
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "totalAlgoStaked": {
          "type": "uint64",
          "key": "totalstake"
        },
        "idleAlgoToStake": {
          "type": "uint64",
          "key": "idleAlgo"
        },
        "init_vALGO": {
          "type": "bytes",
          "key": "init_vALGO"
        },
        "vestID": {
          "type": "uint64",
          "key": "vestID"
        },
        "stVestID": {
          "type": "uint64",
          "key": "stVestID"
        },
        "vestigeAddress": {
          "type": "bytes",
          "key": "vestigeAddress"
        },
        "pegRatio": {
          "type": "uint64",
          "key": "peg"
        },
        "vALGOid": {
          "type": "uint64",
          "key": "vALGOid"
        },
        "circulatingSupply": {
          "type": "uint64",
          "key": "circulatingSupply"
        },
        "highestBidder": {
          "type": "uint64",
          "key": "highestBidder"
        },
        "flashLoanCounter": {
          "type": "uint64",
          "key": "flashLoanCounter"
        },
        "lastFlashloanBlock": {
          "type": "uint64",
          "key": "lastFlashloanBlock"
        },
        "burnPrio": {
          "type": "uint64",
          "key": "burnPrio"
        },
        "burnExhaust": {
          "type": "bytes",
          "key": "burnExhaust"
        },
        "burnCooldownFromBlock": {
          "type": "uint64",
          "key": "burnCooldown"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 5,
      "num_uints": 13
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusAdmin",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "creatorChangeCreatorRelatedParams",
        "args": [
          {
            "name": "newVestigeAddress",
            "type": "address"
          },
          {
            "name": "managerAddress",
            "type": "address"
          },
          {
            "name": "vestID",
            "type": "uint64"
          },
          {
            "name": "stVestID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initPoolContract",
        "args": [
          {
            "name": "programSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "writePoolContractProgram",
        "args": [
          {
            "name": "offset",
            "type": "uint64"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updatePoolContract",
        "args": [
          {
            "name": "programSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initLST",
        "args": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "unitName",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initBurnQueue",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addCaelusValidator",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "validatorAddedEvent",
            "args": [
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "version",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "calculateLSTRatio",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMintAmount",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getBurnAmount",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "delayedMintRequest",
        "args": [
          {
            "name": "mintTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "mintEvent",
            "args": [
              {
                "name": "instant",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "claimMint",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "instantMintRequest",
        "args": [
          {
            "name": "mintTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "mintEvent",
            "args": [
              {
                "name": "instant",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getPremiumAmount",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "burnRequest",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          },
          {
            "name": "burnTo",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "burnEvent",
            "args": [
              {
                "name": "filled",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "mintValidatorCommit",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          },
          {
            "name": "stakeCommit",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnValidatorCommit",
        "args": [
          {
            "name": "appToBurnFrom",
            "type": "uint64"
          },
          {
            "name": "burnTxn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnToDelinquentValidator",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          },
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "burnEvent",
            "args": [
              {
                "name": "filled",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "reMintDeliquentCommit",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "mintEvent",
            "args": [
              {
                "name": "instant",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "bid",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "bidEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "isHeighest",
                "type": "bool"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "delegateStake",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchToBurn",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "snitchQueueEvent",
            "args": [
              {
                "name": "prio",
                "type": "uint64"
              },
              {
                "name": "queue",
                "type": "uint64[10]"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "multiSnitchToBurn",
        "args": [
          {
            "name": "apps",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reStakeFromSnitch",
        "args": [
          {
            "name": "snitchedApp",
            "type": "uint64"
          },
          {
            "name": "receiverApp",
            "type": "uint64"
          },
          {
            "name": "restakeTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "onOperatorExit",
        "args": [
          {
            "name": "appToClose",
            "type": "uint64"
          },
          {
            "name": "closeTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "declareRewards",
        "args": [
          {
            "name": "txn",
            "type": "pay"
          },
          {
            "name": "ifValidator",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchCheck",
        "args": [
          {
            "name": "appToCheck",
            "type": "uint64"
          },
          {
            "name": "params",
            "type": "(bool,bool,bool,uint64,bool,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        },
        "events": [
          {
            "name": "snitchValidatorEvent",
            "args": [
              {
                "name": "request",
                "type": "(bool,bool,bool,uint64,bool,uint64)"
              },
              {
                "name": "result",
                "type": "bool"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "makeFlashLoanRequest",
        "args": [
          {
            "name": "payFeeTxn",
            "type": "pay"
          },
          {
            "name": "amounts",
            "type": "uint64[]"
          },
          {
            "name": "appToInclude",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "flashLoanEvent",
            "args": [
              {
                "name": "apps",
                "type": "uint64[]"
              },
              {
                "name": "amounts",
                "type": "uint64[]"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getFLcounter",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "events": [
      {
        "name": "validatorAddedEvent",
        "args": [
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "version",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "mintEvent",
        "args": [
          {
            "name": "instant",
            "type": "bool"
          },
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "output",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "burnEvent",
        "args": [
          {
            "name": "filled",
            "type": "bool"
          },
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "output",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "bidEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "isHeighest",
            "type": "bool"
          }
        ],
        "desc": ""
      },
      {
        "name": "snitchQueueEvent",
        "args": [
          {
            "name": "prio",
            "type": "uint64"
          },
          {
            "name": "queue",
            "type": "uint64[10]"
          }
        ],
        "desc": ""
      },
      {
        "name": "snitchValidatorEvent",
        "args": [
          {
            "name": "request",
            "type": "(bool,bool,bool,uint64,bool,uint64)"
          },
          {
            "name": "result",
            "type": "bool"
          }
        ],
        "desc": ""
      },
      {
        "name": "flashLoanEvent",
        "args": [
          {
            "name": "apps",
            "type": "uint64[]"
          },
          {
            "name": "amounts",
            "type": "uint64[]"
          }
        ],
        "desc": ""
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the CaelusAdmin smart contract.
 */
export type CaelusAdmin = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'creatorChangeCreatorRelatedParams(address,address,uint64,uint64)void' | 'creatorChangeCreatorRelatedParams', {
      argsObj: {
        newVestigeAddress: string
        managerAddress: string
        vestID: bigint | number
        stVestID: bigint | number
      }
      argsTuple: [newVestigeAddress: string, managerAddress: string, vestID: bigint | number, stVestID: bigint | number]
      returns: void
    }>
    & Record<'initPoolContract(uint64)void' | 'initPoolContract', {
      argsObj: {
        programSize: bigint | number
      }
      argsTuple: [programSize: bigint | number]
      returns: void
    }>
    & Record<'writePoolContractProgram(uint64,byte[])void' | 'writePoolContractProgram', {
      argsObj: {
        offset: bigint | number
        data: Uint8Array
      }
      argsTuple: [offset: bigint | number, data: Uint8Array]
      returns: void
    }>
    & Record<'updatePoolContract(uint64)void' | 'updatePoolContract', {
      argsObj: {
        programSize: bigint | number
      }
      argsTuple: [programSize: bigint | number]
      returns: void
    }>
    & Record<'initLST(string,string,string)void' | 'initLST', {
      argsObj: {
        name: string
        unitName: string
        url: string
      }
      argsTuple: [name: string, unitName: string, url: string]
      returns: void
    }>
    & Record<'initBurnQueue()void' | 'initBurnQueue', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'addCaelusValidator(pay)void' | 'addCaelusValidator', {
      argsObj: {
        mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'calculateLSTRatio()void' | 'calculateLSTRatio', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getMintAmount(uint64)uint64' | 'getMintAmount', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'getBurnAmount(uint64)uint64' | 'getBurnAmount', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'delayedMintRequest(pay)void' | 'delayedMintRequest', {
      argsObj: {
        mintTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mintTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'claimMint()void' | 'claimMint', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'instantMintRequest(pay)void' | 'instantMintRequest', {
      argsObj: {
        mintTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mintTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'getPremiumAmount(uint64)uint64' | 'getPremiumAmount', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'burnRequest(axfer,address)void' | 'burnRequest', {
      argsObj: {
        burnTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        burnTo: string
      }
      argsTuple: [burnTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, burnTo: string]
      returns: void
    }>
    & Record<'mintValidatorCommit(uint64,pay)void' | 'mintValidatorCommit', {
      argsObj: {
        validatorAppID: bigint | number
        stakeCommit: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [validatorAppID: bigint | number, stakeCommit: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'burnValidatorCommit(uint64,axfer)void' | 'burnValidatorCommit', {
      argsObj: {
        appToBurnFrom: bigint | number
        burnTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [appToBurnFrom: bigint | number, burnTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'burnToDelinquentValidator(axfer,uint64)void' | 'burnToDelinquentValidator', {
      argsObj: {
        burnTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        validatorAppID: bigint | number
      }
      argsTuple: [burnTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, validatorAppID: bigint | number]
      returns: void
    }>
    & Record<'reMintDeliquentCommit(uint64,uint64)void' | 'reMintDeliquentCommit', {
      argsObj: {
        amount: bigint | number
        app: bigint | number
      }
      argsTuple: [amount: bigint | number, app: bigint | number]
      returns: void
    }>
    & Record<'bid(uint64)void' | 'bid', {
      argsObj: {
        validatorAppID: bigint | number
      }
      argsTuple: [validatorAppID: bigint | number]
      returns: void
    }>
    & Record<'delegateStake(uint64,uint64)void' | 'delegateStake', {
      argsObj: {
        amount: bigint | number
        validatorAppID: bigint | number
      }
      argsTuple: [amount: bigint | number, validatorAppID: bigint | number]
      returns: void
    }>
    & Record<'snitchToBurn(uint64)void' | 'snitchToBurn', {
      argsObj: {
        app: bigint | number
      }
      argsTuple: [app: bigint | number]
      returns: void
    }>
    & Record<'multiSnitchToBurn(uint64[])void' | 'multiSnitchToBurn', {
      argsObj: {
        apps: bigint | number[]
      }
      argsTuple: [apps: bigint | number[]]
      returns: void
    }>
    & Record<'reStakeFromSnitch(uint64,uint64,pay)void' | 'reStakeFromSnitch', {
      argsObj: {
        snitchedApp: bigint | number
        receiverApp: bigint | number
        restakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [snitchedApp: bigint | number, receiverApp: bigint | number, restakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'onOperatorExit(uint64,pay)void' | 'onOperatorExit', {
      argsObj: {
        appToClose: bigint | number
        closeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [appToClose: bigint | number, closeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'declareRewards(pay,uint64)void' | 'declareRewards', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        ifValidator: bigint | number
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, ifValidator: bigint | number]
      returns: void
    }>
    & Record<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool' | 'snitchCheck', {
      argsObj: {
        appToCheck: bigint | number
        params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]
      }
      argsTuple: [appToCheck: bigint | number, params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]]
      returns: boolean
    }>
    & Record<'makeFlashLoanRequest(pay,uint64[],uint64[])void' | 'makeFlashLoanRequest', {
      argsObj: {
        payFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        amounts: bigint | number[]
        appToInclude: bigint | number[]
      }
      argsTuple: [payFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, amounts: bigint | number[], appToInclude: bigint | number[]]
      returns: void
    }>
    & Record<'getFLcounter()uint64' | 'getFLcounter', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'initPoolContract'?: BinaryState
      'validatorPoolVersion'?: IntegerState
      'manager'?: BinaryState
      'totalstake'?: IntegerState
      'idleAlgo'?: IntegerState
      'init_vALGO'?: BinaryState
      'vestID'?: IntegerState
      'stVestID'?: IntegerState
      'vestigeAddress'?: BinaryState
      'peg'?: IntegerState
      'vALGOid'?: IntegerState
      'circulatingSupply'?: IntegerState
      'highestBidder'?: IntegerState
      'flashLoanCounter'?: IntegerState
      'lastFlashloanBlock'?: IntegerState
      'burnPrio'?: IntegerState
      'burnExhaust'?: BinaryState
      'burnCooldown'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CaelusAdminSig = keyof CaelusAdmin['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CaelusAdminSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CaelusAdminSig> = CaelusAdmin['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CaelusAdmin smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CaelusAdminSig> = CaelusAdmin['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CaelusAdminCreateCalls = (typeof CaelusAdminCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CaelusAdminCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CaelusAdminDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CaelusAdminCreateCalls) => CaelusAdminCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CaelusAdminCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CaelusAdmin smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the creatorChangeCreatorRelatedParams(address,address,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams(address,address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'creatorChangeCreatorRelatedParams(address,address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newVestigeAddress, args.managerAddress, args.vestID, args.stVestID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initPoolContract(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initPoolContract(args: MethodArgs<'initPoolContract(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initPoolContract(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.programSize],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the writePoolContractProgram(uint64,byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static writePoolContractProgram(args: MethodArgs<'writePoolContractProgram(uint64,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'writePoolContractProgram(uint64,byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.offset, args.data],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updatePoolContract(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updatePoolContract(args: MethodArgs<'updatePoolContract(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updatePoolContract(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.programSize],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initLST(string,string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initLst(args: MethodArgs<'initLST(string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initLST(string,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.unitName, args.url],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initBurnQueue()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initBurnQueue(args: MethodArgs<'initBurnQueue()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initBurnQueue()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addCaelusValidator(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addCaelusValidator(args: MethodArgs<'addCaelusValidator(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addCaelusValidator(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrPay],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateLSTRatio()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateLSTRatio()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getMintAmount(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getMintAmount(args: MethodArgs<'getMintAmount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getMintAmount(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getBurnAmount(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getBurnAmount(args: MethodArgs<'getBurnAmount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getBurnAmount(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delayedMintRequest(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static delayedMintRequest(args: MethodArgs<'delayedMintRequest(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delayedMintRequest(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mintTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimMint()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimMint(args: MethodArgs<'claimMint()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimMint()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the instantMintRequest(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static instantMintRequest(args: MethodArgs<'instantMintRequest(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'instantMintRequest(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mintTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getPremiumAmount(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPremiumAmount(args: MethodArgs<'getPremiumAmount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getPremiumAmount(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burnRequest(axfer,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnRequest(args: MethodArgs<'burnRequest(axfer,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burnRequest(axfer,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.burnTxn, args.burnTo],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mintValidatorCommit(uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mintValidatorCommit(uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorAppID, args.stakeCommit],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burnValidatorCommit(uint64,axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnValidatorCommit(args: MethodArgs<'burnValidatorCommit(uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burnValidatorCommit(uint64,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.appToBurnFrom, args.burnTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burnToDelinquentValidator(axfer,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burnToDelinquentValidator(axfer,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.burnTxn, args.validatorAppID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reMintDeliquentCommit(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reMintDeliquentCommit(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.app],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bid(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bid(args: MethodArgs<'bid(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bid(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.validatorAppID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delegateStake(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delegateStake(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.validatorAppID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the snitchToBurn(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static snitchToBurn(args: MethodArgs<'snitchToBurn(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'snitchToBurn(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.app],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the multiSnitchToBurn(uint64[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static multiSnitchToBurn(args: MethodArgs<'multiSnitchToBurn(uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'multiSnitchToBurn(uint64[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.apps],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reStakeFromSnitch(uint64,uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reStakeFromSnitch(uint64,uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.snitchedApp, args.receiverApp, args.restakeTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the onOperatorExit(uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'onOperatorExit(uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.appToClose, args.closeTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the declareRewards(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static declareRewards(args: MethodArgs<'declareRewards(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'declareRewards(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.ifValidator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.appToCheck, args.params],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'makeFlashLoanRequest(pay,uint64[],uint64[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payFeeTxn, args.amounts, args.appToInclude],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getFLcounter()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getFLcounter()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CaelusAdmin smart contract
 */
export class CaelusAdminClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CaelusAdminClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CaelusAdmin['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CaelusAdmin smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CaelusAdminDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CaelusAdminCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CaelusAdmin smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(CaelusAdminCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the creatorChangeCreatorRelatedParams(address,address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams(address,address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.creatorChangeCreatorRelatedParams(args, params))
  }

  /**
   * Calls the initPoolContract(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initPoolContract(args: MethodArgs<'initPoolContract(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.initPoolContract(args, params))
  }

  /**
   * Calls the writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public writePoolContractProgram(args: MethodArgs<'writePoolContractProgram(uint64,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.writePoolContractProgram(args, params))
  }

  /**
   * Calls the updatePoolContract(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updatePoolContract(args: MethodArgs<'updatePoolContract(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.updatePoolContract(args, params))
  }

  /**
   * Calls the initLST(string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initLst(args: MethodArgs<'initLST(string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.initLst(args, params))
  }

  /**
   * Calls the initBurnQueue()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initBurnQueue(args: MethodArgs<'initBurnQueue()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.initBurnQueue(args, params))
  }

  /**
   * Calls the addCaelusValidator(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addCaelusValidator(args: MethodArgs<'addCaelusValidator(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.addCaelusValidator(args, params))
  }

  /**
   * Calls the calculateLSTRatio()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.calculateLstRatio(args, params))
  }

  /**
   * Calls the getMintAmount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getMintAmount(args: MethodArgs<'getMintAmount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.getMintAmount(args, params))
  }

  /**
   * Calls the getBurnAmount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getBurnAmount(args: MethodArgs<'getBurnAmount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.getBurnAmount(args, params))
  }

  /**
   * Calls the delayedMintRequest(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public delayedMintRequest(args: MethodArgs<'delayedMintRequest(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.delayedMintRequest(args, params))
  }

  /**
   * Calls the claimMint()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimMint(args: MethodArgs<'claimMint()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.claimMint(args, params))
  }

  /**
   * Calls the instantMintRequest(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public instantMintRequest(args: MethodArgs<'instantMintRequest(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.instantMintRequest(args, params))
  }

  /**
   * Calls the getPremiumAmount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPremiumAmount(args: MethodArgs<'getPremiumAmount(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.getPremiumAmount(args, params))
  }

  /**
   * Calls the burnRequest(axfer,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnRequest(args: MethodArgs<'burnRequest(axfer,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.burnRequest(args, params))
  }

  /**
   * Calls the mintValidatorCommit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.mintValidatorCommit(args, params))
  }

  /**
   * Calls the burnValidatorCommit(uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnValidatorCommit(args: MethodArgs<'burnValidatorCommit(uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.burnValidatorCommit(args, params))
  }

  /**
   * Calls the burnToDelinquentValidator(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.burnToDelinquentValidator(args, params))
  }

  /**
   * Calls the reMintDeliquentCommit(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.reMintDeliquentCommit(args, params))
  }

  /**
   * Calls the bid(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bid(args: MethodArgs<'bid(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.bid(args, params))
  }

  /**
   * Calls the delegateStake(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.delegateStake(args, params))
  }

  /**
   * Calls the snitchToBurn(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public snitchToBurn(args: MethodArgs<'snitchToBurn(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.snitchToBurn(args, params))
  }

  /**
   * Calls the multiSnitchToBurn(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public multiSnitchToBurn(args: MethodArgs<'multiSnitchToBurn(uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.multiSnitchToBurn(args, params))
  }

  /**
   * Calls the reStakeFromSnitch(uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.reStakeFromSnitch(args, params))
  }

  /**
   * Calls the onOperatorExit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.onOperatorExit(args, params))
  }

  /**
   * Calls the declareRewards(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public declareRewards(args: MethodArgs<'declareRewards(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.declareRewards(args, params))
  }

  /**
   * Calls the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.snitchCheck(args, params))
  }

  /**
   * Calls the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.makeFlashLoanRequest(args, params))
  }

  /**
   * Calls the getFLcounter()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusAdminCallFactory.getFLcounter(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CaelusAdmin['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get initPoolContract() {
        return CaelusAdminClient.getBinaryState(state, 'initPoolContract')
      },
      get validatorPoolVersion() {
        return CaelusAdminClient.getIntegerState(state, 'validatorPoolVersion')
      },
      get manager() {
        return CaelusAdminClient.getBinaryState(state, 'manager')
      },
      get totalstake() {
        return CaelusAdminClient.getIntegerState(state, 'totalstake')
      },
      get idleAlgo() {
        return CaelusAdminClient.getIntegerState(state, 'idleAlgo')
      },
      get init_vALGO() {
        return CaelusAdminClient.getBinaryState(state, 'init_vALGO')
      },
      get vestID() {
        return CaelusAdminClient.getIntegerState(state, 'vestID')
      },
      get stVestID() {
        return CaelusAdminClient.getIntegerState(state, 'stVestID')
      },
      get vestigeAddress() {
        return CaelusAdminClient.getBinaryState(state, 'vestigeAddress')
      },
      get peg() {
        return CaelusAdminClient.getIntegerState(state, 'peg')
      },
      get vALGOid() {
        return CaelusAdminClient.getIntegerState(state, 'vALGOid')
      },
      get circulatingSupply() {
        return CaelusAdminClient.getIntegerState(state, 'circulatingSupply')
      },
      get highestBidder() {
        return CaelusAdminClient.getIntegerState(state, 'highestBidder')
      },
      get flashLoanCounter() {
        return CaelusAdminClient.getIntegerState(state, 'flashLoanCounter')
      },
      get lastFlashloanBlock() {
        return CaelusAdminClient.getIntegerState(state, 'lastFlashloanBlock')
      },
      get burnPrio() {
        return CaelusAdminClient.getIntegerState(state, 'burnPrio')
      },
      get burnExhaust() {
        return CaelusAdminClient.getBinaryState(state, 'burnExhaust')
      },
      get burnCooldown() {
        return CaelusAdminClient.getIntegerState(state, 'burnCooldown')
      },
    }
  }

  public compose(): CaelusAdminComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams(address,address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.creatorChangeCreatorRelatedParams(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initPoolContract(args: MethodArgs<'initPoolContract(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initPoolContract(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      writePoolContractProgram(args: MethodArgs<'writePoolContractProgram(uint64,byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.writePoolContractProgram(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updatePoolContract(args: MethodArgs<'updatePoolContract(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updatePoolContract(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initLst(args: MethodArgs<'initLST(string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initLst(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initBurnQueue(args: MethodArgs<'initBurnQueue()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initBurnQueue(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addCaelusValidator(args: MethodArgs<'addCaelusValidator(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addCaelusValidator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateLstRatio(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getMintAmount(args: MethodArgs<'getMintAmount(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getMintAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getBurnAmount(args: MethodArgs<'getBurnAmount(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getBurnAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      delayedMintRequest(args: MethodArgs<'delayedMintRequest(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.delayedMintRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimMint(args: MethodArgs<'claimMint()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimMint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      instantMintRequest(args: MethodArgs<'instantMintRequest(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.instantMintRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPremiumAmount(args: MethodArgs<'getPremiumAmount(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPremiumAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnRequest(args: MethodArgs<'burnRequest(axfer,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mintValidatorCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnValidatorCommit(args: MethodArgs<'burnValidatorCommit(uint64,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnValidatorCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnToDelinquentValidator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reMintDeliquentCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bid(args: MethodArgs<'bid(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bid(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.delegateStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      snitchToBurn(args: MethodArgs<'snitchToBurn(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.snitchToBurn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      multiSnitchToBurn(args: MethodArgs<'multiSnitchToBurn(uint64[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.multiSnitchToBurn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reStakeFromSnitch(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.onOperatorExit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      declareRewards(args: MethodArgs<'declareRewards(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.declareRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.snitchCheck(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.makeFlashLoanRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getFLcounter(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CaelusAdminComposer
  }
}
export type CaelusAdminComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the creatorChangeCreatorRelatedParams(address,address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  creatorChangeCreatorRelatedParams(args: MethodArgs<'creatorChangeCreatorRelatedParams(address,address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'creatorChangeCreatorRelatedParams(address,address,uint64,uint64)void'>]>

  /**
   * Calls the initPoolContract(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initPoolContract(args: MethodArgs<'initPoolContract(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'initPoolContract(uint64)void'>]>

  /**
   * Calls the writePoolContractProgram(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  writePoolContractProgram(args: MethodArgs<'writePoolContractProgram(uint64,byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'writePoolContractProgram(uint64,byte[])void'>]>

  /**
   * Calls the updatePoolContract(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePoolContract(args: MethodArgs<'updatePoolContract(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'updatePoolContract(uint64)void'>]>

  /**
   * Calls the initLST(string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initLst(args: MethodArgs<'initLST(string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'initLST(string,string,string)void'>]>

  /**
   * Calls the initBurnQueue()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initBurnQueue(args: MethodArgs<'initBurnQueue()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'initBurnQueue()void'>]>

  /**
   * Calls the addCaelusValidator(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addCaelusValidator(args: MethodArgs<'addCaelusValidator(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'addCaelusValidator(pay)void'>]>

  /**
   * Calls the calculateLSTRatio()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLstRatio(args: MethodArgs<'calculateLSTRatio()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'calculateLSTRatio()void'>]>

  /**
   * Calls the getMintAmount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMintAmount(args: MethodArgs<'getMintAmount(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'getMintAmount(uint64)uint64'>]>

  /**
   * Calls the getBurnAmount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBurnAmount(args: MethodArgs<'getBurnAmount(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'getBurnAmount(uint64)uint64'>]>

  /**
   * Calls the delayedMintRequest(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delayedMintRequest(args: MethodArgs<'delayedMintRequest(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'delayedMintRequest(pay)void'>]>

  /**
   * Calls the claimMint()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimMint(args: MethodArgs<'claimMint()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'claimMint()void'>]>

  /**
   * Calls the instantMintRequest(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  instantMintRequest(args: MethodArgs<'instantMintRequest(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'instantMintRequest(pay)void'>]>

  /**
   * Calls the getPremiumAmount(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPremiumAmount(args: MethodArgs<'getPremiumAmount(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'getPremiumAmount(uint64)uint64'>]>

  /**
   * Calls the burnRequest(axfer,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnRequest(args: MethodArgs<'burnRequest(axfer,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'burnRequest(axfer,address)void'>]>

  /**
   * Calls the mintValidatorCommit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintValidatorCommit(args: MethodArgs<'mintValidatorCommit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'mintValidatorCommit(uint64,pay)void'>]>

  /**
   * Calls the burnValidatorCommit(uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnValidatorCommit(args: MethodArgs<'burnValidatorCommit(uint64,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'burnValidatorCommit(uint64,axfer)void'>]>

  /**
   * Calls the burnToDelinquentValidator(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnToDelinquentValidator(args: MethodArgs<'burnToDelinquentValidator(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'burnToDelinquentValidator(axfer,uint64)void'>]>

  /**
   * Calls the reMintDeliquentCommit(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reMintDeliquentCommit(args: MethodArgs<'reMintDeliquentCommit(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'reMintDeliquentCommit(uint64,uint64)void'>]>

  /**
   * Calls the bid(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bid(args: MethodArgs<'bid(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'bid(uint64)void'>]>

  /**
   * Calls the delegateStake(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delegateStake(args: MethodArgs<'delegateStake(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'delegateStake(uint64,uint64)void'>]>

  /**
   * Calls the snitchToBurn(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchToBurn(args: MethodArgs<'snitchToBurn(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'snitchToBurn(uint64)void'>]>

  /**
   * Calls the multiSnitchToBurn(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  multiSnitchToBurn(args: MethodArgs<'multiSnitchToBurn(uint64[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'multiSnitchToBurn(uint64[])void'>]>

  /**
   * Calls the reStakeFromSnitch(uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reStakeFromSnitch(args: MethodArgs<'reStakeFromSnitch(uint64,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'reStakeFromSnitch(uint64,uint64,pay)void'>]>

  /**
   * Calls the onOperatorExit(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  onOperatorExit(args: MethodArgs<'onOperatorExit(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'onOperatorExit(uint64,pay)void'>]>

  /**
   * Calls the declareRewards(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  declareRewards(args: MethodArgs<'declareRewards(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'declareRewards(pay,uint64)void'>]>

  /**
   * Calls the snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchCheck(args: MethodArgs<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool'>]>

  /**
   * Calls the makeFlashLoanRequest(pay,uint64[],uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeFlashLoanRequest(args: MethodArgs<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'makeFlashLoanRequest(pay,uint64[],uint64[])void'>]>

  /**
   * Calls the getFLcounter()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFLcounter(args: MethodArgs<'getFLcounter()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, MethodReturn<'getFLcounter()uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the CaelusAdmin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusAdminComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CaelusAdminComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CaelusAdminComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CaelusAdminComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CaelusAdminComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CaelusAdminComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
