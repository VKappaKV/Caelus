/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64,address,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "addToOperatorCommit(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeFromOperatorCommit(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "performanceCheck()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getToleratedBlockDelta()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reportRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchBurn()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitch()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSnitched()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "clawbackStake()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "clawbackStakeToValidator()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimLeftAlgo()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkAlgodVersion()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOffline(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "creatorContractAppID": {
          "type": "uint64",
          "key": "creator"
        },
        "poolName": {
          "type": "bytes",
          "key": "name"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "contractVersion"
        },
        "operatorAddress": {
          "type": "bytes",
          "key": "operator"
        },
        "operatorCommit": {
          "type": "uint64",
          "key": "operatorCommit"
        },
        "minCommit": {
          "type": "uint64",
          "key": "minStake"
        },
        "delegatedStake": {
          "type": "uint64",
          "key": "delegatedStake"
        },
        "maxDelegatableStake": {
          "type": "uint64",
          "key": "maxDStake"
        },
        "performanceCounter": {
          "type": "uint64",
          "key": "performance"
        },
        "saturationBUFFER": {
          "type": "uint64",
          "key": "saturationBuffer"
        },
        "lastRewardReport": {
          "type": "uint64",
          "key": "rewardReport"
        },
        "isDelinquent": {
          "type": "bytes",
          "key": "isDelinquent"
        },
        "lastDelinquencyReport": {
          "type": "uint64",
          "key": "delinquencyReport"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 10
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusValidatorPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "******************\nPublic Methods    *\n******************",
        "args": [
          {
            "name": "creatingContract",
            "type": "uint64"
          },
          {
            "name": "operatorAddress",
            "type": "address"
          },
          {
            "name": "contractVersion",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addToOperatorCommit",
        "desc": "Used by the node operator to add to his stake amount for the node",
        "args": [
          {
            "name": "commit",
            "type": "pay",
            "desc": "node operator stake commitment"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeFromOperatorCommit",
        "desc": "Used by the node operator to remove from his stake amount for the node",
        "args": [
          {
            "name": "claimRequest",
            "type": "uint64",
            "desc": "amount claimed by the node operator to be removed from the contract balance and subtracted from the operator_commit counter"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "performanceCheck",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getToleratedBlockDelta",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "reportRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bid",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addStake",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchBurn",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitch",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getSnitched",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "clawbackStake",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "clawbackStakeToValidator",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimLeftAlgo",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "checkAlgodVersion",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOnline",
        "desc": "Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake",
        "args": [
          {
            "name": "feePayment",
            "type": "pay",
            "desc": "Payment transaction to the contract to cover costs for Eligibility fee; 0 for renewal."
          },
          {
            "name": "votePK",
            "type": "byte[]",
            "desc": "The vote public key"
          },
          {
            "name": "selectionPK",
            "type": "byte[]",
            "desc": "The selection public key"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]",
            "desc": "the state proof public key"
          },
          {
            "name": "voteFirst",
            "type": "uint64",
            "desc": "Index of first valid block for the participation keys"
          },
          {
            "name": "voteLast",
            "type": "uint64",
            "desc": "Index of last valid block for for the participation keys"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64",
            "desc": "The vote key dilution value"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOffline",
        "desc": "Set the contract account to offline so that it doesn't participate in consensus anymore.\nif graceful then it only means that there was some migration or other operation [CASE 1]\nif used to force the account offline because of bad behavior, then set up a flag for penalties [CASE 2]",
        "args": [
          {
            "name": "offlineCase",
            "type": "uint64",
            "desc": ": graceful offline of the node by the node runner or the main Caelus contract\n                             1: node is misbehaving and needs to be set offline by the main Caelus contract"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the CaelusValidatorPool smart contract.
 */
export type CaelusValidatorPool = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,address,uint64)void' | 'createApplication', {
      argsObj: {
        creatingContract: bigint | number
        operatorAddress: string
        contractVersion: bigint | number
      }
      argsTuple: [creatingContract: bigint | number, operatorAddress: string, contractVersion: bigint | number]
      returns: void
    }>
    & Record<'addToOperatorCommit(pay)void' | 'addToOperatorCommit', {
      argsObj: {
        /**
         * node operator stake commitment
         */
        commit: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [commit: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'removeFromOperatorCommit(uint64)void' | 'removeFromOperatorCommit', {
      argsObj: {
        /**
         * amount claimed by the node operator to be removed from the contract balance and subtracted from the operator_commit counter
         */
        claimRequest: bigint | number
      }
      argsTuple: [claimRequest: bigint | number]
      returns: void
    }>
    & Record<'performanceCheck()void' | 'performanceCheck', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getToleratedBlockDelta()uint64' | 'getToleratedBlockDelta', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'reportRewards()void' | 'reportRewards', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'bid()void' | 'bid', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'addStake()void' | 'addStake', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'snitchBurn()void' | 'snitchBurn', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'snitch()void' | 'snitch', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getSnitched()void' | 'getSnitched', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'clawbackStake()void' | 'clawbackStake', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'clawbackStakeToValidator()void' | 'clawbackStakeToValidator', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'claimLeftAlgo()void' | 'claimLeftAlgo', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'checkAlgodVersion()void' | 'checkAlgodVersion', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' | 'goOnline', {
      argsObj: {
        /**
         * Payment transaction to the contract to cover costs for Eligibility fee; 0 for renewal.
         */
        feePayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The vote public key
         */
        votePK: Uint8Array
        /**
         * The selection public key
         */
        selectionPK: Uint8Array
        /**
         * the state proof public key
         */
        stateProofPK: Uint8Array
        /**
         * Index of first valid block for the participation keys
         */
        voteFirst: bigint | number
        /**
         * Index of last valid block for for the participation keys
         */
        voteLast: bigint | number
        /**
         * The vote key dilution value
         */
        voteKeyDilution: bigint | number
      }
      argsTuple: [feePayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, votePK: Uint8Array, selectionPK: Uint8Array, stateProofPK: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
      returns: void
    }>
    & Record<'goOffline(uint64)void' | 'goOffline', {
      argsObj: {
        /**
         * : graceful offline of the node by the node runner or the main Caelus contract
                             1: node is misbehaving and needs to be set offline by the main Caelus contract
         */
        offlineCase: bigint | number
      }
      argsTuple: [offlineCase: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'creator'?: IntegerState
      'name'?: BinaryState
      'contractVersion'?: IntegerState
      'operator'?: BinaryState
      'operatorCommit'?: IntegerState
      'minStake'?: IntegerState
      'delegatedStake'?: IntegerState
      'maxDStake'?: IntegerState
      'performance'?: IntegerState
      'saturationBuffer'?: IntegerState
      'rewardReport'?: IntegerState
      'isDelinquent'?: BinaryState
      'delinquencyReport'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CaelusValidatorPoolSig = keyof CaelusValidatorPool['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CaelusValidatorPoolSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CaelusValidatorPool smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CaelusValidatorPoolSig> = CaelusValidatorPool['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CaelusValidatorPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CaelusValidatorPoolSig> = CaelusValidatorPool['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CaelusValidatorPoolCreateCalls = (typeof CaelusValidatorPoolCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CaelusValidatorPoolCreateCallParams =
  | (TypedCallParams<'createApplication(uint64,address,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CaelusValidatorPoolDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CaelusValidatorPoolCreateCalls) => CaelusValidatorPoolCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CaelusValidatorPoolCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CaelusValidatorPool smart contract using the createApplication(uint64,address,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64,address,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.creatingContract, args.operatorAddress, args.contractVersion],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the addToOperatorCommit(pay)void ABI method
   *
   * Used by the node operator to add to his stake amount for the node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addToOperatorCommit(args: MethodArgs<'addToOperatorCommit(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addToOperatorCommit(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.commit],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeFromOperatorCommit(uint64)void ABI method
   *
   * Used by the node operator to remove from his stake amount for the node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeFromOperatorCommit(args: MethodArgs<'removeFromOperatorCommit(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeFromOperatorCommit(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.claimRequest],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the performanceCheck()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static performanceCheck(args: MethodArgs<'performanceCheck()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'performanceCheck()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getToleratedBlockDelta()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getToleratedBlockDelta(args: MethodArgs<'getToleratedBlockDelta()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getToleratedBlockDelta()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reportRewards()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reportRewards(args: MethodArgs<'reportRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reportRewards()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bid()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bid(args: MethodArgs<'bid()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bid()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addStake()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addStake(args: MethodArgs<'addStake()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addStake()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the snitchBurn()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static snitchBurn(args: MethodArgs<'snitchBurn()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'snitchBurn()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the snitch()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static snitch(args: MethodArgs<'snitch()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'snitch()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getSnitched()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getSnitched(args: MethodArgs<'getSnitched()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getSnitched()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the clawbackStake()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static clawbackStake(args: MethodArgs<'clawbackStake()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'clawbackStake()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the clawbackStakeToValidator()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static clawbackStakeToValidator(args: MethodArgs<'clawbackStakeToValidator()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'clawbackStakeToValidator()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimLeftAlgo()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimLeftAlgo(args: MethodArgs<'claimLeftAlgo()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimLeftAlgo()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the checkAlgodVersion()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static checkAlgodVersion(args: MethodArgs<'checkAlgodVersion()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'checkAlgodVersion()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.feePayment, args.votePK, args.selectionPK, args.stateProofPK, args.voteFirst, args.voteLast, args.voteKeyDilution],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the goOffline(uint64)void ABI method
   *
   * Set the contract account to offline so that it doesn't participate in consensus anymore.
if graceful then it only means that there was some migration or other operation [CASE 1]
if used to force the account offline because of bad behavior, then set up a flag for penalties [CASE 2]
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static goOffline(args: MethodArgs<'goOffline(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'goOffline(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.offlineCase],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CaelusValidatorPool smart contract
 */
export class CaelusValidatorPoolClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CaelusValidatorPoolClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CaelusValidatorPool['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CaelusValidatorPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CaelusValidatorPoolDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CaelusValidatorPoolCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CaelusValidatorPool smart contract using the createApplication(uint64,address,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64,address,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(uint64,address,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(CaelusValidatorPoolCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CaelusValidatorPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the addToOperatorCommit(pay)void ABI method.
   *
   * Used by the node operator to add to his stake amount for the node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addToOperatorCommit(args: MethodArgs<'addToOperatorCommit(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.addToOperatorCommit(args, params))
  }

  /**
   * Calls the removeFromOperatorCommit(uint64)void ABI method.
   *
   * Used by the node operator to remove from his stake amount for the node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removeFromOperatorCommit(args: MethodArgs<'removeFromOperatorCommit(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.removeFromOperatorCommit(args, params))
  }

  /**
   * Calls the performanceCheck()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public performanceCheck(args: MethodArgs<'performanceCheck()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.performanceCheck(args, params))
  }

  /**
   * Calls the getToleratedBlockDelta()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getToleratedBlockDelta(args: MethodArgs<'getToleratedBlockDelta()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.getToleratedBlockDelta(args, params))
  }

  /**
   * Calls the reportRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reportRewards(args: MethodArgs<'reportRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.reportRewards(args, params))
  }

  /**
   * Calls the bid()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bid(args: MethodArgs<'bid()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.bid(args, params))
  }

  /**
   * Calls the addStake()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addStake(args: MethodArgs<'addStake()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.addStake(args, params))
  }

  /**
   * Calls the snitchBurn()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public snitchBurn(args: MethodArgs<'snitchBurn()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.snitchBurn(args, params))
  }

  /**
   * Calls the snitch()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public snitch(args: MethodArgs<'snitch()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.snitch(args, params))
  }

  /**
   * Calls the getSnitched()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getSnitched(args: MethodArgs<'getSnitched()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.getSnitched(args, params))
  }

  /**
   * Calls the clawbackStake()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public clawbackStake(args: MethodArgs<'clawbackStake()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.clawbackStake(args, params))
  }

  /**
   * Calls the clawbackStakeToValidator()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public clawbackStakeToValidator(args: MethodArgs<'clawbackStakeToValidator()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.clawbackStakeToValidator(args, params))
  }

  /**
   * Calls the claimLeftAlgo()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimLeftAlgo(args: MethodArgs<'claimLeftAlgo()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.claimLeftAlgo(args, params))
  }

  /**
   * Calls the checkAlgodVersion()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public checkAlgodVersion(args: MethodArgs<'checkAlgodVersion()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.checkAlgodVersion(args, params))
  }

  /**
   * Calls the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.goOnline(args, params))
  }

  /**
   * Calls the goOffline(uint64)void ABI method.
   *
   * Set the contract account to offline so that it doesn't participate in consensus anymore.
if graceful then it only means that there was some migration or other operation [CASE 1]
if used to force the account offline because of bad behavior, then set up a flag for penalties [CASE 2]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public goOffline(args: MethodArgs<'goOffline(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.goOffline(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CaelusValidatorPool['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get creator() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'creator')
      },
      get name() {
        return CaelusValidatorPoolClient.getBinaryState(state, 'name')
      },
      get contractVersion() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'contractVersion')
      },
      get operator() {
        return CaelusValidatorPoolClient.getBinaryState(state, 'operator')
      },
      get operatorCommit() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'operatorCommit')
      },
      get minStake() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'minStake')
      },
      get delegatedStake() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'delegatedStake')
      },
      get maxDStake() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'maxDStake')
      },
      get performance() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'performance')
      },
      get saturationBuffer() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'saturationBuffer')
      },
      get rewardReport() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'rewardReport')
      },
      get isDelinquent() {
        return CaelusValidatorPoolClient.getBinaryState(state, 'isDelinquent')
      },
      get delinquencyReport() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'delinquencyReport')
      },
    }
  }

  public compose(): CaelusValidatorPoolComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      addToOperatorCommit(args: MethodArgs<'addToOperatorCommit(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addToOperatorCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeFromOperatorCommit(args: MethodArgs<'removeFromOperatorCommit(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeFromOperatorCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      performanceCheck(args: MethodArgs<'performanceCheck()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.performanceCheck(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getToleratedBlockDelta(args: MethodArgs<'getToleratedBlockDelta()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getToleratedBlockDelta(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reportRewards(args: MethodArgs<'reportRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reportRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bid(args: MethodArgs<'bid()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bid(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addStake(args: MethodArgs<'addStake()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      snitchBurn(args: MethodArgs<'snitchBurn()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.snitchBurn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      snitch(args: MethodArgs<'snitch()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.snitch(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getSnitched(args: MethodArgs<'getSnitched()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getSnitched(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clawbackStake(args: MethodArgs<'clawbackStake()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clawbackStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clawbackStakeToValidator(args: MethodArgs<'clawbackStakeToValidator()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clawbackStakeToValidator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimLeftAlgo(args: MethodArgs<'claimLeftAlgo()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimLeftAlgo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      checkAlgodVersion(args: MethodArgs<'checkAlgodVersion()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.checkAlgodVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.goOnline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      goOffline(args: MethodArgs<'goOffline(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.goOffline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CaelusValidatorPoolComposer
  }
}
export type CaelusValidatorPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the addToOperatorCommit(pay)void ABI method.
   *
   * Used by the node operator to add to his stake amount for the node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addToOperatorCommit(args: MethodArgs<'addToOperatorCommit(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'addToOperatorCommit(pay)void'>]>

  /**
   * Calls the removeFromOperatorCommit(uint64)void ABI method.
   *
   * Used by the node operator to remove from his stake amount for the node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeFromOperatorCommit(args: MethodArgs<'removeFromOperatorCommit(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'removeFromOperatorCommit(uint64)void'>]>

  /**
   * Calls the performanceCheck()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  performanceCheck(args: MethodArgs<'performanceCheck()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'performanceCheck()void'>]>

  /**
   * Calls the getToleratedBlockDelta()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getToleratedBlockDelta(args: MethodArgs<'getToleratedBlockDelta()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'getToleratedBlockDelta()uint64'>]>

  /**
   * Calls the reportRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reportRewards(args: MethodArgs<'reportRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'reportRewards()void'>]>

  /**
   * Calls the bid()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bid(args: MethodArgs<'bid()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'bid()void'>]>

  /**
   * Calls the addStake()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addStake(args: MethodArgs<'addStake()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'addStake()void'>]>

  /**
   * Calls the snitchBurn()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchBurn(args: MethodArgs<'snitchBurn()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'snitchBurn()void'>]>

  /**
   * Calls the snitch()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitch(args: MethodArgs<'snitch()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'snitch()void'>]>

  /**
   * Calls the getSnitched()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSnitched(args: MethodArgs<'getSnitched()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'getSnitched()void'>]>

  /**
   * Calls the clawbackStake()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clawbackStake(args: MethodArgs<'clawbackStake()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'clawbackStake()void'>]>

  /**
   * Calls the clawbackStakeToValidator()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clawbackStakeToValidator(args: MethodArgs<'clawbackStakeToValidator()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'clawbackStakeToValidator()void'>]>

  /**
   * Calls the claimLeftAlgo()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimLeftAlgo(args: MethodArgs<'claimLeftAlgo()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'claimLeftAlgo()void'>]>

  /**
   * Calls the checkAlgodVersion()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkAlgodVersion(args: MethodArgs<'checkAlgodVersion()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'checkAlgodVersion()void'>]>

  /**
   * Calls the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>]>

  /**
   * Calls the goOffline(uint64)void ABI method.
   *
   * Set the contract account to offline so that it doesn't participate in consensus anymore.
if graceful then it only means that there was some migration or other operation [CASE 1]
if used to force the account offline because of bad behavior, then set up a flag for penalties [CASE 2]
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOffline(args: MethodArgs<'goOffline(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'goOffline(uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the CaelusValidatorPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CaelusValidatorPoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CaelusValidatorPoolComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CaelusValidatorPoolComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CaelusValidatorPoolComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CaelusValidatorPoolComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
