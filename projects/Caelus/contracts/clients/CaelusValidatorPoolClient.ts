/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64,address,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optIntoLST()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addToOperatorCommit(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initBurnOperatorCommit(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeFromOperatorCommit(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "performanceCheck()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "solveDelinquency(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reportRewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnStake(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSnitched((bool,bool,bool,uint64,bool,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getClawbackedStake(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "flashloan(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkBalance()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimLeftAlgo()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateToNewVersionEmptyContract()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeCloseTxn()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getEligibilityFlag()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "creatorContractAppID": {
          "type": "uint64",
          "key": "creator"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "contractVersion"
        },
        "vestID": {
          "type": "uint64",
          "key": "vestID"
        },
        "stVestID": {
          "type": "uint64",
          "key": "stVestID"
        },
        "vALGO": {
          "type": "uint64",
          "key": "vALGO"
        },
        "operatorAddress": {
          "type": "bytes",
          "key": "operator"
        },
        "operatorCommit": {
          "type": "uint64",
          "key": "operatorCommit"
        },
        "lastOperatorCommitMint": {
          "type": "uint64",
          "key": "lastOpCommitMint"
        },
        "delegatedStake": {
          "type": "uint64",
          "key": "delegatedStake"
        },
        "maxDelegatableStake": {
          "type": "uint64",
          "key": "maxDStake"
        },
        "canBeDelegated": {
          "type": "bytes",
          "key": "canBeDelegated"
        },
        "performanceCounter": {
          "type": "uint64",
          "key": "performance"
        },
        "saturationBUFFER": {
          "type": "uint64",
          "key": "saturationBuffer"
        },
        "lastRewardReport": {
          "type": "uint64",
          "key": "rewardReport"
        },
        "isDelinquent": {
          "type": "bytes",
          "key": "isDelinquent"
        },
        "lastDelinquencyReport": {
          "type": "uint64",
          "key": "delinquencyReport"
        },
        "delinquencyScore": {
          "type": "uint64",
          "key": "delinquencyScore"
        },
        "balanceCheckpoint": {
          "type": "uint64",
          "key": "balanceCheckpoint"
        },
        "repaid": {
          "type": "bytes",
          "key": "repaid"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 15
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusValidatorPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "******************\nPublic Methods    *\n******************",
        "args": [
          {
            "name": "creatingContract",
            "type": "uint64"
          },
          {
            "name": "operatorAddress",
            "type": "address"
          },
          {
            "name": "contractVersion",
            "type": "uint64"
          },
          {
            "name": "vestID",
            "type": "uint64"
          },
          {
            "name": "stVestID",
            "type": "uint64"
          },
          {
            "name": "vALGO",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optIntoLST",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addToOperatorCommit",
        "desc": "Used by the Caelus Admin to send the correct amount into the operator commit on delinquent burn of his vALGO",
        "args": [
          {
            "name": "opStake",
            "type": "pay",
            "desc": "node operator stake commitment"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "operatorCommitUpdateEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "amountAdded",
                "type": "uint64"
              },
              {
                "name": "amountRemoved",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "initBurnOperatorCommit",
        "args": [
          {
            "name": "claimRequestLST",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeFromOperatorCommit",
        "desc": "Used by the node operator to remove from his stake amount for the node",
        "args": [
          {
            "name": "claimRequest",
            "type": "uint64",
            "desc": "amount claimed by the node operator to be removed from the contract balance and subtracted from the operator_commit counter"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "operatorCommitUpdateEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "amountAdded",
                "type": "uint64"
              },
              {
                "name": "amountRemoved",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "performanceCheck",
        "args": [],
        "returns": {
          "type": "bool"
        },
        "events": [
          {
            "name": "delinquencyEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "stakeAtRisk",
                "type": "uint64"
              },
              {
                "name": "delinquencyScore",
                "type": "uint64"
              },
              {
                "name": "delinquencyStatus",
                "type": "bool"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "solveDelinquency",
        "args": [
          {
            "name": "block",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "solvedDelinquencyEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "stake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "reportRewards",
        "args": [
          {
            "name": "block",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "rewardsEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "block",
                "type": "uint64"
              },
              {
                "name": "payout",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "addStake",
        "args": [
          {
            "name": "txnWithStake",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnStake",
        "args": [
          {
            "name": "amountRequested",
            "type": "uint64"
          },
          {
            "name": "receiverBurn",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchValidator",
        "args": [
          {
            "name": "appToSnitch",
            "type": "uint64"
          },
          {
            "name": "params",
            "type": "(bool,bool,bool,uint64,bool,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getSnitched",
        "args": [
          {
            "name": "checks",
            "type": "(bool,bool,bool,uint64,bool,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "getClawbackedStake",
        "args": [
          {
            "name": "receivedStake",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "flashloan",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "receiver",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "checkBalance",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimLeftAlgo",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateToNewVersionEmptyContract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "makeCloseTxn",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "validatorCloseEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "returnedStake",
                "type": "uint64"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOnline",
        "desc": "Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake",
        "args": [
          {
            "name": "feePayment",
            "type": "pay",
            "desc": "Payment transaction to the contract to cover costs for Eligibility fee 0 for renewal."
          },
          {
            "name": "votePK",
            "type": "byte[]",
            "desc": "The vote public key"
          },
          {
            "name": "selectionPK",
            "type": "byte[]",
            "desc": "The selection public key"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]",
            "desc": "the state proof public key"
          },
          {
            "name": "voteFirst",
            "type": "uint64",
            "desc": "Index of first valid block for the participation keys"
          },
          {
            "name": "voteLast",
            "type": "uint64",
            "desc": "Index of last valid block for for the participation keys"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64",
            "desc": "The vote key dilution value"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "goOnlineEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              },
              {
                "name": "delegatedStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "goOffline",
        "desc": "Set the contract account to offline so that it doesn't participate in consensus anymore.\nNo force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status\nOnce the account is set offline the method ensures that it cannot be delegated to.",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "goOfflineEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              },
              {
                "name": "delegatedStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getEligibilityFlag",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "bool"
        }
      }
    ],
    "events": [
      {
        "name": "validatorCloseEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "returnedStake",
            "type": "uint64"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "goOnlineEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          },
          {
            "name": "delegatedStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "goOfflineEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          },
          {
            "name": "delegatedStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "operatorCommitUpdateEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "amountAdded",
            "type": "uint64"
          },
          {
            "name": "amountRemoved",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "delinquencyEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "stakeAtRisk",
            "type": "uint64"
          },
          {
            "name": "delinquencyScore",
            "type": "uint64"
          },
          {
            "name": "delinquencyStatus",
            "type": "bool"
          }
        ],
        "desc": ""
      },
      {
        "name": "solvedDelinquencyEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "stake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "rewardsEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "block",
            "type": "uint64"
          },
          {
            "name": "payout",
            "type": "uint64"
          }
        ],
        "desc": ""
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the CaelusValidatorPool smart contract.
 */
export type CaelusValidatorPool = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,address,uint64,uint64,uint64,uint64)void' | 'createApplication', {
      argsObj: {
        creatingContract: bigint | number
        operatorAddress: string
        contractVersion: bigint | number
        vestID: bigint | number
        stVestID: bigint | number
        vALGO: bigint | number
      }
      argsTuple: [creatingContract: bigint | number, operatorAddress: string, contractVersion: bigint | number, vestID: bigint | number, stVestID: bigint | number, vALGO: bigint | number]
      returns: void
    }>
    & Record<'optIntoLST()void' | 'optIntoLST', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'addToOperatorCommit(pay)void' | 'addToOperatorCommit', {
      argsObj: {
        /**
         * node operator stake commitment
         */
        opStake: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [opStake: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'initBurnOperatorCommit(uint64)void' | 'initBurnOperatorCommit', {
      argsObj: {
        claimRequestLST: bigint | number
      }
      argsTuple: [claimRequestLST: bigint | number]
      returns: void
    }>
    & Record<'removeFromOperatorCommit(uint64)void' | 'removeFromOperatorCommit', {
      argsObj: {
        /**
         * amount claimed by the node operator to be removed from the contract balance and subtracted from the operator_commit counter
         */
        claimRequest: bigint | number
      }
      argsTuple: [claimRequest: bigint | number]
      returns: void
    }>
    & Record<'performanceCheck()bool' | 'performanceCheck', {
      argsObj: {
      }
      argsTuple: []
      returns: boolean
    }>
    & Record<'solveDelinquency(uint64)void' | 'solveDelinquency', {
      argsObj: {
        block: bigint | number
      }
      argsTuple: [block: bigint | number]
      returns: void
    }>
    & Record<'reportRewards(uint64)void' | 'reportRewards', {
      argsObj: {
        block: bigint | number
      }
      argsTuple: [block: bigint | number]
      returns: void
    }>
    & Record<'addStake(pay)void' | 'addStake', {
      argsObj: {
        txnWithStake: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [txnWithStake: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'burnStake(uint64,address)void' | 'burnStake', {
      argsObj: {
        amountRequested: bigint | number
        receiverBurn: string
      }
      argsTuple: [amountRequested: bigint | number, receiverBurn: string]
      returns: void
    }>
    & Record<'snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void' | 'snitchValidator', {
      argsObj: {
        appToSnitch: bigint | number
        params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]
      }
      argsTuple: [appToSnitch: bigint | number, params: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]]
      returns: void
    }>
    & Record<'getSnitched((bool,bool,bool,uint64,bool,uint64))bool' | 'getSnitched', {
      argsObj: {
        checks: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]
      }
      argsTuple: [checks: [boolean, boolean, boolean, bigint | number, boolean, bigint | number]]
      returns: boolean
    }>
    & Record<'getClawbackedStake(pay)void' | 'getClawbackedStake', {
      argsObj: {
        receivedStake: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [receivedStake: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'flashloan(uint64,address)void' | 'flashloan', {
      argsObj: {
        amount: bigint | number
        receiver: string
      }
      argsTuple: [amount: bigint | number, receiver: string]
      returns: void
    }>
    & Record<'checkBalance()void' | 'checkBalance', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'claimLeftAlgo()void' | 'claimLeftAlgo', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'updateToNewVersionEmptyContract()void' | 'updateToNewVersionEmptyContract', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'makeCloseTxn()void' | 'makeCloseTxn', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' | 'goOnline', {
      argsObj: {
        /**
         * Payment transaction to the contract to cover costs for Eligibility fee 0 for renewal.
         */
        feePayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The vote public key
         */
        votePK: Uint8Array
        /**
         * The selection public key
         */
        selectionPK: Uint8Array
        /**
         * the state proof public key
         */
        stateProofPK: Uint8Array
        /**
         * Index of first valid block for the participation keys
         */
        voteFirst: bigint | number
        /**
         * Index of last valid block for for the participation keys
         */
        voteLast: bigint | number
        /**
         * The vote key dilution value
         */
        voteKeyDilution: bigint | number
      }
      argsTuple: [feePayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, votePK: Uint8Array, selectionPK: Uint8Array, stateProofPK: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
      returns: void
    }>
    & Record<'goOffline()void' | 'goOffline', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getEligibilityFlag()bool' | 'getEligibilityFlag', {
      argsObj: {
      }
      argsTuple: []
      returns: boolean
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'creator'?: IntegerState
      'contractVersion'?: IntegerState
      'vestID'?: IntegerState
      'stVestID'?: IntegerState
      'vALGO'?: IntegerState
      'operator'?: BinaryState
      'operatorCommit'?: IntegerState
      'lastOpCommitMint'?: IntegerState
      'delegatedStake'?: IntegerState
      'maxDStake'?: IntegerState
      'canBeDelegated'?: BinaryState
      'performance'?: IntegerState
      'saturationBuffer'?: IntegerState
      'rewardReport'?: IntegerState
      'isDelinquent'?: BinaryState
      'delinquencyReport'?: IntegerState
      'delinquencyScore'?: IntegerState
      'balanceCheckpoint'?: IntegerState
      'repaid'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CaelusValidatorPoolSig = keyof CaelusValidatorPool['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CaelusValidatorPoolSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CaelusValidatorPool smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CaelusValidatorPoolSig> = CaelusValidatorPool['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CaelusValidatorPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CaelusValidatorPoolSig> = CaelusValidatorPool['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CaelusValidatorPoolCreateCalls = (typeof CaelusValidatorPoolCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CaelusValidatorPoolCreateCallParams =
  | (TypedCallParams<'createApplication(uint64,address,uint64,uint64,uint64,uint64)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type CaelusValidatorPoolDeleteCalls = (typeof CaelusValidatorPoolCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type CaelusValidatorPoolDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type CaelusValidatorPoolDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CaelusValidatorPoolCreateCalls) => CaelusValidatorPoolCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: CaelusValidatorPoolDeleteCalls) => CaelusValidatorPoolDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CaelusValidatorPoolCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CaelusValidatorPool smart contract using the createApplication(uint64,address,uint64,uint64,uint64,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64,address,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64,address,uint64,uint64,uint64,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.creatingContract, args.operatorAddress, args.contractVersion, args.vestID, args.stVestID, args.vALGO],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the CaelusValidatorPool smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optIntoLST()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optIntoLst(args: MethodArgs<'optIntoLST()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optIntoLST()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addToOperatorCommit(pay)void ABI method
   *
   * Used by the Caelus Admin to send the correct amount into the operator commit on delinquent burn of his vALGO
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addToOperatorCommit(args: MethodArgs<'addToOperatorCommit(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addToOperatorCommit(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.opStake],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initBurnOperatorCommit(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initBurnOperatorCommit(args: MethodArgs<'initBurnOperatorCommit(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initBurnOperatorCommit(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.claimRequestLST],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeFromOperatorCommit(uint64)void ABI method
   *
   * Used by the node operator to remove from his stake amount for the node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeFromOperatorCommit(args: MethodArgs<'removeFromOperatorCommit(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeFromOperatorCommit(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.claimRequest],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the performanceCheck()bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static performanceCheck(args: MethodArgs<'performanceCheck()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'performanceCheck()bool' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the solveDelinquency(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static solveDelinquency(args: MethodArgs<'solveDelinquency(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'solveDelinquency(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.block],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reportRewards(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reportRewards(args: MethodArgs<'reportRewards(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reportRewards(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.block],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addStake(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addStake(args: MethodArgs<'addStake(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addStake(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txnWithStake],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burnStake(uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnStake(args: MethodArgs<'burnStake(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burnStake(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amountRequested, args.receiverBurn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static snitchValidator(args: MethodArgs<'snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void' as const,
      methodArgs: Array.isArray(args) ? args : [args.appToSnitch, args.params],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getSnitched((bool,bool,bool,uint64,bool,uint64))bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getSnitched(args: MethodArgs<'getSnitched((bool,bool,bool,uint64,bool,uint64))bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getSnitched((bool,bool,bool,uint64,bool,uint64))bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.checks],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getClawbackedStake(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getClawbackedStake(args: MethodArgs<'getClawbackedStake(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getClawbackedStake(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.receivedStake],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the flashloan(uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static flashloan(args: MethodArgs<'flashloan(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'flashloan(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.receiver],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the checkBalance()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static checkBalance(args: MethodArgs<'checkBalance()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'checkBalance()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimLeftAlgo()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimLeftAlgo(args: MethodArgs<'claimLeftAlgo()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimLeftAlgo()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateToNewVersionEmptyContract()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateToNewVersionEmptyContract(args: MethodArgs<'updateToNewVersionEmptyContract()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateToNewVersionEmptyContract()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the makeCloseTxn()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static makeCloseTxn(args: MethodArgs<'makeCloseTxn()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'makeCloseTxn()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.feePayment, args.votePK, args.selectionPK, args.stateProofPK, args.voteFirst, args.voteLast, args.voteKeyDilution],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the goOffline()void ABI method
   *
   * Set the contract account to offline so that it doesn't participate in consensus anymore.
No force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status
Once the account is set offline the method ensures that it cannot be delegated to.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static goOffline(args: MethodArgs<'goOffline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'goOffline()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getEligibilityFlag()bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getEligibilityFlag(args: MethodArgs<'getEligibilityFlag()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getEligibilityFlag()bool' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CaelusValidatorPool smart contract
 */
export class CaelusValidatorPoolClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CaelusValidatorPoolClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CaelusValidatorPool['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CaelusValidatorPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CaelusValidatorPoolDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CaelusValidatorPoolCallFactory.create)
    const deleteArgs = params.deleteCall?.(CaelusValidatorPoolCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CaelusValidatorPool smart contract using the createApplication(uint64,address,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64,address,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(uint64,address,uint64,uint64,uint64,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(CaelusValidatorPoolCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the CaelusValidatorPool smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(CaelusValidatorPoolCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CaelusValidatorPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the optIntoLST()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optIntoLst(args: MethodArgs<'optIntoLST()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.optIntoLst(args, params))
  }

  /**
   * Calls the addToOperatorCommit(pay)void ABI method.
   *
   * Used by the Caelus Admin to send the correct amount into the operator commit on delinquent burn of his vALGO
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addToOperatorCommit(args: MethodArgs<'addToOperatorCommit(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.addToOperatorCommit(args, params))
  }

  /**
   * Calls the initBurnOperatorCommit(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initBurnOperatorCommit(args: MethodArgs<'initBurnOperatorCommit(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.initBurnOperatorCommit(args, params))
  }

  /**
   * Calls the removeFromOperatorCommit(uint64)void ABI method.
   *
   * Used by the node operator to remove from his stake amount for the node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removeFromOperatorCommit(args: MethodArgs<'removeFromOperatorCommit(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.removeFromOperatorCommit(args, params))
  }

  /**
   * Calls the performanceCheck()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public performanceCheck(args: MethodArgs<'performanceCheck()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.performanceCheck(args, params))
  }

  /**
   * Calls the solveDelinquency(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public solveDelinquency(args: MethodArgs<'solveDelinquency(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.solveDelinquency(args, params))
  }

  /**
   * Calls the reportRewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reportRewards(args: MethodArgs<'reportRewards(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.reportRewards(args, params))
  }

  /**
   * Calls the addStake(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addStake(args: MethodArgs<'addStake(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.addStake(args, params))
  }

  /**
   * Calls the burnStake(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnStake(args: MethodArgs<'burnStake(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.burnStake(args, params))
  }

  /**
   * Calls the snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public snitchValidator(args: MethodArgs<'snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.snitchValidator(args, params))
  }

  /**
   * Calls the getSnitched((bool,bool,bool,uint64,bool,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getSnitched(args: MethodArgs<'getSnitched((bool,bool,bool,uint64,bool,uint64))bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.getSnitched(args, params))
  }

  /**
   * Calls the getClawbackedStake(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getClawbackedStake(args: MethodArgs<'getClawbackedStake(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.getClawbackedStake(args, params))
  }

  /**
   * Calls the flashloan(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public flashloan(args: MethodArgs<'flashloan(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.flashloan(args, params))
  }

  /**
   * Calls the checkBalance()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public checkBalance(args: MethodArgs<'checkBalance()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.checkBalance(args, params))
  }

  /**
   * Calls the claimLeftAlgo()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimLeftAlgo(args: MethodArgs<'claimLeftAlgo()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.claimLeftAlgo(args, params))
  }

  /**
   * Calls the updateToNewVersionEmptyContract()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateToNewVersionEmptyContract(args: MethodArgs<'updateToNewVersionEmptyContract()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.updateToNewVersionEmptyContract(args, params))
  }

  /**
   * Calls the makeCloseTxn()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public makeCloseTxn(args: MethodArgs<'makeCloseTxn()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.makeCloseTxn(args, params))
  }

  /**
   * Calls the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.goOnline(args, params))
  }

  /**
   * Calls the goOffline()void ABI method.
   *
   * Set the contract account to offline so that it doesn't participate in consensus anymore.
No force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status
Once the account is set offline the method ensures that it cannot be delegated to.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public goOffline(args: MethodArgs<'goOffline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.goOffline(args, params))
  }

  /**
   * Calls the getEligibilityFlag()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getEligibilityFlag(args: MethodArgs<'getEligibilityFlag()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CaelusValidatorPoolCallFactory.getEligibilityFlag(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CaelusValidatorPool['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get creator() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'creator')
      },
      get contractVersion() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'contractVersion')
      },
      get vestID() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'vestID')
      },
      get stVestID() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'stVestID')
      },
      get vALGO() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'vALGO')
      },
      get operator() {
        return CaelusValidatorPoolClient.getBinaryState(state, 'operator')
      },
      get operatorCommit() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'operatorCommit')
      },
      get lastOpCommitMint() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'lastOpCommitMint')
      },
      get delegatedStake() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'delegatedStake')
      },
      get maxDStake() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'maxDStake')
      },
      get canBeDelegated() {
        return CaelusValidatorPoolClient.getBinaryState(state, 'canBeDelegated')
      },
      get performance() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'performance')
      },
      get saturationBuffer() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'saturationBuffer')
      },
      get rewardReport() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'rewardReport')
      },
      get isDelinquent() {
        return CaelusValidatorPoolClient.getBinaryState(state, 'isDelinquent')
      },
      get delinquencyReport() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'delinquencyReport')
      },
      get delinquencyScore() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'delinquencyScore')
      },
      get balanceCheckpoint() {
        return CaelusValidatorPoolClient.getIntegerState(state, 'balanceCheckpoint')
      },
      get repaid() {
        return CaelusValidatorPoolClient.getBinaryState(state, 'repaid')
      },
    }
  }

  public compose(): CaelusValidatorPoolComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      optIntoLst(args: MethodArgs<'optIntoLST()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optIntoLst(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addToOperatorCommit(args: MethodArgs<'addToOperatorCommit(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addToOperatorCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initBurnOperatorCommit(args: MethodArgs<'initBurnOperatorCommit(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initBurnOperatorCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeFromOperatorCommit(args: MethodArgs<'removeFromOperatorCommit(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeFromOperatorCommit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      performanceCheck(args: MethodArgs<'performanceCheck()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.performanceCheck(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      solveDelinquency(args: MethodArgs<'solveDelinquency(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.solveDelinquency(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reportRewards(args: MethodArgs<'reportRewards(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reportRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addStake(args: MethodArgs<'addStake(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnStake(args: MethodArgs<'burnStake(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      snitchValidator(args: MethodArgs<'snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.snitchValidator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getSnitched(args: MethodArgs<'getSnitched((bool,bool,bool,uint64,bool,uint64))bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getSnitched(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getClawbackedStake(args: MethodArgs<'getClawbackedStake(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getClawbackedStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      flashloan(args: MethodArgs<'flashloan(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.flashloan(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      checkBalance(args: MethodArgs<'checkBalance()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.checkBalance(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimLeftAlgo(args: MethodArgs<'claimLeftAlgo()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimLeftAlgo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateToNewVersionEmptyContract(args: MethodArgs<'updateToNewVersionEmptyContract()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateToNewVersionEmptyContract(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      makeCloseTxn(args: MethodArgs<'makeCloseTxn()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.makeCloseTxn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.goOnline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      goOffline(args: MethodArgs<'goOffline()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.goOffline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getEligibilityFlag(args: MethodArgs<'getEligibilityFlag()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getEligibilityFlag(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CaelusValidatorPoolComposer
  }
}
export type CaelusValidatorPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optIntoLST()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIntoLst(args: MethodArgs<'optIntoLST()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'optIntoLST()void'>]>

  /**
   * Calls the addToOperatorCommit(pay)void ABI method.
   *
   * Used by the Caelus Admin to send the correct amount into the operator commit on delinquent burn of his vALGO
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addToOperatorCommit(args: MethodArgs<'addToOperatorCommit(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'addToOperatorCommit(pay)void'>]>

  /**
   * Calls the initBurnOperatorCommit(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initBurnOperatorCommit(args: MethodArgs<'initBurnOperatorCommit(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'initBurnOperatorCommit(uint64)void'>]>

  /**
   * Calls the removeFromOperatorCommit(uint64)void ABI method.
   *
   * Used by the node operator to remove from his stake amount for the node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeFromOperatorCommit(args: MethodArgs<'removeFromOperatorCommit(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'removeFromOperatorCommit(uint64)void'>]>

  /**
   * Calls the performanceCheck()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  performanceCheck(args: MethodArgs<'performanceCheck()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'performanceCheck()bool'>]>

  /**
   * Calls the solveDelinquency(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  solveDelinquency(args: MethodArgs<'solveDelinquency(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'solveDelinquency(uint64)void'>]>

  /**
   * Calls the reportRewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reportRewards(args: MethodArgs<'reportRewards(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'reportRewards(uint64)void'>]>

  /**
   * Calls the addStake(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addStake(args: MethodArgs<'addStake(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'addStake(pay)void'>]>

  /**
   * Calls the burnStake(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnStake(args: MethodArgs<'burnStake(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'burnStake(uint64,address)void'>]>

  /**
   * Calls the snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchValidator(args: MethodArgs<'snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void'>]>

  /**
   * Calls the getSnitched((bool,bool,bool,uint64,bool,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSnitched(args: MethodArgs<'getSnitched((bool,bool,bool,uint64,bool,uint64))bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'getSnitched((bool,bool,bool,uint64,bool,uint64))bool'>]>

  /**
   * Calls the getClawbackedStake(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getClawbackedStake(args: MethodArgs<'getClawbackedStake(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'getClawbackedStake(pay)void'>]>

  /**
   * Calls the flashloan(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  flashloan(args: MethodArgs<'flashloan(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'flashloan(uint64,address)void'>]>

  /**
   * Calls the checkBalance()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkBalance(args: MethodArgs<'checkBalance()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'checkBalance()void'>]>

  /**
   * Calls the claimLeftAlgo()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimLeftAlgo(args: MethodArgs<'claimLeftAlgo()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'claimLeftAlgo()void'>]>

  /**
   * Calls the updateToNewVersionEmptyContract()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateToNewVersionEmptyContract(args: MethodArgs<'updateToNewVersionEmptyContract()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'updateToNewVersionEmptyContract()void'>]>

  /**
   * Calls the makeCloseTxn()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeCloseTxn(args: MethodArgs<'makeCloseTxn()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'makeCloseTxn()void'>]>

  /**
   * Calls the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>]>

  /**
   * Calls the goOffline()void ABI method.
   *
   * Set the contract account to offline so that it doesn't participate in consensus anymore.
No force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status
Once the account is set offline the method ensures that it cannot be delegated to.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOffline(args: MethodArgs<'goOffline()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'goOffline()void'>]>

  /**
   * Calls the getEligibilityFlag()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEligibilityFlag(args: MethodArgs<'getEligibilityFlag()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'getEligibilityFlag()bool'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the CaelusValidatorPool smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): CaelusValidatorPoolComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CaelusValidatorPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CaelusValidatorPoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CaelusValidatorPoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CaelusValidatorPoolComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CaelusValidatorPoolComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CaelusValidatorPoolComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CaelusValidatorPoolComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
