/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"CaelusValidatorPool","desc":"","structs":{},"methods":[{"name":"createApplication","desc":"createApplication method called at creation, initializes some globalKey values","args":[{"name":"creatingContract","type":"uint64","desc":"ApplicationID for the creator contract (CaelusAdminContract)"},{"name":"operatorAddress","type":"address","desc":"Address of the node operator used to sign online/offline txns and participate in auctions"},{"name":"contractVersion","type":"uint64","desc":"Approval Program version for the node contract, stored in the CaelusAdminContract"},{"name":"tokenId","type":"uint64","desc":"AssetID of the LST token"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"optIntoLST","desc":"ARC4 PUBLIC METHODS","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"__addToOperatorCommit","desc":"followup operation called by the Caelus Admin to send the correct amount into the operator commit","args":[{"name":"opStake","type":"pay","desc":"node operator stake commitment"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"__removeFromOperatorCommit","desc":"Used by the node operator to remove from his stake amount for the node","args":[{"name":"claimRequest","type":"uint64","desc":"amount claimed by the node operator to be removed from the operator_commit counter and moved into delegated stake"},{"name":"claimRequestLST","type":"uint64","desc":"amount of LST to be sent back to the node operator"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"solveDelinquency","desc":"Delinquent Validators need to propose a valid block to clear up their delinquency status.\n\n\nThis method should be called when the delinquency score is below the threshold and the operator has proposed a block.","args":[{"name":"block","type":"uint64","desc":"block number of the block proposed by the node operator while the account was in delinquency"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reportRewards","desc":"Called by the node operator to report the rewards of a block proposed by the contract account.","args":[{"name":"block","type":"uint64","desc":"Block number of the block proposed by the node operator"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"__addStake","desc":"FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO SEND THE DELEGATED STAKE TO THE NODE OPERATOR\n\n\nReceive delegated stake and update the delegation factors.","args":[{"name":"txnWithStake","type":"pay","desc":"Payment transaction to the contract account with the delegated stake"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"__burnStake","desc":"FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO CLAWBACK THE DELEGATED STAKE ON BURN OPERATION","args":[{"name":"amountRequested","type":"uint64","desc":"amount of Algo to be burned"},{"name":"receiverBurn","type":"address","desc":"address of the receiver of the burn transaction triggered on the Caelus Admin contract"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"snitchValidator","desc":"Snitch another Validator Contract. A valid snitch will improve the performance counter.","args":[{"name":"appToSnitch","type":"uint64","desc":"ApplicationID of the validator to be snitched"},{"name":"params","type":"(bool,bool,bool,bool,uint64)","desc":"parameters to check for the validator (For example: performanceCheck, stakeAmountCheck, delinquentCheck, versionCheck)"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"getSnitched","args":[{"name":"checks","type":"(bool,bool,bool,bool,uint64)"}],"returns":{"type":"bool"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"__flashloan","args":[{"name":"amount","type":"uint64"},{"name":"receiver","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"checkBalance","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"goOnline","desc":"Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake","args":[{"name":"feePayment","type":"pay","desc":"Payment transaction to the contract to cover costs for Eligibility fee 0 for renewal."},{"name":"votePK","type":"byte[]","desc":"The vote public key"},{"name":"selectionPK","type":"byte[]","desc":"The selection public key"},{"name":"stateProofPK","type":"byte[]","desc":"the state proof public key"},{"name":"voteFirst","type":"uint64","desc":"Index of first valid block for the participation keys"},{"name":"voteLast","type":"uint64","desc":"Index of last valid block for for the participation keys"},{"name":"voteKeyDilution","type":"uint64","desc":"The vote key dilution value"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"goOffline","desc":"Set the contract account to offline so that it doesn't participate in consensus anymore.\nNo force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status\nOnce the account is set offline the method ensures that it cannot be delegated to.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"getEligibilityFlag","args":[],"returns":{"type":"bool"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"migrateToPool","desc":"Migrate the validator pool to a new pool. Useful to migrate this validator pool to a new version of the contract without losing the state.","args":[{"name":"newPool","type":"uint64","desc":"ApplicationID of the new pool to migrate to"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"__mergeStateOnMigration","desc":"FOLLOWUP OPERATION Receiving call from the old pool to merge the state into the new pool.","args":[{"name":"from","type":"uint64"},{"name":"opCommit","type":"uint64"},{"name":"delegatedAmount","type":"uint64"},{"name":"performanceCounter","type":"uint64"},{"name":"stakeTxn","type":"pay"},{"name":"lstTxn","type":"axfer"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"claimLeftAlgo","desc":"Used by anyone to clear up remaining Algo outside of stake counters back to the Caelus Admin contract to be redistributed","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","desc":"Node operator can close the Validator and get back his stake. Delegated stake is put back into the Caelus Admin contract.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}}],"state":{"schema":{"global":{"ints":14,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"creatorContractAppID":{"key":"Y3JlYXRvcg==","keyType":"AVMString","valueType":"AVMUint64"},"validatorPoolContractVersion":{"key":"Y29udHJhY3RfdmVyc2lvbg==","keyType":"AVMString","valueType":"AVMUint64"},"tokenId":{"key":"dG9rZW5faWQ=","keyType":"AVMString","valueType":"AVMUint64"},"boostTokenID":{"key":"Ym9vc3RfdG9rZW5faWQ=","keyType":"AVMString","valueType":"AVMUint64"},"operatorAddress":{"key":"b3BlcmF0b3I=","keyType":"AVMString","valueType":"AVMBytes"},"operatorCommit":{"key":"b3BlcmF0b3JfY29tbWl0","keyType":"AVMString","valueType":"AVMUint64"},"delegatedStake":{"key":"ZGVsZWdhdGVkX3N0YWtl","keyType":"AVMString","valueType":"AVMUint64"},"maxDelegatableStake":{"key":"bWF4X2RlbGVnYXRhYmxlX3N0YWtl","keyType":"AVMString","valueType":"AVMUint64"},"status":{"key":"c3RhdHVz","keyType":"AVMString","valueType":"AVMUint64"},"performanceCounter":{"key":"cGVyZm9ybWFuY2U=","keyType":"AVMString","valueType":"AVMUint64"},"saturationBuffer":{"key":"c2F0dXJhdGlvbl9idWZmZXI=","keyType":"AVMString","valueType":"AVMUint64"},"lastRewardReport":{"key":"cmV3YXJkX3JlcG9ydA==","keyType":"AVMString","valueType":"AVMUint64"},"lastDelinquencyReport":{"key":"ZGVsaW5xdWVuY3lfcmVwb3J0","keyType":"AVMString","valueType":"AVMUint64"},"delinquencyScore":{"key":"ZGVsaW5xdWVuY3lfc2NvcmU=","keyType":"AVMString","valueType":"AVMUint64"},"balanceCheckpoint":{"key":"YmFsYW5jZV9jaGVja3BvaW50","keyType":"AVMString","valueType":"AVMUint64"},"repaid":{"key":"cmVwYWlk","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CaelusValidatorPool contract
 */
export type CaelusValidatorPoolArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64,address,uint64,uint64)void': {
      /**
       * ApplicationID for the creator contract (CaelusAdminContract)
       */
      creatingContract: bigint | number
      /**
       * Address of the node operator used to sign online/offline txns and participate in auctions
       */
      operatorAddress: string
      /**
       * Approval Program version for the node contract, stored in the CaelusAdminContract
       */
      contractVersion: bigint | number
      /**
       * AssetID of the LST token
       */
      tokenId: bigint | number
    }
    'optIntoLST()void': Record<string, never>
    '__addToOperatorCommit(pay)void': {
      /**
       * node operator stake commitment
       */
      opStake: AppMethodCallTransactionArgument
    }
    '__removeFromOperatorCommit(uint64,uint64)void': {
      /**
       * amount claimed by the node operator to be removed from the operator_commit counter and moved into delegated stake
       */
      claimRequest: bigint | number
      /**
       * amount of LST to be sent back to the node operator
       */
      claimRequestLst: bigint | number
    }
    'solveDelinquency(uint64)void': {
      /**
       * block number of the block proposed by the node operator while the account was in delinquency
       */
      block: bigint | number
    }
    'reportRewards(uint64)void': {
      /**
       * Block number of the block proposed by the node operator
       */
      block: bigint | number
    }
    '__addStake(pay)void': {
      /**
       * Payment transaction to the contract account with the delegated stake
       */
      txnWithStake: AppMethodCallTransactionArgument
    }
    '__burnStake(uint64,address)void': {
      /**
       * amount of Algo to be burned
       */
      amountRequested: bigint | number
      /**
       * address of the receiver of the burn transaction triggered on the Caelus Admin contract
       */
      receiverBurn: string
    }
    'snitchValidator(uint64,(bool,bool,bool,bool,uint64))void': {
      /**
       * ApplicationID of the validator to be snitched
       */
      appToSnitch: bigint | number
      /**
       * parameters to check for the validator (For example: performanceCheck, stakeAmountCheck, delinquentCheck, versionCheck)
       */
      params: [boolean, boolean, boolean, boolean, bigint | number]
    }
    'getSnitched((bool,bool,bool,bool,uint64))bool': {
      checks: [boolean, boolean, boolean, boolean, bigint | number]
    }
    '__flashloan(uint64,address)void': {
      amount: bigint | number
      receiver: string
    }
    'checkBalance()void': Record<string, never>
    'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': {
      /**
       * Payment transaction to the contract to cover costs for Eligibility fee 0 for renewal.
       */
      feePayment: AppMethodCallTransactionArgument
      /**
       * The vote public key
       */
      votePk: Uint8Array
      /**
       * The selection public key
       */
      selectionPk: Uint8Array
      /**
       * the state proof public key
       */
      stateProofPk: Uint8Array
      /**
       * Index of first valid block for the participation keys
       */
      voteFirst: bigint | number
      /**
       * Index of last valid block for for the participation keys
       */
      voteLast: bigint | number
      /**
       * The vote key dilution value
       */
      voteKeyDilution: bigint | number
    }
    'goOffline()void': Record<string, never>
    'getEligibilityFlag()bool': Record<string, never>
    'migrateToPool(uint64)void': {
      /**
       * ApplicationID of the new pool to migrate to
       */
      newPool: bigint | number
    }
    '__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void': {
      from: bigint | number
      opCommit: bigint | number
      delegatedAmount: bigint | number
      performanceCounter: bigint | number
      stakeTxn: AppMethodCallTransactionArgument
      lstTxn: AppMethodCallTransactionArgument
    }
    'claimLeftAlgo()void': Record<string, never>
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64,address,uint64,uint64)void': [creatingContract: bigint | number, operatorAddress: string, contractVersion: bigint | number, tokenId: bigint | number]
    'optIntoLST()void': []
    '__addToOperatorCommit(pay)void': [opStake: AppMethodCallTransactionArgument]
    '__removeFromOperatorCommit(uint64,uint64)void': [claimRequest: bigint | number, claimRequestLst: bigint | number]
    'solveDelinquency(uint64)void': [block: bigint | number]
    'reportRewards(uint64)void': [block: bigint | number]
    '__addStake(pay)void': [txnWithStake: AppMethodCallTransactionArgument]
    '__burnStake(uint64,address)void': [amountRequested: bigint | number, receiverBurn: string]
    'snitchValidator(uint64,(bool,bool,bool,bool,uint64))void': [appToSnitch: bigint | number, params: [boolean, boolean, boolean, boolean, bigint | number]]
    'getSnitched((bool,bool,bool,bool,uint64))bool': [checks: [boolean, boolean, boolean, boolean, bigint | number]]
    '__flashloan(uint64,address)void': [amount: bigint | number, receiver: string]
    'checkBalance()void': []
    'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': [feePayment: AppMethodCallTransactionArgument, votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
    'goOffline()void': []
    'getEligibilityFlag()bool': []
    'migrateToPool(uint64)void': [newPool: bigint | number]
    '__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void': [from: bigint | number, opCommit: bigint | number, delegatedAmount: bigint | number, performanceCounter: bigint | number, stakeTxn: AppMethodCallTransactionArgument, lstTxn: AppMethodCallTransactionArgument]
    'claimLeftAlgo()void': []
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type CaelusValidatorPoolReturns = {
  'createApplication(uint64,address,uint64,uint64)void': void
  'optIntoLST()void': void
  '__addToOperatorCommit(pay)void': void
  '__removeFromOperatorCommit(uint64,uint64)void': void
  'solveDelinquency(uint64)void': void
  'reportRewards(uint64)void': void
  '__addStake(pay)void': void
  '__burnStake(uint64,address)void': void
  'snitchValidator(uint64,(bool,bool,bool,bool,uint64))void': void
  'getSnitched((bool,bool,bool,bool,uint64))bool': boolean
  '__flashloan(uint64,address)void': void
  'checkBalance()void': void
  'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': void
  'goOffline()void': void
  'getEligibilityFlag()bool': boolean
  'migrateToPool(uint64)void': void
  '__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void': void
  'claimLeftAlgo()void': void
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the CaelusValidatorPool smart contract.
 */
export type CaelusValidatorPoolTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,address,uint64,uint64)void' | 'createApplication', {
      argsObj: CaelusValidatorPoolArgs['obj']['createApplication(uint64,address,uint64,uint64)void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['createApplication(uint64,address,uint64,uint64)void']
      returns: CaelusValidatorPoolReturns['createApplication(uint64,address,uint64,uint64)void']
    }>
    & Record<'optIntoLST()void' | 'optIntoLST', {
      argsObj: CaelusValidatorPoolArgs['obj']['optIntoLST()void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['optIntoLST()void']
      returns: CaelusValidatorPoolReturns['optIntoLST()void']
    }>
    & Record<'__addToOperatorCommit(pay)void' | '__addToOperatorCommit', {
      argsObj: CaelusValidatorPoolArgs['obj']['__addToOperatorCommit(pay)void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['__addToOperatorCommit(pay)void']
      returns: CaelusValidatorPoolReturns['__addToOperatorCommit(pay)void']
    }>
    & Record<'__removeFromOperatorCommit(uint64,uint64)void' | '__removeFromOperatorCommit', {
      argsObj: CaelusValidatorPoolArgs['obj']['__removeFromOperatorCommit(uint64,uint64)void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['__removeFromOperatorCommit(uint64,uint64)void']
      returns: CaelusValidatorPoolReturns['__removeFromOperatorCommit(uint64,uint64)void']
    }>
    & Record<'solveDelinquency(uint64)void' | 'solveDelinquency', {
      argsObj: CaelusValidatorPoolArgs['obj']['solveDelinquency(uint64)void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['solveDelinquency(uint64)void']
      returns: CaelusValidatorPoolReturns['solveDelinquency(uint64)void']
    }>
    & Record<'reportRewards(uint64)void' | 'reportRewards', {
      argsObj: CaelusValidatorPoolArgs['obj']['reportRewards(uint64)void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['reportRewards(uint64)void']
      returns: CaelusValidatorPoolReturns['reportRewards(uint64)void']
    }>
    & Record<'__addStake(pay)void' | '__addStake', {
      argsObj: CaelusValidatorPoolArgs['obj']['__addStake(pay)void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['__addStake(pay)void']
      returns: CaelusValidatorPoolReturns['__addStake(pay)void']
    }>
    & Record<'__burnStake(uint64,address)void' | '__burnStake', {
      argsObj: CaelusValidatorPoolArgs['obj']['__burnStake(uint64,address)void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['__burnStake(uint64,address)void']
      returns: CaelusValidatorPoolReturns['__burnStake(uint64,address)void']
    }>
    & Record<'snitchValidator(uint64,(bool,bool,bool,bool,uint64))void' | 'snitchValidator', {
      argsObj: CaelusValidatorPoolArgs['obj']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void']
      returns: CaelusValidatorPoolReturns['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void']
    }>
    & Record<'getSnitched((bool,bool,bool,bool,uint64))bool' | 'getSnitched', {
      argsObj: CaelusValidatorPoolArgs['obj']['getSnitched((bool,bool,bool,bool,uint64))bool']
      argsTuple: CaelusValidatorPoolArgs['tuple']['getSnitched((bool,bool,bool,bool,uint64))bool']
      returns: CaelusValidatorPoolReturns['getSnitched((bool,bool,bool,bool,uint64))bool']
    }>
    & Record<'__flashloan(uint64,address)void' | '__flashloan', {
      argsObj: CaelusValidatorPoolArgs['obj']['__flashloan(uint64,address)void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['__flashloan(uint64,address)void']
      returns: CaelusValidatorPoolReturns['__flashloan(uint64,address)void']
    }>
    & Record<'checkBalance()void' | 'checkBalance', {
      argsObj: CaelusValidatorPoolArgs['obj']['checkBalance()void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['checkBalance()void']
      returns: CaelusValidatorPoolReturns['checkBalance()void']
    }>
    & Record<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' | 'goOnline', {
      argsObj: CaelusValidatorPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
      returns: CaelusValidatorPoolReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
    }>
    & Record<'goOffline()void' | 'goOffline', {
      argsObj: CaelusValidatorPoolArgs['obj']['goOffline()void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['goOffline()void']
      returns: CaelusValidatorPoolReturns['goOffline()void']
    }>
    & Record<'getEligibilityFlag()bool' | 'getEligibilityFlag', {
      argsObj: CaelusValidatorPoolArgs['obj']['getEligibilityFlag()bool']
      argsTuple: CaelusValidatorPoolArgs['tuple']['getEligibilityFlag()bool']
      returns: CaelusValidatorPoolReturns['getEligibilityFlag()bool']
    }>
    & Record<'migrateToPool(uint64)void' | 'migrateToPool', {
      argsObj: CaelusValidatorPoolArgs['obj']['migrateToPool(uint64)void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['migrateToPool(uint64)void']
      returns: CaelusValidatorPoolReturns['migrateToPool(uint64)void']
    }>
    & Record<'__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void' | '__mergeStateOnMigration', {
      argsObj: CaelusValidatorPoolArgs['obj']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void']
      returns: CaelusValidatorPoolReturns['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void']
    }>
    & Record<'claimLeftAlgo()void' | 'claimLeftAlgo', {
      argsObj: CaelusValidatorPoolArgs['obj']['claimLeftAlgo()void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['claimLeftAlgo()void']
      returns: CaelusValidatorPoolReturns['claimLeftAlgo()void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: CaelusValidatorPoolArgs['obj']['deleteApplication()void']
      argsTuple: CaelusValidatorPoolArgs['tuple']['deleteApplication()void']
      returns: CaelusValidatorPoolReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        creatorContractAppId: bigint
        validatorPoolContractVersion: bigint
        tokenId: bigint
        boostTokenId: bigint
        operatorAddress: BinaryState
        operatorCommit: bigint
        delegatedStake: bigint
        maxDelegatableStake: bigint
        status: bigint
        performanceCounter: bigint
        saturationBuffer: bigint
        lastRewardReport: bigint
        lastDelinquencyReport: bigint
        delinquencyScore: bigint
        balanceCheckpoint: bigint
        repaid: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CaelusValidatorPoolSignatures = keyof CaelusValidatorPoolTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CaelusValidatorPoolNonVoidMethodSignatures = keyof CaelusValidatorPoolTypes['methods'] extends infer T ? T extends keyof CaelusValidatorPoolTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CaelusValidatorPool smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CaelusValidatorPoolSignatures> = CaelusValidatorPoolTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CaelusValidatorPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CaelusValidatorPoolSignatures> = CaelusValidatorPoolTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CaelusValidatorPoolTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CaelusValidatorPoolCreateCallParams =
  | Expand<CallParams<CaelusValidatorPoolArgs['obj']['createApplication(uint64,address,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['createApplication(uint64,address,uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CaelusValidatorPoolArgs['obj']['createApplication(uint64,address,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['createApplication(uint64,address,uint64,uint64)void']> & {method: 'createApplication(uint64,address,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type CaelusValidatorPoolDeleteCallParams =
  | Expand<CallParams<CaelusValidatorPoolArgs['obj']['deleteApplication()void'] | CaelusValidatorPoolArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<CaelusValidatorPoolArgs['obj']['deleteApplication()void'] | CaelusValidatorPoolArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type CaelusValidatorPoolDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CaelusValidatorPoolCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: CaelusValidatorPoolDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CaelusValidatorPool smart contract
 */
export abstract class CaelusValidatorPoolParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CaelusValidatorPoolCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64,address,uint64,uint64)void':
            return CaelusValidatorPoolParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CaelusValidatorPool smart contract using the createApplication(uint64,address,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CaelusValidatorPoolArgs['obj']['createApplication(uint64,address,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['createApplication(uint64,address,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64,address,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.creatingContract, params.args.operatorAddress, params.args.contractVersion, params.args.tokenId],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends CaelusValidatorPoolDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return CaelusValidatorPoolParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the CaelusValidatorPool smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<CaelusValidatorPoolArgs['obj']['deleteApplication()void'] | CaelusValidatorPoolArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optIntoLST()void ABI method
   *
   * ARC4 PUBLIC METHODS
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optIntoLst(params: CallParams<CaelusValidatorPoolArgs['obj']['optIntoLST()void'] | CaelusValidatorPoolArgs['tuple']['optIntoLST()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optIntoLST()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the __addToOperatorCommit(pay)void ABI method
   *
   * followup operation called by the Caelus Admin to send the correct amount into the operator commit
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static __addToOperatorCommit(params: CallParams<CaelusValidatorPoolArgs['obj']['__addToOperatorCommit(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addToOperatorCommit(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: '__addToOperatorCommit(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.opStake],
    }
  }
  /**
   * Constructs a no op call for the __removeFromOperatorCommit(uint64,uint64)void ABI method
   *
   * Used by the node operator to remove from his stake amount for the node
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static __removeFromOperatorCommit(params: CallParams<CaelusValidatorPoolArgs['obj']['__removeFromOperatorCommit(uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['__removeFromOperatorCommit(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: '__removeFromOperatorCommit(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.claimRequest, params.args.claimRequestLst],
    }
  }
  /**
   * Constructs a no op call for the solveDelinquency(uint64)void ABI method
   *
  * Delinquent Validators need to propose a valid block to clear up their delinquency status.
  
  
  This method should be called when the delinquency score is below the threshold and the operator has proposed a block.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static solveDelinquency(params: CallParams<CaelusValidatorPoolArgs['obj']['solveDelinquency(uint64)void'] | CaelusValidatorPoolArgs['tuple']['solveDelinquency(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'solveDelinquency(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.block],
    }
  }
  /**
   * Constructs a no op call for the reportRewards(uint64)void ABI method
   *
   * Called by the node operator to report the rewards of a block proposed by the contract account.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static reportRewards(params: CallParams<CaelusValidatorPoolArgs['obj']['reportRewards(uint64)void'] | CaelusValidatorPoolArgs['tuple']['reportRewards(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reportRewards(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.block],
    }
  }
  /**
   * Constructs a no op call for the __addStake(pay)void ABI method
   *
  * FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO SEND THE DELEGATED STAKE TO THE NODE OPERATOR
  
  
  Receive delegated stake and update the delegation factors.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static __addStake(params: CallParams<CaelusValidatorPoolArgs['obj']['__addStake(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addStake(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: '__addStake(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txnWithStake],
    }
  }
  /**
   * Constructs a no op call for the __burnStake(uint64,address)void ABI method
   *
   * FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO CLAWBACK THE DELEGATED STAKE ON BURN OPERATION
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static __burnStake(params: CallParams<CaelusValidatorPoolArgs['obj']['__burnStake(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__burnStake(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: '__burnStake(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amountRequested, params.args.receiverBurn],
    }
  }
  /**
   * Constructs a no op call for the snitchValidator(uint64,(bool,bool,bool,bool,uint64))void ABI method
   *
   * Snitch another Validator Contract. A valid snitch will improve the performance counter.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static snitchValidator(params: CallParams<CaelusValidatorPoolArgs['obj']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void'] | CaelusValidatorPoolArgs['tuple']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'snitchValidator(uint64,(bool,bool,bool,bool,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appToSnitch, params.args.params],
    }
  }
  /**
   * Constructs a no op call for the getSnitched((bool,bool,bool,bool,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getSnitched(params: CallParams<CaelusValidatorPoolArgs['obj']['getSnitched((bool,bool,bool,bool,uint64))bool'] | CaelusValidatorPoolArgs['tuple']['getSnitched((bool,bool,bool,bool,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getSnitched((bool,bool,bool,bool,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.checks],
    }
  }
  /**
   * Constructs a no op call for the __flashloan(uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static __flashloan(params: CallParams<CaelusValidatorPoolArgs['obj']['__flashloan(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__flashloan(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: '__flashloan(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the checkBalance()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkBalance(params: CallParams<CaelusValidatorPoolArgs['obj']['checkBalance()void'] | CaelusValidatorPoolArgs['tuple']['checkBalance()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'checkBalance()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static goOnline(params: CallParams<CaelusValidatorPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.feePayment, params.args.votePk, params.args.selectionPk, params.args.stateProofPk, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution],
    }
  }
  /**
   * Constructs a no op call for the goOffline()void ABI method
   *
  * Set the contract account to offline so that it doesn't participate in consensus anymore.
  No force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status
  Once the account is set offline the method ensures that it cannot be delegated to.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static goOffline(params: CallParams<CaelusValidatorPoolArgs['obj']['goOffline()void'] | CaelusValidatorPoolArgs['tuple']['goOffline()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'goOffline()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getEligibilityFlag()bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getEligibilityFlag(params: CallParams<CaelusValidatorPoolArgs['obj']['getEligibilityFlag()bool'] | CaelusValidatorPoolArgs['tuple']['getEligibilityFlag()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getEligibilityFlag()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the migrateToPool(uint64)void ABI method
   *
   * Migrate the validator pool to a new pool. Useful to migrate this validator pool to a new version of the contract without losing the state.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static migrateToPool(params: CallParams<CaelusValidatorPoolArgs['obj']['migrateToPool(uint64)void'] | CaelusValidatorPoolArgs['tuple']['migrateToPool(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'migrateToPool(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newPool],
    }
  }
  /**
   * Constructs a no op call for the __mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void ABI method
   *
   * FOLLOWUP OPERATION Receiving call from the old pool to merge the state into the new pool.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static __mergeStateOnMigration(params: CallParams<CaelusValidatorPoolArgs['obj']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void'] | CaelusValidatorPoolArgs['tuple']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: '__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.opCommit, params.args.delegatedAmount, params.args.performanceCounter, params.args.stakeTxn, params.args.lstTxn],
    }
  }
  /**
   * Constructs a no op call for the claimLeftAlgo()void ABI method
   *
   * Used by anyone to clear up remaining Algo outside of stake counters back to the Caelus Admin contract to be redistributed
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimLeftAlgo(params: CallParams<CaelusValidatorPoolArgs['obj']['claimLeftAlgo()void'] | CaelusValidatorPoolArgs['tuple']['claimLeftAlgo()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimLeftAlgo()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CaelusValidatorPool smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CaelusValidatorPoolFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CaelusValidatorPoolFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CaelusValidatorPoolClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CaelusValidatorPoolClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CaelusValidatorPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CaelusValidatorPoolDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CaelusValidatorPoolParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CaelusValidatorPoolCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? CaelusValidatorPoolParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (CaelusValidatorPoolDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CaelusValidatorPoolClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusValidatorPool smart contract using the createApplication(uint64,address,uint64,uint64)void ABI method.
       *
       * createApplication method called at creation, initializes some globalKey values
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CaelusValidatorPoolArgs['obj']['createApplication(uint64,address,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['createApplication(uint64,address,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(CaelusValidatorPoolParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the CaelusValidatorPool smart contract using the deleteApplication()void ABI method.
       *
       * Node operator can close the Validator and get back his stake. Delegated stake is put back into the Caelus Admin contract.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<CaelusValidatorPoolArgs['obj']['deleteApplication()void'] | CaelusValidatorPoolArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(CaelusValidatorPoolParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusValidatorPool smart contract using the createApplication(uint64,address,uint64,uint64)void ABI method.
       *
       * createApplication method called at creation, initializes some globalKey values
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CaelusValidatorPoolArgs['obj']['createApplication(uint64,address,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['createApplication(uint64,address,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(CaelusValidatorPoolParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CaelusValidatorPool smart contract using an ABI method call using the createApplication(uint64,address,uint64,uint64)void ABI method.
       *
       * createApplication method called at creation, initializes some globalKey values
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CaelusValidatorPoolArgs['obj']['createApplication(uint64,address,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['createApplication(uint64,address,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(CaelusValidatorPoolParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CaelusValidatorPoolReturns['createApplication(uint64,address,uint64,uint64)void']) }, appClient: new CaelusValidatorPoolClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CaelusValidatorPool smart contract
 */
export class CaelusValidatorPoolClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CaelusValidatorPoolClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CaelusValidatorPool app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CaelusValidatorPoolClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CaelusValidatorPoolNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CaelusValidatorPoolClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CaelusValidatorPoolClient> {
    return new CaelusValidatorPoolClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CaelusValidatorPoolClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CaelusValidatorPoolClient> {
    return new CaelusValidatorPoolClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the CaelusValidatorPool smart contract using the `deleteApplication()void` ABI method.
       *
       * Node operator can close the Validator and get back his stake. Delegated stake is put back into the Caelus Admin contract.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<CaelusValidatorPoolArgs['obj']['deleteApplication()void'] | CaelusValidatorPoolArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(CaelusValidatorPoolParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CaelusValidatorPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `optIntoLST()void` ABI method.
     *
     * ARC4 PUBLIC METHODS
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optIntoLst: (params: CallParams<CaelusValidatorPoolArgs['obj']['optIntoLST()void'] | CaelusValidatorPoolArgs['tuple']['optIntoLST()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.optIntoLst(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__addToOperatorCommit(pay)void` ABI method.
     *
     * followup operation called by the Caelus Admin to send the correct amount into the operator commit
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    __addToOperatorCommit: (params: CallParams<CaelusValidatorPoolArgs['obj']['__addToOperatorCommit(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addToOperatorCommit(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.__addToOperatorCommit(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__removeFromOperatorCommit(uint64,uint64)void` ABI method.
     *
     * Used by the node operator to remove from his stake amount for the node
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    __removeFromOperatorCommit: (params: CallParams<CaelusValidatorPoolArgs['obj']['__removeFromOperatorCommit(uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['__removeFromOperatorCommit(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.__removeFromOperatorCommit(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `solveDelinquency(uint64)void` ABI method.
     *
    * Delinquent Validators need to propose a valid block to clear up their delinquency status.
    
    
    This method should be called when the delinquency score is below the threshold and the operator has proposed a block.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    solveDelinquency: (params: CallParams<CaelusValidatorPoolArgs['obj']['solveDelinquency(uint64)void'] | CaelusValidatorPoolArgs['tuple']['solveDelinquency(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.solveDelinquency(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `reportRewards(uint64)void` ABI method.
     *
     * Called by the node operator to report the rewards of a block proposed by the contract account.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    reportRewards: (params: CallParams<CaelusValidatorPoolArgs['obj']['reportRewards(uint64)void'] | CaelusValidatorPoolArgs['tuple']['reportRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.reportRewards(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__addStake(pay)void` ABI method.
     *
    * FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO SEND THE DELEGATED STAKE TO THE NODE OPERATOR
    
    
    Receive delegated stake and update the delegation factors.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    __addStake: (params: CallParams<CaelusValidatorPoolArgs['obj']['__addStake(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addStake(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.__addStake(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__burnStake(uint64,address)void` ABI method.
     *
     * FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO CLAWBACK THE DELEGATED STAKE ON BURN OPERATION
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    __burnStake: (params: CallParams<CaelusValidatorPoolArgs['obj']['__burnStake(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__burnStake(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.__burnStake(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `snitchValidator(uint64,(bool,bool,bool,bool,uint64))void` ABI method.
     *
     * Snitch another Validator Contract. A valid snitch will improve the performance counter.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    snitchValidator: (params: CallParams<CaelusValidatorPoolArgs['obj']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void'] | CaelusValidatorPoolArgs['tuple']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.snitchValidator(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `getSnitched((bool,bool,bool,bool,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getSnitched: (params: CallParams<CaelusValidatorPoolArgs['obj']['getSnitched((bool,bool,bool,bool,uint64))bool'] | CaelusValidatorPoolArgs['tuple']['getSnitched((bool,bool,bool,bool,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.getSnitched(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__flashloan(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    __flashloan: (params: CallParams<CaelusValidatorPoolArgs['obj']['__flashloan(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__flashloan(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.__flashloan(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `checkBalance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkBalance: (params: CallParams<CaelusValidatorPoolArgs['obj']['checkBalance()void'] | CaelusValidatorPoolArgs['tuple']['checkBalance()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.checkBalance(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
     * Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    goOnline: (params: CallParams<CaelusValidatorPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.goOnline(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `goOffline()void` ABI method.
     *
    * Set the contract account to offline so that it doesn't participate in consensus anymore.
    No force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status
    Once the account is set offline the method ensures that it cannot be delegated to.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    goOffline: (params: CallParams<CaelusValidatorPoolArgs['obj']['goOffline()void'] | CaelusValidatorPoolArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.goOffline(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `getEligibilityFlag()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getEligibilityFlag: (params: CallParams<CaelusValidatorPoolArgs['obj']['getEligibilityFlag()bool'] | CaelusValidatorPoolArgs['tuple']['getEligibilityFlag()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.getEligibilityFlag(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `migrateToPool(uint64)void` ABI method.
     *
     * Migrate the validator pool to a new pool. Useful to migrate this validator pool to a new version of the contract without losing the state.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    migrateToPool: (params: CallParams<CaelusValidatorPoolArgs['obj']['migrateToPool(uint64)void'] | CaelusValidatorPoolArgs['tuple']['migrateToPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.migrateToPool(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void` ABI method.
     *
     * FOLLOWUP OPERATION Receiving call from the old pool to merge the state into the new pool.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    __mergeStateOnMigration: (params: CallParams<CaelusValidatorPoolArgs['obj']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void'] | CaelusValidatorPoolArgs['tuple']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.__mergeStateOnMigration(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `claimLeftAlgo()void` ABI method.
     *
     * Used by anyone to clear up remaining Algo outside of stake counters back to the Caelus Admin contract to be redistributed
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimLeftAlgo: (params: CallParams<CaelusValidatorPoolArgs['obj']['claimLeftAlgo()void'] | CaelusValidatorPoolArgs['tuple']['claimLeftAlgo()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CaelusValidatorPoolParamsFactory.claimLeftAlgo(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the CaelusValidatorPool smart contract using the `deleteApplication()void` ABI method.
       *
       * Node operator can close the Validator and get back his stake. Delegated stake is put back into the Caelus Admin contract.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<CaelusValidatorPoolArgs['obj']['deleteApplication()void'] | CaelusValidatorPoolArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(CaelusValidatorPoolParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CaelusValidatorPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `optIntoLST()void` ABI method.
     *
     * ARC4 PUBLIC METHODS
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optIntoLst: (params: CallParams<CaelusValidatorPoolArgs['obj']['optIntoLST()void'] | CaelusValidatorPoolArgs['tuple']['optIntoLST()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.optIntoLst(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__addToOperatorCommit(pay)void` ABI method.
     *
     * followup operation called by the Caelus Admin to send the correct amount into the operator commit
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    __addToOperatorCommit: (params: CallParams<CaelusValidatorPoolArgs['obj']['__addToOperatorCommit(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addToOperatorCommit(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.__addToOperatorCommit(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__removeFromOperatorCommit(uint64,uint64)void` ABI method.
     *
     * Used by the node operator to remove from his stake amount for the node
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    __removeFromOperatorCommit: (params: CallParams<CaelusValidatorPoolArgs['obj']['__removeFromOperatorCommit(uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['__removeFromOperatorCommit(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.__removeFromOperatorCommit(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `solveDelinquency(uint64)void` ABI method.
     *
    * Delinquent Validators need to propose a valid block to clear up their delinquency status.
    
    
    This method should be called when the delinquency score is below the threshold and the operator has proposed a block.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    solveDelinquency: (params: CallParams<CaelusValidatorPoolArgs['obj']['solveDelinquency(uint64)void'] | CaelusValidatorPoolArgs['tuple']['solveDelinquency(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.solveDelinquency(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `reportRewards(uint64)void` ABI method.
     *
     * Called by the node operator to report the rewards of a block proposed by the contract account.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    reportRewards: (params: CallParams<CaelusValidatorPoolArgs['obj']['reportRewards(uint64)void'] | CaelusValidatorPoolArgs['tuple']['reportRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.reportRewards(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__addStake(pay)void` ABI method.
     *
    * FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO SEND THE DELEGATED STAKE TO THE NODE OPERATOR
    
    
    Receive delegated stake and update the delegation factors.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    __addStake: (params: CallParams<CaelusValidatorPoolArgs['obj']['__addStake(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addStake(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.__addStake(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__burnStake(uint64,address)void` ABI method.
     *
     * FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO CLAWBACK THE DELEGATED STAKE ON BURN OPERATION
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    __burnStake: (params: CallParams<CaelusValidatorPoolArgs['obj']['__burnStake(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__burnStake(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.__burnStake(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `snitchValidator(uint64,(bool,bool,bool,bool,uint64))void` ABI method.
     *
     * Snitch another Validator Contract. A valid snitch will improve the performance counter.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    snitchValidator: (params: CallParams<CaelusValidatorPoolArgs['obj']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void'] | CaelusValidatorPoolArgs['tuple']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.snitchValidator(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `getSnitched((bool,bool,bool,bool,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getSnitched: (params: CallParams<CaelusValidatorPoolArgs['obj']['getSnitched((bool,bool,bool,bool,uint64))bool'] | CaelusValidatorPoolArgs['tuple']['getSnitched((bool,bool,bool,bool,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.getSnitched(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__flashloan(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    __flashloan: (params: CallParams<CaelusValidatorPoolArgs['obj']['__flashloan(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__flashloan(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.__flashloan(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `checkBalance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkBalance: (params: CallParams<CaelusValidatorPoolArgs['obj']['checkBalance()void'] | CaelusValidatorPoolArgs['tuple']['checkBalance()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.checkBalance(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
     * Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    goOnline: (params: CallParams<CaelusValidatorPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.goOnline(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `goOffline()void` ABI method.
     *
    * Set the contract account to offline so that it doesn't participate in consensus anymore.
    No force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status
    Once the account is set offline the method ensures that it cannot be delegated to.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    goOffline: (params: CallParams<CaelusValidatorPoolArgs['obj']['goOffline()void'] | CaelusValidatorPoolArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.goOffline(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `getEligibilityFlag()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getEligibilityFlag: (params: CallParams<CaelusValidatorPoolArgs['obj']['getEligibilityFlag()bool'] | CaelusValidatorPoolArgs['tuple']['getEligibilityFlag()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.getEligibilityFlag(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `migrateToPool(uint64)void` ABI method.
     *
     * Migrate the validator pool to a new pool. Useful to migrate this validator pool to a new version of the contract without losing the state.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    migrateToPool: (params: CallParams<CaelusValidatorPoolArgs['obj']['migrateToPool(uint64)void'] | CaelusValidatorPoolArgs['tuple']['migrateToPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.migrateToPool(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void` ABI method.
     *
     * FOLLOWUP OPERATION Receiving call from the old pool to merge the state into the new pool.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    __mergeStateOnMigration: (params: CallParams<CaelusValidatorPoolArgs['obj']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void'] | CaelusValidatorPoolArgs['tuple']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.__mergeStateOnMigration(params))
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `claimLeftAlgo()void` ABI method.
     *
     * Used by anyone to clear up remaining Algo outside of stake counters back to the Caelus Admin contract to be redistributed
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimLeftAlgo: (params: CallParams<CaelusValidatorPoolArgs['obj']['claimLeftAlgo()void'] | CaelusValidatorPoolArgs['tuple']['claimLeftAlgo()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CaelusValidatorPoolParamsFactory.claimLeftAlgo(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the CaelusValidatorPool smart contract using the `deleteApplication()void` ABI method.
       *
       * Node operator can close the Validator and get back his stake. Delegated stake is put back into the Caelus Admin contract.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<CaelusValidatorPoolArgs['obj']['deleteApplication()void'] | CaelusValidatorPoolArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(CaelusValidatorPoolParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CaelusValidatorPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `optIntoLST()void` ABI method.
     *
     * ARC4 PUBLIC METHODS
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optIntoLst: async (params: CallParams<CaelusValidatorPoolArgs['obj']['optIntoLST()void'] | CaelusValidatorPoolArgs['tuple']['optIntoLST()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.optIntoLst(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['optIntoLST()void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__addToOperatorCommit(pay)void` ABI method.
     *
     * followup operation called by the Caelus Admin to send the correct amount into the operator commit
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    __addToOperatorCommit: async (params: CallParams<CaelusValidatorPoolArgs['obj']['__addToOperatorCommit(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addToOperatorCommit(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.__addToOperatorCommit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['__addToOperatorCommit(pay)void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__removeFromOperatorCommit(uint64,uint64)void` ABI method.
     *
     * Used by the node operator to remove from his stake amount for the node
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    __removeFromOperatorCommit: async (params: CallParams<CaelusValidatorPoolArgs['obj']['__removeFromOperatorCommit(uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['__removeFromOperatorCommit(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.__removeFromOperatorCommit(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['__removeFromOperatorCommit(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `solveDelinquency(uint64)void` ABI method.
     *
    * Delinquent Validators need to propose a valid block to clear up their delinquency status.
    
    
    This method should be called when the delinquency score is below the threshold and the operator has proposed a block.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    solveDelinquency: async (params: CallParams<CaelusValidatorPoolArgs['obj']['solveDelinquency(uint64)void'] | CaelusValidatorPoolArgs['tuple']['solveDelinquency(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.solveDelinquency(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['solveDelinquency(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `reportRewards(uint64)void` ABI method.
     *
     * Called by the node operator to report the rewards of a block proposed by the contract account.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    reportRewards: async (params: CallParams<CaelusValidatorPoolArgs['obj']['reportRewards(uint64)void'] | CaelusValidatorPoolArgs['tuple']['reportRewards(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.reportRewards(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['reportRewards(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__addStake(pay)void` ABI method.
     *
    * FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO SEND THE DELEGATED STAKE TO THE NODE OPERATOR
    
    
    Receive delegated stake and update the delegation factors.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    __addStake: async (params: CallParams<CaelusValidatorPoolArgs['obj']['__addStake(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addStake(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.__addStake(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['__addStake(pay)void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__burnStake(uint64,address)void` ABI method.
     *
     * FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO CLAWBACK THE DELEGATED STAKE ON BURN OPERATION
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    __burnStake: async (params: CallParams<CaelusValidatorPoolArgs['obj']['__burnStake(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__burnStake(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.__burnStake(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['__burnStake(uint64,address)void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `snitchValidator(uint64,(bool,bool,bool,bool,uint64))void` ABI method.
     *
     * Snitch another Validator Contract. A valid snitch will improve the performance counter.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    snitchValidator: async (params: CallParams<CaelusValidatorPoolArgs['obj']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void'] | CaelusValidatorPoolArgs['tuple']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.snitchValidator(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `getSnitched((bool,bool,bool,bool,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getSnitched: async (params: CallParams<CaelusValidatorPoolArgs['obj']['getSnitched((bool,bool,bool,bool,uint64))bool'] | CaelusValidatorPoolArgs['tuple']['getSnitched((bool,bool,bool,bool,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.getSnitched(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['getSnitched((bool,bool,bool,bool,uint64))bool'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__flashloan(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    __flashloan: async (params: CallParams<CaelusValidatorPoolArgs['obj']['__flashloan(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__flashloan(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.__flashloan(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['__flashloan(uint64,address)void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `checkBalance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkBalance: async (params: CallParams<CaelusValidatorPoolArgs['obj']['checkBalance()void'] | CaelusValidatorPoolArgs['tuple']['checkBalance()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.checkBalance(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['checkBalance()void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
     * Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    goOnline: async (params: CallParams<CaelusValidatorPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.goOnline(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `goOffline()void` ABI method.
     *
    * Set the contract account to offline so that it doesn't participate in consensus anymore.
    No force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status
    Once the account is set offline the method ensures that it cannot be delegated to.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    goOffline: async (params: CallParams<CaelusValidatorPoolArgs['obj']['goOffline()void'] | CaelusValidatorPoolArgs['tuple']['goOffline()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.goOffline(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['goOffline()void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `getEligibilityFlag()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getEligibilityFlag: async (params: CallParams<CaelusValidatorPoolArgs['obj']['getEligibilityFlag()bool'] | CaelusValidatorPoolArgs['tuple']['getEligibilityFlag()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.getEligibilityFlag(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['getEligibilityFlag()bool'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `migrateToPool(uint64)void` ABI method.
     *
     * Migrate the validator pool to a new pool. Useful to migrate this validator pool to a new version of the contract without losing the state.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    migrateToPool: async (params: CallParams<CaelusValidatorPoolArgs['obj']['migrateToPool(uint64)void'] | CaelusValidatorPoolArgs['tuple']['migrateToPool(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.migrateToPool(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['migrateToPool(uint64)void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void` ABI method.
     *
     * FOLLOWUP OPERATION Receiving call from the old pool to merge the state into the new pool.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    __mergeStateOnMigration: async (params: CallParams<CaelusValidatorPoolArgs['obj']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void'] | CaelusValidatorPoolArgs['tuple']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.__mergeStateOnMigration(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void'])}
    },

    /**
     * Makes a call to the CaelusValidatorPool smart contract using the `claimLeftAlgo()void` ABI method.
     *
     * Used by anyone to clear up remaining Algo outside of stake counters back to the Caelus Admin contract to be redistributed
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimLeftAlgo: async (params: CallParams<CaelusValidatorPoolArgs['obj']['claimLeftAlgo()void'] | CaelusValidatorPoolArgs['tuple']['claimLeftAlgo()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CaelusValidatorPoolParamsFactory.claimLeftAlgo(params))
      return {...result, return: result.return as unknown as (undefined | CaelusValidatorPoolReturns['claimLeftAlgo()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CaelusValidatorPoolClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CaelusValidatorPool app
   */
  state = {
    /**
     * Methods to access global state for the current CaelusValidatorPool app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          creatorContractAppId: result.creatorContractAppID,
          validatorPoolContractVersion: result.validatorPoolContractVersion,
          tokenId: result.tokenId,
          boostTokenId: result.boostTokenID,
          operatorAddress: new BinaryStateValue(result.operatorAddress),
          operatorCommit: result.operatorCommit,
          delegatedStake: result.delegatedStake,
          maxDelegatableStake: result.maxDelegatableStake,
          status: result.status,
          performanceCounter: result.performanceCounter,
          saturationBuffer: result.saturationBuffer,
          lastRewardReport: result.lastRewardReport,
          lastDelinquencyReport: result.lastDelinquencyReport,
          delinquencyScore: result.delinquencyScore,
          balanceCheckpoint: result.balanceCheckpoint,
          repaid: new BinaryStateValue(result.repaid),
        }
      },
      /**
       * Get the current value of the creatorContractAppID key in global state
       */
      creatorContractAppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("creatorContractAppId")) as bigint | undefined },
      /**
       * Get the current value of the validatorPoolContractVersion key in global state
       */
      validatorPoolContractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("validatorPoolContractVersion")) as bigint | undefined },
      /**
       * Get the current value of the tokenId key in global state
       */
      tokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tokenId")) as bigint | undefined },
      /**
       * Get the current value of the boostTokenID key in global state
       */
      boostTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("boostTokenId")) as bigint | undefined },
      /**
       * Get the current value of the operatorAddress key in global state
       */
      operatorAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("operatorAddress")) as Uint8Array | undefined) },
      /**
       * Get the current value of the operatorCommit key in global state
       */
      operatorCommit: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("operatorCommit")) as bigint | undefined },
      /**
       * Get the current value of the delegatedStake key in global state
       */
      delegatedStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("delegatedStake")) as bigint | undefined },
      /**
       * Get the current value of the maxDelegatableStake key in global state
       */
      maxDelegatableStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxDelegatableStake")) as bigint | undefined },
      /**
       * Get the current value of the status key in global state
       */
      status: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("status")) as bigint | undefined },
      /**
       * Get the current value of the performanceCounter key in global state
       */
      performanceCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("performanceCounter")) as bigint | undefined },
      /**
       * Get the current value of the saturationBuffer key in global state
       */
      saturationBuffer: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("saturationBuffer")) as bigint | undefined },
      /**
       * Get the current value of the lastRewardReport key in global state
       */
      lastRewardReport: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastRewardReport")) as bigint | undefined },
      /**
       * Get the current value of the lastDelinquencyReport key in global state
       */
      lastDelinquencyReport: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastDelinquencyReport")) as bigint | undefined },
      /**
       * Get the current value of the delinquencyScore key in global state
       */
      delinquencyScore: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("delinquencyScore")) as bigint | undefined },
      /**
       * Get the current value of the balanceCheckpoint key in global state
       */
      balanceCheckpoint: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("balanceCheckpoint")) as bigint | undefined },
      /**
       * Get the current value of the repaid key in global state
       */
      repaid: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("repaid")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): CaelusValidatorPoolComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a optIntoLST()void method call against the CaelusValidatorPool contract
       */
      optIntoLst(params: CallParams<CaelusValidatorPoolArgs['obj']['optIntoLST()void'] | CaelusValidatorPoolArgs['tuple']['optIntoLST()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIntoLst(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a __addToOperatorCommit(pay)void method call against the CaelusValidatorPool contract
       */
      __addToOperatorCommit(params: CallParams<CaelusValidatorPoolArgs['obj']['__addToOperatorCommit(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addToOperatorCommit(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.__addToOperatorCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a __removeFromOperatorCommit(uint64,uint64)void method call against the CaelusValidatorPool contract
       */
      __removeFromOperatorCommit(params: CallParams<CaelusValidatorPoolArgs['obj']['__removeFromOperatorCommit(uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['__removeFromOperatorCommit(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.__removeFromOperatorCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a solveDelinquency(uint64)void method call against the CaelusValidatorPool contract
       */
      solveDelinquency(params: CallParams<CaelusValidatorPoolArgs['obj']['solveDelinquency(uint64)void'] | CaelusValidatorPoolArgs['tuple']['solveDelinquency(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.solveDelinquency(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reportRewards(uint64)void method call against the CaelusValidatorPool contract
       */
      reportRewards(params: CallParams<CaelusValidatorPoolArgs['obj']['reportRewards(uint64)void'] | CaelusValidatorPoolArgs['tuple']['reportRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.reportRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a __addStake(pay)void method call against the CaelusValidatorPool contract
       */
      __addStake(params: CallParams<CaelusValidatorPoolArgs['obj']['__addStake(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addStake(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.__addStake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a __burnStake(uint64,address)void method call against the CaelusValidatorPool contract
       */
      __burnStake(params: CallParams<CaelusValidatorPoolArgs['obj']['__burnStake(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__burnStake(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.__burnStake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a snitchValidator(uint64,(bool,bool,bool,bool,uint64))void method call against the CaelusValidatorPool contract
       */
      snitchValidator(params: CallParams<CaelusValidatorPoolArgs['obj']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void'] | CaelusValidatorPoolArgs['tuple']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.snitchValidator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getSnitched((bool,bool,bool,bool,uint64))bool method call against the CaelusValidatorPool contract
       */
      getSnitched(params: CallParams<CaelusValidatorPoolArgs['obj']['getSnitched((bool,bool,bool,bool,uint64))bool'] | CaelusValidatorPoolArgs['tuple']['getSnitched((bool,bool,bool,bool,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getSnitched(params)))
        resultMappers.push((v) => client.decodeReturnValue('getSnitched((bool,bool,bool,bool,uint64))bool', v))
        return this
      },
      /**
       * Add a __flashloan(uint64,address)void method call against the CaelusValidatorPool contract
       */
      __flashloan(params: CallParams<CaelusValidatorPoolArgs['obj']['__flashloan(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__flashloan(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.__flashloan(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a checkBalance()void method call against the CaelusValidatorPool contract
       */
      checkBalance(params: CallParams<CaelusValidatorPoolArgs['obj']['checkBalance()void'] | CaelusValidatorPoolArgs['tuple']['checkBalance()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkBalance(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void method call against the CaelusValidatorPool contract
       */
      goOnline(params: CallParams<CaelusValidatorPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.goOnline(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a goOffline()void method call against the CaelusValidatorPool contract
       */
      goOffline(params: CallParams<CaelusValidatorPoolArgs['obj']['goOffline()void'] | CaelusValidatorPoolArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.goOffline(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getEligibilityFlag()bool method call against the CaelusValidatorPool contract
       */
      getEligibilityFlag(params: CallParams<CaelusValidatorPoolArgs['obj']['getEligibilityFlag()bool'] | CaelusValidatorPoolArgs['tuple']['getEligibilityFlag()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getEligibilityFlag(params)))
        resultMappers.push((v) => client.decodeReturnValue('getEligibilityFlag()bool', v))
        return this
      },
      /**
       * Add a migrateToPool(uint64)void method call against the CaelusValidatorPool contract
       */
      migrateToPool(params: CallParams<CaelusValidatorPoolArgs['obj']['migrateToPool(uint64)void'] | CaelusValidatorPoolArgs['tuple']['migrateToPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.migrateToPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a __mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void method call against the CaelusValidatorPool contract
       */
      __mergeStateOnMigration(params: CallParams<CaelusValidatorPoolArgs['obj']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void'] | CaelusValidatorPoolArgs['tuple']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.__mergeStateOnMigration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimLeftAlgo()void method call against the CaelusValidatorPool contract
       */
      claimLeftAlgo(params: CallParams<CaelusValidatorPoolArgs['obj']['claimLeftAlgo()void'] | CaelusValidatorPoolArgs['tuple']['claimLeftAlgo()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimLeftAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<CaelusValidatorPoolArgs['obj']['deleteApplication()void'] | CaelusValidatorPoolArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the CaelusValidatorPool contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CaelusValidatorPoolComposer
  }
}
export type CaelusValidatorPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optIntoLST()void ABI method.
   *
   * ARC4 PUBLIC METHODS
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIntoLst(params?: CallParams<CaelusValidatorPoolArgs['obj']['optIntoLST()void'] | CaelusValidatorPoolArgs['tuple']['optIntoLST()void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['optIntoLST()void'] | undefined]>

  /**
   * Calls the __addToOperatorCommit(pay)void ABI method.
   *
   * followup operation called by the Caelus Admin to send the correct amount into the operator commit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  __addToOperatorCommit(params?: CallParams<CaelusValidatorPoolArgs['obj']['__addToOperatorCommit(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addToOperatorCommit(pay)void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['__addToOperatorCommit(pay)void'] | undefined]>

  /**
   * Calls the __removeFromOperatorCommit(uint64,uint64)void ABI method.
   *
   * Used by the node operator to remove from his stake amount for the node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  __removeFromOperatorCommit(params?: CallParams<CaelusValidatorPoolArgs['obj']['__removeFromOperatorCommit(uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['__removeFromOperatorCommit(uint64,uint64)void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['__removeFromOperatorCommit(uint64,uint64)void'] | undefined]>

  /**
   * Calls the solveDelinquency(uint64)void ABI method.
   *
  * Delinquent Validators need to propose a valid block to clear up their delinquency status.
  
  
  This method should be called when the delinquency score is below the threshold and the operator has proposed a block.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  solveDelinquency(params?: CallParams<CaelusValidatorPoolArgs['obj']['solveDelinquency(uint64)void'] | CaelusValidatorPoolArgs['tuple']['solveDelinquency(uint64)void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['solveDelinquency(uint64)void'] | undefined]>

  /**
   * Calls the reportRewards(uint64)void ABI method.
   *
   * Called by the node operator to report the rewards of a block proposed by the contract account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reportRewards(params?: CallParams<CaelusValidatorPoolArgs['obj']['reportRewards(uint64)void'] | CaelusValidatorPoolArgs['tuple']['reportRewards(uint64)void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['reportRewards(uint64)void'] | undefined]>

  /**
   * Calls the __addStake(pay)void ABI method.
   *
  * FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO SEND THE DELEGATED STAKE TO THE NODE OPERATOR
  
  
  Receive delegated stake and update the delegation factors.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  __addStake(params?: CallParams<CaelusValidatorPoolArgs['obj']['__addStake(pay)void'] | CaelusValidatorPoolArgs['tuple']['__addStake(pay)void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['__addStake(pay)void'] | undefined]>

  /**
   * Calls the __burnStake(uint64,address)void ABI method.
   *
   * FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO CLAWBACK THE DELEGATED STAKE ON BURN OPERATION
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  __burnStake(params?: CallParams<CaelusValidatorPoolArgs['obj']['__burnStake(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__burnStake(uint64,address)void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['__burnStake(uint64,address)void'] | undefined]>

  /**
   * Calls the snitchValidator(uint64,(bool,bool,bool,bool,uint64))void ABI method.
   *
   * Snitch another Validator Contract. A valid snitch will improve the performance counter.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  snitchValidator(params?: CallParams<CaelusValidatorPoolArgs['obj']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void'] | CaelusValidatorPoolArgs['tuple']['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['snitchValidator(uint64,(bool,bool,bool,bool,uint64))void'] | undefined]>

  /**
   * Calls the getSnitched((bool,bool,bool,bool,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSnitched(params?: CallParams<CaelusValidatorPoolArgs['obj']['getSnitched((bool,bool,bool,bool,uint64))bool'] | CaelusValidatorPoolArgs['tuple']['getSnitched((bool,bool,bool,bool,uint64))bool']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['getSnitched((bool,bool,bool,bool,uint64))bool'] | undefined]>

  /**
   * Calls the __flashloan(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  __flashloan(params?: CallParams<CaelusValidatorPoolArgs['obj']['__flashloan(uint64,address)void'] | CaelusValidatorPoolArgs['tuple']['__flashloan(uint64,address)void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['__flashloan(uint64,address)void'] | undefined]>

  /**
   * Calls the checkBalance()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkBalance(params?: CallParams<CaelusValidatorPoolArgs['obj']['checkBalance()void'] | CaelusValidatorPoolArgs['tuple']['checkBalance()void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['checkBalance()void'] | undefined]>

  /**
   * Calls the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOnline(params?: CallParams<CaelusValidatorPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | CaelusValidatorPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the goOffline()void ABI method.
   *
  * Set the contract account to offline so that it doesn't participate in consensus anymore.
  No force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status
  Once the account is set offline the method ensures that it cannot be delegated to.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOffline(params?: CallParams<CaelusValidatorPoolArgs['obj']['goOffline()void'] | CaelusValidatorPoolArgs['tuple']['goOffline()void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['goOffline()void'] | undefined]>

  /**
   * Calls the getEligibilityFlag()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEligibilityFlag(params?: CallParams<CaelusValidatorPoolArgs['obj']['getEligibilityFlag()bool'] | CaelusValidatorPoolArgs['tuple']['getEligibilityFlag()bool']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['getEligibilityFlag()bool'] | undefined]>

  /**
   * Calls the migrateToPool(uint64)void ABI method.
   *
   * Migrate the validator pool to a new pool. Useful to migrate this validator pool to a new version of the contract without losing the state.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  migrateToPool(params?: CallParams<CaelusValidatorPoolArgs['obj']['migrateToPool(uint64)void'] | CaelusValidatorPoolArgs['tuple']['migrateToPool(uint64)void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['migrateToPool(uint64)void'] | undefined]>

  /**
   * Calls the __mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void ABI method.
   *
   * FOLLOWUP OPERATION Receiving call from the old pool to merge the state into the new pool.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  __mergeStateOnMigration(params?: CallParams<CaelusValidatorPoolArgs['obj']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void'] | CaelusValidatorPoolArgs['tuple']['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['__mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void'] | undefined]>

  /**
   * Calls the claimLeftAlgo()void ABI method.
   *
   * Used by anyone to clear up remaining Algo outside of stake counters back to the Caelus Admin contract to be redistributed
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimLeftAlgo(params?: CallParams<CaelusValidatorPoolArgs['obj']['claimLeftAlgo()void'] | CaelusValidatorPoolArgs['tuple']['claimLeftAlgo()void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['claimLeftAlgo()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the CaelusValidatorPool smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<CaelusValidatorPoolArgs['obj']['deleteApplication()void'] | CaelusValidatorPoolArgs['tuple']['deleteApplication()void']>): CaelusValidatorPoolComposer<[...TReturns, CaelusValidatorPoolReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CaelusValidatorPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CaelusValidatorPoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CaelusValidatorPoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CaelusValidatorPoolComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CaelusValidatorPoolComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CaelusValidatorPoolComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CaelusValidatorPoolComposerResults<TReturns>>
}
export type CaelusValidatorPoolComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

