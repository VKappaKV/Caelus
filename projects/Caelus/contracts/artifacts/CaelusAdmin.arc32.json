{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "MANAGER_createToken()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_updateBoostTokenID(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_changeBoostTier(uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBoostTier(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_changeManager(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_changeProtocolFee(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_lockContract()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_updatePoolContractCost(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_updatePoolContractProgram(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_writePoolContractProgram(uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addValidator(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintRequest(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnRequest(axfer,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintValidatorCommit(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeValidatorCommit(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnToDelinquentValidator(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reMintDelinquentCommit(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "declareRewards(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delegateStake(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchToBurn(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "multiSnitchToBurn(uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reStakeFromSnitch(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeFlashLoanRequest(pay,uint64[],uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getFLcounter()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc62_get_circulating_supply(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "validator_pool_version"
        },
        "validatorPoolContractCost": {
          "type": "uint64",
          "key": "validator_pool_cost"
        },
        "poolContractLock": {
          "type": "uint64",
          "key": "pool_contract_lock_flag"
        },
        "protocolFee": {
          "type": "uint64",
          "key": "protocol_fee"
        },
        "totalStake": {
          "type": "uint64",
          "key": "total_stake"
        },
        "pegRatio": {
          "type": "uint64",
          "key": "peg_ratio"
        },
        "tokenId": {
          "type": "uint64",
          "key": "token_id"
        },
        "boostTokenID": {
          "type": "uint64",
          "key": "boost_token_id"
        },
        "tiers": {
          "type": "bytes",
          "key": "tiers"
        },
        "tokenCirculatingSupply": {
          "type": "uint64",
          "key": "circulating_supply"
        },
        "highestBidder": {
          "type": "uint64",
          "key": "highest_bidder"
        },
        "burnQueue": {
          "type": "bytes",
          "key": "burn_queue"
        },
        "lastExhaustBlock": {
          "type": "uint64",
          "key": "last_exhaust_block"
        },
        "lastFlashloanBlock": {
          "type": "uint64",
          "key": "last_flashloan_block"
        },
        "flashLoanCounter": {
          "type": "uint64",
          "key": "flashloan_counter"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 13
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCmludGNibG9jayAwIDEgOCA2IDUgMiAxMDAwMDAgNCAzIDMyIDEwMApieXRlY2Jsb2NrIDB4IDB4NjI3NTcyNmU1ZjcxNzU2NTc1NjUgMHg3NDZmNmI2NTZlNWY2OTY0IDB4NjM2OTcyNjM3NTZjNjE3NDY5NmU2NzVmNzM3NTcwNzA2Yzc5IDB4NmQ2MTZlNjE2NzY1NzIgMHg2NjZjNjE3MzY4NmM2ZjYxNmU1ZjYzNmY3NTZlNzQ2NTcyIDB4NzQ2Zjc0NjE2YzVmNzM3NDYxNmI2NSAweDY4Njk2NzY4NjU3Mzc0NWY2MjY5NjQ2NDY1NzIgMHgwMCAweDc2NjE2YzY5NjQ2MTc0NmY3MjVmNzA2ZjZmNmM1Zjc2NjU3MjczNjk2ZjZlIDB4NzQ2OTY1NzI3MyAweDc2NjE2YzY5NjQ2MTc0NmY3MjVmNjE3MDcwNzI2Zjc2NjE2YzVmNzA3MjZmNjc3MjYxNmQgMHg3MzYxNzQ3NTcyNjE3NDY5NmY2ZTVmNjI3NTY2NjY2NTcyIDB4NmM2MTczNzQ1ZjY1Nzg2ODYxNzU3Mzc0NWY2MjZjNmY2MzZiIDB4NzA2NTY3NWY3MjYxNzQ2OTZmIDB4ZGNhZTc3MWIgMHg3MDZmNmY2YzVmNjM2ZjZlNzQ3MjYxNjM3NDVmNmM2ZjYzNmI1ZjY2NmM2MTY3IDB4NzY2MTZjNjk2NDYxNzQ2ZjcyNWY3MDZmNmY2YzVmNjM2ZjczNzQgMHg3MDcyNmY3NDZmNjM2ZjZjNWY2NjY1NjUgMHg3Mzc0NjE3NDc1NzMgMHgxNTFmN2M3NSAweDZjNjE3Mzc0NWY2NjZjNjE3MzY4NmM2ZjYxNmU1ZjYyNmM2ZjYzNmIgMHg2NDY1NmM2NTY3NjE3NDY1NjQ1ZjczNzQ2MTZiNjUgMHg2ZjcwNjU3MjYxNzQ2ZjcyNWY2MzZmNmQ2ZDY5NzQgMHg2ZjcwNjU3MjYxNzQ2ZjcyIDB4YjRiZmNhNTAgMHhkZmEyMDc2NCAweGQ0NTAyMTAwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNS41Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnRjIDMgLy8gNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY2FsbF9VcGRhdGVBcHBsaWNhdGlvbiAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo3OAoJLy8gdGhpcy5tYW5hZ2VyLnZhbHVlID0gdGhpcy5hcHAuY3JlYXRvcgoJYnl0ZWMgNCAvLyAgIm1hbmFnZXIiCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NzkKCS8vIHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0VmVyc2lvbi52YWx1ZSA9IDAKCWJ5dGVjIDkgLy8gICJ2YWxpZGF0b3JfcG9vbF92ZXJzaW9uIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6ODAKCS8vIHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0Q29zdC52YWx1ZSA9IFZBTElEQVRPUl9QT09MX0NPTlRSQUNUX01CUgoJYnl0ZWMgMTcgLy8gICJ2YWxpZGF0b3JfcG9vbF9jb3N0IgoJcHVzaGludCAxMTIwNTAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjgxCgkvLyB0aGlzLnByb3RvY29sRmVlLnZhbHVlID0gUFJPVE9DT0xfQ09NTUlTU0lPTgoJYnl0ZWMgMTggLy8gICJwcm90b2NvbF9mZWUiCglpbnRjIDcgLy8gNAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo4MwoJLy8gdGhpcy50b3RhbFN0YWtlLnZhbHVlID0gMAoJYnl0ZWMgNiAvLyAgInRvdGFsX3N0YWtlIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6ODQKCS8vIHRoaXMucGVnUmF0aW8udmFsdWUgPSAxICogU0NBTEUKCWJ5dGVjIDE0IC8vICAicGVnX3JhdGlvIgoJaW50YyA2IC8vIDEwMDAwMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo4NgoJLy8gdGhpcy50b2tlbklkLnZhbHVlID0gQXNzZXRJRC56ZXJvSW5kZXgKCWJ5dGVjIDIgLy8gICJ0b2tlbl9pZCIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjg3CgkvLyB0aGlzLnRva2VuQ2lyY3VsYXRpbmdTdXBwbHkudmFsdWUgPSAwCglieXRlYyAzIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6ODkKCS8vIHRoaXMuaGlnaGVzdEJpZGRlci52YWx1ZSA9IEFwcElELnplcm9JbmRleAoJYnl0ZWMgNyAvLyAgImhpZ2hlc3RfYmlkZGVyIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6OTEKCS8vIHRoaXMuYnVyblF1ZXVlLnZhbHVlID0gW10KCWJ5dGVjIDEgLy8gICJidXJuX3F1ZXVlIgoJcHVzaGJ5dGVzIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6OTMKCS8vIHRoaXMudGllcnMudmFsdWUgPSBbVkVTVF9USUVSXzQsIFZFU1RfVElFUl81XQoJYnl0ZWMgMTAgLy8gICJ0aWVycyIKCXB1c2hieXRlcyAweDAwMDIwMDAwMDAxNzQ4NzZlODAwMDAwMDAwMjJlY2IyNWMwMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo5NQoJLy8gdGhpcy5sYXN0RXhoYXVzdEJsb2NrLnZhbHVlID0gMAoJYnl0ZWMgMTMgLy8gICJsYXN0X2V4aGF1c3RfYmxvY2siCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gdXBkYXRlQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV91cGRhdGVBcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgdXBkYXRlQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgdXBkYXRlQXBwbGljYXRpb24KCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIHVwZGF0ZUFwcGxpY2F0aW9uKCk6IHZvaWQKLy8KLy8gVGVtcG9yYXJ5IG1ldGhvZCB0byB1cGRhdGUgdGhlIGFwcGxpY2F0aW9uLiBUaGlzIG1ldGhvZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4KLy8gSGVyZSB0byBpbXByb3ZlIG9wZW4gYmV0YSB0ZXN0aW5nIGl0ZXJhdGlvbnMuIFBsYW5uZWQgdG8gYmUgcmVtb3ZlZCBvbiBtYWlubmV0IGxhdW5jaC4KdXBkYXRlQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMDMKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFuYWdlci52YWx1ZSkKCXR4biBTZW5kZXIKCWJ5dGVjIDQgLy8gICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCXJldHN1YgoKLy8gTUFOQUdFUl9jcmVhdGVUb2tlbigpdm9pZAoqYWJpX3JvdXRlX01BTkFHRVJfY3JlYXRlVG9rZW46CgkvLyBleGVjdXRlIE1BTkFHRVJfY3JlYXRlVG9rZW4oKXZvaWQKCWNhbGxzdWIgTUFOQUdFUl9jcmVhdGVUb2tlbgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gTUFOQUdFUl9jcmVhdGVUb2tlbigpOiB2b2lkCi8vCi8vIE1BTkFHRVIgTUVUSE9EUwpNQU5BR0VSX2NyZWF0ZVRva2VuOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTExCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm1hbmFnZXIudmFsdWUsICdvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kJykKCXR4biBTZW5kZXIKCWJ5dGVjIDQgLy8gICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gb25seSB0aGUgbWFuYWdlciBjYW4gY2FsbCB0aGlzIG1ldGhvZAoJYXNzZXJ0CgoJLy8gKmlmMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjExMwoJLy8gdGhpcy50b2tlbklkLnZhbHVlID09PSBBc3NldElELnplcm9JbmRleAoJYnl0ZWMgMiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAwCgk9PQoJYnogKmlmMF9lbmQKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjExNAoJLy8gdGhpcy50b2tlbklkLnZhbHVlID0gc2VuZEFzc2V0Q3JlYXRpb24oewoJLy8gICAgICAgICBjb25maWdBc3NldFRvdGFsOiAxMCAqKiAxNiwKCS8vICAgICAgICAgY29uZmlnQXNzZXREZWNpbWFsczogNiwKCS8vICAgICAgICAgY29uZmlnQXNzZXRSZXNlcnZlOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICBjb25maWdBc3NldE1hbmFnZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgIGNvbmZpZ0Fzc2V0Q2xhd2JhY2s6IGdsb2JhbHMuemVyb0FkZHJlc3MsCgkvLyAgICAgICAgIGNvbmZpZ0Fzc2V0RnJlZXplOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgICBjb25maWdBc3NldERlZmF1bHRGcm96ZW46IDAsCgkvLyAgICAgICAgIGNvbmZpZ0Fzc2V0TmFtZTogJ1Zlc3RndWFyZCBBTEdPJywKCS8vICAgICAgICAgY29uZmlnQXNzZXRVbml0TmFtZTogJ3ZBTEdPJywKCS8vICAgICAgICAgY29uZmlnQXNzZXRVUkw6ICdodHRwczovL3Zlc3RpZ2UuZmknLAoJLy8gICAgICAgfSkKCWJ5dGVjIDIgLy8gICJ0b2tlbl9pZCIKCWl0eG5fYmVnaW4KCWludGMgOCAvLyAgYWNmZwoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjExNQoJLy8gY29uZmlnQXNzZXRUb3RhbDogMTAgKiogMTYKCXB1c2hpbnQgMTAKCXB1c2hpbnQgMTYKCWV4cAoJaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTE2CgkvLyBjb25maWdBc3NldERlY2ltYWxzOiA2CglpbnRjIDMgLy8gNgoJaXR4bl9maWVsZCBDb25maWdBc3NldERlY2ltYWxzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTE3CgkvLyBjb25maWdBc3NldFJlc2VydmU6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0UmVzZXJ2ZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjExOAoJLy8gY29uZmlnQXNzZXRNYW5hZ2VyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldE1hbmFnZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMTkKCS8vIGNvbmZpZ0Fzc2V0Q2xhd2JhY2s6IGdsb2JhbHMuemVyb0FkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldENsYXdiYWNrCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTIwCgkvLyBjb25maWdBc3NldEZyZWV6ZTogZ2xvYmFscy56ZXJvQWRkcmVzcwoJZ2xvYmFsIFplcm9BZGRyZXNzCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RnJlZXplCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTIxCgkvLyBjb25maWdBc3NldERlZmF1bHRGcm96ZW46IDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVmYXVsdEZyb3plbgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjEyMgoJLy8gY29uZmlnQXNzZXROYW1lOiAnVmVzdGd1YXJkIEFMR08nCglwdXNoYnl0ZXMgMHg1NjY1NzM3NDY3NzU2MTcyNjQyMDQxNGM0NzRmIC8vICJWZXN0Z3VhcmQgQUxHTyIKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTIzCgkvLyBjb25maWdBc3NldFVuaXROYW1lOiAndkFMR08nCglwdXNoYnl0ZXMgMHg3NjQxNGM0NzRmIC8vICJ2QUxHTyIKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjEyNAoJLy8gY29uZmlnQXNzZXRVUkw6ICdodHRwczovL3Zlc3RpZ2UuZmknCglwdXNoYnl0ZXMgMHg2ODc0NzQ3MDczM2EyZjJmNzY2NTczNzQ2OTY3NjUyZTY2NjkgLy8gImh0dHBzOi8vdmVzdGlnZS5maSIKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVUkwKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIENyZWF0ZWRBc3NldElECglhcHBfZ2xvYmFsX3B1dAoKKmlmMF9lbmQ6CglyZXRzdWIKCi8vIE1BTkFHRVJfdXBkYXRlQm9vc3RUb2tlbklEKHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfTUFOQUdFUl91cGRhdGVCb29zdFRva2VuSUQ6CgkvLyBib29zdFRva2VuSUQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgTUFOQUdFUl91cGRhdGVCb29zdFRva2VuSUQodWludDY0KXZvaWQKCWNhbGxzdWIgTUFOQUdFUl91cGRhdGVCb29zdFRva2VuSUQKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIE1BTkFHRVJfdXBkYXRlQm9vc3RUb2tlbklEKGJvb3N0VG9rZW5JRDogQXNzZXRJRCk6IHZvaWQKTUFOQUdFUl91cGRhdGVCb29zdFRva2VuSUQ6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMzAKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFuYWdlci52YWx1ZSwgJ29ubHkgdGhlIG1hbmFnZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QnKQoJdHhuIFNlbmRlcgoJYnl0ZWMgNCAvLyAgIm1hbmFnZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxMzEKCS8vIHRoaXMuYm9vc3RUb2tlbklELnZhbHVlID0gYm9vc3RUb2tlbklECglwdXNoYnl0ZXMgMHg2MjZmNmY3Mzc0NWY3NDZmNmI2NTZlNWY2OTY0IC8vICJib29zdF90b2tlbl9pZCIKCWZyYW1lX2RpZyAtMSAvLyBib29zdFRva2VuSUQ6IEFzc2V0SUQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIE1BTkFHRVJfY2hhbmdlQm9vc3RUaWVyKHVpbnQ2NFtdKXZvaWQKKmFiaV9yb3V0ZV9NQU5BR0VSX2NoYW5nZUJvb3N0VGllcjoKCS8vIGFtb3VudHM6IHVpbnQ2NFtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgTUFOQUdFUl9jaGFuZ2VCb29zdFRpZXIodWludDY0W10pdm9pZAoJY2FsbHN1YiBNQU5BR0VSX2NoYW5nZUJvb3N0VGllcgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gTUFOQUdFUl9jaGFuZ2VCb29zdFRpZXIoYW1vdW50czogdWludDY0W10pOiB2b2lkCk1BTkFHRVJfY2hhbmdlQm9vc3RUaWVyOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTM1CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm1hbmFnZXIudmFsdWUsICdvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kJykKCXR4biBTZW5kZXIKCWJ5dGVjIDQgLy8gICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gb25seSB0aGUgbWFuYWdlciBjYW4gY2FsbCB0aGlzIG1ldGhvZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTM2CgkvLyB0aGlzLnRpZXJzLnZhbHVlID0gYW1vdW50cwoJYnl0ZWMgMTAgLy8gICJ0aWVycyIKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRzOiB1aW50NjRbXQoJZHVwCglsZW4KCWludGMgMiAvLyA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBnZXRCb29zdFRpZXIodWludDY0KXVpbnQ2NAoqYWJpX3JvdXRlX2dldEJvb3N0VGllcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMjAgLy8gMHgxNTFmN2M3NQoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBnZXRCb29zdFRpZXIodWludDY0KXVpbnQ2NAoJY2FsbHN1YiBnZXRCb29zdFRpZXIKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBnZXRCb29zdFRpZXIoYW1vdW50OiB1aW50NjQpOiB1aW50NjQKLy8KLy8gVGhlIGdldEJvb3N0VGllciBtZXRob2QgaXMgbmVlZGVkIHRvIGJlIGtlcHQgcHVibGljIHNvIHRoYXQgb24gc3RhdGUgdXBkYXRlIFZhbGlkYXRvciBQb29sIGNhbiBmZXRjaCB0aGVpciBjdXJyZW50IHRpZXIuCi8vIEBwYXJhbSB7dWludDY0fSBhbW91bnQgIC0gVGhlIGFtb3VudCBvZiB0aGUgYm9vc3QgdG9rZW4gdG8gY2FsY3VsYXRlIHRoZSBib29zdCB0aWVyIGZvcgovLyBAcmV0dXJucyB7dWludDY0fSAtIFRoZSBib29zdCB0aWVyIGZvciB0aGUgZ2l2ZW4gYW1vdW50CmdldEJvb3N0VGllcjoKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CgoJLy8gKmlmMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE0NgoJLy8gYW1vdW50IDwgdGhpcy50aWVycy52YWx1ZVswXQoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudDogdWludDY0CglieXRlYyAxMCAvLyAgInRpZXJzIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMiAwCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAwIDgKCWJ0b2kKCTwKCWJ6ICppZjFfZW5kCgoJLy8gKmlmMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNDYKCS8vIHJldHVybiAwOwoJaW50YyAwIC8vIDAKCWIgKmdldEJvb3N0VGllcipyZXR1cm4KCippZjFfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTQ3CgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudGllcnMudmFsdWUubGVuZ3RoOyBpICs9IDEpCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAwIC8vIGk6IHVpbnQ2NAoKKmZvcl8wOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTQ3CgkvLyBpIDwgdGhpcy50aWVycy52YWx1ZS5sZW5ndGgKCWZyYW1lX2RpZyAwIC8vIGk6IHVpbnQ2NAoJYnl0ZWMgMTAgLy8gICJ0aWVycyIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDIgMAoJbGVuCglpbnRjIDIgLy8gOAoJLwoJPAoJYnogKmZvcl8wX2VuZAoKCS8vICppZjJfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNDgKCS8vIGFtb3VudCA8IHRoaXMudGllcnMudmFsdWVbaV0KCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJYnl0ZWMgMTAgLy8gICJ0aWVycyIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDIgMAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAwIC8vIGk6IHVpbnQ2NAoJaW50YyAyIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAyIC8vIDgKCWV4dHJhY3QzCglidG9pCgk8CglieiAqaWYyX2VuZAoKCS8vICppZjJfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTQ4CgkvLyByZXR1cm4gaSArIDE7CglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWludGMgMSAvLyAxCgkrCgliICpnZXRCb29zdFRpZXIqcmV0dXJuCgoqaWYyX2VuZDoKCipmb3JfMF9jb250aW51ZToKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE0NwoJLy8gaSArPSAxCglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWludGMgMSAvLyAxCgkrCglmcmFtZV9idXJ5IDAgLy8gaTogdWludDY0CgliICpmb3JfMAoKKmZvcl8wX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE1MAoJLy8gcmV0dXJuIHRoaXMudGllcnMudmFsdWUubGVuZ3RoOwoJYnl0ZWMgMTAgLy8gICJ0aWVycyIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDIgMAoJbGVuCglpbnRjIDIgLy8gOAoJLwoKKmdldEJvb3N0VGllcipyZXR1cm46CgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKLy8gTUFOQUdFUl9jaGFuZ2VNYW5hZ2VyKGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX01BTkFHRVJfY2hhbmdlTWFuYWdlcjoKCS8vIG1hbmFnZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDkgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAobWFuYWdlcikgZm9yIE1BTkFHRVJfY2hhbmdlTWFuYWdlciBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBNQU5BR0VSX2NoYW5nZU1hbmFnZXIoYWRkcmVzcyl2b2lkCgljYWxsc3ViIE1BTkFHRVJfY2hhbmdlTWFuYWdlcgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gTUFOQUdFUl9jaGFuZ2VNYW5hZ2VyKG1hbmFnZXI6IEFkZHJlc3MpOiB2b2lkCk1BTkFHRVJfY2hhbmdlTWFuYWdlcjoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE1NAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5tYW5hZ2VyLnZhbHVlLCAnb25seSB0aGUgbWFuYWdlciBjYW4gY2FsbCB0aGlzIG1ldGhvZCcpCgl0eG4gU2VuZGVyCglieXRlYyA0IC8vICAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIG9ubHkgdGhlIG1hbmFnZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE1NQoJLy8gdGhpcy5tYW5hZ2VyLnZhbHVlID0gbWFuYWdlcgoJYnl0ZWMgNCAvLyAgIm1hbmFnZXIiCglmcmFtZV9kaWcgLTEgLy8gbWFuYWdlcjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gTUFOQUdFUl9jaGFuZ2VQcm90b2NvbEZlZSh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX01BTkFHRVJfY2hhbmdlUHJvdG9jb2xGZWU6CgkvLyBhbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgTUFOQUdFUl9jaGFuZ2VQcm90b2NvbEZlZSh1aW50NjQpdm9pZAoJY2FsbHN1YiBNQU5BR0VSX2NoYW5nZVByb3RvY29sRmVlCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBNQU5BR0VSX2NoYW5nZVByb3RvY29sRmVlKGFtb3VudDogdWludDY0KTogdm9pZApNQU5BR0VSX2NoYW5nZVByb3RvY29sRmVlOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTU5CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm1hbmFnZXIudmFsdWUsICdvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kJykKCXR4biBTZW5kZXIKCWJ5dGVjIDQgLy8gICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gb25seSB0aGUgbWFuYWdlciBjYW4gY2FsbCB0aGlzIG1ldGhvZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTYwCgkvLyBhc3NlcnQoYW1vdW50IDw9IDEwMCwgJ2Ftb3VudCBpcyBtZWFudCBhcyBwZXJjZW50YWdlLCBjYW5ub3QgYmUgbW9yZSB0aGFuIDEwMCcpCglmcmFtZV9kaWcgLTEgLy8gYW1vdW50OiB1aW50NjQKCWludGMgMTAgLy8gMTAwCgk8PQoKCS8vIGFtb3VudCBpcyBtZWFudCBhcyBwZXJjZW50YWdlLCBjYW5ub3QgYmUgbW9yZSB0aGFuIDEwMAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTYxCgkvLyB0aGlzLnByb3RvY29sRmVlLnZhbHVlID0gYW1vdW50CglieXRlYyAxOCAvLyAgInByb3RvY29sX2ZlZSIKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gTUFOQUdFUl9sb2NrQ29udHJhY3QoKXZvaWQKKmFiaV9yb3V0ZV9NQU5BR0VSX2xvY2tDb250cmFjdDoKCS8vIGV4ZWN1dGUgTUFOQUdFUl9sb2NrQ29udHJhY3QoKXZvaWQKCWNhbGxzdWIgTUFOQUdFUl9sb2NrQ29udHJhY3QKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIE1BTkFHRVJfbG9ja0NvbnRyYWN0KCk6IHZvaWQKTUFOQUdFUl9sb2NrQ29udHJhY3Q6Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNjUKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFuYWdlci52YWx1ZSkKCXR4biBTZW5kZXIKCWJ5dGVjIDQgLy8gICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNjYKCS8vIHRoaXMucG9vbENvbnRyYWN0TG9jay52YWx1ZSA9IExPQ0tFRAoJYnl0ZWMgMTYgLy8gICJwb29sX2NvbnRyYWN0X2xvY2tfZmxhZyIKCWludGMgMSAvLyAxCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdENvc3QodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9NQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdENvc3Q6CgkvLyB2YWxpZGF0b3JQb29sQ29udHJhY3RDb3N0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIE1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0Q29zdCh1aW50NjQpdm9pZAoJY2FsbHN1YiBNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdENvc3QKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIE1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0Q29zdCh2YWxpZGF0b3JQb29sQ29udHJhY3RDb3N0OiB1aW50NjQpOiB2b2lkCk1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0Q29zdDoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE3MAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5tYW5hZ2VyLnZhbHVlLCAnb25seSB0aGUgbWFuYWdlciBjYW4gY2FsbCB0aGlzIG1ldGhvZCcpCgl0eG4gU2VuZGVyCglieXRlYyA0IC8vICAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIG9ubHkgdGhlIG1hbmFnZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE3MQoJLy8gdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RDb3N0LnZhbHVlID0gdmFsaWRhdG9yUG9vbENvbnRyYWN0Q29zdAoJYnl0ZWMgMTcgLy8gICJ2YWxpZGF0b3JfcG9vbF9jb3N0IgoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvclBvb2xDb250cmFjdENvc3Q6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtKHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtOgoJLy8gcHJvZ3JhbVNpemU6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtKHVpbnQ2NCl2b2lkCgljYWxsc3ViIE1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0UHJvZ3JhbQoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gTUFOQUdFUl91cGRhdGVQb29sQ29udHJhY3RQcm9ncmFtKHByb2dyYW1TaXplOiB1aW50NjQpOiB2b2lkCk1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0UHJvZ3JhbToKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE3NQoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5tYW5hZ2VyLnZhbHVlLCAnb25seSB0aGUgbWFuYWdlciBjYW4gY2FsbCB0aGlzIG1ldGhvZCcpCgl0eG4gU2VuZGVyCglieXRlYyA0IC8vICAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIG9ubHkgdGhlIG1hbmFnZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjE3NgoJLy8gYXNzZXJ0KHRoaXMucG9vbENvbnRyYWN0TG9jay52YWx1ZSA9PT0gVVBEQVRBQkxFLCAnY2Fubm90IHJld3JpdGUgY29udHJhY3QgYW55bW9yZScpCglieXRlYyAxNiAvLyAgInBvb2xfY29udHJhY3RfbG9ja19mbGFnIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAwCgk9PQoKCS8vIGNhbm5vdCByZXdyaXRlIGNvbnRyYWN0IGFueW1vcmUKCWFzc2VydAoKCS8vICppZjNfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNzgKCS8vIHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLmV4aXN0cwoJYnl0ZWMgMTEgLy8gICJ2YWxpZGF0b3JfYXBwcm92YWxfcHJvZ3JhbSIKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogKmlmM19lbHNlCgoJLy8gKmlmM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxNzkKCS8vIHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLnJlc2l6ZShwcm9ncmFtU2l6ZSkKCWJ5dGVjIDExIC8vICAidmFsaWRhdG9yX2FwcHJvdmFsX3Byb2dyYW0iCglmcmFtZV9kaWcgLTEgLy8gcHJvZ3JhbVNpemU6IHVpbnQ2NAoJYm94X3Jlc2l6ZQoJYiAqaWYzX2VuZAoKKmlmM19lbHNlOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTgxCgkvLyB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS5jcmVhdGUocHJvZ3JhbVNpemUpCglieXRlYyAxMSAvLyAgInZhbGlkYXRvcl9hcHByb3ZhbF9wcm9ncmFtIgoJZnJhbWVfZGlnIC0xIC8vIHByb2dyYW1TaXplOiB1aW50NjQKCWJveF9jcmVhdGUKCXBvcAoKKmlmM19lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoxODQKCS8vIHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0VmVyc2lvbi52YWx1ZSArPSAxCglieXRlYyA5IC8vICAidmFsaWRhdG9yX3Bvb2xfdmVyc2lvbiIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDEgLy8gMQoJKwoJYnl0ZWMgOSAvLyAgInZhbGlkYXRvcl9wb29sX3ZlcnNpb24iCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBNQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbSh1aW50NjQsYnl0ZVtdKXZvaWQKKmFiaV9yb3V0ZV9NQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbToKCS8vIGRhdGE6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBvZmZzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgTUFOQUdFUl93cml0ZVBvb2xDb250cmFjdFByb2dyYW0odWludDY0LGJ5dGVbXSl2b2lkCgljYWxsc3ViIE1BTkFHRVJfd3JpdGVQb29sQ29udHJhY3RQcm9ncmFtCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBNQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbShvZmZzZXQ6IHVpbnQ2NCwgZGF0YTogYnl0ZXMpOiB2b2lkCk1BTkFHRVJfd3JpdGVQb29sQ29udHJhY3RQcm9ncmFtOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTg4CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm1hbmFnZXIudmFsdWUsICdvbmx5IHRoZSBtYW5hZ2VyIGNhbiBjYWxsIHRoaXMgbWV0aG9kJykKCXR4biBTZW5kZXIKCWJ5dGVjIDQgLy8gICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gb25seSB0aGUgbWFuYWdlciBjYW4gY2FsbCB0aGlzIG1ldGhvZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTg5CgkvLyBhc3NlcnQodGhpcy5wb29sQ29udHJhY3RMb2NrLnZhbHVlID09PSBVUERBVEFCTEUsICdjYW5ub3QgcmV3cml0ZSBjb250cmFjdCBhbnltb3JlJykKCWJ5dGVjIDE2IC8vICAicG9vbF9jb250cmFjdF9sb2NrX2ZsYWciCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDAKCT09CgoJLy8gY2Fubm90IHJld3JpdGUgY29udHJhY3QgYW55bW9yZQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MTkxCgkvLyB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdEFwcHJvdmFsUHJvZ3JhbS5yZXBsYWNlKG9mZnNldCwgZGF0YSkKCWJ5dGVjIDExIC8vICAidmFsaWRhdG9yX2FwcHJvdmFsX3Byb2dyYW0iCglmcmFtZV9kaWcgLTEgLy8gb2Zmc2V0OiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBkYXRhOiBieXRlcwoJYm94X3JlcGxhY2UKCXJldHN1YgoKLy8gYWRkVmFsaWRhdG9yKHBheSl2b2lkCiphYmlfcm91dGVfYWRkVmFsaWRhdG9yOgoJLy8gbWJyUGF5OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAobWJyUGF5KSBmb3IgYWRkVmFsaWRhdG9yIG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgYWRkVmFsaWRhdG9yKHBheSl2b2lkCgljYWxsc3ViIGFkZFZhbGlkYXRvcgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gYWRkVmFsaWRhdG9yKG1iclBheTogUGF5VHhuKTogdm9pZAovLwovLyBBUkM0IFBVQkxJQyBNRVRIT0RTCi8vCi8vCi8vIEZhY3RvcnkgbWV0aG9kIHRvIHNwYXduIG5ldyBWYWxpZGF0b3IgUG9vbCBDb250cmFjdHMuCi8vIEBwYXJhbSB7UGF5VHhufSBtYnJQYXkgLSBUaGUgTUJSIGFtb3VudCBjYW4gdmFyeSBkZXBlbmRpbmcgb24gdGhlIHZlcnNpb24gb2YgdGhlIFZhbGlkYXRvciBQb29sIENvbnRyYWN0LiBUaGUgbWJyUGF5IGFtb3VudCBoYXMgdG8gY292ZXIgdGhlIGNvc3Qgb2YgdGhlIFZhbGlkYXRvciBQb29sIENvbnRyYWN0LgphZGRWYWxpZGF0b3I6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMDMKCS8vIHZlcmlmeVBheVR4bihtYnJQYXksIHsKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiB7IGdyZWF0ZXJUaGFuRXF1YWxUbzogdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RDb3N0LnZhbHVlIH0sCgkvLyAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJtYnJQYXkiLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBtYnJQYXk6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglieXRlYyAxNyAvLyAgInZhbGlkYXRvcl9wb29sX2Nvc3QiCglhcHBfZ2xvYmFsX2dldAoJPj0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoiYW1vdW50IiwiY29uZGl0aW9uIjoiZ3JlYXRlclRoYW5FcXVhbFRvIiwiZXhwZWN0ZWQiOiI+PXRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0Q29zdC52YWx1ZSJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMDgKCS8vIHNlbmRBcHBDYWxsKHsKCS8vICAgICAgIG9uQ29tcGxldGlvbjogT25Db21wbGV0aW9uLk5vT3AsCgkvLyAgICAgICBhcHByb3ZhbFByb2dyYW06IHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLnZhbHVlLAoJLy8gICAgICAgY2xlYXJTdGF0ZVByb2dyYW06IENhZWx1c1ZhbGlkYXRvclBvb2wuY2xlYXJQcm9ncmFtKCksCgkvLyAgICAgICBnbG9iYWxOdW1VaW50OiBDYWVsdXNWYWxpZGF0b3JQb29sLnNjaGVtYS5nbG9iYWwubnVtVWludCwKCS8vICAgICAgIGdsb2JhbE51bUJ5dGVTbGljZTogQ2FlbHVzVmFsaWRhdG9yUG9vbC5zY2hlbWEuZ2xvYmFsLm51bUJ5dGVTbGljZSwKCS8vICAgICAgIGV4dHJhUHJvZ3JhbVBhZ2VzOiAzLAoJLy8gICAgICAgYXBwbGljYXRpb25BcmdzOiBbCgkvLyAgICAgICAgIG1ldGhvZCgnY3JlYXRlQXBwbGljYXRpb24odWludDY0LGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkJyksCgkvLyAgICAgICAgIGl0b2IodGhpcy5hcHAuaWQpLAoJLy8gICAgICAgICB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgIGl0b2IodGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RWZXJzaW9uLnZhbHVlKSwKCS8vICAgICAgICAgaXRvYih0aGlzLnRva2VuSWQudmFsdWUpLAoJLy8gICAgICAgXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjA5CgkvLyBvbkNvbXBsZXRpb246IE9uQ29tcGxldGlvbi5Ob09wCglpbnRjIDAgLy8gIE5vT3AKCWl0eG5fZmllbGQgT25Db21wbGV0aW9uCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjEwCgkvLyBhcHByb3ZhbFByb2dyYW06IHRoaXMudmFsaWRhdG9yUG9vbENvbnRyYWN0QXBwcm92YWxQcm9ncmFtLnZhbHVlCglieXRlYyAxMSAvLyAgInZhbGlkYXRvcl9hcHByb3ZhbF9wcm9ncmFtIgoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RBcHByb3ZhbFByb2dyYW0udmFsdWUKCWFzc2VydAoJaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMTEKCS8vIGNsZWFyU3RhdGVQcm9ncmFtOiBDYWVsdXNWYWxpZGF0b3JQb29sLmNsZWFyUHJvZ3JhbSgpCglwdXNoYnl0ZXMgMHgwYgoJaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIxMgoJLy8gZ2xvYmFsTnVtVWludDogQ2FlbHVzVmFsaWRhdG9yUG9vbC5zY2hlbWEuZ2xvYmFsLm51bVVpbnQKCXB1c2hpbnQgMTQKCWl0eG5fZmllbGQgR2xvYmFsTnVtVWludAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIxMwoJLy8gZ2xvYmFsTnVtQnl0ZVNsaWNlOiBDYWVsdXNWYWxpZGF0b3JQb29sLnNjaGVtYS5nbG9iYWwubnVtQnl0ZVNsaWNlCglpbnRjIDUgLy8gMgoJaXR4bl9maWVsZCBHbG9iYWxOdW1CeXRlU2xpY2UKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMTQKCS8vIGV4dHJhUHJvZ3JhbVBhZ2VzOiAzCglpbnRjIDggLy8gMwoJaXR4bl9maWVsZCBFeHRyYVByb2dyYW1QYWdlcwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIxNQoJLy8gYXBwbGljYXRpb25BcmdzOiBbCgkvLyAgICAgICAgIG1ldGhvZCgnY3JlYXRlQXBwbGljYXRpb24odWludDY0LGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkJyksCgkvLyAgICAgICAgIGl0b2IodGhpcy5hcHAuaWQpLAoJLy8gICAgICAgICB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgIGl0b2IodGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RWZXJzaW9uLnZhbHVlKSwKCS8vICAgICAgICAgaXRvYih0aGlzLnRva2VuSWQudmFsdWUpLAoJLy8gICAgICAgXQoJcHVzaGJ5dGVzIDB4YWQwNGY2YTEgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglieXRlYyA5IC8vICAidmFsaWRhdG9yX3Bvb2xfdmVyc2lvbiIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJYnl0ZWMgMiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIyNAoJLy8gdGhpcy52YWxpZGF0b3JBZGRlZEV2ZW50LmxvZyh7CgkvLyAgICAgICBvcGVyYXRvcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgdmVyc2lvbjogdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RWZXJzaW9uLnZhbHVlLAoJLy8gICAgIH0pCglwdXNoYnl0ZXMgMHg1N2ViNjY5OSAvLyB2YWxpZGF0b3JBZGRlZEV2ZW50KGFkZHJlc3MsdWludDY0KQoJdHhuIFNlbmRlcgoJYnl0ZWMgOSAvLyAgInZhbGlkYXRvcl9wb29sX3ZlcnNpb24iCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBtaW50UmVxdWVzdChwYXkpdm9pZAoqYWJpX3JvdXRlX21pbnRSZXF1ZXN0OgoJLy8gbWludFR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAxIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMSAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKG1pbnRUeG4pIGZvciBtaW50UmVxdWVzdCBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIG1pbnRSZXF1ZXN0KHBheSl2b2lkCgljYWxsc3ViIG1pbnRSZXF1ZXN0CglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBtaW50UmVxdWVzdChtaW50VHhuOiBQYXlUeG4pOiB2b2lkCi8vCi8vIE9uIE1pbnQgdGhlIEFsZ28gZGVwb3NpdGVkIGJ5IHRoZSB1c2VyIGFyZSBrZXB0IGluIHRoZSBBZG1pbiBDb250cmFjdCBBY2NvdW50IGJhbGFuY2Ugd2FpdGluZyBmb3IgdGhlIGhpZ2hlc3QgYmlkZGVyIHRvIGNsYWltIHRoZW0uCm1pbnRSZXF1ZXN0OgoJcHJvdG8gMSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyMzQKCS8vIHZlcmlmeVBheVR4bihtaW50VHhuLCB7CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFtb3VudDogeyBncmVhdGVyVGhhbkVxdWFsVG86IGdsb2JhbHMubWluVHhuRmVlIH0sCgkvLyAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1pbnRUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibWludFR4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG1pbnRUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglnbG9iYWwgTWluVHhuRmVlCgk+PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibWludFR4biIsImZpZWxkIjoiYW1vdW50IiwiY29uZGl0aW9uIjoiZ3JlYXRlclRoYW5FcXVhbFRvIiwiZXhwZWN0ZWQiOiI+PWdsb2JhbHMubWluVHhuRmVlIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjIzOQoJLy8gbWludGVkID0gdGhpcy5nZXRNaW50QW1vdW50KG1pbnRUeG4uYW1vdW50KQoJZnJhbWVfZGlnIC0xIC8vIG1pbnRUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CgljYWxsc3ViIGdldE1pbnRBbW91bnQKCWZyYW1lX2J1cnkgMCAvLyBtaW50ZWQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI0MAoJLy8gdGhpcy5kb0F4ZmVyKHRoaXMudHhuLnNlbmRlciwgbWludGVkLCB0aGlzLnRva2VuSWQudmFsdWUpCglieXRlYyAyIC8vICAidG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDAgLy8gbWludGVkOiB1aW50NjQKCXR4biBTZW5kZXIKCWNhbGxzdWIgZG9BeGZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI0MQoJLy8gdGhpcy50b3RhbFN0YWtlLnZhbHVlICs9IG1pbnRUeG4uYW1vdW50CglieXRlYyA2IC8vICAidG90YWxfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIG1pbnRUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CgkrCglieXRlYyA2IC8vICAidG90YWxfc3Rha2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI0MgoJLy8gdGhpcy50b2tlbkNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlICs9IG1pbnRlZAoJYnl0ZWMgMyAvLyAgImNpcmN1bGF0aW5nX3N1cHBseSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyBtaW50ZWQ6IHVpbnQ2NAoJKwoJYnl0ZWMgMyAvLyAgImNpcmN1bGF0aW5nX3N1cHBseSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjQ0CgkvLyB0aGlzLm1pbnRFdmVudC5sb2coewoJLy8gICAgICAgaW5zdGFudDogdHJ1ZSwKCS8vICAgICAgIGFtb3VudDogbWludFR4bi5hbW91bnQsCgkvLyAgICAgICBvdXRwdXQ6IG1pbnRlZCwKCS8vICAgICB9KQoJYnl0ZWMgMjUgLy8gIG1pbnRFdmVudChib29sLHVpbnQ2NCx1aW50NjQpCglieXRlYyA4IC8vIDB4MDAKCWludGMgMCAvLyAwCglpbnRjIDEgLy8gMQoJc2V0Yml0CglmcmFtZV9kaWcgLTEgLy8gbWludFR4bjogUGF5VHhuCglndHhucyBBbW91bnQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gbWludGVkOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gYnVyblJlcXVlc3QoYXhmZXIsYWRkcmVzcyl2b2lkCiphYmlfcm91dGVfYnVyblJlcXVlc3Q6CgkvLyBidXJuVG86IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDkgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAoYnVyblRvKSBmb3IgYnVyblJlcXVlc3QgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGJ1cm5UeG46IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50YyAxIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgNyAvLyAgYXhmZXIKCT09CgoJLy8gYXJndW1lbnQgMSAoYnVyblR4bikgZm9yIGJ1cm5SZXF1ZXN0IG11c3QgYmUgYSBheGZlciB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBidXJuUmVxdWVzdChheGZlcixhZGRyZXNzKXZvaWQKCWNhbGxzdWIgYnVyblJlcXVlc3QKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGJ1cm5SZXF1ZXN0KGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4sIGJ1cm5UbzogQWRkcmVzcyk6IHZvaWQKLy8KLy8gT24gQnVybiB0aGUgY29udHJhY3QgZ3JhZHVhbGx5IGNoZWNrcyB3aGVyZSB0byB0YWtlIEFsZ28gZnJvbSwgZmlyc3QgaW4gdGhlIGlkbGUgQWRtaW4gYmFsYW5jZSwgdGhlbiBmcm9tIHRoZSBidXJuIHF1ZXVlLgovLyBJbiBjYXNlIHRoZSBhbW91bnQgb2YgQWxnbyBleGNlZWRzIHRoZSBjdXJyZW50IHF1ZXVlIG1heCBhbW91bnQgdGhlIHJlbWFpbmluZyB2QWxnbyBhcmUgc2VudCBiYWNrIHRvIHRoZSB1c2VyLgovLyBUaGlzIHNpdHVhdGlvbiB0cmlnZ2VycyB0aGUgZXhoYXVzdCBmbGFnLCB0aGF0IHdpbGwgcHJldmVudCB0aGUgY29udHJhY3QgZnJvbSBidXJuaW5nIEFsZ28gZm9yIHRoZSBuZXh0IDUgYmxvY2tzLgovLyBUaGUgQ29vbGRvd24gcGVyaW9kIGlzIG5lY2Vzc2FyeSB0byBlbnN1cmUgdGhhdCB0aGUgcXVldWUgaXMgZmlsbGVkIHdpdGggdGhlIFZhbGlkYXRvcnMgbW9yZSBmaXQgZm9yIHRoZSBidXJuLgovLyBUaGlzIHRvIGRpc2FsbG93IHBvc3NpYmxlIHNwYW0gbG9vcGluZyBvZiBidXJuaW5nIHRvIHRhcmdldCBmcm9tIHNwZWNpZmljIHBvb2xzLgpidXJuUmVxdWVzdDoKCXByb3RvIDIgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXBuIDgKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNTkKCS8vIHZlcmlmeUFzc2V0VHJhbnNmZXJUeG4oYnVyblR4biwgewoJLy8gICAgICAgeGZlckFzc2V0OiB0aGlzLnRva2VuSWQudmFsdWUsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IHsgZ3JlYXRlclRoYW5FcXVhbFRvOiBBTEdPUkFORF9CQVNFX0ZFRSB9LAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgeGZlckFzc2V0CglmcmFtZV9kaWcgLTEgLy8gYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglieXRlYyAyIC8vICAidG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6ImJ1cm5UeG4iLCJmaWVsZCI6InhmZXJBc3NldCIsImV4cGVjdGVkIjoidGhpcy50b2tlbklkLnZhbHVlIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldFJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJidXJuVHhuIiwiZmllbGQiOiJhc3NldFJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldEFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglwdXNoaW50IDEwMDAKCT49CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJidXJuVHhuIiwiZmllbGQiOiJhc3NldEFtb3VudCIsImNvbmRpdGlvbiI6ImdyZWF0ZXJUaGFuRXF1YWxUbyIsImV4cGVjdGVkIjoiPj1BTEdPUkFORF9CQVNFX0ZFRSJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyNjUKCS8vIGFtb3VudFRvQnVybiA9IHRoaXMuZ2V0QnVybkFtb3VudChidXJuVHhuLmFzc2V0QW1vdW50KQoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CgljYWxsc3ViIGdldEJ1cm5BbW91bnQKCWZyYW1lX2J1cnkgMCAvLyBhbW91bnRUb0J1cm46IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI2NgoJLy8gYnVybmluZyA9IDAKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDEgLy8gYnVybmluZzogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjY4CgkvLyBpZGxlQWxnbyA9IHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZSAtIHRoaXMuYXBwLmFkZHJlc3MubWluQmFsYW5jZQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQoJcG9wCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RNaW5CYWxhbmNlCglwb3AKCS0KCWZyYW1lX2J1cnkgMiAvLyBpZGxlQWxnbzogdWludDY0CgoJLy8gKmlmNF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI2OQoJLy8gaWRsZUFsZ28gPiAwCglmcmFtZV9kaWcgMiAvLyBpZGxlQWxnbzogdWludDY0CglpbnRjIDAgLy8gMAoJPgoJYnogKmlmNF9lbmQKCgkvLyAqaWY0X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI3MAoJLy8gYW1vdW50VG9CdXJuRnJvbUlkbGUgPSBpZGxlQWxnbyA+PSBhbW91bnRUb0J1cm4gPyBhbW91bnRUb0J1cm4gOiBpZGxlQWxnbwoJZnJhbWVfZGlnIDIgLy8gaWRsZUFsZ286IHVpbnQ2NAoJZnJhbWVfZGlnIDAgLy8gYW1vdW50VG9CdXJuOiB1aW50NjQKCT49CglieiAqdGVybmFyeTBfZmFsc2UKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFRvQnVybjogdWludDY0CgliICp0ZXJuYXJ5MF9lbmQKCip0ZXJuYXJ5MF9mYWxzZToKCWZyYW1lX2RpZyAyIC8vIGlkbGVBbGdvOiB1aW50NjQKCip0ZXJuYXJ5MF9lbmQ6CglmcmFtZV9idXJ5IDMgLy8gYW1vdW50VG9CdXJuRnJvbUlkbGU6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI3MQoJLy8gYnVybmluZyArPSBhbW91bnRUb0J1cm5Gcm9tSWRsZQoJZnJhbWVfZGlnIDEgLy8gYnVybmluZzogdWludDY0CglmcmFtZV9kaWcgMyAvLyBhbW91bnRUb0J1cm5Gcm9tSWRsZTogdWludDY0CgkrCglmcmFtZV9idXJ5IDEgLy8gYnVybmluZzogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MjczCgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgIHJlY2VpdmVyOiBidXJuVHhuLnNlbmRlciwKCS8vICAgICAgICAgYW1vdW50OiBhbW91bnRUb0J1cm5Gcm9tSWRsZSwKCS8vICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI3NAoJLy8gcmVjZWl2ZXI6IGJ1cm5UeG4uc2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgU2VuZGVyCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mjc1CgkvLyBhbW91bnQ6IGFtb3VudFRvQnVybkZyb21JZGxlCglmcmFtZV9kaWcgMyAvLyBhbW91bnRUb0J1cm5Gcm9tSWRsZTogdWludDY0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCippZjRfZW5kOgoJLy8gKmlmNV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI3OQoJLy8gYnVybmluZyA9PT0gYW1vdW50VG9CdXJuCglmcmFtZV9kaWcgMSAvLyBidXJuaW5nOiB1aW50NjQKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFRvQnVybjogdWludDY0Cgk9PQoJYnogKmlmNV9lbmQKCgkvLyAqaWY1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI4MAoJLy8gdGhpcy5kb3duU3VwcGx5Q291bnRlcnMoYW1vdW50VG9CdXJuLCBidXJuVHhuLmFzc2V0QW1vdW50KQoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgMCAvLyBhbW91bnRUb0J1cm46IHVpbnQ2NAoJY2FsbHN1YiBkb3duU3VwcGx5Q291bnRlcnMKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyODEKCS8vIHRoaXMuYnVybkV2ZW50LmxvZyh7CgkvLyAgICAgICAgIGZpbGxlZDogdHJ1ZSwKCS8vICAgICAgICAgYW1vdW50OiBidXJuVHhuLmFzc2V0QW1vdW50LAoJLy8gICAgICAgICBvdXRwdXQ6IGJ1cm5pbmcsCgkvLyAgICAgICB9KQoJYnl0ZWMgMTUgLy8gIGJ1cm5FdmVudChib29sLHVpbnQ2NCx1aW50NjQpCglieXRlYyA4IC8vIDB4MDAKCWludGMgMCAvLyAwCglpbnRjIDEgLy8gMQoJc2V0Yml0CglmcmFtZV9kaWcgLTEgLy8gYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDEgLy8gYnVybmluZzogdWludDY0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mjg2CgkvLyByZXR1cm47CglyZXRzdWIKCippZjVfZW5kOgoJLy8gKmlmNl9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI4OQoJLy8gdGhpcy5xdWV1ZUlzRW1wdHkoKQoJY2FsbHN1YiBxdWV1ZUlzRW1wdHkKCWJ6ICppZjZfZW5kCgoJLy8gKmlmNl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyOTAKCS8vIGFtb3VudExlZnQgPSB0aGlzLmdldE1pbnRBbW91bnQoYW1vdW50VG9CdXJuIC0gYnVybmluZykKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFRvQnVybjogdWludDY0CglmcmFtZV9kaWcgMSAvLyBidXJuaW5nOiB1aW50NjQKCS0KCWNhbGxzdWIgZ2V0TWludEFtb3VudAoJZnJhbWVfYnVyeSA0IC8vIGFtb3VudExlZnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjI5MQoJLy8gdGhpcy5kb0F4ZmVyKGJ1cm5UeG4uc2VuZGVyLCBhbW91bnRMZWZ0LCB0aGlzLnRva2VuSWQudmFsdWUpCglieXRlYyAyIC8vICAidG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDQgLy8gYW1vdW50TGVmdDogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgU2VuZGVyCgljYWxsc3ViIGRvQXhmZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyOTIKCS8vIHRoaXMuZG93blN1cHBseUNvdW50ZXJzKGJ1cm5pbmcsIGJ1cm5UeG4uYXNzZXRBbW91bnQgLSBhbW91bnRMZWZ0KQoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgNCAvLyBhbW91bnRMZWZ0OiB1aW50NjQKCS0KCWZyYW1lX2RpZyAxIC8vIGJ1cm5pbmc6IHVpbnQ2NAoJY2FsbHN1YiBkb3duU3VwcGx5Q291bnRlcnMKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyOTMKCS8vIHRoaXMuYnVybkV2ZW50LmxvZyh7CgkvLyAgICAgICAgIGZpbGxlZDogZmFsc2UsCgkvLyAgICAgICAgIGFtb3VudDogYnVyblR4bi5hc3NldEFtb3VudCAtIGFtb3VudExlZnQsCgkvLyAgICAgICAgIG91dHB1dDogYnVybmluZywKCS8vICAgICAgIH0pCglieXRlYyAxNSAvLyAgYnVybkV2ZW50KGJvb2wsdWludDY0LHVpbnQ2NCkKCWJ5dGVjIDggLy8gMHgwMAoJaW50YyAwIC8vIDAKCWR1cAoJc2V0Yml0CglmcmFtZV9kaWcgLTEgLy8gYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWZyYW1lX2RpZyA0IC8vIGFtb3VudExlZnQ6IHVpbnQ2NAoJLQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMSAvLyBidXJuaW5nOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czoyOTgKCS8vIHJldHVybjsKCXJldHN1YgoKKmlmNl9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMDEKCS8vIGFzc2VydChnbG9iYWxzLnJvdW5kIC0gdGhpcy5sYXN0RXhoYXVzdEJsb2NrLnZhbHVlID4gQlVSTl9DT09MRE9XTiwgJ3dhaXQgYXQgbGVhc3QgNSBibG9ja3Mgc2luY2UgRXhoYXVzdCBCbG9jaycpCglnbG9iYWwgUm91bmQKCWJ5dGVjIDEzIC8vICAibGFzdF9leGhhdXN0X2Jsb2NrIgoJYXBwX2dsb2JhbF9nZXQKCS0KCWludGMgNCAvLyA1Cgk+CgoJLy8gd2FpdCBhdCBsZWFzdCA1IGJsb2NrcyBzaW5jZSBFeGhhdXN0IEJsb2NrCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMDMKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5idXJuUXVldWUudmFsdWUubGVuZ3RoOyBpICs9IDEpCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSA1IC8vIGk6IHVpbnQ2NAoKKmZvcl8xOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzAzCgkvLyBpIDwgdGhpcy5idXJuUXVldWUudmFsdWUubGVuZ3RoCglmcmFtZV9kaWcgNSAvLyBpOiB1aW50NjQKCWJ5dGVjIDEgLy8gICJidXJuX3F1ZXVlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgNCAvLyA1Cgk8CglieiAqZm9yXzFfZW5kCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzA0CgkvLyBjdXJyZW50VGFyZ2V0SW5RdWV1ZSA9IHRoaXMuYnVyblF1ZXVlLnZhbHVlW2ldCglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgNSAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJZnJhbWVfYnVyeSA2IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCgkvLyAqaWY3X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzA1CgkvLyB0aGlzLmlzUG9vbChjdXJyZW50VGFyZ2V0SW5RdWV1ZSkKCWZyYW1lX2RpZyA2IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCWNhbGxzdWIgaXNQb29sCglieiAqaWY3X2VuZAoKCS8vICppZjdfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzA2CgkvLyBkZWxlZ2F0ZWRUb1RhcmdldCA9IGN1cnJlbnRUYXJnZXRJblF1ZXVlLmdsb2JhbFN0YXRlKCdkZWxlZ2F0ZWRfc3Rha2UnKSBhcyB1aW50NjQKCWZyYW1lX2RpZyA2IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCWJ5dGVjIDIyIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGN1cnJlbnRUYXJnZXRJblF1ZXVlLmdsb2JhbFN0YXRlKCdkZWxlZ2F0ZWRfc3Rha2UnKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDcgLy8gZGVsZWdhdGVkVG9UYXJnZXQ6IHVpbnQ2NAoKCS8vICppZjhfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMDcKCS8vIGRlbGVnYXRlZFRvVGFyZ2V0IDwgYW1vdW50VG9CdXJuIC0gYnVybmluZwoJZnJhbWVfZGlnIDcgLy8gZGVsZWdhdGVkVG9UYXJnZXQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDAgLy8gYW1vdW50VG9CdXJuOiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIGJ1cm5pbmc6IHVpbnQ2NAoJLQoJPAoJYnogKmlmOF9lbHNlCgoJLy8gKmlmOF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMDgKCS8vIHRoaXMuZG9CdXJuVHhuKGN1cnJlbnRUYXJnZXRJblF1ZXVlLCBbZGVsZWdhdGVkVG9UYXJnZXQsIGJ1cm5Ub10pCglmcmFtZV9kaWcgNyAvLyBkZWxlZ2F0ZWRUb1RhcmdldDogdWludDY0CglpdG9iCglmcmFtZV9kaWcgLTIgLy8gYnVyblRvOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyA2IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCWNhbGxzdWIgZG9CdXJuVHhuCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzA5CgkvLyB0aGlzLmJ1cm5RdWV1ZS52YWx1ZVtpXSA9IEFwcElELnplcm9JbmRleAoJYnl0ZWMgMSAvLyAgImJ1cm5fcXVldWUiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDUgLy8gaTogdWludDY0CglpbnRjIDIgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCglwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAwCglyZXBsYWNlMwoJYnl0ZWMgMSAvLyAgImJ1cm5fcXVldWUiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMxMAoJLy8gYnVybmluZyArPSBkZWxlZ2F0ZWRUb1RhcmdldAoJZnJhbWVfZGlnIDEgLy8gYnVybmluZzogdWludDY0CglmcmFtZV9kaWcgNyAvLyBkZWxlZ2F0ZWRUb1RhcmdldDogdWludDY0CgkrCglmcmFtZV9idXJ5IDEgLy8gYnVybmluZzogdWludDY0CgliICppZjhfZW5kCgoqaWY4X2Vsc2U6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTIKCS8vIHRoaXMuZG9CdXJuVHhuKGN1cnJlbnRUYXJnZXRJblF1ZXVlLCBbYW1vdW50VG9CdXJuIC0gYnVybmluZywgYnVyblRvXSkKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFRvQnVybjogdWludDY0CglmcmFtZV9kaWcgMSAvLyBidXJuaW5nOiB1aW50NjQKCS0KCWl0b2IKCWZyYW1lX2RpZyAtMiAvLyBidXJuVG86IEFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIDYgLy8gY3VycmVudFRhcmdldEluUXVldWU6IHVpbnQ2NAoJY2FsbHN1YiBkb0J1cm5UeG4KCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTMKCS8vIGJ1cm5pbmcgPSBhbW91bnRUb0J1cm4KCWZyYW1lX2RpZyAwIC8vIGFtb3VudFRvQnVybjogdWludDY0CglmcmFtZV9idXJ5IDEgLy8gYnVybmluZzogdWludDY0CgliICpmb3JfMV9lbmQKCippZjhfZW5kOgoKKmlmN19lbmQ6CgoqZm9yXzFfY29udGludWU6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMDMKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDUgLy8gaTogdWludDY0CglpbnRjIDEgLy8gMQoJKwoJZnJhbWVfYnVyeSA1IC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzEKCipmb3JfMV9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMTkKCS8vIGFtb3VudExlZnQgPSB0aGlzLmdldE1pbnRBbW91bnQoYW1vdW50VG9CdXJuIC0gYnVybmluZykKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFRvQnVybjogdWludDY0CglmcmFtZV9kaWcgMSAvLyBidXJuaW5nOiB1aW50NjQKCS0KCWNhbGxzdWIgZ2V0TWludEFtb3VudAoJZnJhbWVfYnVyeSA4IC8vIGFtb3VudExlZnQ6IHVpbnQ2NAoKCS8vICppZjlfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozMjAKCS8vIGFtb3VudExlZnQgPiAwCglmcmFtZV9kaWcgOCAvLyBhbW91bnRMZWZ0OiB1aW50NjQKCWludGMgMCAvLyAwCgk+CglieiAqaWY5X2VuZAoKCS8vICppZjlfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzIxCgkvLyB0aGlzLmRvQXhmZXIoYnVyblR4bi5zZW5kZXIsIGFtb3VudExlZnQsIHRoaXMudG9rZW5JZC52YWx1ZSkKCWJ5dGVjIDIgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgOCAvLyBhbW91bnRMZWZ0OiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBTZW5kZXIKCWNhbGxzdWIgZG9BeGZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMyMgoJLy8gdGhpcy5sYXN0RXhoYXVzdEJsb2NrLnZhbHVlID0gZ2xvYmFscy5yb3VuZAoJYnl0ZWMgMTMgLy8gICJsYXN0X2V4aGF1c3RfYmxvY2siCglnbG9iYWwgUm91bmQKCWFwcF9nbG9iYWxfcHV0CgoqaWY5X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMyNQoJLy8gdGhpcy5kb3duU3VwcGx5Q291bnRlcnMoYnVybmluZywgYnVyblR4bi5hc3NldEFtb3VudCAtIGFtb3VudExlZnQpCglmcmFtZV9kaWcgLTEgLy8gYnVyblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWZyYW1lX2RpZyA4IC8vIGFtb3VudExlZnQ6IHVpbnQ2NAoJLQoJZnJhbWVfZGlnIDEgLy8gYnVybmluZzogdWludDY0CgljYWxsc3ViIGRvd25TdXBwbHlDb3VudGVycwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMyNwoJLy8gdGhpcy5idXJuRXZlbnQubG9nKHsKCS8vICAgICAgIGZpbGxlZDogYW1vdW50TGVmdCA+IDAsCgkvLyAgICAgICBhbW91bnQ6IGJ1cm5UeG4uYXNzZXRBbW91bnQgLSBhbW91bnRMZWZ0LAoJLy8gICAgICAgb3V0cHV0OiBidXJuaW5nLAoJLy8gICAgIH0pCglieXRlYyAxNSAvLyAgYnVybkV2ZW50KGJvb2wsdWludDY0LHVpbnQ2NCkKCWJ5dGVjIDggLy8gMHgwMAoJaW50YyAwIC8vIDAKCWZyYW1lX2RpZyA4IC8vIGFtb3VudExlZnQ6IHVpbnQ2NAoJaW50YyAwIC8vIDAKCT4KCXNldGJpdAoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgOCAvLyBhbW91bnRMZWZ0OiB1aW50NjQKCS0KCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDEgLy8gYnVybmluZzogdWludDY0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIG1pbnRWYWxpZGF0b3JDb21taXQodWludDY0LHBheSl2b2lkCiphYmlfcm91dGVfbWludFZhbGlkYXRvckNvbW1pdDoKCS8vIHN0YWtlQ29tbWl0OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAoc3Rha2VDb21taXQpIGZvciBtaW50VmFsaWRhdG9yQ29tbWl0IG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIHZhbGlkYXRvckFwcElEOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIG1pbnRWYWxpZGF0b3JDb21taXQodWludDY0LHBheSl2b2lkCgljYWxsc3ViIG1pbnRWYWxpZGF0b3JDb21taXQKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIG1pbnRWYWxpZGF0b3JDb21taXQodmFsaWRhdG9yQXBwSUQ6IEFwcElELCBzdGFrZUNvbW1pdDogUGF5VHhuKTogdm9pZAovLwovLyBTcGVjaWZpYyBtZXRob2QgdG8gbWludCB0aGUgTFNUIGZvciB0aGUgVmFsaWRhdG9yIFBvb2wgQ29udHJhY3QuCi8vIFRoZSBtaW50IGlzIGRvbmUgYnkgdGhlIEFkbWluIENvbnRyYWN0IGFuZCB0aGUgTFNUIGlzIHNlbnQgdG8gdGhlIFZhbGlkYXRvciBQb29sIENvbnRyYWN0LgptaW50VmFsaWRhdG9yQ29tbWl0OgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjMzOQoJLy8gYXNzZXJ0KHRoaXMuaXNQb29sKHZhbGlkYXRvckFwcElEKSkKCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWNhbGxzdWIgaXNQb29sCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNDAKCS8vIG9wZXJhdG9yQWRkcmVzcyA9IHZhbGlkYXRvckFwcElELmdsb2JhbFN0YXRlKCdvcGVyYXRvcicpIGFzIEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWJ5dGVjIDI0IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdmFsaWRhdG9yQXBwSUQuZ2xvYmFsU3RhdGUoJ29wZXJhdG9yJykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIG9wZXJhdG9yQWRkcmVzczogYWRkcmVzcwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM0MQoJLy8gdmVyaWZ5UGF5VHhuKHN0YWtlQ29tbWl0LCB7CgkvLyAgICAgICBzZW5kZXI6IG9wZXJhdG9yQWRkcmVzcywKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTIgLy8gc3Rha2VDb21taXQ6IFBheVR4bgoJZ3R4bnMgU2VuZGVyCglmcmFtZV9kaWcgMCAvLyBvcGVyYXRvckFkZHJlc3M6IGFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJzdGFrZUNvbW1pdCIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJvcGVyYXRvckFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTIgLy8gc3Rha2VDb21taXQ6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoic3Rha2VDb21taXQiLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM0NgoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLmFkZFRvT3BlcmF0b3JDb21taXQ+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IHZhbGlkYXRvckFwcElELAoJLy8gICAgICAgbWV0aG9kQXJnczogWwoJLy8gICAgICAgICB7CgkvLyAgICAgICAgICAgcmVjZWl2ZXI6IHZhbGlkYXRvckFwcElELmFkZHJlc3MsCgkvLyAgICAgICAgICAgYW1vdW50OiBzdGFrZUNvbW1pdC5hbW91bnQsCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICBdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM1MAoJLy8gcmVjZWl2ZXI6IHZhbGlkYXRvckFwcElELmFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM1MQoJLy8gYW1vdW50OiBzdGFrZUNvbW1pdC5hbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBzdGFrZUNvbW1pdDogUGF5VHhuCglndHhucyBBbW91bnQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJYnl0ZWMgMjYgLy8gIG1ldGhvZCAiYWRkVG9PcGVyYXRvckNvbW1pdChwYXkpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzQ3CgkvLyBhcHBsaWNhdGlvbklEOiB2YWxpZGF0b3JBcHBJRAoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzQ4CgkvLyBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcywKCS8vICAgICAgICAgICBhbW91bnQ6IHN0YWtlQ29tbWl0LmFtb3VudCwKCS8vICAgICAgICAgfSwKCS8vICAgICAgIF0KCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNTYKCS8vIGFtb3VudFRvTWludCA9IHRoaXMuZ2V0TWludEFtb3VudChzdGFrZUNvbW1pdC5hbW91bnQpCglmcmFtZV9kaWcgLTIgLy8gc3Rha2VDb21taXQ6IFBheVR4bgoJZ3R4bnMgQW1vdW50CgljYWxsc3ViIGdldE1pbnRBbW91bnQKCWZyYW1lX2J1cnkgMSAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM1NwoJLy8gdGhpcy5kb0F4ZmVyKHZhbGlkYXRvckFwcElELmFkZHJlc3MsIGFtb3VudFRvTWludCwgdGhpcy50b2tlbklkLnZhbHVlKQoJYnl0ZWMgMiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAxIC8vIGFtb3VudFRvTWludDogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCWNhbGxzdWIgZG9BeGZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM1OAoJLy8gdGhpcy51cFN1cHBseUNvdW50ZXJzKHN0YWtlQ29tbWl0LmFtb3VudCwgYW1vdW50VG9NaW50KQoJZnJhbWVfZGlnIDEgLy8gYW1vdW50VG9NaW50OiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBzdGFrZUNvbW1pdDogUGF5VHhuCglndHhucyBBbW91bnQKCWNhbGxzdWIgdXBTdXBwbHlDb3VudGVycwoJcmV0c3ViCgovLyByZW1vdmVWYWxpZGF0b3JDb21taXQodWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfcmVtb3ZlVmFsaWRhdG9yQ29tbWl0OgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhcHBUb0J1cm5Gcm9tOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHJlbW92ZVZhbGlkYXRvckNvbW1pdCh1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgcmVtb3ZlVmFsaWRhdG9yQ29tbWl0CglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyByZW1vdmVWYWxpZGF0b3JDb21taXQoYXBwVG9CdXJuRnJvbTogQXBwSUQsIGFtb3VudDogdWludDY0KTogdm9pZAovLwovLyBTcGVjaWZpYyBtZXRob2QgdG8gcmVtb3ZlIGZyb20gdGhlIG9wZXJhdG9yIGNvbW1pdCBpbiB0aGUgVmFsaWRhdG9yIFBvb2wgQ29udHJhY3QuCi8vCi8vIFRoZSBWYWxpZGF0b3IgUG9vbCBDb250cmFjdCB3aWxsIHNlbmQgdGhlIHZBbGdvIHRvIHRoZSBvcGVyYXRvciBhZGRyZXNzLgpyZW1vdmVWYWxpZGF0b3JDb21taXQ6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM2NwoJLy8gdGhpcy5pc1Bvb2woYXBwVG9CdXJuRnJvbSkKCWZyYW1lX2RpZyAtMSAvLyBhcHBUb0J1cm5Gcm9tOiBBcHBJRAoJY2FsbHN1YiBpc1Bvb2wKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNjgKCS8vIHZlcmlmeVR4bih0aGlzLnR4biwgewoJLy8gICAgICAgc2VuZGVyOiBhcHBUb0J1cm5Gcm9tLmdsb2JhbFN0YXRlKCdvcGVyYXRvcicpIGFzIEFkZHJlc3MsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBhcHBUb0J1cm5Gcm9tOiBBcHBJRAoJYnl0ZWMgMjQgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBhcHBUb0J1cm5Gcm9tLmdsb2JhbFN0YXRlKCdvcGVyYXRvcicpCglhc3NlcnQKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJ0aGlzLnR4biIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJhcHBUb0J1cm5Gcm9tLmdsb2JhbFN0YXRlKCdvcGVyYXRvcicpIGFzIEFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzcxCgkvLyB0b0J1cm4gPSB0aGlzLmdldEJ1cm5BbW91bnQoYW1vdW50KQoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudDogdWludDY0CgljYWxsc3ViIGdldEJ1cm5BbW91bnQKCWZyYW1lX2J1cnkgMCAvLyB0b0J1cm46IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM3MwoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLnJlbW92ZUZyb21PcGVyYXRvckNvbW1pdCwgdm9pZD4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogYXBwVG9CdXJuRnJvbSwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFt0b0J1cm4sIGFtb3VudF0sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4MzFiN2VjMTkgLy8gbWV0aG9kICJyZW1vdmVGcm9tT3BlcmF0b3JDb21taXQodWludDY0LHVpbnQ2NCl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozNzQKCS8vIGFwcGxpY2F0aW9uSUQ6IGFwcFRvQnVybkZyb20KCWZyYW1lX2RpZyAtMSAvLyBhcHBUb0J1cm5Gcm9tOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mzc1CgkvLyBtZXRob2RBcmdzOiBbdG9CdXJuLCBhbW91bnRdCglmcmFtZV9kaWcgMCAvLyB0b0J1cm46IHVpbnQ2NAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mzc4CgkvLyB0aGlzLnRva2VuQ2lyY3VsYXRpbmdTdXBwbHkudmFsdWUgLT0gYW1vdW50CglieXRlYyAzIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJLQoJYnl0ZWMgMyAvLyAgImNpcmN1bGF0aW5nX3N1cHBseSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGJ1cm5Ub0RlbGlucXVlbnRWYWxpZGF0b3IoYXhmZXIsdWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvcjoKCS8vIGFtb3VudE9wZXJhdG9yOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyB2YWxpZGF0b3JBcHBJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gYnVyblR4bjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyA3IC8vICBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAyIChidXJuVHhuKSBmb3IgYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvciBtdXN0IGJlIGEgYXhmZXIgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvcihheGZlcix1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvcgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvcihidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuLCB2YWxpZGF0b3JBcHBJRDogQXBwSUQsIGFtb3VudE9wZXJhdG9yOiB1aW50NjQpOiB2b2lkCi8vCi8vIE9uIERlbGlucXVlbmN5IFZhbGlkYXRvcnMgU0hPVUxEIG5vdCBoYXZlIHZBbGdvIGluIHRoZWlyIGJhbGFuY2UuCi8vIEl0J3MgZmlyc3QgY2FsbGVkIHdoZW4gZGVsaXF1ZW5jeSBpcyBzZXQsIGNhbiBiZSBjYWxsZWQgYWdhaW4gaWYgdGhlIGVudGlyZSB2QWxnbyBhbW91bnQgaXMgbm90IGJ1cm5lZC4KLy8gVGhlIHZBbGdvIHdpbGwgYmUgdHVybmVkIHRvIEFsZ28gYW5kIGFkZGVkIHRvIHRoZSBvcGVyYXRvciBjb21taXQKYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvcjoKCXByb3RvIDMgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXBuIDUKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozODcKCS8vIHRoaXMuaXNQb29sKHZhbGlkYXRvckFwcElEKQoJZnJhbWVfZGlnIC0yIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJY2FsbHN1YiBpc1Bvb2wKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozODgKCS8vIGFzc2VydChnbG9iYWxzLnJvdW5kIC0gdGhpcy5sYXN0RXhoYXVzdEJsb2NrLnZhbHVlID4gQlVSTl9DT09MRE9XTiwgImNhbiBvbmx5IGJ1cm4gaWYgd2UncmUgbm90IGV4aGF1c3RlZCIpCglnbG9iYWwgUm91bmQKCWJ5dGVjIDEzIC8vICAibGFzdF9leGhhdXN0X2Jsb2NrIgoJYXBwX2dsb2JhbF9nZXQKCS0KCWludGMgNCAvLyA1Cgk+CgoJLy8gY2FuIG9ubHkgYnVybiBpZiB3ZSdyZSBub3QgZXhoYXVzdGVkCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozODkKCS8vIHZlcmlmeUFzc2V0VHJhbnNmZXJUeG4oYnVyblR4biwgewoJLy8gICAgICAgeGZlckFzc2V0OiB0aGlzLnRva2VuSWQudmFsdWUsCgkvLyAgICAgICBhc3NldFNlbmRlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcywKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHhmZXJBc3NldAoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFhmZXJBc3NldAoJYnl0ZWMgMiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJidXJuVHhuIiwiZmllbGQiOiJ4ZmVyQXNzZXQiLCJleHBlY3RlZCI6InRoaXMudG9rZW5JZC52YWx1ZSJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldFNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoiYnVyblR4biIsImZpZWxkIjoiYXNzZXRTZW5kZXIiLCJleHBlY3RlZCI6InZhbGlkYXRvckFwcElELmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6MzkzCgkvLyBhc3NlcnQoKHZhbGlkYXRvckFwcElELmdsb2JhbFN0YXRlKCdzdGF0dXMnKSBhcyB1aW50NjQpICE9PSBERUxJTlFVRU5DWV9TVEFUVVMpCglmcmFtZV9kaWcgLTIgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglieXRlYyAxOSAvLyAgInN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiB2YWxpZGF0b3JBcHBJRC5nbG9iYWxTdGF0ZSgnc3RhdHVzJykKCWFzc2VydAoJaW50YyA1IC8vIDIKCSE9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozOTQKCS8vIGFtb3VudFRvVXBkYXRlOiB1aW50NjQgPSAwCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAwIC8vIGFtb3VudFRvVXBkYXRlOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozOTUKCS8vIHRvQnVybjogdWludDY0ID0KCS8vICAgICAgIHRoaXMuZ2V0QnVybkFtb3VudChidXJuVHhuLmFzc2V0QW1vdW50KSAtICh2YWxpZGF0b3JBcHBJRC5nbG9iYWxTdGF0ZSgnb3BlcmF0b3JfY29tbWl0JykgYXMgdWludDY0KQoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CgljYWxsc3ViIGdldEJ1cm5BbW91bnQKCWZyYW1lX2RpZyAtMiAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWJ5dGVjIDIzIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHZhbGlkYXRvckFwcElELmdsb2JhbFN0YXRlKCdvcGVyYXRvcl9jb21taXQnKQoJYXNzZXJ0CgktCglmcmFtZV9idXJ5IDEgLy8gdG9CdXJuOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozOTcKCS8vIGFtdEJ1cm5lZCA9IDAKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDIgLy8gYW10QnVybmVkOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czozOTgKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5idXJuUXVldWUudmFsdWUubGVuZ3RoOyBpICs9IDEpCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAzIC8vIGk6IHVpbnQ2NAoKKmZvcl8yOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mzk4CgkvLyBpIDwgdGhpcy5idXJuUXVldWUudmFsdWUubGVuZ3RoCglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWJ5dGVjIDEgLy8gICJidXJuX3F1ZXVlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgNCAvLyA1Cgk8CglieiAqZm9yXzJfZW5kCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Mzk5CgkvLyBjdXJyZW50VGFyZ2V0SW5RdWV1ZSA9IHRoaXMuYnVyblF1ZXVlLnZhbHVlW2ldCglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJZnJhbWVfYnVyeSA0IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCgkvLyAqaWYxMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQwMAoJLy8gdGhpcy5pc1Bvb2woY3VycmVudFRhcmdldEluUXVldWUpCglmcmFtZV9kaWcgNCAvLyBjdXJyZW50VGFyZ2V0SW5RdWV1ZTogdWludDY0CgljYWxsc3ViIGlzUG9vbAoJYnogKmlmMTBfZW5kCgoJLy8gKmlmMTBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDAxCgkvLyBkZWxlZ2F0ZWRUb1RhcmdldCA9IGN1cnJlbnRUYXJnZXRJblF1ZXVlLmdsb2JhbFN0YXRlKCdkZWxlZ2F0ZWRfc3Rha2UnKSBhcyB1aW50NjQKCWZyYW1lX2RpZyA0IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCWJ5dGVjIDIyIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGN1cnJlbnRUYXJnZXRJblF1ZXVlLmdsb2JhbFN0YXRlKCdkZWxlZ2F0ZWRfc3Rha2UnKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDUgLy8gZGVsZWdhdGVkVG9UYXJnZXQ6IHVpbnQ2NAoKCS8vICppZjExX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDAyCgkvLyBkZWxlZ2F0ZWRUb1RhcmdldCA+PSB0b0J1cm4KCWZyYW1lX2RpZyA1IC8vIGRlbGVnYXRlZFRvVGFyZ2V0OiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIHRvQnVybjogdWludDY0Cgk+PQoJYnogKmlmMTFfZWxzZQoKCS8vICppZjExX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQwMwoJLy8gdGhpcy5kb0J1cm5UeG4oY3VycmVudFRhcmdldEluUXVldWUsIFt0b0J1cm4sIHRoaXMuYXBwLmFkZHJlc3NdKQoJZnJhbWVfZGlnIDEgLy8gdG9CdXJuOiB1aW50NjQKCWl0b2IKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyA0IC8vIGN1cnJlbnRUYXJnZXRJblF1ZXVlOiB1aW50NjQKCWNhbGxzdWIgZG9CdXJuVHhuCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDA0CgkvLyBhbXRCdXJuZWQgKz0gdG9CdXJuCglmcmFtZV9kaWcgMiAvLyBhbXRCdXJuZWQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDEgLy8gdG9CdXJuOiB1aW50NjQKCSsKCWZyYW1lX2J1cnkgMiAvLyBhbXRCdXJuZWQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQwNQoJLy8gdG9CdXJuID0gMAoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgMSAvLyB0b0J1cm46IHVpbnQ2NAoJYiAqZm9yXzJfZW5kCgliICppZjExX2VuZAoKKmlmMTFfZWxzZToKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQwOAoJLy8gdGhpcy5kb0J1cm5UeG4oY3VycmVudFRhcmdldEluUXVldWUsIFtkZWxlZ2F0ZWRUb1RhcmdldCwgdGhpcy5hcHAuYWRkcmVzc10pCglmcmFtZV9kaWcgNSAvLyBkZWxlZ2F0ZWRUb1RhcmdldDogdWludDY0CglpdG9iCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJY29uY2F0CglmcmFtZV9kaWcgNCAvLyBjdXJyZW50VGFyZ2V0SW5RdWV1ZTogdWludDY0CgljYWxsc3ViIGRvQnVyblR4bgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQwOQoJLy8gYW10QnVybmVkICs9IGRlbGVnYXRlZFRvVGFyZ2V0CglmcmFtZV9kaWcgMiAvLyBhbXRCdXJuZWQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDUgLy8gZGVsZWdhdGVkVG9UYXJnZXQ6IHVpbnQ2NAoJKwoJZnJhbWVfYnVyeSAyIC8vIGFtdEJ1cm5lZDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDEwCgkvLyB0b0J1cm4gLT0gZGVsZWdhdGVkVG9UYXJnZXQKCWZyYW1lX2RpZyAxIC8vIHRvQnVybjogdWludDY0CglmcmFtZV9kaWcgNSAvLyBkZWxlZ2F0ZWRUb1RhcmdldDogdWludDY0CgktCglmcmFtZV9idXJ5IDEgLy8gdG9CdXJuOiB1aW50NjQKCippZjExX2VuZDoKCippZjEwX2VuZDoKCipmb3JfMl9jb250aW51ZToKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjM5OAoJLy8gaSArPSAxCglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWludGMgMSAvLyAxCgkrCglmcmFtZV9idXJ5IDMgLy8gaTogdWludDY0CgliICpmb3JfMgoKKmZvcl8yX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQxNAoJLy8gYW1vdW50VG9VcGRhdGUgPSB0aGlzLmdldEJ1cm5BbW91bnQodG9CdXJuIC0gYW10QnVybmVkKQoJZnJhbWVfZGlnIDEgLy8gdG9CdXJuOiB1aW50NjQKCWZyYW1lX2RpZyAyIC8vIGFtdEJ1cm5lZDogdWludDY0CgktCgljYWxsc3ViIGdldEJ1cm5BbW91bnQKCWZyYW1lX2J1cnkgMCAvLyBhbW91bnRUb1VwZGF0ZTogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDE2CgkvLyB0aGlzLmRvd25TdXBwbHlDb3VudGVycyhhbXRCdXJuZWQgKyBhbW91bnRPcGVyYXRvciwgYnVyblR4bi5hc3NldEFtb3VudCAtIGFtb3VudFRvVXBkYXRlKQoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgMCAvLyBhbW91bnRUb1VwZGF0ZTogdWludDY0CgktCglmcmFtZV9kaWcgMiAvLyBhbXRCdXJuZWQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIGFtb3VudE9wZXJhdG9yOiB1aW50NjQKCSsKCWNhbGxzdWIgZG93blN1cHBseUNvdW50ZXJzCgoJLy8gKmlmMTJfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MTgKCS8vIGFtb3VudFRvVXBkYXRlID4gMAoJZnJhbWVfZGlnIDAgLy8gYW1vdW50VG9VcGRhdGU6IHVpbnQ2NAoJaW50YyAwIC8vIDAKCT4KCWJ6ICppZjEyX2VuZAoKCS8vICppZjEyX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQxOQoJLy8gdGhpcy5kb0F4ZmVyKGJ1cm5UeG4uc2VuZGVyLCBhbW91bnRUb1VwZGF0ZSwgdGhpcy50b2tlbklkLnZhbHVlKQoJYnl0ZWMgMiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFRvVXBkYXRlOiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBTZW5kZXIKCWNhbGxzdWIgZG9BeGZlcgoKKmlmMTJfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDIxCgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzVmFsaWRhdG9yUG9vbC5wcm90b3R5cGUuYWRkVG9PcGVyYXRvckNvbW1pdD4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogdmFsaWRhdG9yQXBwSUQsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcywKCS8vICAgICAgICAgICBhbW91bnQ6IGFtdEJ1cm5lZCwKCS8vICAgICAgICAgfSwKCS8vICAgICAgIF0sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDI1CgkvLyByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDI2CgkvLyBhbW91bnQ6IGFtdEJ1cm5lZAoJZnJhbWVfZGlnIDIgLy8gYW10QnVybmVkOiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJYnl0ZWMgMjYgLy8gIG1ldGhvZCAiYWRkVG9PcGVyYXRvckNvbW1pdChwYXkpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDIyCgkvLyBhcHBsaWNhdGlvbklEOiB2YWxpZGF0b3JBcHBJRAoJZnJhbWVfZGlnIC0yIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDIzCgkvLyBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcywKCS8vICAgICAgICAgICBhbW91bnQ6IGFtdEJ1cm5lZCwKCS8vICAgICAgICAgfSwKCS8vICAgICAgIF0KCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0MzEKCS8vIHRoaXMuYnVybkV2ZW50LmxvZyh7CgkvLyAgICAgICBmaWxsZWQ6IGFtb3VudFRvVXBkYXRlID4gMCwKCS8vICAgICAgIGFtb3VudDogYnVyblR4bi5hc3NldEFtb3VudCwKCS8vICAgICAgIG91dHB1dDogYW10QnVybmVkLAoJLy8gICAgIH0pCglieXRlYyAxNSAvLyAgYnVybkV2ZW50KGJvb2wsdWludDY0LHVpbnQ2NCkKCWJ5dGVjIDggLy8gMHgwMAoJaW50YyAwIC8vIDAKCWZyYW1lX2RpZyAwIC8vIGFtb3VudFRvVXBkYXRlOiB1aW50NjQKCWludGMgMCAvLyAwCgk+CglzZXRiaXQKCWZyYW1lX2RpZyAtMSAvLyBidXJuVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMiAvLyBhbXRCdXJuZWQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyByZU1pbnREZWxpbnF1ZW50Q29tbWl0KHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfcmVNaW50RGVsaW5xdWVudENvbW1pdDoKCS8vIGFwcDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSByZU1pbnREZWxpbnF1ZW50Q29tbWl0KHVpbnQ2NCl2b2lkCgljYWxsc3ViIHJlTWludERlbGlucXVlbnRDb21taXQKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIHJlTWludERlbGlucXVlbnRDb21taXQoYXBwOiBBcHBJRCk6IHZvaWQKLy8KLy8gV2hlbiBEZWxpbnF1ZW5jeSBpcyBzb2x2ZWQgdGhlIG9wZXJhdG9yIHdpbGwgbWludCBoaXMgY29tbWl0IGJhY2sgaW50byB2QWxnby4KcmVNaW50RGVsaW5xdWVudENvbW1pdDoKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NDIKCS8vIHRoaXMuaXNQb29sKGFwcCkKCWZyYW1lX2RpZyAtMSAvLyBhcHA6IEFwcElECgljYWxsc3ViIGlzUG9vbAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ0MwoJLy8gYXNzZXJ0KChhcHAuZ2xvYmFsU3RhdGUoJ3N0YXR1cycpIGFzIHVpbnQ2NCkgIT09IERFTElOUVVFTkNZX1NUQVRVUywgJ211c3Qgc29sdmUgZGVsaW5xdWVuY3kgZmlyc3QnKQoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWJ5dGVjIDE5IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcC5nbG9iYWxTdGF0ZSgnc3RhdHVzJykKCWFzc2VydAoJaW50YyA1IC8vIDIKCSE9CgoJLy8gbXVzdCBzb2x2ZSBkZWxpbnF1ZW5jeSBmaXJzdAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDQ0CgkvLyBhbW91bnQgPSBhcHAuZ2xvYmFsU3RhdGUoJ29wZXJhdG9yX2NvbW1pdCcpIGFzIHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWJ5dGVjIDIzIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcC5nbG9iYWxTdGF0ZSgnb3BlcmF0b3JfY29tbWl0JykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIGFtb3VudDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDQ1CgkvLyBhc3NlcnQoCgkvLyAgICAgICBhcHAuYWRkcmVzcy5hc3NldEJhbGFuY2UodGhpcy50b2tlbklkLnZhbHVlKSA9PT0gMCwKCS8vICAgICAgICdJZiB0aGUgYXBwIGFscmVhZHkgaGFzIHZBTEdPIGl0IGNhbm5vdCBtaW50IHdpdGggdGhpcyBtZXRob2QnCgkvLyAgICAgKQoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJYnl0ZWMgMiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglpbnRjIDAgLy8gMAoJPT0KCgkvLyBJZiB0aGUgYXBwIGFscmVhZHkgaGFzIHZBTEdPIGl0IGNhbm5vdCBtaW50IHdpdGggdGhpcyBtZXRob2QKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ0OQoJLy8gYW1vdW50VG9NaW50ID0gdGhpcy5nZXRNaW50QW1vdW50KGFtb3VudCkKCWZyYW1lX2RpZyAwIC8vIGFtb3VudDogdWludDY0CgljYWxsc3ViIGdldE1pbnRBbW91bnQKCWZyYW1lX2J1cnkgMSAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ1MAoJLy8gdGhpcy5kb0F4ZmVyKGFwcC5hZGRyZXNzLCBhbW91bnRUb01pbnQsIHRoaXMudG9rZW5JZC52YWx1ZSkKCWJ5dGVjIDIgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMSAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJY2FsbHN1YiBkb0F4ZmVyCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDUyCgkvLyB0aGlzLnVwU3VwcGx5Q291bnRlcnMoYW1vdW50LCBhbW91bnRUb01pbnQpCglmcmFtZV9kaWcgMSAvLyBhbW91bnRUb01pbnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDAgLy8gYW1vdW50OiB1aW50NjQKCWNhbGxzdWIgdXBTdXBwbHlDb3VudGVycwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ1NAoJLy8gdGhpcy5taW50RXZlbnQubG9nKHsKCS8vICAgICAgIGluc3RhbnQ6IHRydWUsCgkvLyAgICAgICBhbW91bnQ6IGFtb3VudCwKCS8vICAgICAgIG91dHB1dDogYW1vdW50VG9NaW50LAoJLy8gICAgIH0pCglieXRlYyAyNSAvLyAgbWludEV2ZW50KGJvb2wsdWludDY0LHVpbnQ2NCkKCWJ5dGVjIDggLy8gMHgwMAoJaW50YyAwIC8vIDAKCWludGMgMSAvLyAxCglzZXRiaXQKCWZyYW1lX2RpZyAwIC8vIGFtb3VudDogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAxIC8vIGFtb3VudFRvTWludDogdWludDY0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGJpZCh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2JpZDoKCS8vIHZhbGlkYXRvckFwcElEOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGJpZCh1aW50NjQpdm9pZAoJY2FsbHN1YiBiaWQKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGJpZCh2YWxpZGF0b3JBcHBJRDogQXBwSUQpOiB2b2lkCi8vCi8vIEJpZCBWYWxpZGF0b3IgQXBwLCBoaWdoZXN0IGJpZGRlciBzaG91bGQgaGF2ZSB0aGUgbG93ZXN0IHNhdHVyYXRpb24gYnVmZmVyIHZhbHVlLgpiaWQ6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiAzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDY1CgkvLyBhc3NlcnQodGhpcy5pc1Bvb2wodmFsaWRhdG9yQXBwSUQpKQoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJY2FsbHN1YiBpc1Bvb2wKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ2NgoJLy8gaXNPbkxhdGVzdFZlcnNpb24gPQoJLy8gICAgICAgKHZhbGlkYXRvckFwcElELmdsb2JhbFN0YXRlKCdjb250cmFjdF92ZXJzaW9uJykgYXMgdWludDY0KSA9PT0gdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RWZXJzaW9uLnZhbHVlCglmcmFtZV9kaWcgLTEgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglwdXNoYnl0ZXMgMHg2MzZmNmU3NDcyNjE2Mzc0NWY3NjY1NzI3MzY5NmY2ZSAvLyAiY29udHJhY3RfdmVyc2lvbiIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiB2YWxpZGF0b3JBcHBJRC5nbG9iYWxTdGF0ZSgnY29udHJhY3RfdmVyc2lvbicpCglhc3NlcnQKCWJ5dGVjIDkgLy8gICJ2YWxpZGF0b3JfcG9vbF92ZXJzaW9uIgoJYXBwX2dsb2JhbF9nZXQKCT09CglmcmFtZV9idXJ5IDAgLy8gaXNPbkxhdGVzdFZlcnNpb246IGJvb2wKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NjgKCS8vIGFzc2VydChpc09uTGF0ZXN0VmVyc2lvbiwgJ2Nhbm5vdCBiaWQgaWYgbm90IG9uIGxhdGVzdCB2ZXJzaW9uJykKCWZyYW1lX2RpZyAwIC8vIGlzT25MYXRlc3RWZXJzaW9uOiBib29sCgoJLy8gY2Fubm90IGJpZCBpZiBub3Qgb24gbGF0ZXN0IHZlcnNpb24KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ2OQoJLy8gaXNEZWxlZ2F0YWJsZSA9ICh2YWxpZGF0b3JBcHBJRC5nbG9iYWxTdGF0ZSgnc3RhdHVzJykgYXMgdWludDY0KSA9PT0gTkVVVFJBTF9TVEFUVVMKCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWJ5dGVjIDE5IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHZhbGlkYXRvckFwcElELmdsb2JhbFN0YXRlKCdzdGF0dXMnKQoJYXNzZXJ0CglpbnRjIDAgLy8gMAoJPT0KCWZyYW1lX2J1cnkgMSAvLyBpc0RlbGVnYXRhYmxlOiBib29sCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDcwCgkvLyBhc3NlcnQoaXNEZWxlZ2F0YWJsZSwgJ29ubHkgYmlkIGRlbGVnYXRhYmxlIEFwcHMnKQoJZnJhbWVfZGlnIDEgLy8gaXNEZWxlZ2F0YWJsZTogYm9vbAoKCS8vIG9ubHkgYmlkIGRlbGVnYXRhYmxlIEFwcHMKCWFzc2VydAoKCS8vICppZjEzX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDcxCgkvLyAhdGhpcy5pc1Bvb2wodGhpcy5oaWdoZXN0QmlkZGVyLnZhbHVlKQoJYnl0ZWMgNyAvLyAgImhpZ2hlc3RfYmlkZGVyIgoJYXBwX2dsb2JhbF9nZXQKCWNhbGxzdWIgaXNQb29sCgkhCglieiAqaWYxM19lbmQKCgkvLyAqaWYxM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NzIKCS8vIHRoaXMuaGlnaGVzdEJpZGRlci52YWx1ZSA9IHZhbGlkYXRvckFwcElECglieXRlYyA3IC8vICAiaGlnaGVzdF9iaWRkZXIiCglmcmFtZV9kaWcgLTEgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ3MwoJLy8gcmV0dXJuOwoJcmV0c3ViCgoqaWYxM19lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NzUKCS8vIGNoYWxsZW5nZXJCdWZmZXIgPSB2YWxpZGF0b3JBcHBJRC5nbG9iYWxTdGF0ZSgnc2F0dXJhdGlvbl9idWZmZXInKSBhcyB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWJ5dGVjIDEyIC8vICAic2F0dXJhdGlvbl9idWZmZXIiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdmFsaWRhdG9yQXBwSUQuZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25fYnVmZmVyJykKCWFzc2VydAoJZnJhbWVfYnVyeSAyIC8vIGNoYWxsZW5nZXJCdWZmZXI6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ3NgoJLy8gaGlnaGVzdEJ1ZmZlciA9IHRoaXMuaGlnaGVzdEJpZGRlci52YWx1ZS5nbG9iYWxTdGF0ZSgnc2F0dXJhdGlvbl9idWZmZXInKSBhcyB1aW50NjQKCWJ5dGVjIDcgLy8gICJoaWdoZXN0X2JpZGRlciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAxMiAvLyAgInNhdHVyYXRpb25fYnVmZmVyIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuaGlnaGVzdEJpZGRlci52YWx1ZS5nbG9iYWxTdGF0ZSgnc2F0dXJhdGlvbl9idWZmZXInKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDMgLy8gaGlnaGVzdEJ1ZmZlcjogdWludDY0CgoJLy8gKmlmMTRfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0NzcKCS8vIGNoYWxsZW5nZXJCdWZmZXIgPiBoaWdoZXN0QnVmZmVyCglmcmFtZV9kaWcgMiAvLyBjaGFsbGVuZ2VyQnVmZmVyOiB1aW50NjQKCWZyYW1lX2RpZyAzIC8vIGhpZ2hlc3RCdWZmZXI6IHVpbnQ2NAoJPgoJYnogKmlmMTRfZW5kCgoJLy8gKmlmMTRfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NDc4CgkvLyB0aGlzLmhpZ2hlc3RCaWRkZXIudmFsdWUgPSB2YWxpZGF0b3JBcHBJRAoJYnl0ZWMgNyAvLyAgImhpZ2hlc3RfYmlkZGVyIgoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJYXBwX2dsb2JhbF9wdXQKCippZjE0X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ4MQoJLy8gdGhpcy5iaWRFdmVudC5sb2coewoJLy8gICAgICAgYXBwOiB2YWxpZGF0b3JBcHBJRCwKCS8vICAgICAgIGlzSGVpZ2hlc3Q6IHRoaXMuaGlnaGVzdEJpZGRlci52YWx1ZSA9PT0gdmFsaWRhdG9yQXBwSUQsCgkvLyAgICAgfSkKCXB1c2hieXRlcyAweDc2ZTA4OTYxIC8vIGJpZEV2ZW50KHVpbnQ2NCxib29sKQoJZnJhbWVfZGlnIC0xIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJaXRvYgoJYnl0ZWMgOCAvLyAweDAwCglpbnRjIDAgLy8gMAoJYnl0ZWMgNyAvLyAgImhpZ2hlc3RfYmlkZGVyIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCT09CglzZXRiaXQKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gZGVjbGFyZVJld2FyZHModWludDY0LHVpbnQ2NCxwYXkpdm9pZAoqYWJpX3JvdXRlX2RlY2xhcmVSZXdhcmRzOgoJLy8gcmV3YXJkUGF5OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAocmV3YXJkUGF5KSBmb3IgZGVjbGFyZVJld2FyZHMgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gYmxvY2s6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHByb3Bvc2VyOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGRlY2xhcmVSZXdhcmRzKHVpbnQ2NCx1aW50NjQscGF5KXZvaWQKCWNhbGxzdWIgZGVjbGFyZVJld2FyZHMKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGRlY2xhcmVSZXdhcmRzKHByb3Bvc2VyOiBBcHBJRCwgYmxvY2s6IHVpbnQ2NCwgcmV3YXJkUGF5OiBQYXlUeG4pOiB2b2lkCmRlY2xhcmVSZXdhcmRzOgoJcHJvdG8gMyAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0ODgKCS8vIGFzc2VydChibG9ja3NbYmxvY2tdLnByb3Bvc2VyID09PSBwcm9wb3Nlci5hZGRyZXNzKQoJZnJhbWVfZGlnIC0yIC8vIGJsb2NrOiB1aW50NjQKCWJsb2NrIEJsa1Byb3Bvc2VyCglmcmFtZV9kaWcgLTEgLy8gcHJvcG9zZXI6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0ODkKCS8vIGFzc2VydChyZXdhcmRQYXkucmVjZWl2ZXIgPT09IHRoaXMuYXBwLmFkZHJlc3MpCglmcmFtZV9kaWcgLTMgLy8gcmV3YXJkUGF5OiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ5MAoJLy8gYW1vdW50ID0gcmV3YXJkUGF5LmFtb3VudCAtIHdpZGVSYXRpbyhbdGhpcy5wcm90b2NvbEZlZS52YWx1ZSwgcmV3YXJkUGF5LmFtb3VudF0sIFsxMDBdKQoJZnJhbWVfZGlnIC0zIC8vIHJld2FyZFBheTogUGF5VHhuCglndHhucyBBbW91bnQKCWJ5dGVjIDE4IC8vICAicHJvdG9jb2xfZmVlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMyAvLyByZXdhcmRQYXk6IFBheVR4bgoJZ3R4bnMgQW1vdW50CgltdWx3CglpbnRjIDAgLy8gMAoJaW50YyAxMCAvLyAxMDAKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CgktCglmcmFtZV9idXJ5IDAgLy8gYW1vdW50OiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0OTEKCS8vIHRoaXMudG90YWxTdGFrZS52YWx1ZSArPSBhbW91bnQKCWJ5dGVjIDYgLy8gICJ0b3RhbF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyBhbW91bnQ6IHVpbnQ2NAoJKwoJYnl0ZWMgNiAvLyAgInRvdGFsX3N0YWtlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0OTIKCS8vIHRoaXMudXBTdXBwbHlDb3VudGVycyhhbW91bnQsIDApCglpbnRjIDAgLy8gMAoJZnJhbWVfZGlnIDAgLy8gYW1vdW50OiB1aW50NjQKCWNhbGxzdWIgdXBTdXBwbHlDb3VudGVycwoJcmV0c3ViCgovLyBkZWxlZ2F0ZVN0YWtlKHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2RlbGVnYXRlU3Rha2U6CgkvLyB2YWxpZGF0b3JBcHBJRDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGRlbGVnYXRlU3Rha2UodWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGRlbGVnYXRlU3Rha2UKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGRlbGVnYXRlU3Rha2UoYW1vdW50OiB1aW50NjQsIHZhbGlkYXRvckFwcElEOiBBcHBJRCk6IHZvaWQKZGVsZWdhdGVTdGFrZToKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjQ5NwoJLy8gYXNzZXJ0KHRoaXMuaXNQb29sKHZhbGlkYXRvckFwcElEKSkKCWZyYW1lX2RpZyAtMiAvLyB2YWxpZGF0b3JBcHBJRDogQXBwSUQKCWNhbGxzdWIgaXNQb29sCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0OTgKCS8vIGFzc2VydCh2YWxpZGF0b3JBcHBJRCA9PT0gdGhpcy5oaWdoZXN0QmlkZGVyLnZhbHVlLCAnY2FuIG9ubHkgZGVsZWdhdGUgdG8gaGlnaGVzdCBiaWRkZXIgYWNjb3VudCcpCglmcmFtZV9kaWcgLTIgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglieXRlYyA3IC8vICAiaGlnaGVzdF9iaWRkZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBjYW4gb25seSBkZWxlZ2F0ZSB0byBoaWdoZXN0IGJpZGRlciBhY2NvdW50Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo0OTkKCS8vIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNWYWxpZGF0b3JQb29sLnByb3RvdHlwZS5hZGRTdGFrZSwgdm9pZD4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogdmFsaWRhdG9yQXBwSUQsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcywKCS8vICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKCS8vICAgICAgICAgfSwKCS8vICAgICAgIF0sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTAzCgkvLyByZWNlaXZlcjogdmFsaWRhdG9yQXBwSUQuYWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIHZhbGlkYXRvckFwcElEOiBBcHBJRAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTA0CgkvLyBhbW91bnQ6IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudDogdWludDY0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoJaXR4bl9uZXh0CglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCWJ5dGVjIDI3IC8vICBtZXRob2QgImFkZFN0YWtlKHBheSl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MDAKCS8vIGFwcGxpY2F0aW9uSUQ6IHZhbGlkYXRvckFwcElECglmcmFtZV9kaWcgLTIgLy8gdmFsaWRhdG9yQXBwSUQ6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MDEKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgewoJLy8gICAgICAgICAgIHJlY2VpdmVyOiB2YWxpZGF0b3JBcHBJRC5hZGRyZXNzLAoJLy8gICAgICAgICAgIGFtb3VudDogYW1vdW50LAoJLy8gICAgICAgICB9LAoJLy8gICAgICAgXQoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBzbml0Y2hUb0J1cm4odWludDY0KXZvaWQKKmFiaV9yb3V0ZV9zbml0Y2hUb0J1cm46CgkvLyBhcHA6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgc25pdGNoVG9CdXJuKHVpbnQ2NCl2b2lkCgljYWxsc3ViIHNuaXRjaFRvQnVybgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gc25pdGNoVG9CdXJuKGFwcDogQXBwSUQpOiB2b2lkCi8vCi8vIFB1c2ggbmV3IFZhbGlkYXRvciBBcHAgdG8gdGhlIGJ1cm4gcXVldWUuIElmIHRoZSBzYXR1cmF0aW9uIGJ1ZmZlciBpcyBoaWdoZXIgdGhhbiB0aGUgY3VycmVudCBsb3dlc3QgaW4gdGhlIHF1ZXVlLCB0aGUgbmV3IEFwcCB3aWxsIGJlIHNuaXRjaGVkLgpzbml0Y2hUb0J1cm46Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiA0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTE0CgkvLyBhc3NlcnQodGhpcy5pc1Bvb2woYXBwKSkKCWZyYW1lX2RpZyAtMSAvLyBhcHA6IEFwcElECgljYWxsc3ViIGlzUG9vbAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTE1CgkvLyBzYXRTbml0Y2ggPSBhcHAuZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25fYnVmZmVyJykgYXMgdWludDY0CglmcmFtZV9kaWcgLTEgLy8gYXBwOiBBcHBJRAoJYnl0ZWMgMTIgLy8gICJzYXR1cmF0aW9uX2J1ZmZlciIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBhcHAuZ2xvYmFsU3RhdGUoJ3NhdHVyYXRpb25fYnVmZmVyJykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIHNhdFNuaXRjaDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTE2CgkvLyBtaW5QcmlvID0gYXBwCglmcmFtZV9kaWcgLTEgLy8gYXBwOiBBcHBJRAoJZnJhbWVfYnVyeSAxIC8vIG1pblByaW86IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUxNwoJLy8gbWluU2F0ID0gc2F0U25pdGNoCglmcmFtZV9kaWcgMCAvLyBzYXRTbml0Y2g6IHVpbnQ2NAoJZnJhbWVfYnVyeSAyIC8vIG1pblNhdDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTIwCgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSArPSAxKQoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgMyAvLyBpOiB1aW50NjQKCipmb3JfMzoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUyMAoJLy8gaSA8IHF1ZXVlLmxlbmd0aAoJZnJhbWVfZGlnIDMgLy8gaTogdWludDY0CglpbnRjIDQgLy8gNQoJPAoJYnogKmZvcl8zX2VuZAoKCS8vICppZjE1X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTIxCgkvLyAhdGhpcy5pc1Bvb2wocXVldWVbaV0pCglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJY2FsbHN1YiBpc1Bvb2wKCSEKCWJ6ICppZjE1X2VuZAoKCS8vICppZjE1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUyMgoJLy8gcXVldWVbaV0gPSBtaW5QcmlvCglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWZyYW1lX2RpZyAxIC8vIG1pblByaW86IHVpbnQ2NAoJaXRvYgoJcmVwbGFjZTMKCWJ5dGVjIDEgLy8gICJidXJuX3F1ZXVlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCWIgKmZvcl8zX2VuZAoKKmlmMTVfZW5kOgoJLy8gKmlmMTZfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MjUKCS8vIChxdWV1ZVtpXS5nbG9iYWxTdGF0ZSgnc2F0dXJhdGlvbl9idWZmZXInKSBhcyB1aW50NjQpIDwgbWluU2F0CglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJYnl0ZWMgMTIgLy8gICJzYXR1cmF0aW9uX2J1ZmZlciIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBxdWV1ZVtpXS5nbG9iYWxTdGF0ZSgnc2F0dXJhdGlvbl9idWZmZXInKQoJYXNzZXJ0CglmcmFtZV9kaWcgMiAvLyBtaW5TYXQ6IHVpbnQ2NAoJPAoJYnogKmlmMTZfZW5kCgoJLy8gKmlmMTZfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTI2CgkvLyB0ZW1wID0gbWluUHJpbwoJZnJhbWVfZGlnIDEgLy8gbWluUHJpbzogdWludDY0CglmcmFtZV9idXJ5IDQgLy8gdGVtcDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTI3CgkvLyBtaW5QcmlvID0gcXVldWVbaV0KCWJ5dGVjIDEgLy8gICJidXJuX3F1ZXVlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAzIC8vIGk6IHVpbnQ2NAoJaW50YyAyIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJaW50YyAyIC8vIDgKCWV4dHJhY3QzCglidG9pCglmcmFtZV9idXJ5IDEgLy8gbWluUHJpbzogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTI4CgkvLyBtaW5TYXQgPSBxdWV1ZVtpXS5nbG9iYWxTdGF0ZSgnc2F0dXJhdGlvbl9idWZmZXInKSBhcyB1aW50NjQKCWJ5dGVjIDEgLy8gICJidXJuX3F1ZXVlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAzIC8vIGk6IHVpbnQ2NAoJaW50YyAyIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJaW50YyAyIC8vIDgKCWV4dHJhY3QzCglidG9pCglieXRlYyAxMiAvLyAgInNhdHVyYXRpb25fYnVmZmVyIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHF1ZXVlW2ldLmdsb2JhbFN0YXRlKCdzYXR1cmF0aW9uX2J1ZmZlcicpCglhc3NlcnQKCWZyYW1lX2J1cnkgMiAvLyBtaW5TYXQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUyOQoJLy8gcXVldWVbaV0gPSB0ZW1wCglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWZyYW1lX2RpZyA0IC8vIHRlbXA6IHVpbnQ2NAoJaXRvYgoJcmVwbGFjZTMKCWJ5dGVjIDEgLy8gICJidXJuX3F1ZXVlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCippZjE2X2VuZDoKCipmb3JfM19jb250aW51ZToKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUyMAoJLy8gaSArPSAxCglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWludGMgMSAvLyAxCgkrCglmcmFtZV9idXJ5IDMgLy8gaTogdWludDY0CgliICpmb3JfMwoKKmZvcl8zX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjUzMwoJLy8gdGhpcy5zbml0Y2hRdWV1ZUV2ZW50LmxvZyh7CgkvLyAgICAgICBxdWV1ZTogdGhpcy5idXJuUXVldWUudmFsdWUsCgkvLyAgICAgfSkKCXB1c2hieXRlcyAweGYxODA2MDIzIC8vIHNuaXRjaFF1ZXVlRXZlbnQodWludDY0WzVdKQoJYnl0ZWMgMSAvLyAgImJ1cm5fcXVldWUiCglhcHBfZ2xvYmFsX2dldAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gbXVsdGlTbml0Y2hUb0J1cm4odWludDY0W10pdm9pZAoqYWJpX3JvdXRlX211bHRpU25pdGNoVG9CdXJuOgoJLy8gYXBwczogdWludDY0W10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBtdWx0aVNuaXRjaFRvQnVybih1aW50NjRbXSl2b2lkCgljYWxsc3ViIG11bHRpU25pdGNoVG9CdXJuCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBtdWx0aVNuaXRjaFRvQnVybihhcHBzOiBBcHBJRFtdKTogdm9pZAptdWx0aVNuaXRjaFRvQnVybjoKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MzkKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgYXBwcy5sZW5ndGg7IGkgKz0gMSkKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDAgLy8gaTogdWludDY0CgoqZm9yXzQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1MzkKCS8vIGkgPCBhcHBzLmxlbmd0aAoJZnJhbWVfZGlnIDAgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gYXBwczogQXBwSURbXQoJbGVuCglpbnRjIDIgLy8gOAoJLwoJPAoJYnogKmZvcl80X2VuZAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU0MAoJLy8gYXBwVG9Tbml0Y2ggPSBhcHBzW2ldCglmcmFtZV9kaWcgLTEgLy8gYXBwczogQXBwSURbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAwIC8vIGk6IHVpbnQ2NAoJaW50YyAyIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAyIC8vIDgKCWV4dHJhY3QzCglidG9pCglmcmFtZV9idXJ5IDEgLy8gYXBwVG9Tbml0Y2g6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU0MQoJLy8gdGhpcy5zbml0Y2hUb0J1cm4oYXBwVG9Tbml0Y2gpCglmcmFtZV9kaWcgMSAvLyBhcHBUb1NuaXRjaDogdWludDY0CgljYWxsc3ViIHNuaXRjaFRvQnVybgoKKmZvcl80X2NvbnRpbnVlOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTM5CgkvLyBpICs9IDEKCWZyYW1lX2RpZyAwIC8vIGk6IHVpbnQ2NAoJaW50YyAxIC8vIDEKCSsKCWZyYW1lX2J1cnkgMCAvLyBpOiB1aW50NjQKCWIgKmZvcl80CgoqZm9yXzRfZW5kOgoJcmV0c3ViCgovLyByZVN0YWtlRnJvbVNuaXRjaCh1aW50NjQsdWludDY0LHBheSl2b2lkCiphYmlfcm91dGVfcmVTdGFrZUZyb21Tbml0Y2g6CgkvLyByZXN0YWtlVHhuOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAocmVzdGFrZVR4bikgZm9yIHJlU3Rha2VGcm9tU25pdGNoIG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIHJlY2VpdmVyQXBwOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBzbml0Y2hlZEFwcDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSByZVN0YWtlRnJvbVNuaXRjaCh1aW50NjQsdWludDY0LHBheSl2b2lkCgljYWxsc3ViIHJlU3Rha2VGcm9tU25pdGNoCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyByZVN0YWtlRnJvbVNuaXRjaChzbml0Y2hlZEFwcDogQXBwSUQsIHJlY2VpdmVyQXBwOiBBcHBJRCwgcmVzdGFrZVR4bjogUGF5VHhuKTogdm9pZAovLwovLyBGb2xsb3cgdXAgb3BlcmF0aW9uIGNhbGxlZCBieSB0aGUgc25pdGNoZWQgQXBwIHRvIHBlcmZvcm0gcmVzdGFraW5nIG9mIHRoZSBkZWxlZ2F0ZWQgQWxnbyBjbGF3ZWQgYmFjawovLwovLyBAcGFyYW0ge0FwcElEfSBzbml0Y2hlZEFwcCAtIFRoZSBBcHBJRCBvZiB0aGUgdmFsaWRhdG9yIHRvIHNuaXRjaAovLyBAcGFyYW0ge0FwcElEfSByZWNlaXZlckFwcCAtIFRoZSBBcHBJRCBvZiB0aGUgcmVjZWl2ZXIgb2YgdGhlIGRlbGVnYXRlZCBBbGdvCi8vIEBwYXJhbSB7UGF5VHhufSByZXN0YWtlVHhuIC0gVGhlIFBheVR4biBmb2xsb3dpbmcgdGhlIHNuaXRjaCB0aGF0IHNlbmRzIHRoZSBkZWxlZ2F0ZWQgQWxnbyB0byBiZSBtb3ZlZCBiYWNrIGFuZCByZXN0YWtlZApyZVN0YWtlRnJvbVNuaXRjaDoKCXByb3RvIDMgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU1MwoJLy8gYXNzZXJ0KAoJLy8gICAgICAgdGhpcy5pc1Bvb2woc25pdGNoZWRBcHApICYmIHRoaXMudHhuLnNlbmRlciA9PT0gc25pdGNoZWRBcHAuYWRkcmVzcywKCS8vICAgICAgICdvbmx5IHRoZSBzbml0Y2hlZCBhcHAgY2FuIGluaXRpYXRlIHRoaXMgbWV0aG9kJwoJLy8gICAgICkKCWZyYW1lX2RpZyAtMSAvLyBzbml0Y2hlZEFwcDogQXBwSUQKCWNhbGxzdWIgaXNQb29sCglkdXAKCWJ6ICpza2lwX2FuZDAKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBzbml0Y2hlZEFwcDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJPT0KCSYmCgoqc2tpcF9hbmQwOgoJLy8gb25seSB0aGUgc25pdGNoZWQgYXBwIGNhbiBpbml0aWF0ZSB0aGlzIG1ldGhvZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTU3CgkvLyBhc3NlcnQodGhpcy5pc1Bvb2wocmVjZWl2ZXJBcHApIHx8IHJlY2VpdmVyQXBwID09PSB0aGlzLmFwcCwgJ3JlY2VpdmVyIG11c3QgYmUgYSBwb29sIG9yIHRoZSBhZG1pbicpCglmcmFtZV9kaWcgLTIgLy8gcmVjZWl2ZXJBcHA6IEFwcElECgljYWxsc3ViIGlzUG9vbAoJZHVwCglibnogKnNraXBfb3IwCglmcmFtZV9kaWcgLTIgLy8gcmVjZWl2ZXJBcHA6IEFwcElECgl0eG5hIEFwcGxpY2F0aW9ucyAwCgk9PQoJfHwKCipza2lwX29yMDoKCS8vIHJlY2VpdmVyIG11c3QgYmUgYSBwb29sIG9yIHRoZSBhZG1pbgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTU4CgkvLyB2ZXJpZnlQYXlUeG4ocmVzdGFrZVR4biwgewoJLy8gICAgICAgc2VuZGVyOiBzbml0Y2hlZEFwcC5hZGRyZXNzLAoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMyAvLyByZXN0YWtlVHhuOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHNuaXRjaGVkQXBwOiBBcHBJRAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicmVzdGFrZVR4biIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJzbml0Y2hlZEFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0zIC8vIHJlc3Rha2VUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicmVzdGFrZVR4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gKmlmMTdfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1NjIKCS8vIHJlY2VpdmVyQXBwICE9PSB0aGlzLmFwcAoJZnJhbWVfZGlnIC0yIC8vIHJlY2VpdmVyQXBwOiBBcHBJRAoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJIT0KCWJ6ICppZjE3X2VuZAoKCS8vICppZjE3X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU2MwoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLmFkZFN0YWtlLCB2b2lkPih7CgkvLyAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IHJlY2VpdmVyQXBwLAoJLy8gICAgICAgICBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgICAgewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHJlY2VpdmVyQXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IHJlc3Rha2VUeG4uYW1vdW50LAoJLy8gICAgICAgICAgIH0sCgkvLyAgICAgICAgIF0sCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAxIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1NjcKCS8vIHJlY2VpdmVyOiByZWNlaXZlckFwcC5hZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gcmVjZWl2ZXJBcHA6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1NjgKCS8vIGFtb3VudDogcmVzdGFrZVR4bi5hbW91bnQKCWZyYW1lX2RpZyAtMyAvLyByZXN0YWtlVHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCWl0eG5fbmV4dAoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglieXRlYyAyNyAvLyAgbWV0aG9kICJhZGRTdGFrZShwYXkpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTY0CgkvLyBhcHBsaWNhdGlvbklEOiByZWNlaXZlckFwcAoJZnJhbWVfZGlnIC0yIC8vIHJlY2VpdmVyQXBwOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTY1CgkvLyBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgICAgewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHJlY2VpdmVyQXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IHJlc3Rha2VUeG4uYW1vdW50LAoJLy8gICAgICAgICAgIH0sCgkvLyAgICAgICAgIF0KCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCippZjE3X2VuZDoKCXJldHN1YgoKLy8gbWFrZUZsYXNoTG9hblJlcXVlc3QocGF5LHVpbnQ2NFtdLHVpbnQ2NFtdKXZvaWQKKmFiaV9yb3V0ZV9tYWtlRmxhc2hMb2FuUmVxdWVzdDoKCS8vIGFwcFRvSW5jbHVkZTogdWludDY0W10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gYW1vdW50czogdWludDY0W10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gcGF5RmVlVHhuOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMiAocGF5RmVlVHhuKSBmb3IgbWFrZUZsYXNoTG9hblJlcXVlc3QgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBtYWtlRmxhc2hMb2FuUmVxdWVzdChwYXksdWludDY0W10sdWludDY0W10pdm9pZAoJY2FsbHN1YiBtYWtlRmxhc2hMb2FuUmVxdWVzdAoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gbWFrZUZsYXNoTG9hblJlcXVlc3QocGF5RmVlVHhuOiBQYXlUeG4sIGFtb3VudHM6IHVpbnQ2NFtdLCBhcHBUb0luY2x1ZGU6IEFwcElEW10pOiB2b2lkCi8vCi8vIEFsZ28gYmFsYW5jZXMgaW4gdGhlIFZhbGlkYXRvciBQb29sIENvbnRyYWN0cyBzaXQgaWRsZSwgYnV0IGNhbiBiZSBlZmZpY2llbnRseSB1c2UgZm9yIGZsYXNobG9hbnMuCi8vIFRoaXMgY3JlYXRlcyBhIG5ldyByb3V0ZSBvZiByZXZlbnVlIGZvciB0aGUgcHJvdG9jb2wuCi8vIFRoZSBtZXRob2QgY2hlY2tzIHRoYXQgZWFjaCBmbGFzaGxvYW4gY2FsbCBpcyByZXBhaWQgdGhyb3VnaCB0aGUgc3Vic2VxdWVudCBjaGVja0JhbGFuY2UgbWV0aG9kIGNhbGwuCi8vCi8vIEBwYXJhbSB7UGF5VHhufSBwYXlGZWVUeG4gLSBGbGFzaExvYW4gZmVlIHBheW1lbnQ7IHRoZSBmZWUgaXMgZmxhdCBhbmQgZ3Jvd3Mgd2l0aCBkZW1hbmQgZm9yIHRoZSBmbGFzaGxvYW4gc2VydmljZQovLyBAcGFyYW0ge3VpbnQ2NFtdfSBhbW91bnRzIC0gVGhlIGFtb3VudCBvZiBBbGdvIHRvIHRha2UgZnJvbSBlYWNoIGFwcCwgdGhlIHZhbHVlIGhhcyB0byBiZSBjb3JyZWxhdGVkIHRvIHRoZSBhcHAgaW4gdGhlIGFwcFRvSW5jbHVkZSBhcnJheSBhdCB0aGUgc2FtZSBpbmRleAovLyBAcGFyYW0ge0FwcElEfSBhcHBUb0luY2x1ZGUgLSBUaGUgQXBwSUQgb2YgdGhlIFZhbGlkYXRvciBQb29sIENvbnRyYWN0cyB0byBleGVjdXRlIHRoZSBmbGFzaGxvYW4gcmVxdWVzdCBvbgptYWtlRmxhc2hMb2FuUmVxdWVzdDoKCXByb3RvIDMgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXBuIDQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1ODUKCS8vIHRoaXMuZ2V0Rkxjb3VudGVyKCkKCWNhbGxzdWIgZ2V0Rkxjb3VudGVyCglwb3AKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1ODYKCS8vIHRoaXMuZmxhc2hMb2FuQ291bnRlci52YWx1ZSArPSBhcHBUb0luY2x1ZGUubGVuZ3RoCglieXRlYyA1IC8vICAiZmxhc2hsb2FuX2NvdW50ZXIiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0zIC8vIGFwcFRvSW5jbHVkZTogQXBwSURbXQoJbGVuCglpbnRjIDIgLy8gOAoJLwoJKwoJYnl0ZWMgNSAvLyAgImZsYXNobG9hbl9jb3VudGVyIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1ODcKCS8vIGtlZXBGZWUgPSB0aGlzLmZsYXNoTG9hbkNvdW50ZXIudmFsdWUgKyBGTEFTSF9MT0FOX0ZFRQoJYnl0ZWMgNSAvLyAgImZsYXNobG9hbl9jb3VudGVyIgoJYXBwX2dsb2JhbF9nZXQKCXB1c2hpbnQgMTAwMDAwMDAKCSsKCWZyYW1lX2J1cnkgMCAvLyBrZWVwRmVlOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo1ODkKCS8vIHZlcmlmeVBheVR4bihwYXlGZWVUeG4sIHsKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiBrZWVwRmVlLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXlGZWVUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicGF5RmVlVHhuIiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gcGF5RmVlVHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZnJhbWVfZGlnIDAgLy8ga2VlcEZlZTogdWludDY0Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicGF5RmVlVHhuIiwiZmllbGQiOiJhbW91bnQiLCJleHBlY3RlZCI6ImtlZXBGZWUifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTk0CgkvLyBhc3NlcnQoYW1vdW50cy5sZW5ndGggPT09IGFwcFRvSW5jbHVkZS5sZW5ndGgsICdhcnJheSBsZW5ndGggW2Ftb3VudCwgYXBwVG9JbmNsdWRlXSBtaXNtYXRjaCcpCglmcmFtZV9kaWcgLTIgLy8gYW1vdW50czogdWludDY0W10KCWxlbgoJaW50YyAyIC8vIDgKCS8KCWZyYW1lX2RpZyAtMyAvLyBhcHBUb0luY2x1ZGU6IEFwcElEW10KCWxlbgoJaW50YyAyIC8vIDgKCS8KCT09CgoJLy8gYXJyYXkgbGVuZ3RoIFthbW91bnQsIGFwcFRvSW5jbHVkZV0gbWlzbWF0Y2gKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjU5NQoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBhcHBUb0luY2x1ZGUubGVuZ3RoOyBpICs9IDEpCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAxIC8vIGk6IHVpbnQ2NAoKKmZvcl81OgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTk1CgkvLyBpIDwgYXBwVG9JbmNsdWRlLmxlbmd0aAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTMgLy8gYXBwVG9JbmNsdWRlOiBBcHBJRFtdCglsZW4KCWludGMgMiAvLyA4CgkvCgk8CglieiAqZm9yXzVfZW5kCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTk2CgkvLyB0aGlzLnBlbmRpbmdHcm91cC5hZGRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNWYWxpZGF0b3JQb29sLnByb3RvdHlwZS5mbGFzaGxvYW4sIHZvaWQ+KHsKCS8vICAgICAgICAgYXBwbGljYXRpb25JRDogYXBwVG9JbmNsdWRlW2ldLAoJLy8gICAgICAgICBtZXRob2RBcmdzOiBbYW1vdW50c1tpXSwgdGhpcy50eG4uc2VuZGVyXSwKCS8vICAgICAgIH0pCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4NGE1MzU2Y2MgLy8gbWV0aG9kICJmbGFzaGxvYW4odWludDY0LGFkZHJlc3Mpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTk3CgkvLyBhcHBsaWNhdGlvbklEOiBhcHBUb0luY2x1ZGVbaV0KCWZyYW1lX2RpZyAtMyAvLyBhcHBUb0luY2x1ZGU6IEFwcElEW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTk4CgkvLyBtZXRob2RBcmdzOiBbYW1vdW50c1tpXSwgdGhpcy50eG4uc2VuZGVyXQoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudHM6IHVpbnQ2NFtdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglpbnRjIDIgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDIgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjYwMQoJLy8gZm9yIChsZXQgaiA9IHRoaXMudHhuLmdyb3VwSW5kZXg7IGogPCB0aGlzLnR4bkdyb3VwLmxlbmd0aDsgaiArPSAxKQoJdHhuIEdyb3VwSW5kZXgKCWZyYW1lX2J1cnkgMiAvLyBqOiB1aW50NjQKCipmb3JfNjoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjYwMQoJLy8gaiA8IHRoaXMudHhuR3JvdXAubGVuZ3RoCglmcmFtZV9kaWcgMiAvLyBqOiB1aW50NjQKCWdsb2JhbCBHcm91cFNpemUKCTwKCWJ6ICpmb3JfNl9lbmQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2MDIKCS8vIHR4biA9IHRoaXMudHhuR3JvdXBbal0KCWZyYW1lX2RpZyAyIC8vIGo6IHVpbnQ2NAoJZnJhbWVfYnVyeSAzIC8vIHR4bjogdHhuCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjAzCgkvLyByZXBhaWQgPSBmYWxzZQoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgNCAvLyByZXBhaWQ6IGJvb2wKCgkvLyAqaWYxOF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjYwNQoJLy8gdHhuLnR5cGVFbnVtID09PSBUcmFuc2FjdGlvblR5cGUuQXBwbGljYXRpb25DYWxsICYmCgkvLyAgICAgICAgICAgdHhuLmFwcGxpY2F0aW9uSUQgPT09IGFwcFRvSW5jbHVkZVtpXSAmJgoJLy8gICAgICAgICAgIHR4bi5vbkNvbXBsZXRpb24gPT09IDAgJiYKCS8vICAgICAgICAgICB0eG4ubnVtQXBwQXJncyA9PT0gMSAmJgoJLy8gICAgICAgICAgIHR4bi5hcHBsaWNhdGlvbkFyZ3NbMF0gPT09IG1ldGhvZCgnY2hlY2tCYWxhbmNlKCk6dm9pZCcpCglmcmFtZV9kaWcgMyAvLyB0eG46IHR4bgoJZ3R4bnMgVHlwZUVudW0KCWludGMgMyAvLyAgYXBwbAoJPT0KCWR1cAoJYnogKnNraXBfYW5kMQoJZnJhbWVfZGlnIDMgLy8gdHhuOiB0eG4KCWd0eG5zIEFwcGxpY2F0aW9uSUQKCWZyYW1lX2RpZyAtMyAvLyBhcHBUb0luY2x1ZGU6IEFwcElEW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJPT0KCSYmCgoqc2tpcF9hbmQxOgoJZHVwCglieiAqc2tpcF9hbmQyCglmcmFtZV9kaWcgMyAvLyB0eG46IHR4bgoJZ3R4bnMgT25Db21wbGV0aW9uCglpbnRjIDAgLy8gMAoJPT0KCSYmCgoqc2tpcF9hbmQyOgoJZHVwCglieiAqc2tpcF9hbmQzCglmcmFtZV9kaWcgMyAvLyB0eG46IHR4bgoJZ3R4bnMgTnVtQXBwQXJncwoJaW50YyAxIC8vIDEKCT09CgkmJgoKKnNraXBfYW5kMzoKCWR1cAoJYnogKnNraXBfYW5kNAoJZnJhbWVfZGlnIDMgLy8gdHhuOiB0eG4KCWd0eG5zIEFwcGxpY2F0aW9uQXJncyAwCglwdXNoYnl0ZXMgMHgzZmE4OGZkMCAvLyBtZXRob2QgImNoZWNrQmFsYW5jZSgpOnZvaWQiCgk9PQoJJiYKCipza2lwX2FuZDQ6CglieiAqaWYxOF9lbmQKCgkvLyAqaWYxOF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2MTEKCS8vIHJlcGFpZCA9IHRydWUKCWludGMgMSAvLyAxCglmcmFtZV9idXJ5IDQgLy8gcmVwYWlkOiBib29sCgoqaWYxOF9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2MTMKCS8vIGFzc2VydChyZXBhaWQpCglmcmFtZV9kaWcgNCAvLyByZXBhaWQ6IGJvb2wKCWFzc2VydAoKKmZvcl82X2NvbnRpbnVlOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjAxCgkvLyBqICs9IDEKCWZyYW1lX2RpZyAyIC8vIGo6IHVpbnQ2NAoJaW50YyAxIC8vIDEKCSsKCWZyYW1lX2J1cnkgMiAvLyBqOiB1aW50NjQKCWIgKmZvcl82CgoqZm9yXzZfZW5kOgoKKmZvcl81X2NvbnRpbnVlOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NTk1CgkvLyBpICs9IDEKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJaW50YyAxIC8vIDEKCSsKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCWIgKmZvcl81CgoqZm9yXzVfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjE2CgkvLyB0aGlzLnBlbmRpbmdHcm91cC5zdWJtaXQoKQoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2MTcKCS8vIHRoaXMuZmxhc2hMb2FuRXZlbnQubG9nKHsgYXBwczogYXBwVG9JbmNsdWRlLCBhbW91bnRzOiBhbW91bnRzIH0pCglwdXNoYnl0ZXMgMHhhYTRlNjQxYSAvLyBmbGFzaExvYW5FdmVudCh1aW50NjRbXSx1aW50NjRbXSkKCWJ5dGVjIDAgLy8gIGluaXRpYWwgaGVhZAoJYnl0ZWMgMCAvLyAgaW5pdGlhbCB0YWlsCglwdXNoYnl0ZXMgMHgwMDA0IC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMyAvLyBhcHBUb0luY2x1ZGU6IEFwcElEW10KCWR1cAoJbGVuCglpbnRjIDIgLy8gOAoJLwoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnRzOiB1aW50NjRbXQoJZHVwCglsZW4KCWludGMgMiAvLyA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJcG9wIC8vIHBvcCBoZWFkIG9mZnNldAoJY29uY2F0IC8vIGNvbmNhdCBoZWFkIGFuZCB0YWlsCgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBnZXRGTGNvdW50ZXIoKXVpbnQ2NAoqYWJpX3JvdXRlX2dldEZMY291bnRlcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMjAgLy8gMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZ2V0Rkxjb3VudGVyKCl1aW50NjQKCWNhbGxzdWIgZ2V0Rkxjb3VudGVyCglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gZ2V0Rkxjb3VudGVyKCk6IHVpbnQ2NApnZXRGTGNvdW50ZXI6Cglwcm90byAwIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoKCS8vICppZjE5X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjIyCgkvLyB0aGlzLmxhc3RGbGFzaGxvYW5CbG9jay52YWx1ZSA9PT0gZ2xvYmFscy5yb3VuZAoJYnl0ZWMgMjEgLy8gICJsYXN0X2ZsYXNobG9hbl9ibG9jayIKCWFwcF9nbG9iYWxfZ2V0CglnbG9iYWwgUm91bmQKCT09CglieiAqaWYxOV9lbmQKCgkvLyAqaWYxOV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2MjMKCS8vIHJldHVybiB0aGlzLmZsYXNoTG9hbkNvdW50ZXIudmFsdWU7CglieXRlYyA1IC8vICAiZmxhc2hsb2FuX2NvdW50ZXIiCglhcHBfZ2xvYmFsX2dldAoJYiAqZ2V0Rkxjb3VudGVyKnJldHVybgoKKmlmMTlfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjI1CgkvLyByZWR1Y2UgPSBnbG9iYWxzLnJvdW5kIC0gdGhpcy5sYXN0Rmxhc2hsb2FuQmxvY2sudmFsdWUKCWdsb2JhbCBSb3VuZAoJYnl0ZWMgMjEgLy8gICJsYXN0X2ZsYXNobG9hbl9ibG9jayIKCWFwcF9nbG9iYWxfZ2V0CgktCglmcmFtZV9idXJ5IDAgLy8gcmVkdWNlOiB1aW50NjQKCgkvLyAqaWYyMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjYyNgoJLy8gcmVkdWNlID4gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlCglmcmFtZV9kaWcgMCAvLyByZWR1Y2U6IHVpbnQ2NAoJYnl0ZWMgNSAvLyAgImZsYXNobG9hbl9jb3VudGVyIgoJYXBwX2dsb2JhbF9nZXQKCT4KCWJ6ICppZjIwX2VuZAoKCS8vICppZjIwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjYyNwoJLy8gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlID0gMAoJYnl0ZWMgNSAvLyAgImZsYXNobG9hbl9jb3VudGVyIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjI4CgkvLyByZXR1cm4gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlOwoJYnl0ZWMgNSAvLyAgImZsYXNobG9hbl9jb3VudGVyIgoJYXBwX2dsb2JhbF9nZXQKCWIgKmdldEZMY291bnRlcipyZXR1cm4KCippZjIwX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjYzMAoJLy8gdGhpcy5mbGFzaExvYW5Db3VudGVyLnZhbHVlIC09IHJlZHVjZSAqIDIgPiB0aGlzLmZsYXNoTG9hbkNvdW50ZXIudmFsdWUgPyByZWR1Y2UgKiAyIDogcmVkdWNlCglieXRlYyA1IC8vICAiZmxhc2hsb2FuX2NvdW50ZXIiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDAgLy8gcmVkdWNlOiB1aW50NjQKCWludGMgNSAvLyAyCgkqCglieXRlYyA1IC8vICAiZmxhc2hsb2FuX2NvdW50ZXIiCglhcHBfZ2xvYmFsX2dldAoJPgoJYnogKnRlcm5hcnkyX2ZhbHNlCglmcmFtZV9kaWcgMCAvLyByZWR1Y2U6IHVpbnQ2NAoJaW50YyA1IC8vIDIKCSoKCWIgKnRlcm5hcnkyX2VuZAoKKnRlcm5hcnkyX2ZhbHNlOgoJZnJhbWVfZGlnIDAgLy8gcmVkdWNlOiB1aW50NjQKCip0ZXJuYXJ5Ml9lbmQ6CgktCglieXRlYyA1IC8vICAiZmxhc2hsb2FuX2NvdW50ZXIiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjYzMQoJLy8gcmV0dXJuIHRoaXMuZmxhc2hMb2FuQ291bnRlci52YWx1ZTsKCWJ5dGVjIDUgLy8gICJmbGFzaGxvYW5fY291bnRlciIKCWFwcF9nbG9iYWxfZ2V0CgoqZ2V0Rkxjb3VudGVyKnJldHVybjoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBhcmM2Ml9nZXRfY2lyY3VsYXRpbmdfc3VwcGx5KHVpbnQ2NCl1aW50NjQKKmFiaV9yb3V0ZV9hcmM2Ml9nZXRfY2lyY3VsYXRpbmdfc3VwcGx5OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyMCAvLyAweDE1MWY3Yzc1CgoJLy8gYXNzZXRJZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBhcmM2Ml9nZXRfY2lyY3VsYXRpbmdfc3VwcGx5KHVpbnQ2NCl1aW50NjQKCWNhbGxzdWIgYXJjNjJfZ2V0X2NpcmN1bGF0aW5nX3N1cHBseQoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGFyYzYyX2dldF9jaXJjdWxhdGluZ19zdXBwbHkoYXNzZXRJZDogQXNzZXRJRCk6IHVpbnQ2NAphcmM2Ml9nZXRfY2lyY3VsYXRpbmdfc3VwcGx5OgoJcHJvdG8gMSAxCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjM2CgkvLyBhc3NlcnQoYXNzZXRJZCA9PT0gdGhpcy50b2tlbklkLnZhbHVlLCAnaW52YWxpZCBhc3NldCBpZCcpCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZDogQXNzZXRJRAoJYnl0ZWMgMiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gaW52YWxpZCBhc3NldCBpZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjM3CgkvLyByZXR1cm4gdGhpcy50b2tlbkNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlOwoJYnl0ZWMgMyAvLyAgImNpcmN1bGF0aW5nX3N1cHBseSIKCWFwcF9nbG9iYWxfZ2V0CglyZXRzdWIKCi8vIGNhbGN1bGF0ZUxTVFJhdGlvKCk6IHZvaWQKLy8KLy8gU1VCUk9VVElORVMKY2FsY3VsYXRlTFNUUmF0aW86Cglwcm90byAwIDAKCgkvLyAqaWYyMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjY0NQoJLy8gdGhpcy50b2tlbkNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlID09PSAwCglieXRlYyAzIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAwCgk9PQoJYnogKmlmMjFfZW5kCgoJLy8gKmlmMjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjQ2CgkvLyByZXR1cm47CglyZXRzdWIKCippZjIxX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjY0OAoJLy8gdGhpcy5wZWdSYXRpby52YWx1ZSA9IHdpZGVSYXRpbyhbdGhpcy50b3RhbFN0YWtlLnZhbHVlLCBTQ0FMRV0sIFt0aGlzLnRva2VuQ2lyY3VsYXRpbmdTdXBwbHkudmFsdWVdKQoJYnl0ZWMgMTQgLy8gICJwZWdfcmF0aW8iCglieXRlYyA2IC8vICAidG90YWxfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJaW50YyA2IC8vIDEwMDAwMAoJbXVsdwoJaW50YyAwIC8vIDAKCWJ5dGVjIDMgLy8gICJjaXJjdWxhdGluZ19zdXBwbHkiCglhcHBfZ2xvYmFsX2dldAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCgkvLyB3aWRlUmF0aW8gZmFpbGVkCglhc3NlcnQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGdldE1pbnRBbW91bnQoYW1vdW50OiB1aW50NjQpOiB1aW50NjQKZ2V0TWludEFtb3VudDoKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjY1MgoJLy8gdGhpcy5jYWxjdWxhdGVMU1RSYXRpbygpCgljYWxsc3ViIGNhbGN1bGF0ZUxTVFJhdGlvCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjUzCgkvLyByZXR1cm4gd2lkZVJhdGlvKFthbW91bnQsIFNDQUxFXSwgW3RoaXMucGVnUmF0aW8udmFsdWVdKTsKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJaW50YyA2IC8vIDEwMDAwMAoJbXVsdwoJaW50YyAwIC8vIDAKCWJ5dGVjIDE0IC8vICAicGVnX3JhdGlvIgoJYXBwX2dsb2JhbF9nZXQKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglyZXRzdWIKCi8vIGdldEJ1cm5BbW91bnQoYW1vdW50OiB1aW50NjQpOiB1aW50NjQKZ2V0QnVybkFtb3VudDoKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjY1NwoJLy8gdGhpcy5jYWxjdWxhdGVMU1RSYXRpbygpCgljYWxsc3ViIGNhbGN1bGF0ZUxTVFJhdGlvCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjU4CgkvLyByZXR1cm4gd2lkZVJhdGlvKFthbW91bnQsIHRoaXMucGVnUmF0aW8udmFsdWVdLCBbU0NBTEVdKTsKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJYnl0ZWMgMTQgLy8gICJwZWdfcmF0aW8iCglhcHBfZ2xvYmFsX2dldAoJbXVsdwoJaW50YyAwIC8vIDAKCWludGMgNiAvLyAxMDAwMDAKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglyZXRzdWIKCi8vIHVwU3VwcGx5Q291bnRlcnMoc3Rha2U6IHVpbnQ2NCwgc3VwcGx5OiB1aW50NjQpOiB2b2lkCnVwU3VwcGx5Q291bnRlcnM6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2NjIKCS8vIHRoaXMudG90YWxTdGFrZS52YWx1ZSArPSBzdGFrZQoJYnl0ZWMgNiAvLyAgInRvdGFsX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBzdGFrZTogdWludDY0CgkrCglieXRlYyA2IC8vICAidG90YWxfc3Rha2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjY2MwoJLy8gdGhpcy50b2tlbkNpcmN1bGF0aW5nU3VwcGx5LnZhbHVlICs9IHN1cHBseQoJYnl0ZWMgMyAvLyAgImNpcmN1bGF0aW5nX3N1cHBseSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTIgLy8gc3VwcGx5OiB1aW50NjQKCSsKCWJ5dGVjIDMgLy8gICJjaXJjdWxhdGluZ19zdXBwbHkiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBkb3duU3VwcGx5Q291bnRlcnMoc3Rha2U6IHVpbnQ2NCwgc3VwcGx5OiB1aW50NjQpOiB2b2lkCmRvd25TdXBwbHlDb3VudGVyczoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjY2NwoJLy8gdGhpcy50b3RhbFN0YWtlLnZhbHVlIC09IHN0YWtlCglieXRlYyA2IC8vICAidG90YWxfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIHN0YWtlOiB1aW50NjQKCS0KCWJ5dGVjIDYgLy8gICJ0b3RhbF9zdGFrZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjY4CgkvLyB0aGlzLnRva2VuQ2lyY3VsYXRpbmdTdXBwbHkudmFsdWUgLT0gc3VwcGx5CglieXRlYyAzIC8vICAiY2lyY3VsYXRpbmdfc3VwcGx5IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMiAvLyBzdXBwbHk6IHVpbnQ2NAoJLQoJYnl0ZWMgMyAvLyAgImNpcmN1bGF0aW5nX3N1cHBseSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGRvQnVyblR4bih0YXJnZXQ6IEFwcElELCBhcmdzOiBbdWludDY0LCBBZGRyZXNzXSk6IHZvaWQKZG9CdXJuVHhuOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjcyCgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzVmFsaWRhdG9yUG9vbC5wcm90b3R5cGUuYnVyblN0YWtlLCB2b2lkPih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiB0YXJnZXQsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbYXJnc1swXSwgYXJnc1sxXV0sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4M2RjN2FlNzkgLy8gbWV0aG9kICJidXJuU3Rha2UodWludDY0LGFkZHJlc3Mpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjczCgkvLyBhcHBsaWNhdGlvbklEOiB0YXJnZXQKCWZyYW1lX2RpZyAtMSAvLyB0YXJnZXQ6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2NzQKCS8vIG1ldGhvZEFyZ3M6IFthcmdzWzBdLCBhcmdzWzFdXQoJZnJhbWVfZGlnIC0yIC8vIGFyZ3M6IFt1aW50NjQsIEFkZHJlc3NdCglleHRyYWN0IDAgOAoJYnRvaQoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMiAvLyBhcmdzOiBbdWludDY0LCBBZGRyZXNzXQoJZXh0cmFjdCA4IDMyCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gZG9BeGZlcihyZWNlaXZlcjogQWRkcmVzcywgYW1vdW50OiB1aW50NjQsIGFzc2V0OiBBc3NldElEKTogdm9pZApkb0F4ZmVyOgoJcHJvdG8gMyAwCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6Njc5CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiByZWNlaXZlciwKCS8vICAgICAgIGFzc2V0QW1vdW50OiBhbW91bnQsCgkvLyAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDcgLy8gIGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjgwCgkvLyBhc3NldFJlY2VpdmVyOiByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHJlY2VpdmVyOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2ODEKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjY4MgoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gaXNQb29sKGFwcDogQXBwSUQpOiBib29sZWFuCmlzUG9vbDoKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjY4NwoJLy8gcmV0dXJuIGFwcC5jcmVhdG9yID09PSB0aGlzLmFwcC5hZGRyZXNzOwoJZnJhbWVfZGlnIC0xIC8vIGFwcDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CglyZXRzdWIKCi8vIHF1ZXVlSXNFbXB0eSgpOiBib29sZWFuCnF1ZXVlSXNFbXB0eToKCXByb3RvIDAgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjkxCgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYnVyblF1ZXVlLnZhbHVlLmxlbmd0aDsgaSArPSAxKQoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgMCAvLyBpOiB1aW50NjQKCipmb3JfNzoKCS8vIGNvbnRyYWN0c1xDYWVsdXNBZG1pbi5hbGdvLnRzOjY5MQoJLy8gaSA8IHRoaXMuYnVyblF1ZXVlLnZhbHVlLmxlbmd0aAoJZnJhbWVfZGlnIDAgLy8gaTogdWludDY0CglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDQgLy8gNQoJPAoJYnogKmZvcl83X2VuZAoKCS8vICppZjIyX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c0FkbWluLmFsZ28udHM6NjkyCgkvLyB0aGlzLmJ1cm5RdWV1ZS52YWx1ZVtpXSAhPT0gQXBwSUQuemVyb0luZGV4CglieXRlYyAxIC8vICAiYnVybl9xdWV1ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJaW50YyAwIC8vIDAKCSE9CglieiAqaWYyMl9lbmQKCgkvLyAqaWYyMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2OTMKCS8vIHJldHVybiBmYWxzZTsKCWludGMgMCAvLyAwCgliICpxdWV1ZUlzRW1wdHkqcmV0dXJuCgoqaWYyMl9lbmQ6CgoqZm9yXzdfY29udGludWU6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2OTEKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDAgLy8gaTogdWludDY0CglpbnRjIDEgLy8gMQoJKwoJZnJhbWVfYnVyeSAwIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzcKCipmb3JfN19lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzQWRtaW4uYWxnby50czo2OTYKCS8vIHJldHVybiB0cnVlOwoJaW50YyAxIC8vIDEKCipxdWV1ZUlzRW1wdHkqcmV0dXJuOgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCipjcmVhdGVfTm9PcDoKCXR4biBOdW1BcHBBcmdzCglieiAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCglwdXNoYnl0ZXMgMHhiODQ0N2IzNiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4YmI2ZDg0MWMgLy8gbWV0aG9kICJNQU5BR0VSX2NyZWF0ZVRva2VuKCl2b2lkIgoJcHVzaGJ5dGVzIDB4N2MzYWRlZmEgLy8gbWV0aG9kICJNQU5BR0VSX3VwZGF0ZUJvb3N0VG9rZW5JRCh1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweGMxNDZkZTU2IC8vIG1ldGhvZCAiTUFOQUdFUl9jaGFuZ2VCb29zdFRpZXIodWludDY0W10pdm9pZCIKCXB1c2hieXRlcyAweDAwYzNhNzE0IC8vIG1ldGhvZCAiZ2V0Qm9vc3RUaWVyKHVpbnQ2NCl1aW50NjQiCglwdXNoYnl0ZXMgMHgzY2U1OTgzYSAvLyBtZXRob2QgIk1BTkFHRVJfY2hhbmdlTWFuYWdlcihhZGRyZXNzKXZvaWQiCglwdXNoYnl0ZXMgMHhkMGQ4NjJmMyAvLyBtZXRob2QgIk1BTkFHRVJfY2hhbmdlUHJvdG9jb2xGZWUodWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHgyYmQ1YTU5NiAvLyBtZXRob2QgIk1BTkFHRVJfbG9ja0NvbnRyYWN0KCl2b2lkIgoJcHVzaGJ5dGVzIDB4MjZhOTkyODMgLy8gbWV0aG9kICJNQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdENvc3QodWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHgwOTllNWNmZCAvLyBtZXRob2QgIk1BTkFHRVJfdXBkYXRlUG9vbENvbnRyYWN0UHJvZ3JhbSh1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweGE0YjUwM2MxIC8vIG1ldGhvZCAiTUFOQUdFUl93cml0ZVBvb2xDb250cmFjdFByb2dyYW0odWludDY0LGJ5dGVbXSl2b2lkIgoJcHVzaGJ5dGVzIDB4NTA3NWQ4ZjAgLy8gbWV0aG9kICJhZGRWYWxpZGF0b3IocGF5KXZvaWQiCglwdXNoYnl0ZXMgMHg2NzUzOTZmNCAvLyBtZXRob2QgIm1pbnRSZXF1ZXN0KHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4NTE5YWJmYTAgLy8gbWV0aG9kICJidXJuUmVxdWVzdChheGZlcixhZGRyZXNzKXZvaWQiCglwdXNoYnl0ZXMgMHhlNTc0N2UwNyAvLyBtZXRob2QgIm1pbnRWYWxpZGF0b3JDb21taXQodWludDY0LHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4NDMyMTlhYzAgLy8gbWV0aG9kICJyZW1vdmVWYWxpZGF0b3JDb21taXQodWludDY0LHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4OTEwNzBiODAgLy8gbWV0aG9kICJidXJuVG9EZWxpbnF1ZW50VmFsaWRhdG9yKGF4ZmVyLHVpbnQ2NCx1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweDAzNzQ3OTMzIC8vIG1ldGhvZCAicmVNaW50RGVsaW5xdWVudENvbW1pdCh1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweGVkZGZlNTk4IC8vIG1ldGhvZCAiYmlkKHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4OGFmNDk2MzkgLy8gbWV0aG9kICJkZWNsYXJlUmV3YXJkcyh1aW50NjQsdWludDY0LHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4ZTQ1YzQwZTAgLy8gbWV0aG9kICJkZWxlZ2F0ZVN0YWtlKHVpbnQ2NCx1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweDMxNzU2YTk1IC8vIG1ldGhvZCAic25pdGNoVG9CdXJuKHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4NjY1OTk3MDMgLy8gbWV0aG9kICJtdWx0aVNuaXRjaFRvQnVybih1aW50NjRbXSl2b2lkIgoJcHVzaGJ5dGVzIDB4OTExYzNjNDYgLy8gbWV0aG9kICJyZVN0YWtlRnJvbVNuaXRjaCh1aW50NjQsdWludDY0LHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4OGJmYTExNTcgLy8gbWV0aG9kICJtYWtlRmxhc2hMb2FuUmVxdWVzdChwYXksdWludDY0W10sdWludDY0W10pdm9pZCIKCXB1c2hieXRlcyAweDdjOTQxYjM1IC8vIG1ldGhvZCAiZ2V0Rkxjb3VudGVyKCl1aW50NjQiCglwdXNoYnl0ZXMgMHg1Y2MyYzUzNSAvLyBtZXRob2QgImFyYzYyX2dldF9jaXJjdWxhdGluZ19zdXBwbHkodWludDY0KXVpbnQ2NCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfTUFOQUdFUl9jcmVhdGVUb2tlbiAqYWJpX3JvdXRlX01BTkFHRVJfdXBkYXRlQm9vc3RUb2tlbklEICphYmlfcm91dGVfTUFOQUdFUl9jaGFuZ2VCb29zdFRpZXIgKmFiaV9yb3V0ZV9nZXRCb29zdFRpZXIgKmFiaV9yb3V0ZV9NQU5BR0VSX2NoYW5nZU1hbmFnZXIgKmFiaV9yb3V0ZV9NQU5BR0VSX2NoYW5nZVByb3RvY29sRmVlICphYmlfcm91dGVfTUFOQUdFUl9sb2NrQ29udHJhY3QgKmFiaV9yb3V0ZV9NQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdENvc3QgKmFiaV9yb3V0ZV9NQU5BR0VSX3VwZGF0ZVBvb2xDb250cmFjdFByb2dyYW0gKmFiaV9yb3V0ZV9NQU5BR0VSX3dyaXRlUG9vbENvbnRyYWN0UHJvZ3JhbSAqYWJpX3JvdXRlX2FkZFZhbGlkYXRvciAqYWJpX3JvdXRlX21pbnRSZXF1ZXN0ICphYmlfcm91dGVfYnVyblJlcXVlc3QgKmFiaV9yb3V0ZV9taW50VmFsaWRhdG9yQ29tbWl0ICphYmlfcm91dGVfcmVtb3ZlVmFsaWRhdG9yQ29tbWl0ICphYmlfcm91dGVfYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvciAqYWJpX3JvdXRlX3JlTWludERlbGlucXVlbnRDb21taXQgKmFiaV9yb3V0ZV9iaWQgKmFiaV9yb3V0ZV9kZWNsYXJlUmV3YXJkcyAqYWJpX3JvdXRlX2RlbGVnYXRlU3Rha2UgKmFiaV9yb3V0ZV9zbml0Y2hUb0J1cm4gKmFiaV9yb3V0ZV9tdWx0aVNuaXRjaFRvQnVybiAqYWJpX3JvdXRlX3JlU3Rha2VGcm9tU25pdGNoICphYmlfcm91dGVfbWFrZUZsYXNoTG9hblJlcXVlc3QgKmFiaV9yb3V0ZV9nZXRGTGNvdW50ZXIgKmFiaV9yb3V0ZV9hcmM2Ml9nZXRfY2lyY3VsYXRpbmdfc3VwcGx5CgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJyCgoqY2FsbF9VcGRhdGVBcHBsaWNhdGlvbjoKCXB1c2hieXRlcyAweDQ2Zjc2NTMzIC8vIG1ldGhvZCAidXBkYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX3VwZGF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgVXBkYXRlQXBwbGljYXRpb24KCWVycgoKKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50OgoJcHJvdG8gNCAzCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0xIC8vIGVsZW1lbnQKCWR1cAoJbGVuCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCWJ0b2kKCSsKCWl0b2IKCWV4dHJhY3QgNiAyCglmcmFtZV9idXJ5IC0yIC8vIGhlYWQgb2Zmc2V0CglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglyZXRzdWI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusAdmin",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "desc": "Temporary method to update the application. This method will be removed in the future.\nHere to improve open beta testing iterations. Planned to be removed on mainnet launch.",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_createToken",
        "desc": "MANAGER METHODS",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_updateBoostTokenID",
        "args": [
          {
            "name": "boostTokenID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_changeBoostTier",
        "args": [
          {
            "name": "amounts",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getBoostTier",
        "desc": "The getBoostTier method is needed to be kept public so that on state update Validator Pool can fetch their current tier.",
        "args": [
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the boost token to calculate the boost tier for"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "uint64 - The boost tier for the given amount"
        }
      },
      {
        "name": "MANAGER_changeManager",
        "args": [
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_changeProtocolFee",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_lockContract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_updatePoolContractCost",
        "args": [
          {
            "name": "validatorPoolContractCost",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_updatePoolContractProgram",
        "args": [
          {
            "name": "programSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_writePoolContractProgram",
        "args": [
          {
            "name": "offset",
            "type": "uint64"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addValidator",
        "desc": "ARC4 PUBLIC METHODS",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "validatorAddedEvent",
            "args": [
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "version",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "mintRequest",
        "desc": "On Mint the Algo deposited by the user are kept in the Admin Contract Account balance waiting for the highest bidder to claim them.",
        "args": [
          {
            "name": "mintTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "mintEvent",
            "args": [
              {
                "name": "instant",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "burnRequest",
        "desc": "On Burn the contract gradually checks where to take Algo from, first in the idle Admin balance, then from the burn queue.\nIn case the amount of Algo exceeds the current queue max amount the remaining vAlgo are sent back to the user.\nThis situation triggers the exhaust flag, that will prevent the contract from burning Algo for the next 5 blocks.\nThe Cooldown period is necessary to ensure that the queue is filled with the Validators more fit for the burn.\nThis to disallow possible spam looping of burning to target from specific pools.",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          },
          {
            "name": "burnTo",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "burnEvent",
            "args": [
              {
                "name": "filled",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "mintValidatorCommit",
        "desc": "Specific method to mint the LST for the Validator Pool Contract.\nThe mint is done by the Admin Contract and the LST is sent to the Validator Pool Contract.",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          },
          {
            "name": "stakeCommit",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeValidatorCommit",
        "desc": "Specific method to remove from the operator commit in the Validator Pool Contract.\n\n\nThe Validator Pool Contract will send the vAlgo to the operator address.",
        "args": [
          {
            "name": "appToBurnFrom",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnToDelinquentValidator",
        "desc": "On Delinquency Validators SHOULD not have vAlgo in their balance.\nIt's first called when deliquency is set, can be called again if the entire vAlgo amount is not burned.\nThe vAlgo will be turned to Algo and added to the operator commit",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          },
          {
            "name": "validatorAppID",
            "type": "uint64"
          },
          {
            "name": "amountOperator",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "burnEvent",
            "args": [
              {
                "name": "filled",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "reMintDelinquentCommit",
        "desc": "When Delinquency is solved the operator will mint his commit back into vAlgo.",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "mintEvent",
            "args": [
              {
                "name": "instant",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "bid",
        "desc": "Bid Validator App, highest bidder should have the lowest saturation buffer value.",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "bidEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "isHeighest",
                "type": "bool"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "declareRewards",
        "args": [
          {
            "name": "proposer",
            "type": "uint64"
          },
          {
            "name": "block",
            "type": "uint64"
          },
          {
            "name": "rewardPay",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "delegateStake",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchToBurn",
        "desc": "Push new Validator App to the burn queue. If the saturation buffer is higher than the current lowest in the queue, the new App will be snitched.",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "snitchQueueEvent",
            "args": [
              {
                "name": "queue",
                "type": "uint64[5]"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "multiSnitchToBurn",
        "args": [
          {
            "name": "apps",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reStakeFromSnitch",
        "desc": "Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back",
        "args": [
          {
            "name": "snitchedApp",
            "type": "uint64",
            "desc": "The AppID of the validator to snitch"
          },
          {
            "name": "receiverApp",
            "type": "uint64",
            "desc": "The AppID of the receiver of the delegated Algo"
          },
          {
            "name": "restakeTxn",
            "type": "pay",
            "desc": "The PayTxn following the snitch that sends the delegated Algo to be moved back and restaked"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "makeFlashLoanRequest",
        "desc": "Algo balances in the Validator Pool Contracts sit idle, but can be efficiently use for flashloans.\nThis creates a new route of revenue for the protocol.\nThe method checks that each flashloan call is repaid through the subsequent checkBalance method call.",
        "args": [
          {
            "name": "payFeeTxn",
            "type": "pay",
            "desc": "FlashLoan fee payment; the fee is flat and grows with demand for the flashloan service"
          },
          {
            "name": "amounts",
            "type": "uint64[]",
            "desc": "The amount of Algo to take from each app, the value has to be correlated to the app in the appToInclude array at the same index"
          },
          {
            "name": "appToInclude",
            "type": "uint64[]",
            "desc": "The AppID of the Validator Pool Contracts to execute the flashloan request on"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "flashLoanEvent",
            "args": [
              {
                "name": "apps",
                "type": "uint64[]"
              },
              {
                "name": "amounts",
                "type": "uint64[]"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getFLcounter",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc62_get_circulating_supply",
        "readonly": true,
        "args": [
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "events": [
      {
        "name": "validatorAddedEvent",
        "args": [
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "version",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "mintEvent",
        "args": [
          {
            "name": "instant",
            "type": "bool"
          },
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "output",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "burnEvent",
        "args": [
          {
            "name": "filled",
            "type": "bool"
          },
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "output",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "bidEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "isHeighest",
            "type": "bool"
          }
        ],
        "desc": ""
      },
      {
        "name": "snitchQueueEvent",
        "args": [
          {
            "name": "queue",
            "type": "uint64[5]"
          }
        ],
        "desc": ""
      },
      {
        "name": "flashLoanEvent",
        "args": [
          {
            "name": "apps",
            "type": "uint64[]"
          },
          {
            "name": "amounts",
            "type": "uint64[]"
          }
        ],
        "desc": ""
      }
    ]
  }
}