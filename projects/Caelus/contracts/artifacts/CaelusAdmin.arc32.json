{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "creatorChangeCreatorRelatedParams(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initPoolContract(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "loadPoolContractProgram(uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "poolContractIsSet()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initLST(string,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initBurnQueue()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addCaelusValidator(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateLSTRatio()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMintAmount(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBurnAmount(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintRequest(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnRequest(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintValidatorCommit(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnValidatorCommit()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnToDelinquentValidator(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reMintDeliquentCommit(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delegateStake(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitch(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reStakeFromSnitch(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "onOperatorExit(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "declareRewards(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeFlashLoanRequest(pay,uint64[],uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getFLcounter()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "pegRatio": {
          "type": "uint64",
          "key": "peg"
        },
        "epochLen": {
          "type": "uint64",
          "key": "epochlen"
        },
        "initializedPoolContract": {
          "type": "bytes",
          "key": "initPoolContract"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "validatorPoolVersion"
        },
        "totalAlgoStaked": {
          "type": "uint64",
          "key": "totalstake"
        },
        "init_vALGO": {
          "type": "bytes",
          "key": "init_vALGO"
        },
        "vALGOid": {
          "type": "uint64",
          "key": "vALGOid"
        },
        "vestID": {
          "type": "uint64",
          "key": "vestID"
        },
        "stVestID": {
          "type": "uint64",
          "key": "stVestID"
        },
        "circulatingSupply": {
          "type": "uint64",
          "key": "circulatingSupply"
        },
        "highestBidder": {
          "type": "uint64",
          "key": "highestBidder"
        },
        "idleAlgoToStake": {
          "type": "uint64",
          "key": "idleAlgo"
        },
        "vestigeAddress": {
          "type": "bytes",
          "key": "vestigeAddress"
        },
        "flashLoanCounter": {
          "type": "uint64",
          "key": "flashLoanCounter"
        },
        "lastFlashloanBlock": {
          "type": "uint64",
          "key": "lastFlashloanBlock"
        },
        "burnPrio": {
          "type": "uint64",
          "key": "burnPrio"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 13
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusAdmin",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "creatorChangeCreatorRelatedParams",
        "args": [
          {
            "name": "newVestigeAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initPoolContract",
        "args": [
          {
            "name": "programSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "loadPoolContractProgram",
        "args": [
          {
            "name": "offsett",
            "type": "uint64"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "poolContractIsSet",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initLST",
        "args": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "unitName",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initBurnQueue",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addCaelusValidator",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "calculateLSTRatio",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMintAmount",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getBurnAmount",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "mintRequest",
        "args": [
          {
            "name": "mintTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnRequest",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mintValidatorCommit",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          },
          {
            "name": "stakeCommit",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnValidatorCommit",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnToDelinquentValidator",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          },
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reMintDeliquentCommit",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bid",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "delegateStake",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitch",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reStakeFromSnitch",
        "args": [
          {
            "name": "snitchedApp",
            "type": "uint64"
          },
          {
            "name": "receiverApp",
            "type": "uint64"
          },
          {
            "name": "restakeTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "onOperatorExit",
        "args": [
          {
            "name": "appToClose",
            "type": "uint64"
          },
          {
            "name": "closeTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "declareRewards",
        "args": [
          {
            "name": "txn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchCheck",
        "args": [
          {
            "name": "appToCheck",
            "type": "uint64"
          },
          {
            "name": "params",
            "type": "(bool,bool,bool,uint64,bool,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "makeFlashLoanRequest",
        "args": [
          {
            "name": "payFeeTxn",
            "type": "pay"
          },
          {
            "name": "amounts",
            "type": "uint64[]"
          },
          {
            "name": "appToInclude",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getFLcounter",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}