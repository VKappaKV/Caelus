{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "MANAGER_createToken()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_updateBoostTokenID(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_changeBoostTier(uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBoostTier(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_changeManager(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_changeProtocolFee(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_lockContract()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_updatePoolContractCost(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_updatePoolContractProgram(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_writePoolContractProgram(uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addValidator(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintRequest(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnRequest(axfer,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintValidatorCommit(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeValidatorCommit(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "__onDelinquency(uint64,axfer)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnToDelinquentValidator(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "__reMintDelinquentCommit(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "declareRewards(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delegateStake(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchToBurn(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "multiSnitchToBurn(uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reStakeFromSnitch(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeFlashLoanRequest(pay,uint64[],uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getFLcounter()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc62_get_circulating_supply(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "__cleanseOnValidatorDeletion(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "validator_pool_version"
        },
        "validatorPoolContractCost": {
          "type": "uint64",
          "key": "validator_pool_cost"
        },
        "poolContractLock": {
          "type": "uint64",
          "key": "pool_contract_lock_flag"
        },
        "protocolFee": {
          "type": "uint64",
          "key": "protocol_fee"
        },
        "totalStake": {
          "type": "uint64",
          "key": "total_stake"
        },
        "pegRatio": {
          "type": "uint64",
          "key": "peg_ratio"
        },
        "tokenId": {
          "type": "uint64",
          "key": "token_id"
        },
        "boostTokenID": {
          "type": "uint64",
          "key": "boost_token_id"
        },
        "tiers": {
          "type": "bytes",
          "key": "tiers"
        },
        "tokenCirculatingSupply": {
          "type": "uint64",
          "key": "circulating_supply"
        },
        "highestBidder": {
          "type": "uint64",
          "key": "highest_bidder"
        },
        "burnQueue": {
          "type": "bytes",
          "key": "burn_queue"
        },
        "lastExhaustBlock": {
          "type": "uint64",
          "key": "last_exhaust_block"
        },
        "lastFlashloanBlock": {
          "type": "uint64",
          "key": "last_flashloan_block"
        },
        "flashLoanCounter": {
          "type": "uint64",
          "key": "flashloan_counter"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 13
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusAdmin",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "desc": "Temporary method to update the application. This method will be removed in the future.\nHere to improve open beta testing iterations. Planned to be removed on mainnet launch.",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_createToken",
        "desc": "MANAGER METHODS",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_updateBoostTokenID",
        "args": [
          {
            "name": "boostTokenID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_changeBoostTier",
        "args": [
          {
            "name": "amounts",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getBoostTier",
        "desc": "The getBoostTier method is needed to be kept public so that on state update Validator Pool can fetch their current tier.",
        "args": [
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the boost token to calculate the boost tier for"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "uint64 - The boost tier for the given amount"
        }
      },
      {
        "name": "MANAGER_changeManager",
        "args": [
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_changeProtocolFee",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_lockContract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_updatePoolContractCost",
        "args": [
          {
            "name": "validatorPoolContractCost",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_updatePoolContractProgram",
        "args": [
          {
            "name": "programSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_writePoolContractProgram",
        "args": [
          {
            "name": "offset",
            "type": "uint64"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addValidator",
        "desc": "ARC4 PUBLIC METHODS",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "validatorAddedEvent",
            "args": [
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "version",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "mintRequest",
        "desc": "On Mint the Algo deposited by the user are kept in the Admin Contract Account balance waiting for the highest bidder to claim them.",
        "args": [
          {
            "name": "mintTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "mintEvent",
            "args": [
              {
                "name": "instant",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "burnRequest",
        "desc": "On Burn the contract gradually checks where to take Algo from, first in the idle Admin balance, then from the burn queue.\nIn case the amount of Algo exceeds the current queue max amount the remaining vAlgo are sent back to the user.\nThis situation triggers the exhaust flag, that will prevent the contract from burning Algo for the next 5 blocks.\nThe Cooldown period is necessary to ensure that the queue is filled with the Validators more fit for the burn.\nThis to disallow possible spam looping of burning to target from specific pools.",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          },
          {
            "name": "burnTo",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "burnEvent",
            "args": [
              {
                "name": "filled",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "mintValidatorCommit",
        "desc": "Specific method to mint the LST for the Validator Pool Contract.\nThe mint is done by the Admin Contract and the LST is sent to the Validator Pool Contract.",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          },
          {
            "name": "stakeCommit",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeValidatorCommit",
        "desc": "Specific method to remove from the operator commit in the Validator Pool Contract.\n\n\nThe Validator Pool Contract will send the vAlgo to the operator address.",
        "args": [
          {
            "name": "appToBurnFrom",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "__onDelinquency",
        "desc": "FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT ON DELINQUENCY",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64",
            "desc": "delinquent validator app id"
          },
          {
            "name": "burnTxn",
            "type": "axfer",
            "desc": "deliquent validator axfer of LST to the admin contract"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "yield accrued amount"
        }
      },
      {
        "name": "burnToDelinquentValidator",
        "desc": "FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT EITHER ON DELINQUENCY OR ON SNITCH\n\n\nOn Delinquency Validators SHOULD not have vAlgo in their balance.\nIt's first called when deliquency is set, can be called again if the entire vAlgo amount is not burned.\nThe vAlgo will be turned to Algo and added to the operator commit",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "burnEvent",
            "args": [
              {
                "name": "filled",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "__reMintDelinquentCommit",
        "desc": "FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT WHEN DELINQUENCY IS SOLVED\n\n\nWhen Delinquency is solved the operator will mint his commit back into vAlgo.",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "mintEvent",
            "args": [
              {
                "name": "instant",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "bid",
        "desc": "Bid Validator App, highest bidder should have the lowest saturation buffer value.",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "bidEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "isHeighest",
                "type": "bool"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "declareRewards",
        "desc": "The method is called by the Validator Pool Contract to declare the rewards.\n\n\nIt doesn't utilize stricter checks on call since as long as the rewardPay is sent to the Admin contract we welcome free money to the protocol :)\nThere's no other state getting changed aside from the totalStake",
        "args": [
          {
            "name": "proposer",
            "type": "uint64"
          },
          {
            "name": "block",
            "type": "uint64"
          },
          {
            "name": "rewardPay",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "delegateStake",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchToBurn",
        "desc": "Push new Validator App to the burn queue. If the saturation buffer is higher than the current lowest in the queue, the new App will be snitched.",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "snitchQueueEvent",
            "args": [
              {
                "name": "queue",
                "type": "uint64[5]"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "multiSnitchToBurn",
        "args": [
          {
            "name": "apps",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reStakeFromSnitch",
        "desc": "Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back",
        "args": [
          {
            "name": "snitchedApp",
            "type": "uint64",
            "desc": "The AppID of the validator to snitch"
          },
          {
            "name": "receiverApp",
            "type": "uint64",
            "desc": "The AppID of the receiver of the delegated Algo"
          },
          {
            "name": "restakeTxn",
            "type": "pay",
            "desc": "The PayTxn following the snitch that sends the delegated Algo to be moved back and restaked"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "makeFlashLoanRequest",
        "desc": "Algo balances in the Validator Pool Contracts sit idle, but can be efficiently use for flashloans.\nThis creates a new route of revenue for the protocol.\nThe method checks that each flashloan call is repaid through the subsequent checkBalance method call.",
        "args": [
          {
            "name": "payFeeTxn",
            "type": "pay",
            "desc": "FlashLoan fee payment; the fee is flat and grows with demand for the flashloan service"
          },
          {
            "name": "amounts",
            "type": "uint64[]",
            "desc": "The amount of Algo to take from each app, the value has to be correlated to the app in the appToInclude array at the same index"
          },
          {
            "name": "appToInclude",
            "type": "uint64[]",
            "desc": "The AppID of the Validator Pool Contracts to execute the flashloan request on"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "flashLoanEvent",
            "args": [
              {
                "name": "apps",
                "type": "uint64[]"
              },
              {
                "name": "amounts",
                "type": "uint64[]"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getFLcounter",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc62_get_circulating_supply",
        "readonly": true,
        "args": [
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "__cleanseOnValidatorDeletion",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "validatorAddedEvent",
        "args": [
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "version",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "mintEvent",
        "args": [
          {
            "name": "instant",
            "type": "bool"
          },
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "output",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "burnEvent",
        "args": [
          {
            "name": "filled",
            "type": "bool"
          },
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "output",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "bidEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "isHeighest",
            "type": "bool"
          }
        ],
        "desc": ""
      },
      {
        "name": "snitchQueueEvent",
        "args": [
          {
            "name": "queue",
            "type": "uint64[5]"
          }
        ],
        "desc": ""
      },
      {
        "name": "flashLoanEvent",
        "args": [
          {
            "name": "apps",
            "type": "uint64[]"
          },
          {
            "name": "amounts",
            "type": "uint64[]"
          }
        ],
        "desc": ""
      }
    ]
  }
}