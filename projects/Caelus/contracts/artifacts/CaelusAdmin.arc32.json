{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "MANAGER_createToken()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_updateVestTokensID(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_changeManager(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_updatePoolContractCost(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_updatePoolContractProgram(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "MANAGER_writePoolContractProgram(uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addValidator(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintRequest(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnRequest(axfer,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintValidatorCommit(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnValidatorCommit(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnToDelinquentValidator(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reMintDelinquentCommit(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setTotalStakeOnRewards(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delegateStake(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchToBurn(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "multiSnitchToBurn(uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reStakeFromSnitch(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeFlashLoanRequest(pay,uint64[],uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getFLcounter()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc62_get_circulating_supply(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "validator_pool_version"
        },
        "validatorPoolContractCost": {
          "type": "uint64",
          "key": "validator_pool_cost"
        },
        "totalStake": {
          "type": "uint64",
          "key": "total_stake"
        },
        "pegRatio": {
          "type": "uint64",
          "key": "peg_ratio"
        },
        "tokenId": {
          "type": "uint64",
          "key": "token_id"
        },
        "vestId": {
          "type": "uint64",
          "key": "vest_id"
        },
        "stVestId": {
          "type": "uint64",
          "key": "staked_vest_id"
        },
        "tokenCirculatingSupply": {
          "type": "uint64",
          "key": "circulating_supply"
        },
        "highestBidder": {
          "type": "uint64",
          "key": "highest_bidder"
        },
        "burnQueue": {
          "type": "bytes",
          "key": "burn_queue"
        },
        "lastExhaustBlock": {
          "type": "uint64",
          "key": "last_exhaust_block"
        },
        "lastFlashloanBlock": {
          "type": "uint64",
          "key": "last_flashloan_block"
        },
        "flashLoanCounter": {
          "type": "uint64",
          "key": "flashloan_counter"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 12
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusAdmin",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_createToken",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_updateVestTokensID",
        "args": [
          {
            "name": "vestID",
            "type": "uint64"
          },
          {
            "name": "stVestID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_changeManager",
        "args": [
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_updatePoolContractCost",
        "args": [
          {
            "name": "validatorPoolContractCost",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_updatePoolContractProgram",
        "args": [
          {
            "name": "programSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "MANAGER_writePoolContractProgram",
        "args": [
          {
            "name": "offset",
            "type": "uint64"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addValidator",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "validatorAddedEvent",
            "args": [
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "version",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "mintRequest",
        "args": [
          {
            "name": "mintTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "mintEvent",
            "args": [
              {
                "name": "instant",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "burnRequest",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          },
          {
            "name": "burnTo",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "burnEvent",
            "args": [
              {
                "name": "filled",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "mintValidatorCommit",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          },
          {
            "name": "stakeCommit",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnValidatorCommit",
        "args": [
          {
            "name": "appToBurnFrom",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnToDelinquentValidator",
        "args": [
          {
            "name": "burnTxn",
            "type": "axfer"
          },
          {
            "name": "validatorAppID",
            "type": "uint64"
          },
          {
            "name": "amountOperator",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "burnEvent",
            "args": [
              {
                "name": "filled",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "reMintDelinquentCommit",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "mintEvent",
            "args": [
              {
                "name": "instant",
                "type": "bool"
              },
              {
                "name": "amount",
                "type": "uint64"
              },
              {
                "name": "output",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "bid",
        "args": [
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "bidEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "isHeighest",
                "type": "bool"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "setTotalStakeOnRewards",
        "args": [
          {
            "name": "proposer",
            "type": "uint64"
          },
          {
            "name": "block",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "delegateStake",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "validatorAppID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchToBurn",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "snitchQueueEvent",
            "args": [
              {
                "name": "queue",
                "type": "uint64[5]"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "multiSnitchToBurn",
        "args": [
          {
            "name": "apps",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reStakeFromSnitch",
        "desc": "Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back",
        "args": [
          {
            "name": "snitchedApp",
            "type": "uint64",
            "desc": "The AppID of the validator to snitch"
          },
          {
            "name": "receiverApp",
            "type": "uint64",
            "desc": "The AppID of the receiver of the delegated Algo"
          },
          {
            "name": "restakeTxn",
            "type": "pay",
            "desc": "The PayTxn following the snitch that sends the delegated Algo to be moved back and restaked"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "makeFlashLoanRequest",
        "args": [
          {
            "name": "payFeeTxn",
            "type": "pay"
          },
          {
            "name": "amounts",
            "type": "uint64[]"
          },
          {
            "name": "appToInclude",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "flashLoanEvent",
            "args": [
              {
                "name": "apps",
                "type": "uint64[]"
              },
              {
                "name": "amounts",
                "type": "uint64[]"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getFLcounter",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc62_get_circulating_supply",
        "readonly": true,
        "args": [
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "events": [
      {
        "name": "validatorAddedEvent",
        "args": [
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "version",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "mintEvent",
        "args": [
          {
            "name": "instant",
            "type": "bool"
          },
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "output",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "burnEvent",
        "args": [
          {
            "name": "filled",
            "type": "bool"
          },
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "output",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "bidEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "isHeighest",
            "type": "bool"
          }
        ],
        "desc": ""
      },
      {
        "name": "snitchQueueEvent",
        "args": [
          {
            "name": "queue",
            "type": "uint64[5]"
          }
        ],
        "desc": ""
      },
      {
        "name": "flashLoanEvent",
        "args": [
          {
            "name": "apps",
            "type": "uint64[]"
          },
          {
            "name": "amounts",
            "type": "uint64[]"
          }
        ],
        "desc": ""
      }
    ]
  }
}