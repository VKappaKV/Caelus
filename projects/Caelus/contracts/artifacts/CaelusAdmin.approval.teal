#pragma version 11
intcblock 1 0 8 6 2
bytecblock 0x 0x666c6173684c6f616e436f756e746572 0x69646c65416c676f 0x746f74616c7374616b65 0x00 0x6c617374466c6173686c6f616e426c6f636b 0x6f70657261746f7241646472657373 0x151f7c75

// This TEAL was generated by TEALScript v0.105.5
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts\CaelusAdmin.algo.ts:48
	// this.totalAlgoStaked.value = 0
	bytec 3 //  "totalstake"
	intc 1 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:49
	// this.init_vALGO.value = false
	pushbytes 0x696e69745f76414c474f // "init_vALGO"
	intc 1 // 0
	bytec 4 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	app_global_put

	// contracts\CaelusAdmin.algo.ts:50
	// this.initializedPoolContract.value = false
	pushbytes 0x696e6974506f6f6c436f6e7472616374 // "initPoolContract"
	intc 1 // 0
	bytec 4 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	app_global_put

	// contracts\CaelusAdmin.algo.ts:51
	// this.validatorPoolContractVersion.value = 0
	pushbytes 0x76616c696461746f72506f6f6c56657273696f6e // "validatorPoolVersion"
	intc 1 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:52
	// this.pegRatio.value = 1
	pushbytes 0x706567 // "peg"
	intc 0 // 1
	app_global_put
	retsub

// initLST()void
*abi_route_initLST:
	// execute initLST()void
	callsub initLST
	intc 0 // 1
	return

// initLST(): void
initLST:
	proto 0 0
	retsub

// calculateLSTRatio()void
*abi_route_calculateLSTRatio:
	// execute calculateLSTRatio()void
	callsub calculateLSTRatio
	intc 0 // 1
	return

// calculateLSTRatio(): void
calculateLSTRatio:
	proto 0 0
	retsub

// mintRequest()void
*abi_route_mintRequest:
	// execute mintRequest()void
	callsub mintRequest
	intc 0 // 1
	return

// mintRequest(): void
mintRequest:
	proto 0 0
	retsub

// burnRequest()void
*abi_route_burnRequest:
	// execute burnRequest()void
	callsub burnRequest
	intc 0 // 1
	return

// burnRequest(): void
burnRequest:
	proto 0 0
	retsub

// mintValidatorCommit(uint64,pay)void
*abi_route_mintValidatorCommit:
	// stakeCommit: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (stakeCommit) for mintValidatorCommit must be a pay transaction
	assert

	// validatorAppID: uint64
	txna ApplicationArgs 1
	btoi

	// execute mintValidatorCommit(uint64,pay)void
	callsub mintValidatorCommit
	intc 0 // 1
	return

// mintValidatorCommit(validatorAppID: AppID, stakeCommit: PayTxn): void
mintValidatorCommit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:69
	// assert(this.isPool(validatorAppID))
	frame_dig -1 // validatorAppID: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:70
	// validatorAddress = validatorAppID.globalState('operatorAddress') as Address
	frame_dig -1 // validatorAppID: AppID
	bytec 6 //  "operatorAddress"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('operatorAddress')
	assert
	frame_bury 0 // validatorAddress: address

	// contracts\CaelusAdmin.algo.ts:71
	// verifyPayTxn(stakeCommit, {
	//       sender: validatorAddress,
	//       receiver: validatorAppID.address,
	//     })
	// verify sender
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Sender
	frame_dig 0 // validatorAddress: address
	==

	// transaction verification failed: {"txn":"stakeCommit","field":"sender","expected":"validatorAddress"}
	assert

	// verify receiver
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Receiver
	frame_dig -1 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"stakeCommit","field":"receiver","expected":"validatorAppID.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:75
	// assert(validatorAppID.address === this.txn.sender)
	frame_dig -1 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	txn Sender
	==
	assert
	retsub

// burnValidatorCommit()void
*abi_route_burnValidatorCommit:
	// execute burnValidatorCommit()void
	callsub burnValidatorCommit
	intc 0 // 1
	return

// burnValidatorCommit(): void
burnValidatorCommit:
	proto 0 0
	retsub

// burnToDelinquentValidator()void
*abi_route_burnToDelinquentValidator:
	// execute burnToDelinquentValidator()void
	callsub burnToDelinquentValidator
	intc 0 // 1
	return

// burnToDelinquentValidator(): void
burnToDelinquentValidator:
	proto 0 0
	retsub

// reMintDeliquentCommit()void
*abi_route_reMintDeliquentCommit:
	// execute reMintDeliquentCommit()void
	callsub reMintDeliquentCommit
	intc 0 // 1
	return

// reMintDeliquentCommit(): void
reMintDeliquentCommit:
	proto 0 0
	retsub

// delegateStake(uint64,uint64)void
*abi_route_delegateStake:
	// validatorAppID: uint64
	txna ApplicationArgs 2
	btoi

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute delegateStake(uint64,uint64)void
	callsub delegateStake
	intc 0 // 1
	return

// delegateStake(amount: uint64, validatorAppID: AppID): void
delegateStake:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:101
	// assert(this.isPool(validatorAppID))
	frame_dig -2 // validatorAppID: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:102
	// assert(validatorAppID === this.highestBidder.value, 'can only delegate to highest bidder account')
	frame_dig -2 // validatorAppID: AppID
	pushbytes 0x68696768657374426964646572 // "highestBidder"
	app_global_get
	==

	// can only delegate to highest bidder account
	assert

	// contracts\CaelusAdmin.algo.ts:103
	// assert(amount <= this.idleAlgoToStake.value, 'cant withdraw more than the amount of idleAlgo in the contract')
	frame_dig -1 // amount: uint64
	bytec 2 //  "idleAlgo"
	app_global_get
	<=

	// cant withdraw more than the amount of idleAlgo in the contract
	assert

	// contracts\CaelusAdmin.algo.ts:104
	// sendMethodCall<typeof CaelusValidatorPool.prototype.addStake, void>({
	//       applicationID: validatorAppID,
	//       methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: amount,
	//           fee: 0,
	//         },
	//       ],
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:108
	// receiver: validatorAppID.address
	frame_dig -2 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:109
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// contracts\CaelusAdmin.algo.ts:110
	// fee: 0
	intc 1 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xd4502100 // method "addStake(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:105
	// applicationID: validatorAppID
	frame_dig -2 // validatorAppID: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:106
	// methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: amount,
	//           fee: 0,
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:114
	// this.idleAlgoToStake.value -= amount
	bytec 2 //  "idleAlgo"
	app_global_get
	frame_dig -1 // amount: uint64
	-
	bytec 2 //  "idleAlgo"
	swap
	app_global_put
	retsub

// snitch()void
*abi_route_snitch:
	// execute snitch()void
	callsub snitch
	intc 0 // 1
	return

// snitch(): void
snitch:
	proto 0 0
	retsub

// reStakeFromSnitch(uint64,uint64,pay)void
*abi_route_reStakeFromSnitch:
	// restakeTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (restakeTxn) for reStakeFromSnitch must be a pay transaction
	assert

	// receiverApp: uint64
	txna ApplicationArgs 2
	btoi

	// snitchedApp: uint64
	txna ApplicationArgs 1
	btoi

	// execute reStakeFromSnitch(uint64,uint64,pay)void
	callsub reStakeFromSnitch
	intc 0 // 1
	return

// reStakeFromSnitch(snitchedApp: AppID, receiverApp: AppID, restakeTxn: PayTxn): void
reStakeFromSnitch:
	proto 3 0

	// contracts\CaelusAdmin.algo.ts:122
	// assert(this.isPool(snitchedApp))
	frame_dig -1 // snitchedApp: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:123
	// assert(receiverApp.address === restakeTxn.receiver)
	frame_dig -2 // receiverApp: AppID
	app_params_get AppAddress
	pop
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	==
	assert

	// *if0_condition
	// contracts\CaelusAdmin.algo.ts:124
	// restakeTxn.receiver !== this.app.address
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	!=
	bz *if0_end

	// *if0_consequent
	// contracts\CaelusAdmin.algo.ts:125
	// sendMethodCall<typeof CaelusValidatorPool.prototype.getClawbackedStake, void>({
	//         applicationID: receiverApp,
	//         methodArgs: [
	//           {
	//             receiver: restakeTxn.receiver,
	//             amount: restakeTxn.amount,
	//             fee: 0,
	//           },
	//         ],
	//         fee: 0,
	//       })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:129
	// receiver: restakeTxn.receiver
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:130
	// amount: restakeTxn.amount
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Amount
	itxn_field Amount

	// contracts\CaelusAdmin.algo.ts:131
	// fee: 0
	intc 1 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xbdf01e8e // method "getClawbackedStake(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:126
	// applicationID: receiverApp
	frame_dig -2 // receiverApp: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:127
	// methodArgs: [
	//           {
	//             receiver: restakeTxn.receiver,
	//             amount: restakeTxn.amount,
	//             fee: 0,
	//           },
	//         ]
	// contracts\CaelusAdmin.algo.ts:134
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:136
	// return;
	retsub

*if0_end:
	// contracts\CaelusAdmin.algo.ts:138
	// verifyPayTxn(restakeTxn, {
	//       sender: snitchedApp.address,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Sender
	frame_dig -1 // snitchedApp: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"restakeTxn","field":"sender","expected":"snitchedApp.address"}
	assert

	// verify receiver
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"restakeTxn","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:142
	// this.idleAlgoToStake.value += restakeTxn.amount
	bytec 2 //  "idleAlgo"
	app_global_get
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Amount
	+
	bytec 2 //  "idleAlgo"
	swap
	app_global_put
	retsub

// onOperatorExit(uint64,pay)void
*abi_route_onOperatorExit:
	// closeTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (closeTxn) for onOperatorExit must be a pay transaction
	assert

	// appToClose: uint64
	txna ApplicationArgs 1
	btoi

	// execute onOperatorExit(uint64,pay)void
	callsub onOperatorExit
	intc 0 // 1
	return

// onOperatorExit(appToClose: AppID, closeTxn: PayTxn): void
onOperatorExit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:147
	// operator = appToClose.globalState('operatorAddress') as Address
	frame_dig -1 // appToClose: AppID
	bytec 6 //  "operatorAddress"
	app_global_get_ex

	// global state value does not exist: appToClose.globalState('operatorAddress')
	assert
	frame_bury 0 // operator: address

	// contracts\CaelusAdmin.algo.ts:148
	// totalCheck =
	//       (appToClose.globalState('operatorCommit') as uint64) + (appToClose.globalState('delegatedStake') as uint64)
	frame_dig -1 // appToClose: AppID
	pushbytes 0x6f70657261746f72436f6d6d6974 // "operatorCommit"
	app_global_get_ex

	// global state value does not exist: appToClose.globalState('operatorCommit')
	assert
	frame_dig -1 // appToClose: AppID
	pushbytes 0x64656c6567617465645374616b65 // "delegatedStake"
	app_global_get_ex

	// global state value does not exist: appToClose.globalState('delegatedStake')
	assert
	+
	frame_bury 1 // totalCheck: uint64

	// contracts\CaelusAdmin.algo.ts:150
	// assert(this.txn.sender === operator, 'Only the operator can close out the contract')
	txn Sender
	frame_dig 0 // operator: address
	==

	// Only the operator can close out the contract
	assert

	// contracts\CaelusAdmin.algo.ts:151
	// verifyPayTxn(closeTxn, {
	//       receiver: this.app.address,
	//       sender: appToClose.address,
	//       amount: totalCheck,
	//     })
	// verify receiver
	frame_dig -2 // closeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"closeTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify sender
	frame_dig -2 // closeTxn: PayTxn
	gtxns Sender
	frame_dig -1 // appToClose: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"closeTxn","field":"sender","expected":"appToClose.address"}
	assert

	// verify amount
	frame_dig -2 // closeTxn: PayTxn
	gtxns Amount
	frame_dig 1 // totalCheck: uint64
	==

	// transaction verification failed: {"txn":"closeTxn","field":"amount","expected":"totalCheck"}
	assert

	// contracts\CaelusAdmin.algo.ts:156
	// this.idleAlgoToStake.value += closeTxn.amount
	bytec 2 //  "idleAlgo"
	app_global_get
	frame_dig -2 // closeTxn: PayTxn
	gtxns Amount
	+
	bytec 2 //  "idleAlgo"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:157
	// sendMethodCall<typeof CaelusValidatorPool.prototype.deleteApplication, void>({
	//       applicationID: appToClose,
	//       methodArgs: [],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x2487c32c // method "deleteApplication()void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:158
	// applicationID: appToClose
	frame_dig -1 // appToClose: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:159
	// methodArgs: []
	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// declareRewards(pay)void
*abi_route_declareRewards:
	// txn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (txn) for declareRewards must be a pay transaction
	assert

	// execute declareRewards(pay)void
	callsub declareRewards
	intc 0 // 1
	return

// declareRewards(txn: PayTxn): void
declareRewards:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:164
	// assert(txn.receiver === this.app.address, 'payment must be done to this app address')
	frame_dig -1 // txn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// payment must be done to this app address
	assert

	// contracts\CaelusAdmin.algo.ts:165
	// protocolCut = (PROTOCOL_COMMISSION * txn.amount) / 100
	pushint 4
	frame_dig -1 // txn: PayTxn
	gtxns Amount
	*
	pushint 100
	/
	frame_bury 0 // protocolCut: uint64

	// contracts\CaelusAdmin.algo.ts:166
	// restakeRewards = txn.amount - protocolCut
	frame_dig -1 // txn: PayTxn
	gtxns Amount
	frame_dig 0 // protocolCut: uint64
	-
	frame_bury 1 // restakeRewards: uint64

	// contracts\CaelusAdmin.algo.ts:167
	// sendPayment({
	//       receiver: this.vestigeAddress.value,
	//       amount: protocolCut,
	//       fee: 0,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:168
	// receiver: this.vestigeAddress.value
	pushbytes 0x7665737469676541646472657373 // "vestigeAddress"
	app_global_get
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:169
	// amount: protocolCut
	frame_dig 0 // protocolCut: uint64
	itxn_field Amount

	// contracts\CaelusAdmin.algo.ts:170
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:172
	// this.idleAlgoToStake.value += restakeRewards
	bytec 2 //  "idleAlgo"
	app_global_get
	frame_dig 1 // restakeRewards: uint64
	+
	bytec 2 //  "idleAlgo"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:173
	// this.totalAlgoStaked.value += restakeRewards
	bytec 3 //  "totalstake"
	app_global_get
	frame_dig 1 // restakeRewards: uint64
	+
	bytec 3 //  "totalstake"
	swap
	app_global_put
	retsub

// snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool
*abi_route_snitchCheck:
	// The ABI return prefix
	bytec 7 // 0x151f7c75

	// params: (bool,bool,bool,uint64,bool,uint64)
	txna ApplicationArgs 2
	dup
	len
	pushint 18
	==

	// argument 0 (params) for snitchCheck must be a (bool,bool,bool,uint64,bool,uint64)
	assert

	// appToCheck: uint64
	txna ApplicationArgs 1
	btoi

	// execute snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool
	callsub snitchCheck
	bytec 4 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// snitchCheck(appToCheck: AppID, params: SnitchInfo): boolean
snitchCheck:
	proto 2 1

	// contracts\CaelusAdmin.algo.ts:178
	// assert(this.isPool(appToCheck))
	frame_dig -1 // appToCheck: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:179
	// assert(this.isPool(params.recipient) || params.recipient.address === this.app.address)
	frame_dig -2 // params: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 1 8
	btoi
	callsub isPool
	dup
	bnz *skip_or0
	frame_dig -2 // params: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 1 8
	btoi
	app_params_get AppAddress
	pop
	global CurrentApplicationAddress
	==
	||

*skip_or0:
	assert

	// contracts\CaelusAdmin.algo.ts:181
	// return sendMethodCall<typeof CaelusValidatorPool.prototype.getSnitched, boolean>({
	//       applicationID: appToCheck,
	//       methodArgs: [params],
	//     });
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x5b674f2f // method "getSnitched((bool,bool,bool,uint64,bool,uint64))bool"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:182
	// applicationID: appToCheck
	frame_dig -1 // appToCheck: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:183
	// methodArgs: [params]
	frame_dig -2 // params: SnitchInfo
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 0 // 1
	-
	itxnas Logs
	extract 4 0
	intc 1 // 0
	getbit
	retsub

// makeFlashLoanRequest(pay,uint64[],uint64[])void
*abi_route_makeFlashLoanRequest:
	// appToInclude: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// amounts: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// payFeeTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 2 (payFeeTxn) for makeFlashLoanRequest must be a pay transaction
	assert

	// execute makeFlashLoanRequest(pay,uint64[],uint64[])void
	callsub makeFlashLoanRequest
	intc 0 // 1
	return

// makeFlashLoanRequest(payFeeTxn: PayTxn, amounts: uint64[], appToInclude: AppID[]): void
makeFlashLoanRequest:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts\CaelusAdmin.algo.ts:190
	// this.getFLcounter()
	callsub getFLcounter
	pop

	// contracts\CaelusAdmin.algo.ts:191
	// this.flashLoanCounter.value += appToInclude.length
	bytec 1 //  "flashLoanCounter"
	app_global_get
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	+
	bytec 1 //  "flashLoanCounter"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:192
	// keepFee = this.flashLoanCounter.value + FLASH_LOAN_FEE
	bytec 1 //  "flashLoanCounter"
	app_global_get
	pushint 10000000
	+
	frame_bury 0 // keepFee: uint64

	// contracts\CaelusAdmin.algo.ts:194
	// verifyPayTxn(payFeeTxn, {
	//       receiver: this.app.address,
	//       amount: keepFee,
	//     })
	// verify receiver
	frame_dig -1 // payFeeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payFeeTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payFeeTxn: PayTxn
	gtxns Amount
	frame_dig 0 // keepFee: uint64
	==

	// transaction verification failed: {"txn":"payFeeTxn","field":"amount","expected":"keepFee"}
	assert

	// contracts\CaelusAdmin.algo.ts:199
	// this.idleAlgoToStake.value += keepFee
	bytec 2 //  "idleAlgo"
	app_global_get
	frame_dig 0 // keepFee: uint64
	+
	bytec 2 //  "idleAlgo"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:201
	// assert(amounts.length === appToInclude.length, 'array lenght [amount, appToInclude] mismatch')
	frame_dig -2 // amounts: uint64[]
	len
	intc 2 // 8
	/
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	==

	// array lenght [amount, appToInclude] mismatch
	assert

	// contracts\CaelusAdmin.algo.ts:203
	// for (let i = 0; i < appToInclude.length; i += 1)
	intc 1 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts\CaelusAdmin.algo.ts:203
	// i < appToInclude.length
	frame_dig 1 // i: uint64
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	<
	bz *for_0_end

	// contracts\CaelusAdmin.algo.ts:204
	// this.pendingGroup.addMethodCall<typeof CaelusValidatorPool.prototype.flashloan, void>({
	//         applicationID: appToInclude[i],
	//         methodArgs: [amounts[i], this.txn.sender],
	//         fee: 0,
	//       })
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x4a5356cc // method "flashloan(uint64,address)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:205
	// applicationID: appToInclude[i]
	frame_dig -3 // appToInclude: AppID[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:206
	// methodArgs: [amounts[i], this.txn.sender]
	frame_dig -2 // amounts: uint64[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:207
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// contracts\CaelusAdmin.algo.ts:210
	// for (let j = this.txn.groupIndex; j < this.txnGroup.length; j += 1)
	txn GroupIndex
	frame_bury 2 // j: uint64

*for_1:
	// contracts\CaelusAdmin.algo.ts:210
	// j < this.txnGroup.length
	frame_dig 2 // j: uint64
	global GroupSize
	<
	bz *for_1_end

	// contracts\CaelusAdmin.algo.ts:211
	// txn = this.txnGroup[j]
	frame_dig 2 // j: uint64
	frame_bury 3 // txn: txn

	// contracts\CaelusAdmin.algo.ts:212
	// repaid = false
	intc 1 // 0
	frame_bury 4 // repaid: bool

	// *if1_condition
	// contracts\CaelusAdmin.algo.ts:214
	// txn.typeEnum === TransactionType.ApplicationCall &&
	//           txn.applicationID === appToInclude[i] &&
	//           txn.onCompletion === 0 &&
	//           txn.numAppArgs === 1 &&
	//           txn.applicationArgs[0] === method('checkBalance():void')
	frame_dig 3 // txn: txn
	gtxns TypeEnum
	intc 3 //  appl
	==
	dup
	bz *skip_and0
	frame_dig 3 // txn: txn
	gtxns ApplicationID
	frame_dig -3 // appToInclude: AppID[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	==
	&&

*skip_and0:
	dup
	bz *skip_and1
	frame_dig 3 // txn: txn
	gtxns OnCompletion
	intc 1 // 0
	==
	&&

*skip_and1:
	dup
	bz *skip_and2
	frame_dig 3 // txn: txn
	gtxns NumAppArgs
	intc 0 // 1
	==
	&&

*skip_and2:
	dup
	bz *skip_and3
	frame_dig 3 // txn: txn
	gtxns ApplicationArgs 0
	pushbytes 0x3fa88fd0 // method "checkBalance():void"
	==
	&&

*skip_and3:
	bz *if1_end

	// *if1_consequent
	// contracts\CaelusAdmin.algo.ts:220
	// repaid = true
	intc 0 // 1
	frame_bury 4 // repaid: bool

*if1_end:
	// contracts\CaelusAdmin.algo.ts:222
	// assert(repaid)
	frame_dig 4 // repaid: bool
	assert

*for_1_continue:
	// contracts\CaelusAdmin.algo.ts:210
	// j += 1
	frame_dig 2 // j: uint64
	intc 0 // 1
	+
	frame_bury 2 // j: uint64
	b *for_1

*for_1_end:

*for_0_continue:
	// contracts\CaelusAdmin.algo.ts:203
	// i += 1
	frame_dig 1 // i: uint64
	intc 0 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts\CaelusAdmin.algo.ts:225
	// this.pendingGroup.submit()
	itxn_submit
	retsub

// getFLcounter()uint64
*abi_route_getFLcounter:
	// The ABI return prefix
	bytec 7 // 0x151f7c75

	// execute getFLcounter()uint64
	callsub getFLcounter
	itob
	concat
	log
	intc 0 // 1
	return

// getFLcounter(): uint64
getFLcounter:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// *if2_condition
	// contracts\CaelusAdmin.algo.ts:231
	// this.lastFlashloanBlock.value === globals.round
	bytec 5 //  "lastFlashloanBlock"
	app_global_get
	global Round
	==
	bz *if2_end

	// *if2_consequent
	// contracts\CaelusAdmin.algo.ts:232
	// return this.flashLoanCounter.value;
	bytec 1 //  "flashLoanCounter"
	app_global_get
	b *getFLcounter*return

*if2_end:
	// contracts\CaelusAdmin.algo.ts:234
	// reduce = globals.round - this.lastFlashloanBlock.value
	global Round
	bytec 5 //  "lastFlashloanBlock"
	app_global_get
	-
	frame_bury 0 // reduce: uint64

	// *if3_condition
	// contracts\CaelusAdmin.algo.ts:235
	// reduce > this.flashLoanCounter.value
	frame_dig 0 // reduce: uint64
	bytec 1 //  "flashLoanCounter"
	app_global_get
	>
	bz *if3_end

	// *if3_consequent
	// contracts\CaelusAdmin.algo.ts:236
	// this.flashLoanCounter.value = 0
	bytec 1 //  "flashLoanCounter"
	intc 1 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:237
	// return this.flashLoanCounter.value;
	bytec 1 //  "flashLoanCounter"
	app_global_get
	b *getFLcounter*return

*if3_end:
	// contracts\CaelusAdmin.algo.ts:239
	// this.flashLoanCounter.value -= reduce * 2 > this.flashLoanCounter.value ? reduce * 2 : reduce
	bytec 1 //  "flashLoanCounter"
	app_global_get
	frame_dig 0 // reduce: uint64
	intc 4 // 2
	*
	bytec 1 //  "flashLoanCounter"
	app_global_get
	>
	bz *ternary1_false
	frame_dig 0 // reduce: uint64
	intc 4 // 2
	*
	b *ternary1_end

*ternary1_false:
	frame_dig 0 // reduce: uint64

*ternary1_end:
	-
	bytec 1 //  "flashLoanCounter"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:240
	// return this.flashLoanCounter.value;
	bytec 1 //  "flashLoanCounter"
	app_global_get

*getFLcounter*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// creatorChangeCreatorRelatedParams()void
*abi_route_creatorChangeCreatorRelatedParams:
	// execute creatorChangeCreatorRelatedParams()void
	callsub creatorChangeCreatorRelatedParams
	intc 0 // 1
	return

// creatorChangeCreatorRelatedParams(): void
creatorChangeCreatorRelatedParams:
	proto 0 0
	retsub

// isPool(app: AppID): boolean
isPool:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:249
	// isPool = (app.globalState('creator') as AppID) === this.app
	frame_dig -1 // app: AppID
	pushbytes 0x63726561746f72 // "creator"
	app_global_get_ex

	// global state value does not exist: app.globalState('creator')
	assert
	txna Applications 0
	==
	frame_bury 0 // isPool: bool

	// contracts\CaelusAdmin.algo.ts:250
	// return isPool;
	frame_dig 0 // isPool: bool

	// set the subroutine return value
	frame_bury 0
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x60eb44f8 // method "initLST()void"
	pushbytes 0x69035a1c // method "calculateLSTRatio()void"
	pushbytes 0x7c1974c7 // method "mintRequest()void"
	pushbytes 0x4f58c530 // method "burnRequest()void"
	pushbytes 0xe5747e07 // method "mintValidatorCommit(uint64,pay)void"
	pushbytes 0x8036d528 // method "burnValidatorCommit()void"
	pushbytes 0xe76f995e // method "burnToDelinquentValidator()void"
	pushbytes 0x9c937808 // method "reMintDeliquentCommit()void"
	pushbytes 0xe45c40e0 // method "delegateStake(uint64,uint64)void"
	pushbytes 0xfd046173 // method "snitch()void"
	pushbytes 0x911c3c46 // method "reStakeFromSnitch(uint64,uint64,pay)void"
	pushbytes 0x5e073e67 // method "onOperatorExit(uint64,pay)void"
	pushbytes 0x548b59f6 // method "declareRewards(pay)void"
	pushbytes 0xd2be586a // method "snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool"
	pushbytes 0x8bfa1157 // method "makeFlashLoanRequest(pay,uint64[],uint64[])void"
	pushbytes 0x7c941b35 // method "getFLcounter()uint64"
	pushbytes 0x45cb6baf // method "creatorChangeCreatorRelatedParams()void"
	txna ApplicationArgs 0
	match *abi_route_initLST *abi_route_calculateLSTRatio *abi_route_mintRequest *abi_route_burnRequest *abi_route_mintValidatorCommit *abi_route_burnValidatorCommit *abi_route_burnToDelinquentValidator *abi_route_reMintDeliquentCommit *abi_route_delegateStake *abi_route_snitch *abi_route_reStakeFromSnitch *abi_route_onOperatorExit *abi_route_declareRewards *abi_route_snitchCheck *abi_route_makeFlashLoanRequest *abi_route_getFLcounter *abi_route_creatorChangeCreatorRelatedParams

	// this contract does not implement the given ABI method for call NoOp
	err