#pragma version 11
intcblock 0 1 8 6 5 1000000 4 2 3 32 100
bytecblock 0x 0x686967686573745f626964646572 0x666c6173686c6f616e5f636f756e746572 0x63697263756c6174696e675f737570706c79 0x6275726e5f7175657565 0x746f6b656e5f6964 0x6d616e61676572 0x746f74616c5f7374616b65 0x00 0x76616c696461746f725f706f6f6c5f76657273696f6e 0x7469657273 0x76616c696461746f725f617070726f76616c5f70726f6772616d 0x73617475726174696f6e5f627566666572 0x7065675f726174696f 0xdcae771b 0x706f6f6c5f636f6e74726163745f6c6f636b5f666c6167 0x76616c696461746f725f706f6f6c5f636f7374 0x6c6173745f657868617573745f626c6f636b 0x64656c6567617465645f7374616b65 0x70726f746f636f6c5f666565 0x6f70657261746f72 0x737461747573 0x151f7c75 0x76e08961 0x981021d7 0x6c6173745f666c6173686c6f616e5f626c6f636b 0x6f70657261746f725f636f6d6d6974 0x0000000000000000 0xb4bfca50 0x840e3785

// This TEAL was generated by TEALScript v0.105.5
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts\CaelusAdmin.algo.ts:79
	// this.manager.value = this.app.creator
	bytec 6 //  "manager"
	txna Applications 0
	app_params_get AppCreator
	pop
	app_global_put

	// contracts\CaelusAdmin.algo.ts:80
	// this.validatorPoolContractVersion.value = 0
	bytec 9 //  "validator_pool_version"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:81
	// this.validatorPoolContractCost.value = VALIDATOR_POOL_CONTRACT_MBR
	bytec 16 //  "validator_pool_cost"
	pushint 1120500
	app_global_put

	// contracts\CaelusAdmin.algo.ts:82
	// this.protocolFee.value = PROTOCOL_COMMISSION
	bytec 19 //  "protocol_fee"
	intc 6 // 4
	app_global_put

	// contracts\CaelusAdmin.algo.ts:84
	// this.totalStake.value = 0
	bytec 7 //  "total_stake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:85
	// this.pegRatio.value = 1 * SCALE
	bytec 13 //  "peg_ratio"
	intc 5 // 1000000
	app_global_put

	// contracts\CaelusAdmin.algo.ts:87
	// this.tokenId.value = AssetID.zeroIndex
	bytec 5 //  "token_id"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:88
	// this.tokenCirculatingSupply.value = 0
	bytec 3 //  "circulating_supply"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:90
	// this.highestBidder.value = AppID.zeroIndex
	bytec 1 //  "highest_bidder"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:92
	// this.burnQueue.value = []
	bytec 4 //  "burn_queue"
	pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000
	app_global_put

	// contracts\CaelusAdmin.algo.ts:94
	// this.tiers.value = [VEST_TIER_4, VEST_TIER_5]
	bytec 10 //  "tiers"
	pushbytes 0x0002000000174876e80000000022ecb25c00
	app_global_put

	// contracts\CaelusAdmin.algo.ts:96
	// this.lastExhaustBlock.value = 0
	bytec 17 //  "last_exhaust_block"
	intc 0 // 0
	app_global_put
	retsub

// updateApplication()void
*abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	intc 1 // 1
	return

// updateApplication(): void
//
// Temporary method to update the application. This method will be removed in the future.
// Here to improve open beta testing iterations. Planned to be removed on mainnet launch.
updateApplication:
	proto 0 0

	// contracts\CaelusAdmin.algo.ts:104
	// assert(this.txn.sender === this.manager.value)
	txn Sender
	bytec 6 //  "manager"
	app_global_get
	==
	assert
	retsub

// MANAGER_createToken()void
*abi_route_MANAGER_createToken:
	// execute MANAGER_createToken()void
	callsub MANAGER_createToken
	intc 1 // 1
	return

// MANAGER_createToken(): void
//
// MANAGER METHODS
MANAGER_createToken:
	proto 0 0

	// contracts\CaelusAdmin.algo.ts:112
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 6 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// *if0_condition
	// contracts\CaelusAdmin.algo.ts:114
	// this.tokenId.value === AssetID.zeroIndex
	bytec 5 //  "token_id"
	app_global_get
	intc 0 // 0
	==
	bz *if0_end

	// *if0_consequent
	// contracts\CaelusAdmin.algo.ts:115
	// this.tokenId.value = sendAssetCreation({
	//         configAssetTotal: 10 ** 16,
	//         configAssetDecimals: 6,
	//         configAssetReserve: this.app.address,
	//         configAssetManager: this.app.address,
	//         configAssetClawback: globals.zeroAddress,
	//         configAssetFreeze: globals.zeroAddress,
	//         configAssetDefaultFrozen: 0,
	//         configAssetName: 'Vestguard ALGO',
	//         configAssetUnitName: 'vALGO',
	//         configAssetURL: 'https://vestige.fi',
	//       })
	bytec 5 //  "token_id"
	itxn_begin
	intc 8 //  acfg
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:116
	// configAssetTotal: 10 ** 16
	pushint 10
	pushint 16
	exp
	itxn_field ConfigAssetTotal

	// contracts\CaelusAdmin.algo.ts:117
	// configAssetDecimals: 6
	intc 3 // 6
	itxn_field ConfigAssetDecimals

	// contracts\CaelusAdmin.algo.ts:118
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// contracts\CaelusAdmin.algo.ts:119
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// contracts\CaelusAdmin.algo.ts:120
	// configAssetClawback: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetClawback

	// contracts\CaelusAdmin.algo.ts:121
	// configAssetFreeze: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetFreeze

	// contracts\CaelusAdmin.algo.ts:122
	// configAssetDefaultFrozen: 0
	intc 0 // 0
	itxn_field ConfigAssetDefaultFrozen

	// contracts\CaelusAdmin.algo.ts:123
	// configAssetName: 'Vestguard ALGO'
	pushbytes 0x56657374677561726420414c474f // "Vestguard ALGO"
	itxn_field ConfigAssetName

	// contracts\CaelusAdmin.algo.ts:124
	// configAssetUnitName: 'vALGO'
	pushbytes 0x76414c474f // "vALGO"
	itxn_field ConfigAssetUnitName

	// contracts\CaelusAdmin.algo.ts:125
	// configAssetURL: 'https://vestige.fi'
	pushbytes 0x68747470733a2f2f766573746967652e6669 // "https://vestige.fi"
	itxn_field ConfigAssetURL

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	app_global_put

*if0_end:
	retsub

// MANAGER_updateBoostTokenID(uint64)void
*abi_route_MANAGER_updateBoostTokenID:
	// boostTokenID: uint64
	txna ApplicationArgs 1
	btoi

	// execute MANAGER_updateBoostTokenID(uint64)void
	callsub MANAGER_updateBoostTokenID
	intc 1 // 1
	return

// MANAGER_updateBoostTokenID(boostTokenID: AssetID): void
MANAGER_updateBoostTokenID:
	proto 1 0

	// contracts\CaelusAdmin.algo.ts:131
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 6 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// contracts\CaelusAdmin.algo.ts:132
	// this.boostTokenID.value = boostTokenID
	pushbytes 0x626f6f73745f746f6b656e5f6964 // "boost_token_id"
	frame_dig -1 // boostTokenID: AssetID
	app_global_put
	retsub

// MANAGER_changeBoostTier(uint64[])void
*abi_route_MANAGER_changeBoostTier:
	// amounts: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute MANAGER_changeBoostTier(uint64[])void
	callsub MANAGER_changeBoostTier
	intc 1 // 1
	return

// MANAGER_changeBoostTier(amounts: uint64[]): void
MANAGER_changeBoostTier:
	proto 1 0

	// contracts\CaelusAdmin.algo.ts:136
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 6 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// contracts\CaelusAdmin.algo.ts:137
	// this.tiers.value = amounts
	bytec 10 //  "tiers"
	frame_dig -1 // amounts: uint64[]
	dup
	len
	intc 2 // 8
	/
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// getBoostTier(uint64)uint64
*abi_route_getBoostTier:
	// The ABI return prefix
	bytec 22 // 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute getBoostTier(uint64)uint64
	callsub getBoostTier
	itob
	concat
	log
	intc 1 // 1
	return

// getBoostTier(amount: uint64): uint64
//
// The getBoostTier method is needed to be kept public so that on state update Validator Pool can fetch their current tier.
// @param {uint64} amount  - The amount of the boost token to calculate the boost tier for
// @returns {uint64} - The boost tier for the given amount
getBoostTier:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// *if1_condition
	// contracts\CaelusAdmin.algo.ts:147
	// amount < this.tiers.value[0]
	frame_dig -1 // amount: uint64
	bytec 10 //  "tiers"
	app_global_get
	extract 2 0
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	<
	bz *if1_end

	// *if1_consequent
	// contracts\CaelusAdmin.algo.ts:147
	// return 0;
	intc 0 // 0
	b *getBoostTier*return

*if1_end:
	// contracts\CaelusAdmin.algo.ts:148
	// for (let i = 0; i < this.tiers.value.length; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_0:
	// contracts\CaelusAdmin.algo.ts:148
	// i < this.tiers.value.length
	frame_dig 0 // i: uint64
	bytec 10 //  "tiers"
	app_global_get
	extract 2 0
	len
	intc 2 // 8
	/
	<
	bz *for_0_end

	// *if2_condition
	// contracts\CaelusAdmin.algo.ts:149
	// amount < this.tiers.value[i]
	frame_dig -1 // amount: uint64
	bytec 10 //  "tiers"
	app_global_get
	extract 2 0
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 0 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	<
	bz *if2_end

	// *if2_consequent
	// contracts\CaelusAdmin.algo.ts:149
	// return i + 1;
	frame_dig 0 // i: uint64
	intc 1 // 1
	+
	b *getBoostTier*return

*if2_end:

*for_0_continue:
	// contracts\CaelusAdmin.algo.ts:148
	// i += 1
	frame_dig 0 // i: uint64
	intc 1 // 1
	+
	frame_bury 0 // i: uint64
	b *for_0

*for_0_end:
	// contracts\CaelusAdmin.algo.ts:151
	// return this.tiers.value.length;
	bytec 10 //  "tiers"
	app_global_get
	extract 2 0
	len
	intc 2 // 8
	/

*getBoostTier*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// MANAGER_changeManager(address)void
*abi_route_MANAGER_changeManager:
	// manager: address
	txna ApplicationArgs 1
	dup
	len
	intc 9 // 32
	==

	// argument 0 (manager) for MANAGER_changeManager must be a address
	assert

	// execute MANAGER_changeManager(address)void
	callsub MANAGER_changeManager
	intc 1 // 1
	return

// MANAGER_changeManager(manager: Address): void
MANAGER_changeManager:
	proto 1 0

	// contracts\CaelusAdmin.algo.ts:155
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 6 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// contracts\CaelusAdmin.algo.ts:156
	// this.manager.value = manager
	bytec 6 //  "manager"
	frame_dig -1 // manager: Address
	app_global_put
	retsub

// MANAGER_changeProtocolFee(uint64)void
*abi_route_MANAGER_changeProtocolFee:
	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute MANAGER_changeProtocolFee(uint64)void
	callsub MANAGER_changeProtocolFee
	intc 1 // 1
	return

// MANAGER_changeProtocolFee(amount: uint64): void
MANAGER_changeProtocolFee:
	proto 1 0

	// contracts\CaelusAdmin.algo.ts:160
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 6 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// contracts\CaelusAdmin.algo.ts:161
	// assert(amount <= 100, 'amount is meant as percentage, cannot be more than 100')
	frame_dig -1 // amount: uint64
	intc 10 // 100
	<=

	// amount is meant as percentage, cannot be more than 100
	assert

	// contracts\CaelusAdmin.algo.ts:162
	// this.protocolFee.value = amount
	bytec 19 //  "protocol_fee"
	frame_dig -1 // amount: uint64
	app_global_put
	retsub

// MANAGER_lockContract()void
*abi_route_MANAGER_lockContract:
	// execute MANAGER_lockContract()void
	callsub MANAGER_lockContract
	intc 1 // 1
	return

// MANAGER_lockContract(): void
MANAGER_lockContract:
	proto 0 0

	// contracts\CaelusAdmin.algo.ts:166
	// assert(this.txn.sender === this.manager.value)
	txn Sender
	bytec 6 //  "manager"
	app_global_get
	==
	assert

	// contracts\CaelusAdmin.algo.ts:167
	// this.poolContractLock.value = LOCKED
	bytec 15 //  "pool_contract_lock_flag"
	intc 1 // 1
	app_global_put
	retsub

// MANAGER_updatePoolContractCost(uint64)void
*abi_route_MANAGER_updatePoolContractCost:
	// validatorPoolContractCost: uint64
	txna ApplicationArgs 1
	btoi

	// execute MANAGER_updatePoolContractCost(uint64)void
	callsub MANAGER_updatePoolContractCost
	intc 1 // 1
	return

// MANAGER_updatePoolContractCost(validatorPoolContractCost: uint64): void
MANAGER_updatePoolContractCost:
	proto 1 0

	// contracts\CaelusAdmin.algo.ts:171
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 6 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// contracts\CaelusAdmin.algo.ts:172
	// this.validatorPoolContractCost.value = validatorPoolContractCost
	bytec 16 //  "validator_pool_cost"
	frame_dig -1 // validatorPoolContractCost: uint64
	app_global_put
	retsub

// MANAGER_updatePoolContractProgram(uint64)void
*abi_route_MANAGER_updatePoolContractProgram:
	// programSize: uint64
	txna ApplicationArgs 1
	btoi

	// execute MANAGER_updatePoolContractProgram(uint64)void
	callsub MANAGER_updatePoolContractProgram
	intc 1 // 1
	return

// MANAGER_updatePoolContractProgram(programSize: uint64): void
MANAGER_updatePoolContractProgram:
	proto 1 0

	// contracts\CaelusAdmin.algo.ts:176
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 6 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// contracts\CaelusAdmin.algo.ts:177
	// assert(this.poolContractLock.value === UPDATABLE, 'cannot rewrite contract anymore')
	bytec 15 //  "pool_contract_lock_flag"
	app_global_get
	intc 0 // 0
	==

	// cannot rewrite contract anymore
	assert

	// *if3_condition
	// contracts\CaelusAdmin.algo.ts:179
	// this.validatorPoolContractApprovalProgram.exists
	bytec 11 //  "validator_approval_program"
	box_len
	swap
	pop
	bz *if3_else

	// *if3_consequent
	// contracts\CaelusAdmin.algo.ts:180
	// this.validatorPoolContractApprovalProgram.resize(programSize)
	bytec 11 //  "validator_approval_program"
	frame_dig -1 // programSize: uint64
	box_resize
	b *if3_end

*if3_else:
	// contracts\CaelusAdmin.algo.ts:182
	// this.validatorPoolContractApprovalProgram.create(programSize)
	bytec 11 //  "validator_approval_program"
	frame_dig -1 // programSize: uint64
	box_create
	pop

*if3_end:
	// contracts\CaelusAdmin.algo.ts:185
	// this.validatorPoolContractVersion.value += 1
	bytec 9 //  "validator_pool_version"
	app_global_get
	intc 1 // 1
	+
	bytec 9 //  "validator_pool_version"
	swap
	app_global_put
	retsub

// MANAGER_writePoolContractProgram(uint64,byte[])void
*abi_route_MANAGER_writePoolContractProgram:
	// data: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// offset: uint64
	txna ApplicationArgs 1
	btoi

	// execute MANAGER_writePoolContractProgram(uint64,byte[])void
	callsub MANAGER_writePoolContractProgram
	intc 1 // 1
	return

// MANAGER_writePoolContractProgram(offset: uint64, data: bytes): void
MANAGER_writePoolContractProgram:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:189
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 6 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// contracts\CaelusAdmin.algo.ts:190
	// assert(this.poolContractLock.value === UPDATABLE, 'cannot rewrite contract anymore')
	bytec 15 //  "pool_contract_lock_flag"
	app_global_get
	intc 0 // 0
	==

	// cannot rewrite contract anymore
	assert

	// contracts\CaelusAdmin.algo.ts:192
	// this.validatorPoolContractApprovalProgram.replace(offset, data)
	bytec 11 //  "validator_approval_program"
	frame_dig -1 // offset: uint64
	frame_dig -2 // data: bytes
	box_replace
	retsub

// addValidator(pay)void
*abi_route_addValidator:
	// mbrPay: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (mbrPay) for addValidator must be a pay transaction
	assert

	// execute addValidator(pay)void
	callsub addValidator
	intc 1 // 1
	return

// addValidator(mbrPay: PayTxn): void
//
// ARC4 PUBLIC METHODS
//
//
// Factory method to spawn new Validator Pool Contracts.
// @param {PayTxn} mbrPay - The MBR amount can vary depending on the version of the Validator Pool Contract. The mbrPay amount has to cover the cost of the Validator Pool Contract.
addValidator:
	proto 1 0

	// contracts\CaelusAdmin.algo.ts:204
	// verifyPayTxn(mbrPay, {
	//       receiver: this.app.address,
	//       amount: { greaterThanEqualTo: this.validatorPoolContractCost.value },
	//     })
	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	bytec 16 //  "validator_pool_cost"
	app_global_get
	>=

	// transaction verification failed: {"txn":"mbrPay","field":"amount","condition":"greaterThanEqualTo","expected":">=this.validatorPoolContractCost.value"}
	assert

	// contracts\CaelusAdmin.algo.ts:209
	// sendAppCall({
	//       onCompletion: OnCompletion.NoOp,
	//       approvalProgram: this.validatorPoolContractApprovalProgram.value,
	//       clearStateProgram: CaelusValidatorPool.clearProgram(),
	//       globalNumUint: CaelusValidatorPool.schema.global.numUint,
	//       globalNumByteSlice: CaelusValidatorPool.schema.global.numByteSlice,
	//       extraProgramPages: 3,
	//       applicationArgs: [
	//         method('createApplication(uint64,address,uint64,uint64)void'),
	//         itob(this.app.id),
	//         this.txn.sender,
	//         itob(this.validatorPoolContractVersion.value),
	//         itob(this.tokenId.value),
	//       ],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:210
	// onCompletion: OnCompletion.NoOp
	intc 0 //  NoOp
	itxn_field OnCompletion

	// contracts\CaelusAdmin.algo.ts:211
	// approvalProgram: this.validatorPoolContractApprovalProgram.value
	bytec 11 //  "validator_approval_program"
	box_get

	// box value does not exist: this.validatorPoolContractApprovalProgram.value
	assert
	itxn_field ApprovalProgram

	// contracts\CaelusAdmin.algo.ts:212
	// clearStateProgram: CaelusValidatorPool.clearProgram()
	pushbytes 0x0b
	itxn_field ClearStateProgram

	// contracts\CaelusAdmin.algo.ts:213
	// globalNumUint: CaelusValidatorPool.schema.global.numUint
	pushint 14
	itxn_field GlobalNumUint

	// contracts\CaelusAdmin.algo.ts:214
	// globalNumByteSlice: CaelusValidatorPool.schema.global.numByteSlice
	intc 7 // 2
	itxn_field GlobalNumByteSlice

	// contracts\CaelusAdmin.algo.ts:215
	// extraProgramPages: 3
	intc 8 // 3
	itxn_field ExtraProgramPages

	// contracts\CaelusAdmin.algo.ts:216
	// applicationArgs: [
	//         method('createApplication(uint64,address,uint64,uint64)void'),
	//         itob(this.app.id),
	//         this.txn.sender,
	//         itob(this.validatorPoolContractVersion.value),
	//         itob(this.tokenId.value),
	//       ]
	pushbytes 0xad04f6a1 // method "createApplication(uint64,address,uint64,uint64)void"
	itxn_field ApplicationArgs
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs
	bytec 9 //  "validator_pool_version"
	app_global_get
	itob
	itxn_field ApplicationArgs
	bytec 5 //  "token_id"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:225
	// this.validatorAddedEvent.log({
	//       operator: this.txn.sender,
	//       version: this.validatorPoolContractVersion.value,
	//     })
	pushbytes 0x57eb6699 // validatorAddedEvent(address,uint64)
	txn Sender
	bytec 9 //  "validator_pool_version"
	app_global_get
	itob
	concat
	concat
	log
	retsub

// mintRequest(pay)void
*abi_route_mintRequest:
	// mintTxn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (mintTxn) for mintRequest must be a pay transaction
	assert

	// execute mintRequest(pay)void
	callsub mintRequest
	intc 1 // 1
	return

// mintRequest(mintTxn: PayTxn): void
//
// On Mint the Algo deposited by the user are kept in the Admin Contract Account balance waiting for the highest bidder to claim them.
mintRequest:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:235
	// verifyPayTxn(mintTxn, {
	//       receiver: this.app.address,
	//       amount: { greaterThanEqualTo: globals.minTxnFee },
	//     })
	// verify receiver
	frame_dig -1 // mintTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mintTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	global MinTxnFee
	>=

	// transaction verification failed: {"txn":"mintTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=globals.minTxnFee"}
	assert

	// contracts\CaelusAdmin.algo.ts:240
	// minted = this.getMintAmount(mintTxn.amount)
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	callsub getMintAmount
	frame_bury 0 // minted: uint64

	// contracts\CaelusAdmin.algo.ts:241
	// this.doAxfer(this.txn.sender, minted, this.tokenId.value)
	bytec 5 //  "token_id"
	app_global_get
	frame_dig 0 // minted: uint64
	txn Sender
	callsub doAxfer

	// contracts\CaelusAdmin.algo.ts:242
	// this.totalStake.value += mintTxn.amount
	bytec 7 //  "total_stake"
	app_global_get
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	+
	bytec 7 //  "total_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:243
	// this.tokenCirculatingSupply.value += minted
	bytec 3 //  "circulating_supply"
	app_global_get
	frame_dig 0 // minted: uint64
	+
	bytec 3 //  "circulating_supply"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:245
	// this.mintEvent.log({
	//       instant: true,
	//       amount: mintTxn.amount,
	//       output: minted,
	//     })
	bytec 28 //  mintEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	intc 1 // 1
	setbit
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	itob
	concat
	frame_dig 0 // minted: uint64
	itob
	concat
	concat
	log
	retsub

// burnRequest(axfer,address)void
*abi_route_burnRequest:
	// burnTo: address
	txna ApplicationArgs 1
	dup
	len
	intc 9 // 32
	==

	// argument 0 (burnTo) for burnRequest must be a address
	assert

	// burnTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 6 //  axfer
	==

	// argument 1 (burnTxn) for burnRequest must be a axfer transaction
	assert

	// execute burnRequest(axfer,address)void
	callsub burnRequest
	intc 1 // 1
	return

// burnRequest(burnTxn: AssetTransferTxn, burnTo: Address): void
//
// On Burn the contract gradually checks where to take Algo from, first in the idle Admin balance, then from the burn queue.
// In case the amount of Algo exceeds the current queue max amount the remaining vAlgo are sent back to the user.
// This situation triggers the exhaust flag, that will prevent the contract from burning Algo for the next 5 blocks.
// The Cooldown period is necessary to ensure that the queue is filled with the Validators more fit for the burn.
// This to disallow possible spam looping of burning to target from specific pools.
burnRequest:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 9

	// contracts\CaelusAdmin.algo.ts:260
	// verifyAssetTransferTxn(burnTxn, {
	//       xferAsset: this.tokenId.value,
	//       assetReceiver: this.app.address,
	//       assetAmount: { greaterThanEqualTo: ALGORAND_BASE_FEE },
	//     })
	// verify xferAsset
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns XferAsset
	bytec 5 //  "token_id"
	app_global_get
	==

	// transaction verification failed: {"txn":"burnTxn","field":"xferAsset","expected":"this.tokenId.value"}
	assert

	// verify assetReceiver
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"burnTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetAmount
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	pushint 1000
	>=

	// transaction verification failed: {"txn":"burnTxn","field":"assetAmount","condition":"greaterThanEqualTo","expected":">=ALGORAND_BASE_FEE"}
	assert

	// contracts\CaelusAdmin.algo.ts:266
	// amountToBurn = this.getBurnAmount(burnTxn.assetAmount)
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	callsub getBurnAmount
	frame_bury 0 // amountToBurn: uint64

	// contracts\CaelusAdmin.algo.ts:267
	// burning = 0
	intc 0 // 0
	frame_bury 1 // burning: uint64

	// contracts\CaelusAdmin.algo.ts:269
	// idleAlgo = this.app.address.balance - this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	frame_bury 2 // idleAlgo: uint64

	// *if4_condition
	// contracts\CaelusAdmin.algo.ts:270
	// idleAlgo > 0
	frame_dig 2 // idleAlgo: uint64
	intc 0 // 0
	>
	bz *if4_end

	// *if4_consequent
	// contracts\CaelusAdmin.algo.ts:271
	// amountToBurnFromIdle = idleAlgo >= amountToBurn ? amountToBurn : idleAlgo
	frame_dig 2 // idleAlgo: uint64
	frame_dig 0 // amountToBurn: uint64
	>=
	bz *ternary0_false
	frame_dig 0 // amountToBurn: uint64
	b *ternary0_end

*ternary0_false:
	frame_dig 2 // idleAlgo: uint64

*ternary0_end:
	frame_bury 3 // amountToBurnFromIdle: uint64

	// contracts\CaelusAdmin.algo.ts:272
	// burning += amountToBurnFromIdle
	frame_dig 1 // burning: uint64
	frame_dig 3 // amountToBurnFromIdle: uint64
	+
	frame_bury 1 // burning: uint64

	// contracts\CaelusAdmin.algo.ts:274
	// sendPayment({
	//         receiver: burnTxn.sender,
	//         amount: amountToBurnFromIdle,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:275
	// receiver: burnTxn.sender
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns Sender
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:276
	// amount: amountToBurnFromIdle
	frame_dig 3 // amountToBurnFromIdle: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if4_end:
	// *if5_condition
	// contracts\CaelusAdmin.algo.ts:280
	// burning === amountToBurn
	frame_dig 1 // burning: uint64
	frame_dig 0 // amountToBurn: uint64
	==
	bz *if5_end

	// *if5_consequent
	// contracts\CaelusAdmin.algo.ts:281
	// this.downSupplyCounters(amountToBurn, burnTxn.assetAmount)
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig 0 // amountToBurn: uint64
	callsub downSupplyCounters

	// contracts\CaelusAdmin.algo.ts:282
	// this.burnEvent.log({
	//         filled: true,
	//         amount: burnTxn.assetAmount,
	//         output: burning,
	//       })
	bytec 14 //  burnEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	intc 1 // 1
	setbit
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	concat
	frame_dig 1 // burning: uint64
	itob
	concat
	concat
	log

	// contracts\CaelusAdmin.algo.ts:287
	// return;
	retsub

*if5_end:
	// *if6_condition
	// contracts\CaelusAdmin.algo.ts:290
	// this.queueIsEmpty()
	callsub queueIsEmpty
	bz *if6_end

	// *if6_consequent
	// contracts\CaelusAdmin.algo.ts:291
	// amountLeft = this.getMintAmount(amountToBurn - burning)
	frame_dig 0 // amountToBurn: uint64
	frame_dig 1 // burning: uint64
	-
	callsub getMintAmount
	frame_bury 4 // amountLeft: uint64

	// contracts\CaelusAdmin.algo.ts:292
	// this.doAxfer(burnTxn.sender, amountLeft, this.tokenId.value)
	bytec 5 //  "token_id"
	app_global_get
	frame_dig 4 // amountLeft: uint64
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns Sender
	callsub doAxfer

	// contracts\CaelusAdmin.algo.ts:293
	// this.downSupplyCounters(burning, burnTxn.assetAmount - amountLeft)
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig 4 // amountLeft: uint64
	-
	frame_dig 1 // burning: uint64
	callsub downSupplyCounters

	// contracts\CaelusAdmin.algo.ts:294
	// this.burnEvent.log({
	//         filled: false,
	//         amount: burnTxn.assetAmount - amountLeft,
	//         output: burning,
	//       })
	bytec 14 //  burnEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	dup
	setbit
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig 4 // amountLeft: uint64
	-
	itob
	concat
	frame_dig 1 // burning: uint64
	itob
	concat
	concat
	log

	// contracts\CaelusAdmin.algo.ts:299
	// return;
	retsub

*if6_end:
	// *if7_condition
	// contracts\CaelusAdmin.algo.ts:302
	// !this.queueIsFull()
	callsub queueIsFull
	!
	bz *if7_end

	// *if7_consequent
	// contracts\CaelusAdmin.algo.ts:303
	// assert(globals.round - this.lastExhaustBlock.value > BURN_COOLDOWN, 'wait at least 5 blocks since Exhaust Block')
	global Round
	bytec 17 //  "last_exhaust_block"
	app_global_get
	-
	intc 4 // 5
	>

	// wait at least 5 blocks since Exhaust Block
	assert

*if7_end:
	// contracts\CaelusAdmin.algo.ts:306
	// queue = clone(this.burnQueue.value)
	bytec 4 //  "burn_queue"
	app_global_get
	frame_bury 5 // queue: uint64[5]

	// contracts\CaelusAdmin.algo.ts:307
	// for (let i = 0; i < queue.length; i += 1)
	intc 0 // 0
	frame_bury 6 // i: uint64

*for_1:
	// contracts\CaelusAdmin.algo.ts:307
	// i < queue.length
	frame_dig 6 // i: uint64
	intc 4 // 5
	<
	bz *for_1_end

	// contracts\CaelusAdmin.algo.ts:308
	// app = queue[i]
	frame_dig 5 // queue: uint64[5]
	frame_dig 6 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	frame_bury 7 // app: uint64

	// *if8_condition
	// contracts\CaelusAdmin.algo.ts:309
	// this.isPool(app)
	frame_dig 7 // app: uint64
	callsub isPool
	bz *if8_end

	// *if8_consequent
	// contracts\CaelusAdmin.algo.ts:310
	// delegatedToTarget = app.globalState('delegated_stake') as uint64
	frame_dig 7 // app: uint64
	bytec 18 //  "delegated_stake"
	app_global_get_ex

	// global state value does not exist: app.globalState('delegated_stake')
	assert
	frame_bury 8 // delegatedToTarget: uint64

	// *if9_condition
	// contracts\CaelusAdmin.algo.ts:311
	// delegatedToTarget < amountToBurn - burning
	frame_dig 8 // delegatedToTarget: uint64
	frame_dig 0 // amountToBurn: uint64
	frame_dig 1 // burning: uint64
	-
	<
	bz *if9_else

	// *if9_consequent
	// contracts\CaelusAdmin.algo.ts:312
	// this.doBurnTxn(app, [delegatedToTarget, burnTo])
	frame_dig 8 // delegatedToTarget: uint64
	itob
	frame_dig -2 // burnTo: Address
	concat
	frame_dig 7 // app: uint64
	callsub doBurnTxn

	// contracts\CaelusAdmin.algo.ts:313
	// this.burnQueue.value[i] = AppID.zeroIndex
	bytec 4 //  "burn_queue"
	app_global_get
	frame_dig 6 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	bytec 27 // 0x0000000000000000
	replace3
	bytec 4 //  "burn_queue"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:314
	// burning += delegatedToTarget
	frame_dig 1 // burning: uint64
	frame_dig 8 // delegatedToTarget: uint64
	+
	frame_bury 1 // burning: uint64
	b *if9_end

*if9_else:
	// contracts\CaelusAdmin.algo.ts:316
	// this.doBurnTxn(app, [amountToBurn - burning, burnTo])
	frame_dig 0 // amountToBurn: uint64
	frame_dig 1 // burning: uint64
	-
	itob
	frame_dig -2 // burnTo: Address
	concat
	frame_dig 7 // app: uint64
	callsub doBurnTxn

	// contracts\CaelusAdmin.algo.ts:317
	// burning = amountToBurn
	frame_dig 0 // amountToBurn: uint64
	frame_bury 1 // burning: uint64

*if9_end:

*if8_end:

*for_1_continue:
	// contracts\CaelusAdmin.algo.ts:307
	// i += 1
	frame_dig 6 // i: uint64
	intc 1 // 1
	+
	frame_bury 6 // i: uint64
	b *for_1

*for_1_end:
	// contracts\CaelusAdmin.algo.ts:322
	// amountLeft = this.getMintAmount(amountToBurn - burning)
	frame_dig 0 // amountToBurn: uint64
	frame_dig 1 // burning: uint64
	-
	callsub getMintAmount
	frame_bury 9 // amountLeft: uint64

	// *if10_condition
	// contracts\CaelusAdmin.algo.ts:323
	// amountLeft > 0
	frame_dig 9 // amountLeft: uint64
	intc 0 // 0
	>
	bz *if10_end

	// *if10_consequent
	// contracts\CaelusAdmin.algo.ts:324
	// this.doAxfer(burnTxn.sender, amountLeft, this.tokenId.value)
	bytec 5 //  "token_id"
	app_global_get
	frame_dig 9 // amountLeft: uint64
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns Sender
	callsub doAxfer

	// contracts\CaelusAdmin.algo.ts:325
	// this.lastExhaustBlock.value = globals.round
	bytec 17 //  "last_exhaust_block"
	global Round
	app_global_put

*if10_end:
	// contracts\CaelusAdmin.algo.ts:328
	// this.downSupplyCounters(burning, burnTxn.assetAmount - amountLeft)
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig 9 // amountLeft: uint64
	-
	frame_dig 1 // burning: uint64
	callsub downSupplyCounters

	// contracts\CaelusAdmin.algo.ts:330
	// this.burnEvent.log({
	//       filled: amountLeft > 0,
	//       amount: burnTxn.assetAmount - amountLeft,
	//       output: burning,
	//     })
	bytec 14 //  burnEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	frame_dig 9 // amountLeft: uint64
	intc 0 // 0
	>
	setbit
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig 9 // amountLeft: uint64
	-
	itob
	concat
	frame_dig 1 // burning: uint64
	itob
	concat
	concat
	log
	retsub

// mintValidatorCommit(uint64,pay)void
*abi_route_mintValidatorCommit:
	// stakeCommit: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (stakeCommit) for mintValidatorCommit must be a pay transaction
	assert

	// validatorAppID: uint64
	txna ApplicationArgs 1
	btoi

	// execute mintValidatorCommit(uint64,pay)void
	callsub mintValidatorCommit
	intc 1 // 1
	return

// mintValidatorCommit(validatorAppID: AppID, stakeCommit: PayTxn): void
//
// Specific method to mint the LST for the Validator Pool Contract.
// The mint is done by the Admin Contract and the LST is sent to the Validator Pool Contract.
mintValidatorCommit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:342
	// assert(this.isPool(validatorAppID))
	frame_dig -1 // validatorAppID: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:343
	// operatorAddress = validatorAppID.globalState('operator') as Address
	frame_dig -1 // validatorAppID: AppID
	bytec 20 //  "operator"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('operator')
	assert
	frame_bury 0 // operatorAddress: address

	// contracts\CaelusAdmin.algo.ts:344
	// verifyPayTxn(stakeCommit, {
	//       sender: operatorAddress,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Sender
	frame_dig 0 // operatorAddress: address
	==

	// transaction verification failed: {"txn":"stakeCommit","field":"sender","expected":"operatorAddress"}
	assert

	// verify receiver
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeCommit","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:349
	// sendMethodCall<typeof CaelusValidatorPool.prototype.__addToOperatorCommit>({
	//       applicationID: validatorAppID,
	//       methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: stakeCommit.amount,
	//         },
	//       ],
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:353
	// receiver: validatorAppID.address
	frame_dig -1 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:354
	// amount: stakeCommit.amount
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Amount
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 29 //  method "__addToOperatorCommit(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:350
	// applicationID: validatorAppID
	frame_dig -1 // validatorAppID: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:351
	// methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: stakeCommit.amount,
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:359
	// amountToMint = this.getMintAmount(stakeCommit.amount)
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Amount
	callsub getMintAmount
	frame_bury 1 // amountToMint: uint64

	// contracts\CaelusAdmin.algo.ts:360
	// this.doAxfer(validatorAppID.address, amountToMint, this.tokenId.value)
	bytec 5 //  "token_id"
	app_global_get
	frame_dig 1 // amountToMint: uint64
	frame_dig -1 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	callsub doAxfer

	// contracts\CaelusAdmin.algo.ts:361
	// this.upSupplyCounters(stakeCommit.amount, amountToMint)
	frame_dig 1 // amountToMint: uint64
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Amount
	callsub upSupplyCounters
	retsub

// removeValidatorCommit(uint64,uint64)void
*abi_route_removeValidatorCommit:
	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// appToBurnFrom: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeValidatorCommit(uint64,uint64)void
	callsub removeValidatorCommit
	intc 1 // 1
	return

// removeValidatorCommit(appToBurnFrom: AppID, amount: uint64): void
//
// Specific method to remove from the operator commit in the Validator Pool Contract.
//
// The Validator Pool Contract will send the vAlgo to the operator address.
removeValidatorCommit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:370
	// this.isPool(appToBurnFrom)
	frame_dig -1 // appToBurnFrom: AppID
	callsub isPool

	// contracts\CaelusAdmin.algo.ts:371
	// verifyTxn(this.txn, {
	//       sender: appToBurnFrom.globalState('operator') as Address,
	//     })
	// verify sender
	txn Sender
	frame_dig -1 // appToBurnFrom: AppID
	bytec 20 //  "operator"
	app_global_get_ex

	// global state value does not exist: appToBurnFrom.globalState('operator')
	assert
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"appToBurnFrom.globalState('operator') as Address"}
	assert

	// contracts\CaelusAdmin.algo.ts:374
	// toBurn = this.getBurnAmount(amount)
	frame_dig -2 // amount: uint64
	callsub getBurnAmount
	frame_bury 0 // toBurn: uint64

	// contracts\CaelusAdmin.algo.ts:376
	// sendMethodCall<typeof CaelusValidatorPool.prototype.__removeFromOperatorCommit, void>({
	//       applicationID: appToBurnFrom,
	//       methodArgs: [toBurn, amount],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xf00fd2db // method "__removeFromOperatorCommit(uint64,uint64)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:377
	// applicationID: appToBurnFrom
	frame_dig -1 // appToBurnFrom: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:378
	// methodArgs: [toBurn, amount]
	frame_dig 0 // toBurn: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -2 // amount: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:381
	// this.tokenCirculatingSupply.value -= amount
	bytec 3 //  "circulating_supply"
	app_global_get
	frame_dig -2 // amount: uint64
	-
	bytec 3 //  "circulating_supply"
	swap
	app_global_put
	retsub

// __burnToDelinquentValidator(axfer,uint64,uint64)void
*abi_route___burnToDelinquentValidator:
	// amountOperator: uint64
	txna ApplicationArgs 2
	btoi

	// validatorAppID: uint64
	txna ApplicationArgs 1
	btoi

	// burnTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 6 //  axfer
	==

	// argument 2 (burnTxn) for __burnToDelinquentValidator must be a axfer transaction
	assert

	// execute __burnToDelinquentValidator(axfer,uint64,uint64)void
	callsub __burnToDelinquentValidator
	intc 1 // 1
	return

// __burnToDelinquentValidator(burnTxn: AssetTransferTxn, validatorAppID: AppID, amountOperator: uint64): void
//
// FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT EITHER ON DELINQUENCY OR ON SNITCH
//
// On Delinquency Validators SHOULD not have vAlgo in their balance.
// It's first called when deliquency is set, can be called again if the entire vAlgo amount is not burned.
// The vAlgo will be turned to Algo and added to the operator commit
__burnToDelinquentValidator:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 6

	// contracts\CaelusAdmin.algo.ts:392
	// assert(this.isPool(validatorAppID) && this.txn.sender === validatorAppID.address)
	frame_dig -2 // validatorAppID: AppID
	callsub isPool
	dup
	bz *skip_and0
	txn Sender
	frame_dig -2 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	==
	&&

*skip_and0:
	assert

	// contracts\CaelusAdmin.algo.ts:393
	// amountToUpdate: uint64 = 0
	intc 0 // 0
	frame_bury 0 // amountToUpdate: uint64

	// contracts\CaelusAdmin.algo.ts:394
	// toBurn: uint64 =
	//       this.getBurnAmount(burnTxn.assetAmount) - (validatorAppID.globalState('operator_commit') as uint64)
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	callsub getBurnAmount
	frame_dig -2 // validatorAppID: AppID
	bytec 26 //  "operator_commit"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('operator_commit')
	assert
	-
	frame_bury 1 // toBurn: uint64

	// contracts\CaelusAdmin.algo.ts:396
	// amtBurned = 0
	intc 0 // 0
	frame_bury 2 // amtBurned: uint64

	// contracts\CaelusAdmin.algo.ts:397
	// queue = clone(this.burnQueue.value)
	bytec 4 //  "burn_queue"
	app_global_get
	frame_bury 3 // queue: uint64[5]

	// contracts\CaelusAdmin.algo.ts:398
	// for (let i = 0; i < queue.length; i += 1)
	intc 0 // 0
	frame_bury 4 // i: uint64

*for_2:
	// contracts\CaelusAdmin.algo.ts:398
	// i < queue.length
	frame_dig 4 // i: uint64
	intc 4 // 5
	<
	bz *for_2_end

	// contracts\CaelusAdmin.algo.ts:399
	// currentTargetInQueue = queue[i]
	frame_dig 3 // queue: uint64[5]
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	frame_bury 5 // currentTargetInQueue: uint64

	// *if11_condition
	// contracts\CaelusAdmin.algo.ts:400
	// this.isPool(currentTargetInQueue)
	frame_dig 5 // currentTargetInQueue: uint64
	callsub isPool
	bz *if11_end

	// *if11_consequent
	// contracts\CaelusAdmin.algo.ts:401
	// delegatedToTarget = currentTargetInQueue.globalState('delegated_stake') as uint64
	frame_dig 5 // currentTargetInQueue: uint64
	bytec 18 //  "delegated_stake"
	app_global_get_ex

	// global state value does not exist: currentTargetInQueue.globalState('delegated_stake')
	assert
	frame_bury 6 // delegatedToTarget: uint64

	// *if12_condition
	// contracts\CaelusAdmin.algo.ts:402
	// delegatedToTarget >= toBurn
	frame_dig 6 // delegatedToTarget: uint64
	frame_dig 1 // toBurn: uint64
	>=
	bz *if12_else

	// *if12_consequent
	// contracts\CaelusAdmin.algo.ts:403
	// this.doBurnTxn(currentTargetInQueue, [toBurn, this.app.address])
	frame_dig 1 // toBurn: uint64
	itob
	global CurrentApplicationAddress
	concat
	frame_dig 5 // currentTargetInQueue: uint64
	callsub doBurnTxn

	// contracts\CaelusAdmin.algo.ts:404
	// amtBurned += toBurn
	frame_dig 2 // amtBurned: uint64
	frame_dig 1 // toBurn: uint64
	+
	frame_bury 2 // amtBurned: uint64

	// contracts\CaelusAdmin.algo.ts:405
	// toBurn = 0
	intc 0 // 0
	frame_bury 1 // toBurn: uint64
	b *for_2_end
	b *if12_end

*if12_else:
	// contracts\CaelusAdmin.algo.ts:408
	// this.doBurnTxn(currentTargetInQueue, [delegatedToTarget, this.app.address])
	frame_dig 6 // delegatedToTarget: uint64
	itob
	global CurrentApplicationAddress
	concat
	frame_dig 5 // currentTargetInQueue: uint64
	callsub doBurnTxn

	// contracts\CaelusAdmin.algo.ts:409
	// amtBurned += delegatedToTarget
	frame_dig 2 // amtBurned: uint64
	frame_dig 6 // delegatedToTarget: uint64
	+
	frame_bury 2 // amtBurned: uint64

	// contracts\CaelusAdmin.algo.ts:410
	// toBurn -= delegatedToTarget
	frame_dig 1 // toBurn: uint64
	frame_dig 6 // delegatedToTarget: uint64
	-
	frame_bury 1 // toBurn: uint64

	// contracts\CaelusAdmin.algo.ts:411
	// this.burnQueue.value[i] = AppID.zeroIndex
	bytec 4 //  "burn_queue"
	app_global_get
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	bytec 27 // 0x0000000000000000
	replace3
	bytec 4 //  "burn_queue"
	swap
	app_global_put

*if12_end:

*if11_end:

*for_2_continue:
	// contracts\CaelusAdmin.algo.ts:398
	// i += 1
	frame_dig 4 // i: uint64
	intc 1 // 1
	+
	frame_bury 4 // i: uint64
	b *for_2

*for_2_end:
	// contracts\CaelusAdmin.algo.ts:415
	// amountToUpdate = this.getBurnAmount(toBurn - amtBurned)
	frame_dig 1 // toBurn: uint64
	frame_dig 2 // amtBurned: uint64
	-
	callsub getBurnAmount
	frame_bury 0 // amountToUpdate: uint64

	// contracts\CaelusAdmin.algo.ts:417
	// this.downSupplyCounters(amtBurned + amountOperator, burnTxn.assetAmount - amountToUpdate)
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig 0 // amountToUpdate: uint64
	-
	frame_dig 2 // amtBurned: uint64
	frame_dig -3 // amountOperator: uint64
	+
	callsub downSupplyCounters

	// *if13_condition
	// contracts\CaelusAdmin.algo.ts:419
	// amountToUpdate > 0
	frame_dig 0 // amountToUpdate: uint64
	intc 0 // 0
	>
	bz *if13_end

	// *if13_consequent
	// contracts\CaelusAdmin.algo.ts:420
	// this.doAxfer(burnTxn.sender, amountToUpdate, this.tokenId.value)
	bytec 5 //  "token_id"
	app_global_get
	frame_dig 0 // amountToUpdate: uint64
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns Sender
	callsub doAxfer

*if13_end:
	// contracts\CaelusAdmin.algo.ts:422
	// sendMethodCall<typeof CaelusValidatorPool.prototype.__addToOperatorCommit>({
	//       applicationID: validatorAppID,
	//       methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: amtBurned,
	//         },
	//       ],
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:426
	// receiver: validatorAppID.address
	frame_dig -2 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:427
	// amount: amtBurned
	frame_dig 2 // amtBurned: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 29 //  method "__addToOperatorCommit(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:423
	// applicationID: validatorAppID
	frame_dig -2 // validatorAppID: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:424
	// methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: amtBurned,
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:432
	// this.burnEvent.log({
	//       filled: amountToUpdate > 0,
	//       amount: burnTxn.assetAmount,
	//       output: amtBurned,
	//     })
	bytec 14 //  burnEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	frame_dig 0 // amountToUpdate: uint64
	intc 0 // 0
	>
	setbit
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	concat
	frame_dig 2 // amtBurned: uint64
	itob
	concat
	concat
	log
	retsub

// __reMintDelinquentCommit(uint64)void
*abi_route___reMintDelinquentCommit:
	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute __reMintDelinquentCommit(uint64)void
	callsub __reMintDelinquentCommit
	intc 1 // 1
	return

// __reMintDelinquentCommit(app: AppID): void
//
// FOLLOWUP OPERATION CALLED BY THE VALIDATOR POOL CONTRACT WHEN DELINQUENCY IS SOLVED
//
// When Delinquency is solved the operator will mint his commit back into vAlgo.
__reMintDelinquentCommit:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:445
	// assert(this.isPool(app) && this.txn.sender === app.address)
	frame_dig -1 // app: AppID
	callsub isPool
	dup
	bz *skip_and1
	txn Sender
	frame_dig -1 // app: AppID
	app_params_get AppAddress
	pop
	==
	&&

*skip_and1:
	assert

	// contracts\CaelusAdmin.algo.ts:446
	// amount = app.globalState('operator_commit') as uint64
	frame_dig -1 // app: AppID
	bytec 26 //  "operator_commit"
	app_global_get_ex

	// global state value does not exist: app.globalState('operator_commit')
	assert
	frame_bury 0 // amount: uint64

	// contracts\CaelusAdmin.algo.ts:447
	// amountToMint = this.getMintAmount(amount)
	frame_dig 0 // amount: uint64
	callsub getMintAmount
	frame_bury 1 // amountToMint: uint64

	// contracts\CaelusAdmin.algo.ts:448
	// this.doAxfer(app.address, amountToMint, this.tokenId.value)
	bytec 5 //  "token_id"
	app_global_get
	frame_dig 1 // amountToMint: uint64
	frame_dig -1 // app: AppID
	app_params_get AppAddress
	pop
	callsub doAxfer

	// contracts\CaelusAdmin.algo.ts:450
	// this.upSupplyCounters(amount, amountToMint)
	frame_dig 1 // amountToMint: uint64
	frame_dig 0 // amount: uint64
	callsub upSupplyCounters

	// contracts\CaelusAdmin.algo.ts:452
	// this.mintEvent.log({
	//       instant: true,
	//       amount: amount,
	//       output: amountToMint,
	//     })
	bytec 28 //  mintEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	intc 1 // 1
	setbit
	frame_dig 0 // amount: uint64
	itob
	concat
	frame_dig 1 // amountToMint: uint64
	itob
	concat
	concat
	log
	retsub

// bid(uint64)void
*abi_route_bid:
	// validatorAppID: uint64
	txna ApplicationArgs 1
	btoi

	// execute bid(uint64)void
	callsub bid
	intc 1 // 1
	return

// bid(validatorAppID: AppID): void
//
// Bid Validator App, highest bidder should have the lowest saturation buffer value.
bid:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts\CaelusAdmin.algo.ts:463
	// assert(this.isPool(validatorAppID))
	frame_dig -1 // validatorAppID: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:464
	// isOnLatestVersion =
	//       (validatorAppID.globalState('contract_version') as uint64) === this.validatorPoolContractVersion.value
	frame_dig -1 // validatorAppID: AppID
	pushbytes 0x636f6e74726163745f76657273696f6e // "contract_version"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('contract_version')
	assert
	bytec 9 //  "validator_pool_version"
	app_global_get
	==
	frame_bury 0 // isOnLatestVersion: bool

	// contracts\CaelusAdmin.algo.ts:466
	// assert(isOnLatestVersion, 'cannot bid if not on latest version')
	frame_dig 0 // isOnLatestVersion: bool

	// cannot bid if not on latest version
	assert

	// contracts\CaelusAdmin.algo.ts:467
	// isDelegatable = (validatorAppID.globalState('status') as uint64) === NEUTRAL_STATUS
	frame_dig -1 // validatorAppID: AppID
	bytec 21 //  "status"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('status')
	assert
	intc 0 // 0
	==
	frame_bury 1 // isDelegatable: bool

	// contracts\CaelusAdmin.algo.ts:468
	// assert(isDelegatable, 'only bid delegatable Apps')
	frame_dig 1 // isDelegatable: bool

	// only bid delegatable Apps
	assert

	// *if14_condition
	// contracts\CaelusAdmin.algo.ts:469
	// !this.isPool(this.highestBidder.value)
	bytec 1 //  "highest_bidder"
	app_global_get
	callsub isPool
	!
	bz *if14_end

	// *if14_consequent
	// contracts\CaelusAdmin.algo.ts:470
	// this.highestBidder.value = validatorAppID
	bytec 1 //  "highest_bidder"
	frame_dig -1 // validatorAppID: AppID
	app_global_put

	// contracts\CaelusAdmin.algo.ts:471
	// this.bidEvent.log({
	//         app: validatorAppID,
	//         isHeighest: this.highestBidder.value === validatorAppID,
	//       })
	bytec 23 //  bidEvent(uint64,bool)
	frame_dig -1 // validatorAppID: AppID
	itob
	bytec 8 // 0x00
	intc 0 // 0
	bytec 1 //  "highest_bidder"
	app_global_get
	frame_dig -1 // validatorAppID: AppID
	==
	setbit
	concat
	concat
	log

	// contracts\CaelusAdmin.algo.ts:475
	// return;
	retsub

*if14_end:
	// *if15_condition
	// contracts\CaelusAdmin.algo.ts:477
	// (this.highestBidder.value.globalState('status') as uint64) !== NEUTRAL_STATUS
	bytec 1 //  "highest_bidder"
	app_global_get
	bytec 21 //  "status"
	app_global_get_ex

	// global state value does not exist: this.highestBidder.value.globalState('status')
	assert
	intc 0 // 0
	!=
	bz *if15_end

	// *if15_consequent
	// contracts\CaelusAdmin.algo.ts:478
	// this.highestBidder.value = validatorAppID
	bytec 1 //  "highest_bidder"
	frame_dig -1 // validatorAppID: AppID
	app_global_put

	// contracts\CaelusAdmin.algo.ts:479
	// this.bidEvent.log({
	//         app: validatorAppID,
	//         isHeighest: this.highestBidder.value === validatorAppID,
	//       })
	bytec 23 //  bidEvent(uint64,bool)
	frame_dig -1 // validatorAppID: AppID
	itob
	bytec 8 // 0x00
	intc 0 // 0
	bytec 1 //  "highest_bidder"
	app_global_get
	frame_dig -1 // validatorAppID: AppID
	==
	setbit
	concat
	concat
	log

	// contracts\CaelusAdmin.algo.ts:483
	// return;
	retsub

*if15_end:
	// contracts\CaelusAdmin.algo.ts:485
	// challengerBuffer = validatorAppID.globalState('saturation_buffer') as uint64
	frame_dig -1 // validatorAppID: AppID
	bytec 12 //  "saturation_buffer"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('saturation_buffer')
	assert
	frame_bury 2 // challengerBuffer: uint64

	// contracts\CaelusAdmin.algo.ts:486
	// highestBuffer = this.highestBidder.value.globalState('saturation_buffer') as uint64
	bytec 1 //  "highest_bidder"
	app_global_get
	bytec 12 //  "saturation_buffer"
	app_global_get_ex

	// global state value does not exist: this.highestBidder.value.globalState('saturation_buffer')
	assert
	frame_bury 3 // highestBuffer: uint64

	// *if16_condition
	// contracts\CaelusAdmin.algo.ts:487
	// challengerBuffer > highestBuffer
	frame_dig 2 // challengerBuffer: uint64
	frame_dig 3 // highestBuffer: uint64
	>
	bz *if16_end

	// *if16_consequent
	// contracts\CaelusAdmin.algo.ts:488
	// this.highestBidder.value = validatorAppID
	bytec 1 //  "highest_bidder"
	frame_dig -1 // validatorAppID: AppID
	app_global_put

*if16_end:
	// contracts\CaelusAdmin.algo.ts:491
	// this.bidEvent.log({
	//       app: validatorAppID,
	//       isHeighest: this.highestBidder.value === validatorAppID,
	//     })
	bytec 23 //  bidEvent(uint64,bool)
	frame_dig -1 // validatorAppID: AppID
	itob
	bytec 8 // 0x00
	intc 0 // 0
	bytec 1 //  "highest_bidder"
	app_global_get
	frame_dig -1 // validatorAppID: AppID
	==
	setbit
	concat
	concat
	log
	retsub

// declareRewards(uint64,uint64,pay)void
*abi_route_declareRewards:
	// rewardPay: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (rewardPay) for declareRewards must be a pay transaction
	assert

	// block: uint64
	txna ApplicationArgs 2
	btoi

	// proposer: uint64
	txna ApplicationArgs 1
	btoi

	// execute declareRewards(uint64,uint64,pay)void
	callsub declareRewards
	intc 1 // 1
	return

// declareRewards(proposer: AppID, block: uint64, rewardPay: PayTxn): void
//
// The method is called by the Validator Pool Contract to declare the rewards.
//
// It doesn't utilize stricter checks on call since as long as the rewardPay is sent to the Admin contract we welcome free money to the protocol >:)
// There's no other state getting changed aside from the totalStake
declareRewards:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:504
	// assert(blocks[block].proposer === proposer.address)
	frame_dig -2 // block: uint64
	block BlkProposer
	frame_dig -1 // proposer: AppID
	app_params_get AppAddress
	pop
	==
	assert

	// contracts\CaelusAdmin.algo.ts:505
	// assert(rewardPay.receiver === this.app.address)
	frame_dig -3 // rewardPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts\CaelusAdmin.algo.ts:506
	// amount = rewardPay.amount - wideRatio([this.protocolFee.value, rewardPay.amount], [100])
	frame_dig -3 // rewardPay: PayTxn
	gtxns Amount
	bytec 19 //  "protocol_fee"
	app_global_get
	frame_dig -3 // rewardPay: PayTxn
	gtxns Amount
	mulw
	intc 0 // 0
	intc 10 // 100
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	-
	frame_bury 0 // amount: uint64

	// contracts\CaelusAdmin.algo.ts:507
	// this.totalStake.value += amount
	bytec 7 //  "total_stake"
	app_global_get
	frame_dig 0 // amount: uint64
	+
	bytec 7 //  "total_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:508
	// this.upSupplyCounters(amount, 0)
	intc 0 // 0
	frame_dig 0 // amount: uint64
	callsub upSupplyCounters
	retsub

// delegateStake(uint64)void
*abi_route_delegateStake:
	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute delegateStake(uint64)void
	callsub delegateStake
	intc 1 // 1
	return

// delegateStake(amount: uint64): void
delegateStake:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts\CaelusAdmin.algo.ts:513
	// assert(this.isPool(this.highestBidder.value))
	bytec 1 //  "highest_bidder"
	app_global_get
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:514
	// highestBidderStatus = this.highestBidder.value.globalState('status') as uint64
	bytec 1 //  "highest_bidder"
	app_global_get
	bytec 21 //  "status"
	app_global_get_ex

	// global state value does not exist: this.highestBidder.value.globalState('status')
	assert
	frame_bury 0 // highestBidderStatus: uint64

	// contracts\CaelusAdmin.algo.ts:515
	// assert(highestBidderStatus === NEUTRAL_STATUS)
	frame_dig 0 // highestBidderStatus: uint64
	intc 0 // 0
	==
	assert

	// *if17_condition
	// contracts\CaelusAdmin.algo.ts:516
	// this.txn.sender === (this.highestBidder.value.globalState('operator') as Address)
	txn Sender
	bytec 1 //  "highest_bidder"
	app_global_get
	bytec 20 //  "operator"
	app_global_get_ex

	// global state value does not exist: this.highestBidder.value.globalState('operator')
	assert
	==
	bz *if17_else

	// *if17_consequent
	// contracts\CaelusAdmin.algo.ts:517
	// sendMethodCall<typeof CaelusValidatorPool.prototype.__addStake, void>({
	//         applicationID: this.highestBidder.value,
	//         methodArgs: [
	//           {
	//             receiver: this.highestBidder.value.address,
	//             amount: amount,
	//           },
	//         ],
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:521
	// receiver: this.highestBidder.value.address
	bytec 1 //  "highest_bidder"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:522
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 24 //  method "__addStake(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:518
	// applicationID: this.highestBidder.value
	bytec 1 //  "highest_bidder"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:519
	// methodArgs: [
	//           {
	//             receiver: this.highestBidder.value.address,
	//             amount: amount,
	//           },
	//         ]
	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if17_end

*if17_else:
	// contracts\CaelusAdmin.algo.ts:527
	// maxDelegatableStake = this.highestBidder.value.globalState('max_delegatable_stake') as uint64
	bytec 1 //  "highest_bidder"
	app_global_get
	pushbytes 0x6d61785f64656c6567617461626c655f7374616b65 // "max_delegatable_stake"
	app_global_get_ex

	// global state value does not exist: this.highestBidder.value.globalState('max_delegatable_stake')
	assert
	frame_bury 1 // maxDelegatableStake: uint64

	// contracts\CaelusAdmin.algo.ts:528
	// delegated = this.highestBidder.value.globalState('delegated_stake') as uint64
	bytec 1 //  "highest_bidder"
	app_global_get
	bytec 18 //  "delegated_stake"
	app_global_get_ex

	// global state value does not exist: this.highestBidder.value.globalState('delegated_stake')
	assert
	frame_bury 2 // delegated: uint64

	// contracts\CaelusAdmin.algo.ts:529
	// assert(delegated + amount <= maxDelegatableStake, 'amount exceeds max delegatable')
	frame_dig 2 // delegated: uint64
	frame_dig -1 // amount: uint64
	+
	frame_dig 1 // maxDelegatableStake: uint64
	<=

	// amount exceeds max delegatable
	assert

	// contracts\CaelusAdmin.algo.ts:530
	// sendMethodCall<typeof CaelusValidatorPool.prototype.__addStake, void>({
	//         applicationID: this.highestBidder.value,
	//         methodArgs: [
	//           {
	//             receiver: this.highestBidder.value.address,
	//             amount: amount,
	//           },
	//         ],
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:534
	// receiver: this.highestBidder.value.address
	bytec 1 //  "highest_bidder"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:535
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 24 //  method "__addStake(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:531
	// applicationID: this.highestBidder.value
	bytec 1 //  "highest_bidder"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:532
	// methodArgs: [
	//           {
	//             receiver: this.highestBidder.value.address,
	//             amount: amount,
	//           },
	//         ]
	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if17_end:
	retsub

// snitchToBurn(uint64)void
*abi_route_snitchToBurn:
	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute snitchToBurn(uint64)void
	callsub snitchToBurn
	intc 1 // 1
	return

// snitchToBurn(app: AppID): void
//
// Push new Validator App to the burn queue. If the saturation buffer is higher than the current lowest in the queue, the new App will be snitched.
snitchToBurn:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts\CaelusAdmin.algo.ts:546
	// assert(this.isPool(app))
	frame_dig -1 // app: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:547
	// satSnitch = app.globalState('saturation_buffer') as uint64
	frame_dig -1 // app: AppID
	bytec 12 //  "saturation_buffer"
	app_global_get_ex

	// global state value does not exist: app.globalState('saturation_buffer')
	assert
	frame_bury 0 // satSnitch: uint64

	// contracts\CaelusAdmin.algo.ts:548
	// minPrio = app
	frame_dig -1 // app: AppID
	frame_bury 1 // minPrio: uint64

	// contracts\CaelusAdmin.algo.ts:549
	// minSat = satSnitch
	frame_dig 0 // satSnitch: uint64
	frame_bury 2 // minSat: uint64

	// contracts\CaelusAdmin.algo.ts:551
	// queue = clone(this.burnQueue.value)
	bytec 4 //  "burn_queue"
	app_global_get
	frame_bury 3 // queue: uint64[5]

	// contracts\CaelusAdmin.algo.ts:552
	// for (let i = 0; i < queue.length; i += 1)
	intc 0 // 0
	frame_bury 4 // i: uint64

*for_3:
	// contracts\CaelusAdmin.algo.ts:552
	// i < queue.length
	frame_dig 4 // i: uint64
	intc 4 // 5
	<
	bz *for_3_end

	// *if18_condition
	// contracts\CaelusAdmin.algo.ts:553
	// !this.isPool(queue[i])
	frame_dig 3 // queue: uint64[5]
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	callsub isPool
	!
	bz *if18_end

	// *if18_consequent
	// contracts\CaelusAdmin.algo.ts:554
	// queue[i] = minPrio
	frame_dig 3 // queue: uint64[5]
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	frame_dig 1 // minPrio: uint64
	itob
	replace3
	frame_bury 3 // queue: uint64[5]
	b *for_3_end

*if18_end:
	// *if19_condition
	// contracts\CaelusAdmin.algo.ts:557
	// (queue[i].globalState('saturation_buffer') as uint64) < minSat
	frame_dig 3 // queue: uint64[5]
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	bytec 12 //  "saturation_buffer"
	app_global_get_ex

	// global state value does not exist: queue[i].globalState('saturation_buffer')
	assert
	frame_dig 2 // minSat: uint64
	<
	bz *if19_end

	// *if19_consequent
	// contracts\CaelusAdmin.algo.ts:558
	// temp = minPrio
	frame_dig 1 // minPrio: uint64
	frame_bury 5 // temp: uint64

	// contracts\CaelusAdmin.algo.ts:559
	// minPrio = queue[i]
	frame_dig 3 // queue: uint64[5]
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	frame_bury 1 // minPrio: uint64

	// contracts\CaelusAdmin.algo.ts:560
	// minSat = queue[i].globalState('saturation_buffer') as uint64
	frame_dig 3 // queue: uint64[5]
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	bytec 12 //  "saturation_buffer"
	app_global_get_ex

	// global state value does not exist: queue[i].globalState('saturation_buffer')
	assert
	frame_bury 2 // minSat: uint64

	// contracts\CaelusAdmin.algo.ts:561
	// queue[i] = temp
	frame_dig 3 // queue: uint64[5]
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	frame_dig 5 // temp: uint64
	itob
	replace3
	frame_bury 3 // queue: uint64[5]

*if19_end:

*for_3_continue:
	// contracts\CaelusAdmin.algo.ts:552
	// i += 1
	frame_dig 4 // i: uint64
	intc 1 // 1
	+
	frame_bury 4 // i: uint64
	b *for_3

*for_3_end:
	// contracts\CaelusAdmin.algo.ts:565
	// this.burnQueue.value = queue
	bytec 4 //  "burn_queue"
	frame_dig 3 // queue: uint64[5]
	app_global_put

	// contracts\CaelusAdmin.algo.ts:567
	// this.snitchQueueEvent.log({
	//       queue: this.burnQueue.value,
	//     })
	pushbytes 0xf1806023 // snitchQueueEvent(uint64[5])
	bytec 4 //  "burn_queue"
	app_global_get
	concat
	log
	retsub

// multiSnitchToBurn(uint64[])void
*abi_route_multiSnitchToBurn:
	// apps: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute multiSnitchToBurn(uint64[])void
	callsub multiSnitchToBurn
	intc 1 // 1
	return

// multiSnitchToBurn(apps: AppID[]): void
multiSnitchToBurn:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:573
	// for (let i = 0; i < apps.length; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_4:
	// contracts\CaelusAdmin.algo.ts:573
	// i < apps.length
	frame_dig 0 // i: uint64
	frame_dig -1 // apps: AppID[]
	len
	intc 2 // 8
	/
	<
	bz *for_4_end

	// contracts\CaelusAdmin.algo.ts:574
	// appToSnitch = apps[i]
	frame_dig -1 // apps: AppID[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 0 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	frame_bury 1 // appToSnitch: uint64

	// contracts\CaelusAdmin.algo.ts:575
	// this.snitchToBurn(appToSnitch)
	frame_dig 1 // appToSnitch: uint64
	callsub snitchToBurn

*for_4_continue:
	// contracts\CaelusAdmin.algo.ts:573
	// i += 1
	frame_dig 0 // i: uint64
	intc 1 // 1
	+
	frame_bury 0 // i: uint64
	b *for_4

*for_4_end:
	retsub

// reStakeFromSnitch(uint64,uint64,pay)void
*abi_route_reStakeFromSnitch:
	// restakeTxn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (restakeTxn) for reStakeFromSnitch must be a pay transaction
	assert

	// receiverApp: uint64
	txna ApplicationArgs 2
	btoi

	// snitchedApp: uint64
	txna ApplicationArgs 1
	btoi

	// execute reStakeFromSnitch(uint64,uint64,pay)void
	callsub reStakeFromSnitch
	intc 1 // 1
	return

// reStakeFromSnitch(snitchedApp: AppID, receiverApp: AppID, restakeTxn: PayTxn): void
//
// Follow up operation called by the snitched App to perform restaking of the delegated Algo clawed back
//
// @param {AppID} snitchedApp - The AppID of the validator to snitch
// @param {AppID} receiverApp - The AppID of the receiver of the delegated Algo
// @param {PayTxn} restakeTxn - The PayTxn following the snitch that sends the delegated Algo to be moved back and restaked
reStakeFromSnitch:
	proto 3 0

	// contracts\CaelusAdmin.algo.ts:587
	// assert(
	//       this.isPool(snitchedApp) && this.txn.sender === snitchedApp.address,
	//       'only the snitched app can initiate this method'
	//     )
	frame_dig -1 // snitchedApp: AppID
	callsub isPool
	dup
	bz *skip_and2
	txn Sender
	frame_dig -1 // snitchedApp: AppID
	app_params_get AppAddress
	pop
	==
	&&

*skip_and2:
	// only the snitched app can initiate this method
	assert

	// contracts\CaelusAdmin.algo.ts:591
	// assert(this.isPool(receiverApp) || receiverApp === this.app, 'receiver must be a pool or the admin')
	frame_dig -2 // receiverApp: AppID
	callsub isPool
	dup
	bnz *skip_or0
	frame_dig -2 // receiverApp: AppID
	txna Applications 0
	==
	||

*skip_or0:
	// receiver must be a pool or the admin
	assert

	// contracts\CaelusAdmin.algo.ts:592
	// verifyPayTxn(restakeTxn, {
	//       sender: snitchedApp.address,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Sender
	frame_dig -1 // snitchedApp: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"restakeTxn","field":"sender","expected":"snitchedApp.address"}
	assert

	// verify receiver
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"restakeTxn","field":"receiver","expected":"this.app.address"}
	assert

	// *if20_condition
	// contracts\CaelusAdmin.algo.ts:596
	// receiverApp !== this.app
	frame_dig -2 // receiverApp: AppID
	txna Applications 0
	!=
	bz *if20_end

	// *if20_consequent
	// contracts\CaelusAdmin.algo.ts:597
	// sendMethodCall<typeof CaelusValidatorPool.prototype.__addStake, void>({
	//         applicationID: receiverApp,
	//         methodArgs: [
	//           {
	//             receiver: receiverApp.address,
	//             amount: restakeTxn.amount,
	//           },
	//         ],
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:601
	// receiver: receiverApp.address
	frame_dig -2 // receiverApp: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:602
	// amount: restakeTxn.amount
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Amount
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 24 //  method "__addStake(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:598
	// applicationID: receiverApp
	frame_dig -2 // receiverApp: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:599
	// methodArgs: [
	//           {
	//             receiver: receiverApp.address,
	//             amount: restakeTxn.amount,
	//           },
	//         ]
	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if20_end:
	retsub

// makeFlashLoanRequest(pay,uint64[],uint64[])void
*abi_route_makeFlashLoanRequest:
	// appToInclude: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// amounts: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// payFeeTxn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 2 (payFeeTxn) for makeFlashLoanRequest must be a pay transaction
	assert

	// execute makeFlashLoanRequest(pay,uint64[],uint64[])void
	callsub makeFlashLoanRequest
	intc 1 // 1
	return

// makeFlashLoanRequest(payFeeTxn: PayTxn, amounts: uint64[], appToInclude: AppID[]): void
//
// Algo balances in the Validator Pool Contracts sit idle, but can be efficiently use for flashloans.
// This creates a new route of revenue for the protocol.
// The method checks that each flashloan call is repaid through the subsequent checkBalance method call.
//
// @param {PayTxn} payFeeTxn - FlashLoan fee payment; the fee is flat and grows with demand for the flashloan service
// @param {uint64[]} amounts - The amount of Algo to take from each app, the value has to be correlated to the app in the appToInclude array at the same index
// @param {AppID} appToInclude - The AppID of the Validator Pool Contracts to execute the flashloan request on
makeFlashLoanRequest:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts\CaelusAdmin.algo.ts:619
	// this.getFLcounter()
	callsub getFLcounter
	pop

	// contracts\CaelusAdmin.algo.ts:620
	// this.flashLoanCounter.value += appToInclude.length
	bytec 2 //  "flashloan_counter"
	app_global_get
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	+
	bytec 2 //  "flashloan_counter"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:621
	// keepFee = this.flashLoanCounter.value + FLASH_LOAN_FEE
	bytec 2 //  "flashloan_counter"
	app_global_get
	pushint 10000000
	+
	frame_bury 0 // keepFee: uint64

	// contracts\CaelusAdmin.algo.ts:623
	// verifyPayTxn(payFeeTxn, {
	//       receiver: this.app.address,
	//       amount: { greaterThanEqualTo: keepFee },
	//     })
	// verify receiver
	frame_dig -1 // payFeeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payFeeTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payFeeTxn: PayTxn
	gtxns Amount
	frame_dig 0 // keepFee: uint64
	>=

	// transaction verification failed: {"txn":"payFeeTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=keepFee"}
	assert

	// contracts\CaelusAdmin.algo.ts:628
	// assert(amounts.length === appToInclude.length, 'array length [amount, appToInclude] mismatch')
	frame_dig -2 // amounts: uint64[]
	len
	intc 2 // 8
	/
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	==

	// array length [amount, appToInclude] mismatch
	assert

	// contracts\CaelusAdmin.algo.ts:629
	// for (let i = 0; i < appToInclude.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_5:
	// contracts\CaelusAdmin.algo.ts:629
	// i < appToInclude.length
	frame_dig 1 // i: uint64
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	<
	bz *for_5_end

	// contracts\CaelusAdmin.algo.ts:630
	// sendMethodCall<typeof CaelusValidatorPool.prototype.__flashloan, void>({
	//         applicationID: appToInclude[i],
	//         methodArgs: [amounts[i], this.txn.sender],
	//       })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xedcb18d7 // method "__flashloan(uint64,address)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:631
	// applicationID: appToInclude[i]
	frame_dig -3 // appToInclude: AppID[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:632
	// methodArgs: [amounts[i], this.txn.sender]
	frame_dig -2 // amounts: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:635
	// for (let j = this.txn.groupIndex; j < this.txnGroup.length; j += 1)
	txn GroupIndex
	frame_bury 2 // j: uint64

*for_6:
	// contracts\CaelusAdmin.algo.ts:635
	// j < this.txnGroup.length
	frame_dig 2 // j: uint64
	global GroupSize
	<
	bz *for_6_end

	// contracts\CaelusAdmin.algo.ts:636
	// txn = this.txnGroup[j]
	frame_dig 2 // j: uint64
	frame_bury 3 // txn: txn

	// contracts\CaelusAdmin.algo.ts:637
	// repaid = false
	intc 0 // 0
	frame_bury 4 // repaid: bool

	// *if21_condition
	// contracts\CaelusAdmin.algo.ts:639
	// txn.typeEnum === TransactionType.ApplicationCall &&
	//           txn.applicationID === appToInclude[i] &&
	//           txn.onCompletion === 0 &&
	//           txn.numAppArgs === 1 &&
	//           txn.applicationArgs[0] === method('checkBalance():void')
	frame_dig 3 // txn: txn
	gtxns TypeEnum
	intc 3 //  appl
	==
	dup
	bz *skip_and3
	frame_dig 3 // txn: txn
	gtxns ApplicationID
	frame_dig -3 // appToInclude: AppID[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	==
	&&

*skip_and3:
	dup
	bz *skip_and4
	frame_dig 3 // txn: txn
	gtxns OnCompletion
	intc 0 // 0
	==
	&&

*skip_and4:
	dup
	bz *skip_and5
	frame_dig 3 // txn: txn
	gtxns NumAppArgs
	intc 1 // 1
	==
	&&

*skip_and5:
	dup
	bz *skip_and6
	frame_dig 3 // txn: txn
	gtxns ApplicationArgs 0
	pushbytes 0x3fa88fd0 // method "checkBalance():void"
	==
	&&

*skip_and6:
	bz *if21_end

	// *if21_consequent
	// contracts\CaelusAdmin.algo.ts:645
	// repaid = true
	intc 1 // 1
	frame_bury 4 // repaid: bool

*if21_end:
	// contracts\CaelusAdmin.algo.ts:647
	// assert(repaid, 'flashloan not repaid')
	frame_dig 4 // repaid: bool

	// flashloan not repaid
	assert

*for_6_continue:
	// contracts\CaelusAdmin.algo.ts:635
	// j += 1
	frame_dig 2 // j: uint64
	intc 1 // 1
	+
	frame_bury 2 // j: uint64
	b *for_6

*for_6_end:

*for_5_continue:
	// contracts\CaelusAdmin.algo.ts:629
	// i += 1
	frame_dig 1 // i: uint64
	intc 1 // 1
	+
	frame_bury 1 // i: uint64
	b *for_5

*for_5_end:
	// contracts\CaelusAdmin.algo.ts:650
	// this.flashLoanEvent.log({ apps: appToInclude, amounts: amounts })
	pushbytes 0xaa4e641a // flashLoanEvent(uint64[],uint64[])
	bytec 0 //  initial head
	bytec 0 //  initial tail
	pushbytes 0x0004 // initial head offset
	frame_dig -3 // appToInclude: AppID[]
	dup
	len
	intc 2 // 8
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -2 // amounts: uint64[]
	dup
	len
	intc 2 // 8
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	log
	retsub

// getFLcounter()uint64
*abi_route_getFLcounter:
	// The ABI return prefix
	bytec 22 // 0x151f7c75

	// execute getFLcounter()uint64
	callsub getFLcounter
	itob
	concat
	log
	intc 1 // 1
	return

// getFLcounter(): uint64
getFLcounter:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// *if22_condition
	// contracts\CaelusAdmin.algo.ts:655
	// !this.flashLoanCounter.exists
	txna Applications 0
	bytec 2 //  "flashloan_counter"
	app_global_get_ex
	swap
	pop
	!
	bz *if22_end

	// *if22_consequent
	// contracts\CaelusAdmin.algo.ts:656
	// this.flashLoanCounter.value = 0
	bytec 2 //  "flashloan_counter"
	intc 0 // 0
	app_global_put

*if22_end:
	// *if23_condition
	// contracts\CaelusAdmin.algo.ts:658
	// this.lastFlashloanBlock.value === globals.round
	bytec 25 //  "last_flashloan_block"
	app_global_get
	global Round
	==
	bz *if23_end

	// *if23_consequent
	// contracts\CaelusAdmin.algo.ts:659
	// return this.flashLoanCounter.value;
	bytec 2 //  "flashloan_counter"
	app_global_get
	b *getFLcounter*return

*if23_end:
	// contracts\CaelusAdmin.algo.ts:661
	// reduce = globals.round - this.lastFlashloanBlock.value
	global Round
	bytec 25 //  "last_flashloan_block"
	app_global_get
	-
	frame_bury 0 // reduce: uint64

	// *if24_condition
	// contracts\CaelusAdmin.algo.ts:662
	// reduce > this.flashLoanCounter.value
	frame_dig 0 // reduce: uint64
	bytec 2 //  "flashloan_counter"
	app_global_get
	>
	bz *if24_end

	// *if24_consequent
	// contracts\CaelusAdmin.algo.ts:663
	// this.flashLoanCounter.value = 0
	bytec 2 //  "flashloan_counter"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:664
	// return this.flashLoanCounter.value;
	bytec 2 //  "flashloan_counter"
	app_global_get
	b *getFLcounter*return

*if24_end:
	// contracts\CaelusAdmin.algo.ts:666
	// this.flashLoanCounter.value -= reduce * 2 > this.flashLoanCounter.value ? reduce * 2 : reduce
	bytec 2 //  "flashloan_counter"
	app_global_get
	frame_dig 0 // reduce: uint64
	intc 7 // 2
	*
	bytec 2 //  "flashloan_counter"
	app_global_get
	>
	bz *ternary2_false
	frame_dig 0 // reduce: uint64
	intc 7 // 2
	*
	b *ternary2_end

*ternary2_false:
	frame_dig 0 // reduce: uint64

*ternary2_end:
	-
	bytec 2 //  "flashloan_counter"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:667
	// return this.flashLoanCounter.value;
	bytec 2 //  "flashloan_counter"
	app_global_get

*getFLcounter*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// arc62_get_circulating_supply(uint64)uint64
*abi_route_arc62_get_circulating_supply:
	// The ABI return prefix
	bytec 22 // 0x151f7c75

	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc62_get_circulating_supply(uint64)uint64
	callsub arc62_get_circulating_supply
	itob
	concat
	log
	intc 1 // 1
	return

// arc62_get_circulating_supply(assetId: AssetID): uint64
arc62_get_circulating_supply:
	proto 1 1

	// contracts\CaelusAdmin.algo.ts:672
	// assert(assetId === this.tokenId.value, 'invalid asset id')
	frame_dig -1 // assetId: AssetID
	bytec 5 //  "token_id"
	app_global_get
	==

	// invalid asset id
	assert

	// contracts\CaelusAdmin.algo.ts:673
	// return this.tokenCirculatingSupply.value;
	bytec 3 //  "circulating_supply"
	app_global_get
	retsub

// calculateLSTRatio(): void
//
// SUBROUTINES
calculateLSTRatio:
	proto 0 0

	// *if25_condition
	// contracts\CaelusAdmin.algo.ts:681
	// this.tokenCirculatingSupply.value === 0
	bytec 3 //  "circulating_supply"
	app_global_get
	intc 0 // 0
	==
	bz *if25_end

	// *if25_consequent
	// contracts\CaelusAdmin.algo.ts:682
	// return;
	retsub

*if25_end:
	// contracts\CaelusAdmin.algo.ts:684
	// this.pegRatio.value = wideRatio([this.totalStake.value, SCALE], [this.tokenCirculatingSupply.value])
	bytec 13 //  "peg_ratio"
	bytec 7 //  "total_stake"
	app_global_get
	intc 5 // 1000000
	mulw
	intc 0 // 0
	bytec 3 //  "circulating_supply"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	app_global_put
	retsub

// getMintAmount(amount: uint64): uint64
getMintAmount:
	proto 1 1

	// contracts\CaelusAdmin.algo.ts:688
	// this.calculateLSTRatio()
	callsub calculateLSTRatio

	// contracts\CaelusAdmin.algo.ts:689
	// return wideRatio([amount, SCALE], [this.pegRatio.value]);
	frame_dig -1 // amount: uint64
	intc 5 // 1000000
	mulw
	intc 0 // 0
	bytec 13 //  "peg_ratio"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	retsub

// getBurnAmount(amount: uint64): uint64
getBurnAmount:
	proto 1 1

	// contracts\CaelusAdmin.algo.ts:693
	// this.calculateLSTRatio()
	callsub calculateLSTRatio

	// contracts\CaelusAdmin.algo.ts:694
	// return wideRatio([amount, this.pegRatio.value], [SCALE]);
	frame_dig -1 // amount: uint64
	bytec 13 //  "peg_ratio"
	app_global_get
	mulw
	intc 0 // 0
	intc 5 // 1000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	retsub

// upSupplyCounters(stake: uint64, supply: uint64): void
upSupplyCounters:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:698
	// this.totalStake.value += stake
	bytec 7 //  "total_stake"
	app_global_get
	frame_dig -1 // stake: uint64
	+
	bytec 7 //  "total_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:699
	// this.tokenCirculatingSupply.value += supply
	bytec 3 //  "circulating_supply"
	app_global_get
	frame_dig -2 // supply: uint64
	+
	bytec 3 //  "circulating_supply"
	swap
	app_global_put
	retsub

// downSupplyCounters(stake: uint64, supply: uint64): void
downSupplyCounters:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:703
	// this.totalStake.value -= stake
	bytec 7 //  "total_stake"
	app_global_get
	frame_dig -1 // stake: uint64
	-
	bytec 7 //  "total_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:704
	// this.tokenCirculatingSupply.value -= supply
	bytec 3 //  "circulating_supply"
	app_global_get
	frame_dig -2 // supply: uint64
	-
	bytec 3 //  "circulating_supply"
	swap
	app_global_put
	retsub

// doBurnTxn(target: AppID, args: [uint64, Address]): void
doBurnTxn:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:708
	// sendMethodCall<typeof CaelusValidatorPool.prototype.__burnStake, void>({
	//       applicationID: target,
	//       methodArgs: [args[0], args[1]],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x7de1559d // method "__burnStake(uint64,address)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:709
	// applicationID: target
	frame_dig -1 // target: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:710
	// methodArgs: [args[0], args[1]]
	frame_dig -2 // args: [uint64, Address]
	extract 0 8
	btoi
	itob
	itxn_field ApplicationArgs
	frame_dig -2 // args: [uint64, Address]
	extract 8 32
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// doAxfer(receiver: Address, amount: uint64, asset: AssetID): void
doAxfer:
	proto 3 0

	// contracts\CaelusAdmin.algo.ts:715
	// sendAssetTransfer({
	//       assetReceiver: receiver,
	//       assetAmount: amount,
	//       xferAsset: asset,
	//     })
	itxn_begin
	intc 6 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:716
	// assetReceiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field AssetReceiver

	// contracts\CaelusAdmin.algo.ts:717
	// assetAmount: amount
	frame_dig -2 // amount: uint64
	itxn_field AssetAmount

	// contracts\CaelusAdmin.algo.ts:718
	// xferAsset: asset
	frame_dig -3 // asset: AssetID
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// isPool(app: AppID): boolean
isPool:
	proto 1 1

	// contracts\CaelusAdmin.algo.ts:723
	// return app.creator === this.app.address;
	frame_dig -1 // app: AppID
	app_params_get AppCreator
	pop
	global CurrentApplicationAddress
	==
	retsub

// queueIsEmpty(): boolean
queueIsEmpty:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:727
	// queue = clone(this.burnQueue.value)
	bytec 4 //  "burn_queue"
	app_global_get
	frame_bury 0 // queue: uint64[5]

	// contracts\CaelusAdmin.algo.ts:728
	// for (let i = 0; i < queue.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_7:
	// contracts\CaelusAdmin.algo.ts:728
	// i < queue.length
	frame_dig 1 // i: uint64
	intc 4 // 5
	<
	bz *for_7_end

	// *if26_condition
	// contracts\CaelusAdmin.algo.ts:729
	// queue[i] !== AppID.zeroIndex
	frame_dig 0 // queue: uint64[5]
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	intc 0 // 0
	!=
	bz *if26_end

	// *if26_consequent
	// contracts\CaelusAdmin.algo.ts:730
	// return false;
	intc 0 // 0
	b *queueIsEmpty*return

*if26_end:

*for_7_continue:
	// contracts\CaelusAdmin.algo.ts:728
	// i += 1
	frame_dig 1 // i: uint64
	intc 1 // 1
	+
	frame_bury 1 // i: uint64
	b *for_7

*for_7_end:
	// contracts\CaelusAdmin.algo.ts:733
	// return true;
	intc 1 // 1

*queueIsEmpty*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// queueIsFull(): boolean
queueIsFull:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:737
	// queue = clone(this.burnQueue.value)
	bytec 4 //  "burn_queue"
	app_global_get
	frame_bury 0 // queue: uint64[5]

	// contracts\CaelusAdmin.algo.ts:738
	// for (let i = 0; i < queue.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_8:
	// contracts\CaelusAdmin.algo.ts:738
	// i < queue.length
	frame_dig 1 // i: uint64
	intc 4 // 5
	<
	bz *for_8_end

	// *if27_condition
	// contracts\CaelusAdmin.algo.ts:739
	// queue[i] === AppID.zeroIndex
	frame_dig 0 // queue: uint64[5]
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	intc 0 // 0
	==
	bz *if27_end

	// *if27_consequent
	// contracts\CaelusAdmin.algo.ts:740
	// return false;
	intc 0 // 0
	b *queueIsFull*return

*if27_end:

*for_8_continue:
	// contracts\CaelusAdmin.algo.ts:738
	// i += 1
	frame_dig 1 // i: uint64
	intc 1 // 1
	+
	frame_bury 1 // i: uint64
	b *for_8

*for_8_end:
	// contracts\CaelusAdmin.algo.ts:743
	// return true;
	intc 1 // 1

*queueIsFull*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xbb6d841c // method "MANAGER_createToken()void"
	pushbytes 0x7c3adefa // method "MANAGER_updateBoostTokenID(uint64)void"
	pushbytes 0xc146de56 // method "MANAGER_changeBoostTier(uint64[])void"
	pushbytes 0x00c3a714 // method "getBoostTier(uint64)uint64"
	pushbytes 0x3ce5983a // method "MANAGER_changeManager(address)void"
	pushbytes 0xd0d862f3 // method "MANAGER_changeProtocolFee(uint64)void"
	pushbytes 0x2bd5a596 // method "MANAGER_lockContract()void"
	pushbytes 0x26a99283 // method "MANAGER_updatePoolContractCost(uint64)void"
	pushbytes 0x099e5cfd // method "MANAGER_updatePoolContractProgram(uint64)void"
	pushbytes 0xa4b503c1 // method "MANAGER_writePoolContractProgram(uint64,byte[])void"
	pushbytes 0x5075d8f0 // method "addValidator(pay)void"
	pushbytes 0x675396f4 // method "mintRequest(pay)void"
	pushbytes 0x519abfa0 // method "burnRequest(axfer,address)void"
	pushbytes 0xe5747e07 // method "mintValidatorCommit(uint64,pay)void"
	pushbytes 0x43219ac0 // method "removeValidatorCommit(uint64,uint64)void"
	pushbytes 0xf450abec // method "__burnToDelinquentValidator(axfer,uint64,uint64)void"
	pushbytes 0xd7db2743 // method "__reMintDelinquentCommit(uint64)void"
	pushbytes 0xeddfe598 // method "bid(uint64)void"
	pushbytes 0x8af49639 // method "declareRewards(uint64,uint64,pay)void"
	pushbytes 0xe3aa9a90 // method "delegateStake(uint64)void"
	pushbytes 0x31756a95 // method "snitchToBurn(uint64)void"
	pushbytes 0x66599703 // method "multiSnitchToBurn(uint64[])void"
	pushbytes 0x911c3c46 // method "reStakeFromSnitch(uint64,uint64,pay)void"
	pushbytes 0x8bfa1157 // method "makeFlashLoanRequest(pay,uint64[],uint64[])void"
	pushbytes 0x7c941b35 // method "getFLcounter()uint64"
	pushbytes 0x5cc2c535 // method "arc62_get_circulating_supply(uint64)uint64"
	txna ApplicationArgs 0
	match *abi_route_MANAGER_createToken *abi_route_MANAGER_updateBoostTokenID *abi_route_MANAGER_changeBoostTier *abi_route_getBoostTier *abi_route_MANAGER_changeManager *abi_route_MANAGER_changeProtocolFee *abi_route_MANAGER_lockContract *abi_route_MANAGER_updatePoolContractCost *abi_route_MANAGER_updatePoolContractProgram *abi_route_MANAGER_writePoolContractProgram *abi_route_addValidator *abi_route_mintRequest *abi_route_burnRequest *abi_route_mintValidatorCommit *abi_route_removeValidatorCommit *abi_route___burnToDelinquentValidator *abi_route___reMintDelinquentCommit *abi_route_bid *abi_route_declareRewards *abi_route_delegateStake *abi_route_snitchToBurn *abi_route_multiSnitchToBurn *abi_route_reStakeFromSnitch *abi_route_makeFlashLoanRequest *abi_route_getFLcounter *abi_route_arc62_get_circulating_supply

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	pushbytes 0x46f76533 // method "updateApplication()void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub