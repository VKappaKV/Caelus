#pragma version 11
intcblock 0 1 8 6 10 4 2 100000 1000 21700 3 32
bytecblock 0x 0x69646c655f7374616b65 0x746f6b656e5f63697263756c6174696e675f737570706c79 0x746f74616c5f7374616b65 0x6275726e5f7175657565 0x6275726e5f746172676574 0x746f6b656e5f6964 0x666c6173686c6f616e5f636f756e746572 0x00 0x686967686573745f626964646572 0x6d616e61676572 0x76616c696461746f725f617070726f76616c5f70726f6772616d 0x76616c696461746f725f706f6f6c5f76657273696f6e 0x6c6173745f657868617573745f626c6f636b 0x73617475726174696f6e5f627566666572 0x64656c6567617465645f7374616b65 0x7065675f726174696f 0x151f7c75 0x76616c696461746f725f706f6f6c5f636f7374 0x6f70657261746f725f636f6d6d6974 0x69735f64656c696e7175656e74 0xb4bfca50 0xdcae771b 0x6c6173745f666c6173686c6f616e5f626c6f636b 0xdfa20764 0x0a8101

// This TEAL was generated by TEALScript v0.105.5
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts\CaelusAdmin.algo.ts:76
	// this.manager.value = this.app.creator
	bytec 10 //  "manager"
	txna Applications 0
	app_params_get AppCreator
	pop
	app_global_put

	// contracts\CaelusAdmin.algo.ts:77
	// this.validatorPoolContractVersion.value = 0
	bytec 12 //  "validator_pool_version"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:78
	// this.validatorPoolContractCost.value = VALIDATOR_POOL_CONTRACT_MBR
	bytec 18 //  "validator_pool_cost"
	pushint 1120500
	app_global_put

	// contracts\CaelusAdmin.algo.ts:80
	// this.totalStake.value = 0
	bytec 3 //  "total_stake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:81
	// this.idleStake.value = 0
	bytec 1 //  "idle_stake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:82
	// this.pegRatio.value = 1 * SCALE
	bytec 16 //  "peg_ratio"
	intc 7 // 100000
	app_global_put

	// contracts\CaelusAdmin.algo.ts:84
	// this.tokenId.value = AssetID.zeroIndex
	bytec 6 //  "token_id"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:85
	// this.tokenCirculatingSupply.value = 0
	bytec 2 //  "token_circulating_supply"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:87
	// this.highestBidder.value = AppID.zeroIndex
	bytec 9 //  "highest_bidder"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:89
	// this.burnQueue.value = []
	bytec 4 //  "burn_queue"
	pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	app_global_put

	// contracts\CaelusAdmin.algo.ts:90
	// this.burnTarget.value = AppID.zeroIndex
	bytec 5 //  "burn_target"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:92
	// this.lastExhaustBlock.value = 0
	bytec 13 //  "last_exhaust_block"
	intc 0 // 0
	app_global_put
	retsub

// MANAGER_config(address,uint64)void
*abi_route_MANAGER_config:
	// validatorPoolContractCost: uint64
	txna ApplicationArgs 2
	btoi

	// manager: address
	txna ApplicationArgs 1
	dup
	len
	intc 11 // 32
	==

	// argument 1 (manager) for MANAGER_config must be a address
	assert

	// execute MANAGER_config(address,uint64)void
	callsub MANAGER_config
	intc 1 // 1
	return

// MANAGER_config(manager: Address, validatorPoolContractCost: uint64): void
MANAGER_config:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:96
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 10 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// *if0_condition
	// contracts\CaelusAdmin.algo.ts:98
	// this.tokenId.value === AssetID.zeroIndex
	bytec 6 //  "token_id"
	app_global_get
	intc 0 // 0
	==
	bz *if0_end

	// *if0_consequent
	// contracts\CaelusAdmin.algo.ts:99
	// this.tokenId.value = sendAssetCreation({
	//         configAssetTotal: 10 ** 16,
	//         configAssetDecimals: 6,
	//         configAssetReserve: this.app.address,
	//         configAssetManager: this.app.address,
	//         configAssetClawback: globals.zeroAddress,
	//         configAssetFreeze: globals.zeroAddress,
	//         configAssetDefaultFrozen: 0,
	//         configAssetName: 'Vestguard ALGO',
	//         configAssetUnitName: 'vALGO',
	//         configAssetURL: 'https://vestige.fi',
	//       })
	bytec 6 //  "token_id"
	itxn_begin
	intc 10 //  acfg
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:100
	// configAssetTotal: 10 ** 16
	intc 4 // 10
	pushint 16
	exp
	itxn_field ConfigAssetTotal

	// contracts\CaelusAdmin.algo.ts:101
	// configAssetDecimals: 6
	intc 3 // 6
	itxn_field ConfigAssetDecimals

	// contracts\CaelusAdmin.algo.ts:102
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// contracts\CaelusAdmin.algo.ts:103
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// contracts\CaelusAdmin.algo.ts:104
	// configAssetClawback: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetClawback

	// contracts\CaelusAdmin.algo.ts:105
	// configAssetFreeze: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetFreeze

	// contracts\CaelusAdmin.algo.ts:106
	// configAssetDefaultFrozen: 0
	intc 0 // 0
	itxn_field ConfigAssetDefaultFrozen

	// contracts\CaelusAdmin.algo.ts:107
	// configAssetName: 'Vestguard ALGO'
	pushbytes 0x56657374677561726420414c474f // "Vestguard ALGO"
	itxn_field ConfigAssetName

	// contracts\CaelusAdmin.algo.ts:108
	// configAssetUnitName: 'vALGO'
	pushbytes 0x76414c474f // "vALGO"
	itxn_field ConfigAssetUnitName

	// contracts\CaelusAdmin.algo.ts:109
	// configAssetURL: 'https://vestige.fi'
	pushbytes 0x68747470733a2f2f766573746967652e6669 // "https://vestige.fi"
	itxn_field ConfigAssetURL

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	app_global_put

*if0_end:
	// contracts\CaelusAdmin.algo.ts:113
	// this.manager.value = manager
	bytec 10 //  "manager"
	frame_dig -1 // manager: Address
	app_global_put

	// contracts\CaelusAdmin.algo.ts:114
	// this.validatorPoolContractCost.value = validatorPoolContractCost
	bytec 18 //  "validator_pool_cost"
	frame_dig -2 // validatorPoolContractCost: uint64
	app_global_put
	retsub

// MANAGER_updatePoolContractProgram(uint64)void
*abi_route_MANAGER_updatePoolContractProgram:
	// programSize: uint64
	txna ApplicationArgs 1
	btoi

	// execute MANAGER_updatePoolContractProgram(uint64)void
	callsub MANAGER_updatePoolContractProgram
	intc 1 // 1
	return

// MANAGER_updatePoolContractProgram(programSize: uint64): void
MANAGER_updatePoolContractProgram:
	proto 1 0

	// contracts\CaelusAdmin.algo.ts:118
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 10 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// *if1_condition
	// contracts\CaelusAdmin.algo.ts:120
	// this.validatorPoolContractApprovalProgram.exists
	bytec 11 //  "validator_approval_program"
	box_len
	swap
	pop
	bz *if1_else

	// *if1_consequent
	// contracts\CaelusAdmin.algo.ts:121
	// this.validatorPoolContractApprovalProgram.resize(programSize)
	bytec 11 //  "validator_approval_program"
	frame_dig -1 // programSize: uint64
	box_resize
	b *if1_end

*if1_else:
	// contracts\CaelusAdmin.algo.ts:123
	// this.validatorPoolContractApprovalProgram.create(programSize)
	bytec 11 //  "validator_approval_program"
	frame_dig -1 // programSize: uint64
	box_create
	pop

*if1_end:
	// contracts\CaelusAdmin.algo.ts:126
	// this.validatorPoolContractVersion.value += 1
	bytec 12 //  "validator_pool_version"
	app_global_get
	intc 1 // 1
	+
	bytec 12 //  "validator_pool_version"
	swap
	app_global_put
	retsub

// MANAGER_writePoolContractProgram(uint64,byte[])void
*abi_route_MANAGER_writePoolContractProgram:
	// data: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// offset: uint64
	txna ApplicationArgs 1
	btoi

	// execute MANAGER_writePoolContractProgram(uint64,byte[])void
	callsub MANAGER_writePoolContractProgram
	intc 1 // 1
	return

// MANAGER_writePoolContractProgram(offset: uint64, data: bytes): void
MANAGER_writePoolContractProgram:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:130
	// assert(this.txn.sender === this.manager.value, 'only the manager can call this method')
	txn Sender
	bytec 10 //  "manager"
	app_global_get
	==

	// only the manager can call this method
	assert

	// contracts\CaelusAdmin.algo.ts:132
	// this.validatorPoolContractApprovalProgram.replace(offset, data)
	bytec 11 //  "validator_approval_program"
	frame_dig -1 // offset: uint64
	frame_dig -2 // data: bytes
	box_replace
	retsub

// addValidator(pay)void
*abi_route_addValidator:
	// mbrPay: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (mbrPay) for addValidator must be a pay transaction
	assert

	// execute addValidator(pay)void
	callsub addValidator
	intc 1 // 1
	return

// addValidator(mbrPay: PayTxn): void
addValidator:
	proto 1 0

	// contracts\CaelusAdmin.algo.ts:136
	// verifyPayTxn(mbrPay, {
	//       receiver: this.app.address,
	//       amount: { greaterThanEqualTo: this.validatorPoolContractCost.value },
	//     })
	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	bytec 18 //  "validator_pool_cost"
	app_global_get
	>=

	// transaction verification failed: {"txn":"mbrPay","field":"amount","condition":"greaterThanEqualTo","expected":">=this.validatorPoolContractCost.value"}
	assert

	// contracts\CaelusAdmin.algo.ts:141
	// sendAppCall({
	//       onCompletion: OnCompletion.NoOp,
	//       approvalProgram: this.validatorPoolContractApprovalProgram.value,
	//       clearStateProgram: CaelusValidatorPool.clearProgram(),
	//       globalNumUint: CaelusValidatorPool.schema.global.numUint,
	//       globalNumByteSlice: CaelusValidatorPool.schema.global.numByteSlice,
	//       extraProgramPages: 3,
	//       applicationArgs: [
	//         method('createApplication(uint64,bytes,uint64,uint64,uint64,uint64)void'),
	//         itob(this.app.id),
	//         this.txn.sender,
	//         itob(this.validatorPoolContractVersion.value),
	//         itob(this.tokenId.value),
	//       ],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:142
	// onCompletion: OnCompletion.NoOp
	intc 0 //  NoOp
	itxn_field OnCompletion

	// contracts\CaelusAdmin.algo.ts:143
	// approvalProgram: this.validatorPoolContractApprovalProgram.value
	bytec 11 //  "validator_approval_program"
	box_get

	// box value does not exist: this.validatorPoolContractApprovalProgram.value
	assert
	itxn_field ApprovalProgram

	// contracts\CaelusAdmin.algo.ts:144
	// clearStateProgram: CaelusValidatorPool.clearProgram()
	pushbytes 0x0b
	itxn_field ClearStateProgram

	// contracts\CaelusAdmin.algo.ts:145
	// globalNumUint: CaelusValidatorPool.schema.global.numUint
	pushint 13
	itxn_field GlobalNumUint

	// contracts\CaelusAdmin.algo.ts:146
	// globalNumByteSlice: CaelusValidatorPool.schema.global.numByteSlice
	intc 5 // 4
	itxn_field GlobalNumByteSlice

	// contracts\CaelusAdmin.algo.ts:147
	// extraProgramPages: 3
	intc 10 // 3
	itxn_field ExtraProgramPages

	// contracts\CaelusAdmin.algo.ts:148
	// applicationArgs: [
	//         method('createApplication(uint64,bytes,uint64,uint64,uint64,uint64)void'),
	//         itob(this.app.id),
	//         this.txn.sender,
	//         itob(this.validatorPoolContractVersion.value),
	//         itob(this.tokenId.value),
	//       ]
	pushbytes 0x7869c387 // method "createApplication(uint64,bytes,uint64,uint64,uint64,uint64)void"
	itxn_field ApplicationArgs
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs
	bytec 12 //  "validator_pool_version"
	app_global_get
	itob
	itxn_field ApplicationArgs
	bytec 6 //  "token_id"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:157
	// this.validatorAddedEvent.log({
	//       operator: this.txn.sender,
	//       version: this.validatorPoolContractVersion.value,
	//     })
	pushbytes 0x57eb6699 // validatorAddedEvent(address,uint64)
	txn Sender
	bytec 12 //  "validator_pool_version"
	app_global_get
	itob
	concat
	concat
	log
	retsub

// delayedMintRequest(pay,pay)void
*abi_route_delayedMintRequest:
	// coverMBR: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (coverMBR) for delayedMintRequest must be a pay transaction
	assert

	// mintTxn: pay
	txn GroupIndex
	intc 6 // 2
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 1 (mintTxn) for delayedMintRequest must be a pay transaction
	assert

	// execute delayedMintRequest(pay,pay)void
	callsub delayedMintRequest
	intc 1 // 1
	return

// delayedMintRequest(mintTxn: PayTxn, coverMBR: PayTxn): void
delayedMintRequest:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:164
	// verifyPayTxn(mintTxn, {
	//       receiver: this.app.address,
	//       amount: { greaterThanEqualTo: globals.minTxnFee },
	//     })
	// verify receiver
	frame_dig -1 // mintTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mintTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	global MinTxnFee
	>=

	// transaction verification failed: {"txn":"mintTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=globals.minTxnFee"}
	assert

	// contracts\CaelusAdmin.algo.ts:168
	// verifyPayTxn(coverMBR, {
	//       receiver: this.app.address,
	//       amount: { greaterThanEqualTo: MINTCLAIM_ORDER_BOX_MBR },
	//     })
	// verify receiver
	frame_dig -2 // coverMBR: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"coverMBR","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -2 // coverMBR: PayTxn
	gtxns Amount
	intc 9 // 21700
	>=

	// transaction verification failed: {"txn":"coverMBR","field":"amount","condition":"greaterThanEqualTo","expected":">=MINTCLAIM_ORDER_BOX_MBR"}
	assert

	// contracts\CaelusAdmin.algo.ts:172
	// assert(!this.mintOrders(mintTxn.sender).exists, 'can only create one mint order at the time')
	frame_dig -1 // mintTxn: PayTxn
	gtxns Sender
	box_len
	swap
	pop
	!

	// can only create one mint order at the time
	assert

	// contracts\CaelusAdmin.algo.ts:174
	// this.idleStake.value += mintTxn.amount
	bytec 1 //  "idle_stake"
	app_global_get
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	+
	bytec 1 //  "idle_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:175
	// this.totalStake.value += mintTxn.amount
	bytec 3 //  "total_stake"
	app_global_get
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	+
	bytec 3 //  "total_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:177
	// minted = this._getMintAmount(mintTxn.amount)
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	callsub _getMintAmount
	frame_bury 0 // minted: uint64

	// contracts\CaelusAdmin.algo.ts:179
	// mintOrder: MintClaim = {
	//       amount: minted,
	//       block: globals.round,
	//     }
	global Round
	itob
	frame_dig 0 // minted: uint64
	itob
	concat
	frame_bury 1 // mintOrder: MintClaim

	// contracts\CaelusAdmin.algo.ts:184
	// this.mintOrders(mintTxn.sender).value = mintOrder
	frame_dig -1 // mintTxn: PayTxn
	gtxns Sender
	frame_dig 1 // mintOrder: MintClaim
	box_put

	// contracts\CaelusAdmin.algo.ts:186
	// this.mintEvent.log({
	//       instant: false,
	//       amount: mintTxn.amount,
	//       output: minted,
	//     })
	bytec 21 //  mintEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	dup
	setbit
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	itob
	concat
	frame_dig 0 // minted: uint64
	itob
	concat
	concat
	log
	retsub

// claimMint()void
*abi_route_claimMint:
	// execute claimMint()void
	callsub claimMint
	intc 1 // 1
	return

// claimMint(): void
claimMint:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:194
	// assert(this.mintOrders(this.txn.sender).exists, 'no mint order to claim')
	txn Sender
	box_len
	swap
	pop

	// no mint order to claim
	assert

	// contracts\CaelusAdmin.algo.ts:195
	// assert(
	//       this.mintOrders(this.txn.sender).value.block < globals.round - CLAIM_DELAY,
	//       'must wait 330 blocks after initial mint to claim the token'
	//     )
	txn Sender
	intc 0 // 0
	intc 2 // 8
	box_extract
	btoi
	global Round
	pushint 330
	-
	<

	// must wait 330 blocks after initial mint to claim the token
	assert

	// contracts\CaelusAdmin.algo.ts:200
	// minted = this.mintOrders(this.txn.sender).value.amount
	txn Sender
	intc 2 //  headOffset
	intc 2 // 8
	box_extract
	btoi
	frame_bury 0 // minted: uint64

	// contracts\CaelusAdmin.algo.ts:202
	// this.mintOrders(this.txn.sender).delete()
	txn Sender
	box_del

	// contracts\CaelusAdmin.algo.ts:204
	// this._doAxfer(this.txn.sender, minted, this.tokenId.value)
	bytec 6 //  "token_id"
	app_global_get
	frame_dig 0 // minted: uint64
	txn Sender
	callsub _doAxfer

	// contracts\CaelusAdmin.algo.ts:206
	// sendPayment({
	//       receiver: this.txn.sender,
	//       amount: MINTCLAIM_ORDER_BOX_MBR,
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:207
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:208
	// amount: MINTCLAIM_ORDER_BOX_MBR
	intc 9 // 21700
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:211
	// this.tokenCirculatingSupply.value += minted
	bytec 2 //  "token_circulating_supply"
	app_global_get
	frame_dig 0 // minted: uint64
	+
	bytec 2 //  "token_circulating_supply"
	swap
	app_global_put
	retsub

// getPremiumAmount(uint64)uint64
*abi_route_getPremiumAmount:
	// The ABI return prefix
	bytec 17 // 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute getPremiumAmount(uint64)uint64
	callsub getPremiumAmount
	itob
	concat
	log
	intc 1 // 1
	return

// getPremiumAmount(amount: uint64): uint64
getPremiumAmount:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

*while_0:

*while_0_continue:
	// contracts\CaelusAdmin.algo.ts:215
	// globals.opcodeBudget <= 4600
	global OpcodeBudget
	pushint 4600
	<=
	bz *while_0_end

	// contracts\CaelusAdmin.algo.ts:216
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 25 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	pushint 5 // DeleteApplication
	itxn_field OnCompletion
	itxn_submit
	b *while_0

*while_0_end:
	// contracts\CaelusAdmin.algo.ts:219
	// accumulatedRewards = 0
	intc 0 // 0
	frame_bury 0 // accumulatedRewards: uint64

	// contracts\CaelusAdmin.algo.ts:221
	// for (let lookupRound = globals.round - 2 - 320; lookupRound < globals.round - 2; lookupRound += 1)
	global Round
	intc 6 // 2
	-
	pushint 320
	-
	frame_bury 1 // lookupRound: uint64

*for_0:
	// contracts\CaelusAdmin.algo.ts:221
	// lookupRound < globals.round - 2
	frame_dig 1 // lookupRound: uint64
	global Round
	intc 6 // 2
	-
	<
	bz *for_0_end

	// contracts\CaelusAdmin.algo.ts:222
	// accumulatedRewards += blocks[lookupRound].proposerPayout
	frame_dig 0 // accumulatedRewards: uint64
	frame_dig 1 // lookupRound: uint64
	block BlkProposerPayout
	+
	frame_bury 0 // accumulatedRewards: uint64

	// contracts\CaelusAdmin.algo.ts:223
	// lookupRound += 1
	frame_dig 1 // lookupRound: uint64
	intc 1 // 1
	+
	frame_bury 1 // lookupRound: uint64

*for_0_continue:
	// contracts\CaelusAdmin.algo.ts:221
	// lookupRound += 1
	frame_dig 1 // lookupRound: uint64
	intc 1 // 1
	+
	frame_bury 1 // lookupRound: uint64
	b *for_0

*for_0_end:
	// contracts\CaelusAdmin.algo.ts:226
	// return wideRatio([amount, accumulatedRewards], [onlineStake()]);
	frame_dig -1 // amount: uint64
	frame_dig 0 // accumulatedRewards: uint64
	mulw
	intc 0 // 0
	online_stake
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// instantMintRequest(pay)void
*abi_route_instantMintRequest:
	// mintTxn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (mintTxn) for instantMintRequest must be a pay transaction
	assert

	// execute instantMintRequest(pay)void
	callsub instantMintRequest
	intc 1 // 1
	return

// instantMintRequest(mintTxn: PayTxn): void
instantMintRequest:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts\CaelusAdmin.algo.ts:230
	// verifyPayTxn(mintTxn, {
	//       receiver: this.app.address,
	//       amount: { greaterThanEqualTo: globals.minTxnFee },
	//     })
	// verify receiver
	frame_dig -1 // mintTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mintTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	global MinTxnFee
	>=

	// transaction verification failed: {"txn":"mintTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=globals.minTxnFee"}
	assert

	// contracts\CaelusAdmin.algo.ts:235
	// premium = this.getPremiumAmount(mintTxn.amount) < 1000 ? 1000 : this.getPremiumAmount(mintTxn.amount)
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	callsub getPremiumAmount
	intc 8 // 1000
	<
	bz *ternary0_false
	intc 8 // 1000
	b *ternary0_end

*ternary0_false:
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	callsub getPremiumAmount

*ternary0_end:
	frame_bury 0 // premium: uint64

	// contracts\CaelusAdmin.algo.ts:236
	// premiumToByte = rawBytes(premium)
	frame_dig 0 // premium: uint64
	itob
	frame_bury 1 // premiumToByte: byte[]

	// contracts\CaelusAdmin.algo.ts:237
	// log('premium is: ' + premiumToByte)
	pushbytes 0x7072656d69756d2069733a20 // "premium is: "
	frame_dig 1 // premiumToByte: byte[]
	concat
	log

	// contracts\CaelusAdmin.algo.ts:238
	// minted = this._getMintAmount(mintTxn.amount - premium)
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	frame_dig 0 // premium: uint64
	-
	callsub _getMintAmount
	frame_bury 2 // minted: uint64

	// contracts\CaelusAdmin.algo.ts:239
	// this._doAxfer(this.txn.sender, minted, this.tokenId.value)
	bytec 6 //  "token_id"
	app_global_get
	frame_dig 2 // minted: uint64
	txn Sender
	callsub _doAxfer

	// contracts\CaelusAdmin.algo.ts:240
	// this.tokenCirculatingSupply.value += minted
	bytec 2 //  "token_circulating_supply"
	app_global_get
	frame_dig 2 // minted: uint64
	+
	bytec 2 //  "token_circulating_supply"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:241
	// this.idleStake.value += mintTxn.amount
	bytec 1 //  "idle_stake"
	app_global_get
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	+
	bytec 1 //  "idle_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:242
	// this.totalStake.value += mintTxn.amount
	bytec 3 //  "total_stake"
	app_global_get
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	+
	bytec 3 //  "total_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:244
	// this.mintEvent.log({
	//       instant: true,
	//       amount: mintTxn.amount,
	//       output: minted,
	//     })
	bytec 21 //  mintEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	intc 1 // 1
	setbit
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	itob
	concat
	frame_dig 2 // minted: uint64
	itob
	concat
	concat
	log
	retsub

// burnRequest(axfer,address)void
*abi_route_burnRequest:
	// burnTo: address
	txna ApplicationArgs 1
	dup
	len
	intc 11 // 32
	==

	// argument 0 (burnTo) for burnRequest must be a address
	assert

	// burnTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 5 //  axfer
	==

	// argument 1 (burnTxn) for burnRequest must be a axfer transaction
	assert

	// execute burnRequest(axfer,address)void
	callsub burnRequest
	intc 1 // 1
	return

// burnRequest(burnTxn: AssetTransferTxn, burnTo: Address): void
burnRequest:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 8

	// contracts\CaelusAdmin.algo.ts:252
	// verifyAssetTransferTxn(burnTxn, {
	//       xferAsset: this.tokenId.value,
	//       assetReceiver: this.app.address,
	//       assetAmount: { greaterThanEqualTo: ALGORAND_BASE_FEE },
	//     })
	// verify xferAsset
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns XferAsset
	bytec 6 //  "token_id"
	app_global_get
	==

	// transaction verification failed: {"txn":"burnTxn","field":"xferAsset","expected":"this.tokenId.value"}
	assert

	// verify assetReceiver
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"burnTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetAmount
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	intc 8 // 1000
	>=

	// transaction verification failed: {"txn":"burnTxn","field":"assetAmount","condition":"greaterThanEqualTo","expected":">=ALGORAND_BASE_FEE"}
	assert

	// contracts\CaelusAdmin.algo.ts:258
	// amountToBurn = this._getBurnAmount(burnTxn.assetAmount)
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	callsub _getBurnAmount
	frame_bury 0 // amountToBurn: uint64

	// contracts\CaelusAdmin.algo.ts:259
	// burning = 0
	intc 0 // 0
	frame_bury 1 // burning: uint64

	// *if2_condition
	// contracts\CaelusAdmin.algo.ts:261
	// this.idleStake.value > 0
	bytec 1 //  "idle_stake"
	app_global_get
	intc 0 // 0
	>
	bz *if2_end

	// *if2_consequent
	// contracts\CaelusAdmin.algo.ts:262
	// amountToBurnFromIdle = this.idleStake.value >= amountToBurn ? amountToBurn : this.idleStake.value
	bytec 1 //  "idle_stake"
	app_global_get
	frame_dig 0 // amountToBurn: uint64
	>=
	bz *ternary1_false
	frame_dig 0 // amountToBurn: uint64
	b *ternary1_end

*ternary1_false:
	bytec 1 //  "idle_stake"
	app_global_get

*ternary1_end:
	frame_bury 2 // amountToBurnFromIdle: uint64

	// contracts\CaelusAdmin.algo.ts:263
	// this.idleStake.value -= amountToBurnFromIdle
	bytec 1 //  "idle_stake"
	app_global_get
	frame_dig 2 // amountToBurnFromIdle: uint64
	-
	bytec 1 //  "idle_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:264
	// this.totalStake.value -= amountToBurnFromIdle
	bytec 3 //  "total_stake"
	app_global_get
	frame_dig 2 // amountToBurnFromIdle: uint64
	-
	bytec 3 //  "total_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:265
	// burning += amountToBurnFromIdle
	frame_dig 1 // burning: uint64
	frame_dig 2 // amountToBurnFromIdle: uint64
	+
	frame_bury 1 // burning: uint64

	// contracts\CaelusAdmin.algo.ts:267
	// sendPayment({
	//         receiver: burnTxn.sender,
	//         amount: amountToBurnFromIdle,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:268
	// receiver: burnTxn.sender
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns Sender
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:269
	// amount: amountToBurnFromIdle
	frame_dig 2 // amountToBurnFromIdle: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if2_end:
	// *if3_condition
	// contracts\CaelusAdmin.algo.ts:275
	// this.burnTarget.value === AppID.zeroIndex &&
	//       !this._queueIsFull() &&
	//       globals.round - this.lastExhaustBlock.value > 1
	bytec 5 //  "burn_target"
	app_global_get
	intc 0 // 0
	==
	dup
	bz *skip_and0
	callsub _queueIsFull
	!
	&&

*skip_and0:
	dup
	bz *skip_and1
	global Round
	bytec 13 //  "last_exhaust_block"
	app_global_get
	-
	intc 1 // 1
	>
	&&

*skip_and1:
	bz *if3_end

	// *if3_consequent
	// contracts\CaelusAdmin.algo.ts:279
	// assert(
	//         globals.round - this.lastExhaustBlock.value > BURN_COOLDOWN,
	//         'wait at least 10 blocks since Exhaust Block'
	//       )
	global Round
	bytec 13 //  "last_exhaust_block"
	app_global_get
	-
	intc 4 // 10
	>

	// wait at least 10 blocks since Exhaust Block
	assert

*if3_end:
	// *if4_condition
	// contracts\CaelusAdmin.algo.ts:285
	// this._isPool(this.burnTarget.value)
	bytec 5 //  "burn_target"
	app_global_get
	callsub _isPool
	bz *if4_end

	// *if4_consequent
	// contracts\CaelusAdmin.algo.ts:286
	// delegatedToTarget = this.burnTarget.value.globalState('delegated_stake') as uint64
	bytec 5 //  "burn_target"
	app_global_get
	bytec 15 //  "delegated_stake"
	app_global_get_ex

	// global state value does not exist: this.burnTarget.value.globalState('delegated_stake')
	assert
	frame_bury 3 // delegatedToTarget: uint64

	// *if5_condition
	// contracts\CaelusAdmin.algo.ts:287
	// delegatedToTarget >= amountToBurn
	frame_dig 3 // delegatedToTarget: uint64
	frame_dig 0 // amountToBurn: uint64
	>=
	bz *if5_end

	// *if5_consequent
	// contracts\CaelusAdmin.algo.ts:288
	// this._doBurnTxn(this.burnTarget.value, [amountToBurn, burnTo])
	frame_dig 0 // amountToBurn: uint64
	itob
	frame_dig -2 // burnTo: Address
	concat
	bytec 5 //  "burn_target"
	app_global_get
	callsub _doBurnTxn

	// contracts\CaelusAdmin.algo.ts:289
	// value = this.burnQueue.value[0]
	bytec 4 //  "burn_queue"
	app_global_get
	extract 0 8
	btoi
	frame_bury 4 // value: uint64

	// contracts\CaelusAdmin.algo.ts:290
	// this.burnTarget.value = AppID.zeroIndex
	bytec 5 //  "burn_target"
	intc 0 // 0
	app_global_put

	// *if6_condition
	// contracts\CaelusAdmin.algo.ts:291
	// this._isPool(value)
	frame_dig 4 // value: uint64
	callsub _isPool
	bz *if6_end

	// *if6_consequent
	// contracts\CaelusAdmin.algo.ts:292
	// this.snitchToBurn(value)
	frame_dig 4 // value: uint64
	callsub snitchToBurn

*if6_end:
	// contracts\CaelusAdmin.algo.ts:294
	// return;
	retsub

*if5_end:
	// contracts\CaelusAdmin.algo.ts:296
	// burning = this.burnTarget.value.globalState('delegated_stake') as uint64
	bytec 5 //  "burn_target"
	app_global_get
	bytec 15 //  "delegated_stake"
	app_global_get_ex

	// global state value does not exist: this.burnTarget.value.globalState('delegated_stake')
	assert
	frame_bury 1 // burning: uint64

	// contracts\CaelusAdmin.algo.ts:297
	// this._doBurnTxn(this.burnTarget.value, [delegatedToTarget, burnTo])
	frame_dig 3 // delegatedToTarget: uint64
	itob
	frame_dig -2 // burnTo: Address
	concat
	bytec 5 //  "burn_target"
	app_global_get
	callsub _doBurnTxn

*if4_end:
	// contracts\CaelusAdmin.algo.ts:299
	// for (let i = 0; i < this.burnQueue.value.length; i += 1)
	intc 0 // 0
	frame_bury 5 // i: uint64

*for_1:
	// contracts\CaelusAdmin.algo.ts:299
	// i < this.burnQueue.value.length
	frame_dig 5 // i: uint64
	bytec 4 //  "burn_queue"
	app_global_get
	intc 4 // 10
	<
	bz *for_1_end

	// contracts\CaelusAdmin.algo.ts:300
	// currentTargetInQueue = this.burnQueue.value[i]
	bytec 4 //  "burn_queue"
	app_global_get
	frame_dig 5 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	frame_bury 6 // currentTargetInQueue: uint64

	// *if7_condition
	// contracts\CaelusAdmin.algo.ts:301
	// this._isPool(currentTargetInQueue)
	frame_dig 6 // currentTargetInQueue: uint64
	callsub _isPool
	bz *if7_end

	// *if7_consequent
	// contracts\CaelusAdmin.algo.ts:302
	// delegatedToTarget = currentTargetInQueue.globalState('delegated_stake') as uint64
	frame_dig 6 // currentTargetInQueue: uint64
	bytec 15 //  "delegated_stake"
	app_global_get_ex

	// global state value does not exist: currentTargetInQueue.globalState('delegated_stake')
	assert
	frame_bury 7 // delegatedToTarget: uint64

	// *if8_condition
	// contracts\CaelusAdmin.algo.ts:303
	// delegatedToTarget < amountToBurn - burning
	frame_dig 7 // delegatedToTarget: uint64
	frame_dig 0 // amountToBurn: uint64
	frame_dig 1 // burning: uint64
	-
	<
	bz *if8_else

	// *if8_consequent
	// contracts\CaelusAdmin.algo.ts:304
	// this._doBurnTxn(currentTargetInQueue, [delegatedToTarget, burnTo])
	frame_dig 7 // delegatedToTarget: uint64
	itob
	frame_dig -2 // burnTo: Address
	concat
	frame_dig 6 // currentTargetInQueue: uint64
	callsub _doBurnTxn

	// contracts\CaelusAdmin.algo.ts:305
	// this.burnQueue.value[i] = AppID.zeroIndex
	bytec 4 //  "burn_queue"
	app_global_get
	frame_dig 5 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	pushbytes 0x0000000000000000
	replace3
	bytec 4 //  "burn_queue"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:306
	// burning += delegatedToTarget
	frame_dig 1 // burning: uint64
	frame_dig 7 // delegatedToTarget: uint64
	+
	frame_bury 1 // burning: uint64
	b *if8_end

*if8_else:
	// contracts\CaelusAdmin.algo.ts:308
	// this._doBurnTxn(currentTargetInQueue, [amountToBurn - burning, burnTo])
	frame_dig 0 // amountToBurn: uint64
	frame_dig 1 // burning: uint64
	-
	itob
	frame_dig -2 // burnTo: Address
	concat
	frame_dig 6 // currentTargetInQueue: uint64
	callsub _doBurnTxn

	// contracts\CaelusAdmin.algo.ts:309
	// burning = amountToBurn
	frame_dig 0 // amountToBurn: uint64
	frame_bury 1 // burning: uint64
	b *for_1_end

*if8_end:

*if7_end:

*for_1_continue:
	// contracts\CaelusAdmin.algo.ts:299
	// i += 1
	frame_dig 5 // i: uint64
	intc 1 // 1
	+
	frame_bury 5 // i: uint64
	b *for_1

*for_1_end:
	// contracts\CaelusAdmin.algo.ts:315
	// amountLeft = this._getBurnAmount(amountToBurn - burning)
	frame_dig 0 // amountToBurn: uint64
	frame_dig 1 // burning: uint64
	-
	callsub _getBurnAmount
	frame_bury 8 // amountLeft: uint64

	// *if9_condition
	// contracts\CaelusAdmin.algo.ts:316
	// amountLeft > 0
	frame_dig 8 // amountLeft: uint64
	intc 0 // 0
	>
	bz *if9_end

	// *if9_consequent
	// contracts\CaelusAdmin.algo.ts:317
	// this._doAxfer(
	//         burnTxn.sender, // the sender needs to be the burnTxn sender, so when operator burns vALGO from the app it returns the amount left to burn
	//         amountLeft,
	//         this.tokenId.value
	//       )
	bytec 6 //  "token_id"
	app_global_get
	frame_dig 8 // amountLeft: uint64
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns Sender
	callsub _doAxfer

	// contracts\CaelusAdmin.algo.ts:322
	// this.tokenCirculatingSupply.value -= burnTxn.assetAmount - amountLeft
	bytec 2 //  "token_circulating_supply"
	app_global_get
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig 8 // amountLeft: uint64
	-
	-
	bytec 2 //  "token_circulating_supply"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:323
	// this.totalStake.value -= burning
	bytec 3 //  "total_stake"
	app_global_get
	frame_dig 1 // burning: uint64
	-
	bytec 3 //  "total_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:324
	// this.lastExhaustBlock.value = globals.round
	bytec 13 //  "last_exhaust_block"
	global Round
	app_global_put

	// contracts\CaelusAdmin.algo.ts:326
	// this.burnEvent.log({
	//         filled: amountLeft > 0,
	//         amount: burnTxn.assetAmount - amountLeft,
	//         output: burning,
	//       })
	bytec 22 //  burnEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	frame_dig 8 // amountLeft: uint64
	intc 0 // 0
	>
	setbit
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig 8 // amountLeft: uint64
	-
	itob
	concat
	frame_dig 1 // burning: uint64
	itob
	concat
	concat
	log

	// contracts\CaelusAdmin.algo.ts:331
	// return;
	retsub

*if9_end:
	// contracts\CaelusAdmin.algo.ts:333
	// this.totalStake.value -= burning
	bytec 3 //  "total_stake"
	app_global_get
	frame_dig 1 // burning: uint64
	-
	bytec 3 //  "total_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:334
	// this.tokenCirculatingSupply.value -= burnTxn.assetAmount
	bytec 2 //  "token_circulating_supply"
	app_global_get
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	-
	bytec 2 //  "token_circulating_supply"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:336
	// this.burnEvent.log({
	//       filled: amountLeft > 0,
	//       amount: burnTxn.assetAmount,
	//       output: burning,
	//     })
	bytec 22 //  burnEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	frame_dig 8 // amountLeft: uint64
	intc 0 // 0
	>
	setbit
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	concat
	frame_dig 1 // burning: uint64
	itob
	concat
	concat
	log
	retsub

// mintValidatorCommit(uint64,pay)void
*abi_route_mintValidatorCommit:
	// stakeCommit: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (stakeCommit) for mintValidatorCommit must be a pay transaction
	assert

	// validatorAppID: uint64
	txna ApplicationArgs 1
	btoi

	// execute mintValidatorCommit(uint64,pay)void
	callsub mintValidatorCommit
	intc 1 // 1
	return

// mintValidatorCommit(validatorAppID: AppID, stakeCommit: PayTxn): void
mintValidatorCommit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:349
	// assert(this._isPool(validatorAppID))
	frame_dig -1 // validatorAppID: AppID
	callsub _isPool
	assert

	// contracts\CaelusAdmin.algo.ts:350
	// operatorAddress = validatorAppID.globalState('operator_address') as Address
	frame_dig -1 // validatorAppID: AppID
	pushbytes 0x6f70657261746f725f61646472657373 // "operator_address"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('operator_address')
	assert
	frame_bury 0 // operatorAddress: address

	// contracts\CaelusAdmin.algo.ts:351
	// verifyPayTxn(stakeCommit, {
	//       sender: operatorAddress,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Sender
	frame_dig 0 // operatorAddress: address
	==

	// transaction verification failed: {"txn":"stakeCommit","field":"sender","expected":"operatorAddress"}
	assert

	// verify receiver
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeCommit","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:356
	// sendMethodCall<typeof CaelusValidatorPool.prototype.addToOperatorCommit>({
	//       applicationID: validatorAppID,
	//       methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: stakeCommit.amount,
	//         },
	//       ],
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:360
	// receiver: validatorAppID.address
	frame_dig -1 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:361
	// amount: stakeCommit.amount
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Amount
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 24 //  method "addToOperatorCommit(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:357
	// applicationID: validatorAppID
	frame_dig -1 // validatorAppID: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:358
	// methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: stakeCommit.amount,
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:366
	// amountToMint = this._getMintAmount(stakeCommit.amount)
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Amount
	callsub _getMintAmount
	frame_bury 1 // amountToMint: uint64

	// contracts\CaelusAdmin.algo.ts:367
	// this._doAxfer(validatorAppID.address, amountToMint, this.tokenId.value)
	bytec 6 //  "token_id"
	app_global_get
	frame_dig 1 // amountToMint: uint64
	frame_dig -1 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	callsub _doAxfer

	// contracts\CaelusAdmin.algo.ts:368
	// this.totalStake.value += stakeCommit.amount
	bytec 3 //  "total_stake"
	app_global_get
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Amount
	+
	bytec 3 //  "total_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:369
	// this.tokenCirculatingSupply.value += amountToMint
	bytec 2 //  "token_circulating_supply"
	app_global_get
	frame_dig 1 // amountToMint: uint64
	+
	bytec 2 //  "token_circulating_supply"
	swap
	app_global_put
	retsub

// burnValidatorCommit(uint64,axfer)void
*abi_route_burnValidatorCommit:
	// burnTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 5 //  axfer
	==

	// argument 0 (burnTxn) for burnValidatorCommit must be a axfer transaction
	assert

	// appToBurnFrom: uint64
	txna ApplicationArgs 1
	btoi

	// execute burnValidatorCommit(uint64,axfer)void
	callsub burnValidatorCommit
	intc 1 // 1
	return

// burnValidatorCommit(appToBurnFrom: AppID, burnTxn: AssetTransferTxn): void
burnValidatorCommit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:377
	// this._isPool(appToBurnFrom)
	frame_dig -1 // appToBurnFrom: AppID
	callsub _isPool

	// contracts\CaelusAdmin.algo.ts:379
	// verifyTxn(this.txn, {
	//       sender: appToBurnFrom.address,
	//     })
	// verify sender
	txn Sender
	frame_dig -1 // appToBurnFrom: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"appToBurnFrom.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:382
	// verifyAssetTransferTxn(burnTxn, {
	//       xferAsset: this.tokenId.value,
	//       assetReceiver: this.app.address,
	//     })
	// verify xferAsset
	frame_dig -2 // burnTxn: AssetTransferTxn
	gtxns XferAsset
	bytec 6 //  "token_id"
	app_global_get
	==

	// transaction verification failed: {"txn":"burnTxn","field":"xferAsset","expected":"this.tokenId.value"}
	assert

	// verify assetReceiver
	frame_dig -2 // burnTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"burnTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:386
	// opCmt = appToBurnFrom.globalState('operator_commit') as uint64
	frame_dig -1 // appToBurnFrom: AppID
	bytec 19 //  "operator_commit"
	app_global_get_ex

	// global state value does not exist: appToBurnFrom.globalState('operator_commit')
	assert
	frame_bury 0 // opCmt: uint64

	// contracts\CaelusAdmin.algo.ts:387
	// assert(!(appToBurnFrom.globalState('is_delinquent') as boolean), 'con only burn when delinquency is solved')
	frame_dig -1 // appToBurnFrom: AppID
	bytec 20 //  "is_delinquent"
	app_global_get_ex

	// global state value does not exist: appToBurnFrom.globalState('is_delinquent')
	assert
	!

	// con only burn when delinquency is solved
	assert

	// contracts\CaelusAdmin.algo.ts:388
	// toBurn = this._getBurnAmount(burnTxn.assetAmount)
	frame_dig -2 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	callsub _getBurnAmount
	frame_bury 1 // toBurn: uint64

	// contracts\CaelusAdmin.algo.ts:389
	// assert(opCmt < toBurn && opCmt - toBurn > globals.payoutsMinBalance, 'cannot burn more than the committed amount')
	frame_dig 0 // opCmt: uint64
	frame_dig 1 // toBurn: uint64
	<
	dup
	bz *skip_and2
	frame_dig 0 // opCmt: uint64
	frame_dig 1 // toBurn: uint64
	-
	global PayoutsMinBalance
	>
	&&

*skip_and2:
	// cannot burn more than the committed amount
	assert

	// contracts\CaelusAdmin.algo.ts:390
	// sendMethodCall<typeof CaelusValidatorPool.prototype.removeFromOperatorCommit, void>({
	//       applicationID: appToBurnFrom,
	//       methodArgs: [toBurn],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xf6786084 // method "removeFromOperatorCommit(uint64)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:391
	// applicationID: appToBurnFrom
	frame_dig -1 // appToBurnFrom: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:392
	// methodArgs: [toBurn]
	frame_dig 1 // toBurn: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:394
	// this.totalStake.value -= toBurn
	bytec 3 //  "total_stake"
	app_global_get
	frame_dig 1 // toBurn: uint64
	-
	bytec 3 //  "total_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:395
	// this.tokenCirculatingSupply.value -= burnTxn.assetAmount
	bytec 2 //  "token_circulating_supply"
	app_global_get
	frame_dig -2 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	-
	bytec 2 //  "token_circulating_supply"
	swap
	app_global_put
	retsub

// burnToDelinquentValidator(axfer,uint64)void
*abi_route_burnToDelinquentValidator:
	// validatorAppID: uint64
	txna ApplicationArgs 1
	btoi

	// burnTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 5 //  axfer
	==

	// argument 1 (burnTxn) for burnToDelinquentValidator must be a axfer transaction
	assert

	// execute burnToDelinquentValidator(axfer,uint64)void
	callsub burnToDelinquentValidator
	intc 1 // 1
	return

// burnToDelinquentValidator(burnTxn: AssetTransferTxn, validatorAppID: AppID): void
burnToDelinquentValidator:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 6

	// contracts\CaelusAdmin.algo.ts:406
	// this._isPool(validatorAppID)
	frame_dig -2 // validatorAppID: AppID
	callsub _isPool

	// contracts\CaelusAdmin.algo.ts:407
	// assert(globals.round - this.lastExhaustBlock.value > BURN_COOLDOWN, "can only burn if we're not exhausted")
	global Round
	bytec 13 //  "last_exhaust_block"
	app_global_get
	-
	intc 4 // 10
	>

	// can only burn if we're not exhausted
	assert

	// contracts\CaelusAdmin.algo.ts:408
	// verifyAssetTransferTxn(burnTxn, {
	//       xferAsset: this.tokenId.value,
	//       assetSender: validatorAppID.address,
	//     })
	// verify xferAsset
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns XferAsset
	bytec 6 //  "token_id"
	app_global_get
	==

	// transaction verification failed: {"txn":"burnTxn","field":"xferAsset","expected":"this.tokenId.value"}
	assert

	// verify assetSender
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetSender
	frame_dig -2 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"burnTxn","field":"assetSender","expected":"validatorAppID.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:412
	// assert(validatorAppID.globalState('is_delinquent') as boolean)
	frame_dig -2 // validatorAppID: AppID
	bytec 20 //  "is_delinquent"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('is_delinquent')
	assert
	assert

	// contracts\CaelusAdmin.algo.ts:413
	// amountToUpdate = 0
	intc 0 // 0
	frame_bury 0 // amountToUpdate: uint64

	// contracts\CaelusAdmin.algo.ts:414
	// toBurn = this._getBurnAmount(burnTxn.assetAmount) - (validatorAppID.globalState('operator_commit') as uint64)
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	callsub _getBurnAmount
	frame_dig -2 // validatorAppID: AppID
	bytec 19 //  "operator_commit"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('operator_commit')
	assert
	-
	frame_bury 1 // toBurn: uint64

	// contracts\CaelusAdmin.algo.ts:415
	// amtBurned = 0
	intc 0 // 0
	frame_bury 2 // amtBurned: uint64

	// *if10_condition
	// contracts\CaelusAdmin.algo.ts:416
	// this._isPool(this.burnTarget.value)
	bytec 5 //  "burn_target"
	app_global_get
	callsub _isPool
	bz *if10_end

	// *if10_consequent
	// contracts\CaelusAdmin.algo.ts:417
	// prioStake = this.burnTarget.value.globalState('delegated_stake') as uint64
	bytec 5 //  "burn_target"
	app_global_get
	bytec 15 //  "delegated_stake"
	app_global_get_ex

	// global state value does not exist: this.burnTarget.value.globalState('delegated_stake')
	assert
	frame_bury 3 // prioStake: uint64

	// contracts\CaelusAdmin.algo.ts:418
	// amtBurned = prioStake >= toBurn ? prioStake : toBurn - prioStake
	frame_dig 3 // prioStake: uint64
	frame_dig 1 // toBurn: uint64
	>=
	bz *ternary2_false
	frame_dig 3 // prioStake: uint64
	b *ternary2_end

*ternary2_false:
	frame_dig 1 // toBurn: uint64
	frame_dig 3 // prioStake: uint64
	-

*ternary2_end:
	frame_bury 2 // amtBurned: uint64

	// contracts\CaelusAdmin.algo.ts:419
	// this._doBurnTxn(this.burnTarget.value, [amtBurned, this.app.address])
	frame_dig 2 // amtBurned: uint64
	itob
	global CurrentApplicationAddress
	concat
	bytec 5 //  "burn_target"
	app_global_get
	callsub _doBurnTxn

	// contracts\CaelusAdmin.algo.ts:420
	// toBurn -= amtBurned
	frame_dig 1 // toBurn: uint64
	frame_dig 2 // amtBurned: uint64
	-
	frame_bury 1 // toBurn: uint64

*if10_end:
	// *if11_condition
	// contracts\CaelusAdmin.algo.ts:422
	// toBurn > 0
	frame_dig 1 // toBurn: uint64
	intc 0 // 0
	>
	bz *if11_end

	// *if11_consequent
	// contracts\CaelusAdmin.algo.ts:423
	// for (let i = 0; i < this.burnQueue.value.length; i += 1)
	intc 0 // 0
	frame_bury 4 // i: uint64

*for_2:
	// contracts\CaelusAdmin.algo.ts:423
	// i < this.burnQueue.value.length
	frame_dig 4 // i: uint64
	bytec 4 //  "burn_queue"
	app_global_get
	intc 4 // 10
	<
	bz *for_2_end

	// contracts\CaelusAdmin.algo.ts:424
	// currentTargetInQueue = this.burnQueue.value[i]
	bytec 4 //  "burn_queue"
	app_global_get
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	frame_bury 5 // currentTargetInQueue: uint64

	// *if12_condition
	// contracts\CaelusAdmin.algo.ts:425
	// this._isPool(currentTargetInQueue)
	frame_dig 5 // currentTargetInQueue: uint64
	callsub _isPool
	bz *if12_end

	// *if12_consequent
	// contracts\CaelusAdmin.algo.ts:426
	// delegatedToTarget = currentTargetInQueue.globalState('delinquent_stake') as uint64
	frame_dig 5 // currentTargetInQueue: uint64
	pushbytes 0x64656c696e7175656e745f7374616b65 // "delinquent_stake"
	app_global_get_ex

	// global state value does not exist: currentTargetInQueue.globalState('delinquent_stake')
	assert
	frame_bury 6 // delegatedToTarget: uint64

	// *if13_condition
	// contracts\CaelusAdmin.algo.ts:427
	// delegatedToTarget >= toBurn
	frame_dig 6 // delegatedToTarget: uint64
	frame_dig 1 // toBurn: uint64
	>=
	bz *if13_else

	// *if13_consequent
	// contracts\CaelusAdmin.algo.ts:428
	// this._doBurnTxn(currentTargetInQueue, [toBurn, this.app.address])
	frame_dig 1 // toBurn: uint64
	itob
	global CurrentApplicationAddress
	concat
	frame_dig 5 // currentTargetInQueue: uint64
	callsub _doBurnTxn

	// contracts\CaelusAdmin.algo.ts:429
	// amtBurned += toBurn
	frame_dig 2 // amtBurned: uint64
	frame_dig 1 // toBurn: uint64
	+
	frame_bury 2 // amtBurned: uint64

	// contracts\CaelusAdmin.algo.ts:430
	// toBurn = 0
	intc 0 // 0
	frame_bury 1 // toBurn: uint64
	b *for_2_end
	b *if13_end

*if13_else:
	// contracts\CaelusAdmin.algo.ts:433
	// this._doBurnTxn(currentTargetInQueue, [delegatedToTarget, this.app.address])
	frame_dig 6 // delegatedToTarget: uint64
	itob
	global CurrentApplicationAddress
	concat
	frame_dig 5 // currentTargetInQueue: uint64
	callsub _doBurnTxn

	// contracts\CaelusAdmin.algo.ts:434
	// amtBurned += delegatedToTarget
	frame_dig 2 // amtBurned: uint64
	frame_dig 6 // delegatedToTarget: uint64
	+
	frame_bury 2 // amtBurned: uint64

	// contracts\CaelusAdmin.algo.ts:435
	// toBurn -= delegatedToTarget
	frame_dig 1 // toBurn: uint64
	frame_dig 6 // delegatedToTarget: uint64
	-
	frame_bury 1 // toBurn: uint64

*if13_end:

*if12_end:

*for_2_continue:
	// contracts\CaelusAdmin.algo.ts:423
	// i += 1
	frame_dig 4 // i: uint64
	intc 1 // 1
	+
	frame_bury 4 // i: uint64
	b *for_2

*for_2_end:

*if11_end:
	// contracts\CaelusAdmin.algo.ts:440
	// amountToUpdate = this._getBurnAmount(toBurn - amtBurned)
	frame_dig 1 // toBurn: uint64
	frame_dig 2 // amtBurned: uint64
	-
	callsub _getBurnAmount
	frame_bury 0 // amountToUpdate: uint64

	// contracts\CaelusAdmin.algo.ts:441
	// this.tokenCirculatingSupply.value -= burnTxn.assetAmount - amountToUpdate
	bytec 2 //  "token_circulating_supply"
	app_global_get
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig 0 // amountToUpdate: uint64
	-
	-
	bytec 2 //  "token_circulating_supply"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:442
	// this.totalStake.value -= amtBurned
	bytec 3 //  "total_stake"
	app_global_get
	frame_dig 2 // amtBurned: uint64
	-
	bytec 3 //  "total_stake"
	swap
	app_global_put

	// *if14_condition
	// contracts\CaelusAdmin.algo.ts:443
	// amountToUpdate > 0
	frame_dig 0 // amountToUpdate: uint64
	intc 0 // 0
	>
	bz *if14_end

	// *if14_consequent
	// contracts\CaelusAdmin.algo.ts:444
	// this._doAxfer(burnTxn.sender, amountToUpdate, this.tokenId.value)
	bytec 6 //  "token_id"
	app_global_get
	frame_dig 0 // amountToUpdate: uint64
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns Sender
	callsub _doAxfer

*if14_end:
	// contracts\CaelusAdmin.algo.ts:446
	// sendMethodCall<typeof CaelusValidatorPool.prototype.addToOperatorCommit>({
	//       applicationID: validatorAppID,
	//       methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: amtBurned,
	//         },
	//       ],
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:450
	// receiver: validatorAppID.address
	frame_dig -2 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:451
	// amount: amtBurned
	frame_dig 2 // amtBurned: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 24 //  method "addToOperatorCommit(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:447
	// applicationID: validatorAppID
	frame_dig -2 // validatorAppID: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:448
	// methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: amtBurned,
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:456
	// this.burnEvent.log({
	//       filled: amountToUpdate > 0,
	//       amount: burnTxn.assetAmount,
	//       output: amtBurned,
	//     })
	bytec 22 //  burnEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	frame_dig 0 // amountToUpdate: uint64
	intc 0 // 0
	>
	setbit
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	concat
	frame_dig 2 // amtBurned: uint64
	itob
	concat
	concat
	log
	retsub

// reMintDelinquentCommit(uint64)void
*abi_route_reMintDelinquentCommit:
	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute reMintDelinquentCommit(uint64)void
	callsub reMintDelinquentCommit
	intc 1 // 1
	return

// reMintDelinquentCommit(app: AppID): void
reMintDelinquentCommit:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:468
	// this._isPool(app)
	frame_dig -1 // app: AppID
	callsub _isPool

	// contracts\CaelusAdmin.algo.ts:469
	// assert(!(app.globalState('is_delinquent') as boolean), 'must solve delinquency first')
	frame_dig -1 // app: AppID
	bytec 20 //  "is_delinquent"
	app_global_get_ex

	// global state value does not exist: app.globalState('is_delinquent')
	assert
	!

	// must solve delinquency first
	assert

	// contracts\CaelusAdmin.algo.ts:470
	// amount = app.globalState('operator_commit') as uint64
	frame_dig -1 // app: AppID
	bytec 19 //  "operator_commit"
	app_global_get_ex

	// global state value does not exist: app.globalState('operator_commit')
	assert
	frame_bury 0 // amount: uint64

	// contracts\CaelusAdmin.algo.ts:471
	// assert(
	//       app.address.assetBalance(this.tokenId.value) === 0,
	//       'If the app already has vALGO it cannot mint with this method'
	//     )
	frame_dig -1 // app: AppID
	app_params_get AppAddress
	pop
	bytec 6 //  "token_id"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 0 // 0
	==

	// If the app already has vALGO it cannot mint with this method
	assert

	// contracts\CaelusAdmin.algo.ts:475
	// amountToMint = this._getMintAmount(amount)
	frame_dig 0 // amount: uint64
	callsub _getMintAmount
	frame_bury 1 // amountToMint: uint64

	// contracts\CaelusAdmin.algo.ts:476
	// this._doAxfer(app.address, amountToMint, this.tokenId.value)
	bytec 6 //  "token_id"
	app_global_get
	frame_dig 1 // amountToMint: uint64
	frame_dig -1 // app: AppID
	app_params_get AppAddress
	pop
	callsub _doAxfer

	// contracts\CaelusAdmin.algo.ts:477
	// this.tokenCirculatingSupply.value += amountToMint
	bytec 2 //  "token_circulating_supply"
	app_global_get
	frame_dig 1 // amountToMint: uint64
	+
	bytec 2 //  "token_circulating_supply"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:479
	// this.mintEvent.log({
	//       instant: true,
	//       amount: amount,
	//       output: amountToMint,
	//     })
	bytec 21 //  mintEvent(bool,uint64,uint64)
	bytec 8 // 0x00
	intc 0 // 0
	intc 1 // 1
	setbit
	frame_dig 0 // amount: uint64
	itob
	concat
	frame_dig 1 // amountToMint: uint64
	itob
	concat
	concat
	log
	retsub

// bid(uint64)void
*abi_route_bid:
	// validatorAppID: uint64
	txna ApplicationArgs 1
	btoi

	// execute bid(uint64)void
	callsub bid
	intc 1 // 1
	return

// bid(validatorAppID: AppID): void
bid:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts\CaelusAdmin.algo.ts:489
	// assert(this._isPool(validatorAppID))
	frame_dig -1 // validatorAppID: AppID
	callsub _isPool
	assert

	// contracts\CaelusAdmin.algo.ts:490
	// isDelegatable = validatorAppID.globalState('can_be_delegated') as boolean
	frame_dig -1 // validatorAppID: AppID
	pushbytes 0x63616e5f62655f64656c656761746564 // "can_be_delegated"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('can_be_delegated')
	assert
	frame_bury 0 // isDelegatable: bool

	// *if15_condition
	// contracts\CaelusAdmin.algo.ts:491
	// this._isPool(this.highestBidder.value)
	bytec 9 //  "highest_bidder"
	app_global_get
	callsub _isPool
	bz *if15_end

	// *if15_consequent
	// contracts\CaelusAdmin.algo.ts:492
	// this.highestBidder.value = validatorAppID
	bytec 9 //  "highest_bidder"
	frame_dig -1 // validatorAppID: AppID
	app_global_put

	// contracts\CaelusAdmin.algo.ts:493
	// return;
	retsub

*if15_end:
	// contracts\CaelusAdmin.algo.ts:495
	// challengerBuffer = validatorAppID.globalState('saturation_buffer') as uint64
	frame_dig -1 // validatorAppID: AppID
	bytec 14 //  "saturation_buffer"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('saturation_buffer')
	assert
	frame_bury 1 // challengerBuffer: uint64

	// contracts\CaelusAdmin.algo.ts:496
	// highestBuffer = this.highestBidder.value.globalState('saturation_buffer') as uint64
	bytec 9 //  "highest_bidder"
	app_global_get
	bytec 14 //  "saturation_buffer"
	app_global_get_ex

	// global state value does not exist: this.highestBidder.value.globalState('saturation_buffer')
	assert
	frame_bury 2 // highestBuffer: uint64

	// contracts\CaelusAdmin.algo.ts:497
	// assert(isDelegatable, 'only bid delegatable Apps')
	frame_dig 0 // isDelegatable: bool

	// only bid delegatable Apps
	assert

	// *if16_condition
	// contracts\CaelusAdmin.algo.ts:498
	// challengerBuffer > highestBuffer
	frame_dig 1 // challengerBuffer: uint64
	frame_dig 2 // highestBuffer: uint64
	>
	bz *if16_end

	// *if16_consequent
	// contracts\CaelusAdmin.algo.ts:499
	// this.highestBidder.value = validatorAppID
	bytec 9 //  "highest_bidder"
	frame_dig -1 // validatorAppID: AppID
	app_global_put

*if16_end:
	// contracts\CaelusAdmin.algo.ts:502
	// this.bidEvent.log({
	//       app: validatorAppID,
	//       isHeighest: this.highestBidder.value === validatorAppID,
	//     })
	pushbytes 0x76e08961 // bidEvent(uint64,bool)
	frame_dig -1 // validatorAppID: AppID
	itob
	bytec 8 // 0x00
	intc 0 // 0
	bytec 9 //  "highest_bidder"
	app_global_get
	frame_dig -1 // validatorAppID: AppID
	==
	setbit
	concat
	concat
	log
	retsub

// delegateStake(uint64,uint64)void
*abi_route_delegateStake:
	// validatorAppID: uint64
	txna ApplicationArgs 2
	btoi

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute delegateStake(uint64,uint64)void
	callsub delegateStake
	intc 1 // 1
	return

// delegateStake(amount: uint64, validatorAppID: AppID): void
delegateStake:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:510
	// assert(this._isPool(validatorAppID))
	frame_dig -2 // validatorAppID: AppID
	callsub _isPool
	assert

	// contracts\CaelusAdmin.algo.ts:511
	// assert(validatorAppID === this.highestBidder.value, 'can only delegate to highest bidder account')
	frame_dig -2 // validatorAppID: AppID
	bytec 9 //  "highest_bidder"
	app_global_get
	==

	// can only delegate to highest bidder account
	assert

	// contracts\CaelusAdmin.algo.ts:512
	// assert(amount <= this.idleStake.value, 'cant withdraw more than the amount of idleAlgo in the contract')
	frame_dig -1 // amount: uint64
	bytec 1 //  "idle_stake"
	app_global_get
	<=

	// cant withdraw more than the amount of idleAlgo in the contract
	assert

	// contracts\CaelusAdmin.algo.ts:513
	// sendMethodCall<typeof CaelusValidatorPool.prototype.addStake, void>({
	//       applicationID: validatorAppID,
	//       methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: amount,
	//         },
	//       ],
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:517
	// receiver: validatorAppID.address
	frame_dig -2 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:518
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xd4502100 // method "addStake(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:514
	// applicationID: validatorAppID
	frame_dig -2 // validatorAppID: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:515
	// methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: amount,
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:522
	// this.idleStake.value -= amount
	bytec 1 //  "idle_stake"
	app_global_get
	frame_dig -1 // amount: uint64
	-
	bytec 1 //  "idle_stake"
	swap
	app_global_put
	retsub

// snitchToBurn(uint64)void
*abi_route_snitchToBurn:
	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute snitchToBurn(uint64)void
	callsub snitchToBurn
	intc 1 // 1
	return

// snitchToBurn(app: AppID): void
snitchToBurn:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts\CaelusAdmin.algo.ts:527
	// assert(this._isPool(app))
	frame_dig -1 // app: AppID
	callsub _isPool
	assert

	// contracts\CaelusAdmin.algo.ts:528
	// satSnitch = app.globalState('saturation_buffer') as uint64
	frame_dig -1 // app: AppID
	bytec 14 //  "saturation_buffer"
	app_global_get_ex

	// global state value does not exist: app.globalState('saturation_buffer')
	assert
	frame_bury 0 // satSnitch: uint64

	// contracts\CaelusAdmin.algo.ts:529
	// minPrio = app
	frame_dig -1 // app: AppID
	frame_bury 1 // minPrio: uint64

	// contracts\CaelusAdmin.algo.ts:530
	// minSat = satSnitch
	frame_dig 0 // satSnitch: uint64
	frame_bury 2 // minSat: uint64

	// *if17_condition
	// contracts\CaelusAdmin.algo.ts:531
	// this._isPool(this.burnTarget.value)
	bytec 5 //  "burn_target"
	app_global_get
	callsub _isPool
	bz *if17_end

	// *if17_consequent
	// contracts\CaelusAdmin.algo.ts:532
	// satPrio = this.burnTarget.value.globalState('saturation_buffer') as uint64
	bytec 5 //  "burn_target"
	app_global_get
	bytec 14 //  "saturation_buffer"
	app_global_get_ex

	// global state value does not exist: this.burnTarget.value.globalState('saturation_buffer')
	assert
	frame_bury 3 // satPrio: uint64

	// *if18_condition
	// contracts\CaelusAdmin.algo.ts:533
	// satSnitch > satPrio
	frame_dig 0 // satSnitch: uint64
	frame_dig 3 // satPrio: uint64
	>
	bz *if18_end

	// *if18_consequent
	// contracts\CaelusAdmin.algo.ts:534
	// minPrio = this.burnTarget.value
	bytec 5 //  "burn_target"
	app_global_get
	frame_bury 1 // minPrio: uint64

	// contracts\CaelusAdmin.algo.ts:535
	// minSat = satPrio
	frame_dig 3 // satPrio: uint64
	frame_bury 2 // minSat: uint64

	// contracts\CaelusAdmin.algo.ts:536
	// this.burnTarget.value = app
	bytec 5 //  "burn_target"
	frame_dig -1 // app: AppID
	app_global_put

*if18_end:

*if17_end:
	// contracts\CaelusAdmin.algo.ts:540
	// for (let i = 0; i < queue.length; i += 1)
	intc 0 // 0
	frame_bury 4 // i: uint64

*for_3:
	// contracts\CaelusAdmin.algo.ts:540
	// i < queue.length
	frame_dig 4 // i: uint64
	intc 4 // 10
	<
	bz *for_3_end

	// *if19_condition
	// contracts\CaelusAdmin.algo.ts:541
	// !this._isPool(queue[i])
	bytec 4 //  "burn_queue"
	app_global_get
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	callsub _isPool
	!
	bz *if19_end

	// *if19_consequent
	// contracts\CaelusAdmin.algo.ts:542
	// queue[i] = minPrio
	bytec 4 //  "burn_queue"
	app_global_get
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	frame_dig 1 // minPrio: uint64
	itob
	replace3
	bytec 4 //  "burn_queue"
	swap
	app_global_put
	b *for_3_end

*if19_end:
	// *if20_condition
	// contracts\CaelusAdmin.algo.ts:545
	// (queue[i].globalState('saturation_buffer') as uint64) < minSat
	bytec 4 //  "burn_queue"
	app_global_get
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	bytec 14 //  "saturation_buffer"
	app_global_get_ex

	// global state value does not exist: queue[i].globalState('saturation_buffer')
	assert
	frame_dig 2 // minSat: uint64
	<
	bz *if20_end

	// *if20_consequent
	// contracts\CaelusAdmin.algo.ts:546
	// temp = minPrio
	frame_dig 1 // minPrio: uint64
	frame_bury 5 // temp: uint64

	// contracts\CaelusAdmin.algo.ts:547
	// minPrio = queue[i]
	bytec 4 //  "burn_queue"
	app_global_get
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	frame_bury 1 // minPrio: uint64

	// contracts\CaelusAdmin.algo.ts:548
	// queue[i] = temp
	bytec 4 //  "burn_queue"
	app_global_get
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	frame_dig 5 // temp: uint64
	itob
	replace3
	bytec 4 //  "burn_queue"
	swap
	app_global_put

*if20_end:

*for_3_continue:
	// contracts\CaelusAdmin.algo.ts:540
	// i += 1
	frame_dig 4 // i: uint64
	intc 1 // 1
	+
	frame_bury 4 // i: uint64
	b *for_3

*for_3_end:
	// contracts\CaelusAdmin.algo.ts:552
	// this.snitchQueueEvent.log({
	//       prio: this.burnTarget.value,
	//       queue: this.burnQueue.value,
	//     })
	pushbytes 0x06777db0 // snitchQueueEvent(uint64,uint64[10])
	bytec 5 //  "burn_target"
	app_global_get
	itob
	bytec 4 //  "burn_queue"
	app_global_get
	concat
	concat
	log
	retsub

// multiSnitchToBurn(uint64[])void
*abi_route_multiSnitchToBurn:
	// apps: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute multiSnitchToBurn(uint64[])void
	callsub multiSnitchToBurn
	intc 1 // 1
	return

// multiSnitchToBurn(apps: AppID[]): void
multiSnitchToBurn:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:562
	// for (let i = 0; i < apps.length; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_4:
	// contracts\CaelusAdmin.algo.ts:562
	// i < apps.length
	frame_dig 0 // i: uint64
	frame_dig -1 // apps: AppID[]
	len
	intc 2 // 8
	/
	<
	bz *for_4_end

	// contracts\CaelusAdmin.algo.ts:563
	// currentTargetInQueue = apps[i]
	frame_dig -1 // apps: AppID[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 0 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	frame_bury 1 // currentTargetInQueue: uint64

	// contracts\CaelusAdmin.algo.ts:564
	// assert(this._isPool(currentTargetInQueue))
	frame_dig 1 // currentTargetInQueue: uint64
	callsub _isPool
	assert

	// contracts\CaelusAdmin.algo.ts:565
	// this.snitchToBurn(currentTargetInQueue)
	frame_dig 1 // currentTargetInQueue: uint64
	callsub snitchToBurn

*for_4_continue:
	// contracts\CaelusAdmin.algo.ts:562
	// i += 1
	frame_dig 0 // i: uint64
	intc 1 // 1
	+
	frame_bury 0 // i: uint64
	b *for_4

*for_4_end:
	retsub

// snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool
*abi_route_snitchCheck:
	// The ABI return prefix
	bytec 17 // 0x151f7c75

	// params: (bool,bool,bool,uint64,bool,uint64)
	txna ApplicationArgs 2
	dup
	len
	pushint 18
	==

	// argument 0 (params) for snitchCheck must be a (bool,bool,bool,uint64,bool,uint64)
	assert

	// appToCheck: uint64
	txna ApplicationArgs 1
	btoi

	// execute snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool
	callsub snitchCheck
	bytec 8 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	concat
	log
	intc 1 // 1
	return

// snitchCheck(appToCheck: AppID, params: SnitchInfo): boolean
snitchCheck:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:570
	// assert(this._isPool(appToCheck))
	frame_dig -1 // appToCheck: AppID
	callsub _isPool
	assert

	// contracts\CaelusAdmin.algo.ts:571
	// assert(this._isPool(params.recipient) || params.recipient.address === this.app.address)
	frame_dig -2 // params: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 1 8
	btoi
	callsub _isPool
	dup
	bnz *skip_or0
	frame_dig -2 // params: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 1 8
	btoi
	app_params_get AppAddress
	pop
	global CurrentApplicationAddress
	==
	||

*skip_or0:
	assert

	// contracts\CaelusAdmin.algo.ts:573
	// result = sendMethodCall<typeof CaelusValidatorPool.prototype.getSnitched, boolean>({
	//       applicationID: appToCheck,
	//       methodArgs: [params],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x5b674f2f // method "getSnitched((bool,bool,bool,uint64,bool,uint64))bool"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:574
	// applicationID: appToCheck
	frame_dig -1 // appToCheck: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:575
	// methodArgs: [params]
	frame_dig -2 // params: SnitchInfo
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	intc 0 // 0
	getbit
	frame_bury 0 // result: bool

	// contracts\CaelusAdmin.algo.ts:578
	// this.snitchValidatorEvent.log({
	//       request: params,
	//       result: result,
	//     })
	pushbytes 0x9ae707a2 // snitchValidatorEvent((bool,bool,bool,uint64,bool,uint64),bool)
	frame_dig -2 // params: SnitchInfo
	bytec 8 // 0x00
	intc 0 // 0
	frame_dig 0 // result: bool
	setbit
	concat
	concat
	log

	// contracts\CaelusAdmin.algo.ts:583
	// return result;
	frame_dig 0 // result: bool

	// set the subroutine return value
	frame_bury 0
	retsub

// reStakeFromSnitch(uint64,uint64,pay)void
*abi_route_reStakeFromSnitch:
	// restakeTxn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (restakeTxn) for reStakeFromSnitch must be a pay transaction
	assert

	// receiverApp: uint64
	txna ApplicationArgs 2
	btoi

	// snitchedApp: uint64
	txna ApplicationArgs 1
	btoi

	// execute reStakeFromSnitch(uint64,uint64,pay)void
	callsub reStakeFromSnitch
	intc 1 // 1
	return

// reStakeFromSnitch(snitchedApp: AppID, receiverApp: AppID, restakeTxn: PayTxn): void
reStakeFromSnitch:
	proto 3 0

	// contracts\CaelusAdmin.algo.ts:588
	// assert(this._isPool(snitchedApp))
	frame_dig -1 // snitchedApp: AppID
	callsub _isPool
	assert

	// contracts\CaelusAdmin.algo.ts:589
	// assert(receiverApp.address === restakeTxn.receiver)
	frame_dig -2 // receiverApp: AppID
	app_params_get AppAddress
	pop
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	==
	assert

	// *if21_condition
	// contracts\CaelusAdmin.algo.ts:590
	// restakeTxn.receiver !== this.app.address
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	!=
	bz *if21_end

	// *if21_consequent
	// contracts\CaelusAdmin.algo.ts:591
	// sendMethodCall<typeof CaelusValidatorPool.prototype.getClawbackedStake, void>({
	//         applicationID: receiverApp,
	//         methodArgs: [
	//           {
	//             receiver: restakeTxn.receiver,
	//             amount: restakeTxn.amount,
	//           },
	//         ],
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:595
	// receiver: restakeTxn.receiver
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:596
	// amount: restakeTxn.amount
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Amount
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xbdf01e8e // method "getClawbackedStake(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:592
	// applicationID: receiverApp
	frame_dig -2 // receiverApp: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:593
	// methodArgs: [
	//           {
	//             receiver: restakeTxn.receiver,
	//             amount: restakeTxn.amount,
	//           },
	//         ]
	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:600
	// return;
	retsub

*if21_end:
	// contracts\CaelusAdmin.algo.ts:602
	// verifyPayTxn(restakeTxn, {
	//       sender: snitchedApp.address,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Sender
	frame_dig -1 // snitchedApp: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"restakeTxn","field":"sender","expected":"snitchedApp.address"}
	assert

	// verify receiver
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"restakeTxn","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:606
	// this.idleStake.value += restakeTxn.amount
	bytec 1 //  "idle_stake"
	app_global_get
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Amount
	+
	bytec 1 //  "idle_stake"
	swap
	app_global_put
	retsub

// declareRewards(pay,uint64)void
*abi_route_declareRewards:
	// ifValidator: uint64
	txna ApplicationArgs 1
	btoi

	// txn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 1 (txn) for declareRewards must be a pay transaction
	assert

	// execute declareRewards(pay,uint64)void
	callsub declareRewards
	intc 1 // 1
	return

// declareRewards(txn: PayTxn, ifValidator: AppID): void
declareRewards:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:610
	// verifyPayTxn(txn, {
	//       receiver: this.app.address,
	//     })
	// verify receiver
	frame_dig -1 // txn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"txn","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:613
	// restakeRewards = txn.amount
	frame_dig -1 // txn: PayTxn
	gtxns Amount
	frame_bury 0 // restakeRewards: uint64

	// contracts\CaelusAdmin.algo.ts:614
	// assert(
	//       (this._isPool(ifValidator) && ifValidator.address === this.txn.sender) || ifValidator === AppID.zeroIndex,
	//       'either the caller is a Caelus Pool App or set the second param to 0 '
	//     )
	frame_dig -2 // ifValidator: AppID
	callsub _isPool
	dup
	bz *skip_and3
	frame_dig -2 // ifValidator: AppID
	app_params_get AppAddress
	pop
	txn Sender
	==
	&&

*skip_and3:
	dup
	bnz *skip_or1
	frame_dig -2 // ifValidator: AppID
	intc 0 // 0
	==
	||

*skip_or1:
	// either the caller is a Caelus Pool App or set the second param to 0
	assert

	// contracts\CaelusAdmin.algo.ts:618
	// protocolCut = wideRatio([PROTOCOL_COMMISSION, txn.amount], [100])
	intc 5 // 4
	frame_dig -1 // txn: PayTxn
	gtxns Amount
	mulw
	intc 0 // 0
	pushint 100
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // protocolCut: uint64

	// *if22_condition
	// contracts\CaelusAdmin.algo.ts:619
	// this._isPool(ifValidator)
	frame_dig -2 // ifValidator: AppID
	callsub _isPool
	bz *if22_end

	// *if22_consequent
	// contracts\CaelusAdmin.algo.ts:620
	// restakeRewards -= protocolCut
	frame_dig 0 // restakeRewards: uint64
	frame_dig 1 // protocolCut: uint64
	-
	frame_bury 0 // restakeRewards: uint64

	// contracts\CaelusAdmin.algo.ts:621
	// sendPayment({
	//         receiver: this.manager.value,
	//         amount: protocolCut,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:622
	// receiver: this.manager.value
	bytec 10 //  "manager"
	app_global_get
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:623
	// amount: protocolCut
	frame_dig 1 // protocolCut: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if22_end:
	// contracts\CaelusAdmin.algo.ts:627
	// this.idleStake.value += restakeRewards
	bytec 1 //  "idle_stake"
	app_global_get
	frame_dig 0 // restakeRewards: uint64
	+
	bytec 1 //  "idle_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:628
	// this.totalStake.value += restakeRewards
	bytec 3 //  "total_stake"
	app_global_get
	frame_dig 0 // restakeRewards: uint64
	+
	bytec 3 //  "total_stake"
	swap
	app_global_put
	retsub

// onOperatorExit(uint64,pay)void
*abi_route_onOperatorExit:
	// closeTxn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (closeTxn) for onOperatorExit must be a pay transaction
	assert

	// appToClose: uint64
	txna ApplicationArgs 1
	btoi

	// execute onOperatorExit(uint64,pay)void
	callsub onOperatorExit
	intc 1 // 1
	return

// onOperatorExit(appToClose: AppID, closeTxn: PayTxn): void
onOperatorExit:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:633
	// verifyTxn(this.txn, {
	//       sender: appToClose.address,
	//       receiver: this.app.address,
	//     })
	// verify sender
	txn Sender
	frame_dig -1 // appToClose: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"appToClose.address"}
	assert

	// verify receiver
	txn Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:637
	// this.idleStake.value += closeTxn.amount
	bytec 1 //  "idle_stake"
	app_global_get
	frame_dig -2 // closeTxn: PayTxn
	gtxns Amount
	+
	bytec 1 //  "idle_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:638
	// sendMethodCall<typeof CaelusValidatorPool.prototype.deleteApplication, void>({
	//       applicationID: appToClose,
	//       methodArgs: [],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x2487c32c // method "deleteApplication()void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:639
	// applicationID: appToClose
	frame_dig -1 // appToClose: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:640
	// methodArgs: []
	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// makeFlashLoanRequest(pay,uint64[],uint64[])void
*abi_route_makeFlashLoanRequest:
	// appToInclude: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// amounts: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// payFeeTxn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 2 (payFeeTxn) for makeFlashLoanRequest must be a pay transaction
	assert

	// execute makeFlashLoanRequest(pay,uint64[],uint64[])void
	callsub makeFlashLoanRequest
	intc 1 // 1
	return

// makeFlashLoanRequest(payFeeTxn: PayTxn, amounts: uint64[], appToInclude: AppID[]): void
makeFlashLoanRequest:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts\CaelusAdmin.algo.ts:646
	// this.getFLcounter()
	callsub getFLcounter
	pop

	// contracts\CaelusAdmin.algo.ts:647
	// this.flashLoanCounter.value += appToInclude.length
	bytec 7 //  "flashloan_counter"
	app_global_get
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	+
	bytec 7 //  "flashloan_counter"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:648
	// keepFee = this.flashLoanCounter.value + FLASH_LOAN_FEE
	bytec 7 //  "flashloan_counter"
	app_global_get
	pushint 10000000
	+
	frame_bury 0 // keepFee: uint64

	// contracts\CaelusAdmin.algo.ts:650
	// verifyPayTxn(payFeeTxn, {
	//       receiver: this.app.address,
	//       amount: keepFee,
	//     })
	// verify receiver
	frame_dig -1 // payFeeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payFeeTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payFeeTxn: PayTxn
	gtxns Amount
	frame_dig 0 // keepFee: uint64
	==

	// transaction verification failed: {"txn":"payFeeTxn","field":"amount","expected":"keepFee"}
	assert

	// contracts\CaelusAdmin.algo.ts:655
	// this.idleStake.value += keepFee
	bytec 1 //  "idle_stake"
	app_global_get
	frame_dig 0 // keepFee: uint64
	+
	bytec 1 //  "idle_stake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:657
	// assert(amounts.length === appToInclude.length, 'array length [amount, appToInclude] mismatch')
	frame_dig -2 // amounts: uint64[]
	len
	intc 2 // 8
	/
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	==

	// array length [amount, appToInclude] mismatch
	assert

	// contracts\CaelusAdmin.algo.ts:659
	// for (let i = 0; i < appToInclude.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_5:
	// contracts\CaelusAdmin.algo.ts:659
	// i < appToInclude.length
	frame_dig 1 // i: uint64
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	<
	bz *for_5_end

	// contracts\CaelusAdmin.algo.ts:660
	// this.pendingGroup.addMethodCall<typeof CaelusValidatorPool.prototype.flashloan, void>({
	//         applicationID: appToInclude[i],
	//         methodArgs: [amounts[i], this.txn.sender],
	//       })
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x4a5356cc // method "flashloan(uint64,address)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:661
	// applicationID: appToInclude[i]
	frame_dig -3 // appToInclude: AppID[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:662
	// methodArgs: [amounts[i], this.txn.sender]
	frame_dig -2 // amounts: uint64[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// contracts\CaelusAdmin.algo.ts:665
	// for (let j = this.txn.groupIndex; j < this.txnGroup.length; j += 1)
	txn GroupIndex
	frame_bury 2 // j: uint64

*for_6:
	// contracts\CaelusAdmin.algo.ts:665
	// j < this.txnGroup.length
	frame_dig 2 // j: uint64
	global GroupSize
	<
	bz *for_6_end

	// contracts\CaelusAdmin.algo.ts:666
	// txn = this.txnGroup[j]
	frame_dig 2 // j: uint64
	frame_bury 3 // txn: txn

	// contracts\CaelusAdmin.algo.ts:667
	// repaid = false
	intc 0 // 0
	frame_bury 4 // repaid: bool

	// *if23_condition
	// contracts\CaelusAdmin.algo.ts:669
	// txn.typeEnum === TransactionType.ApplicationCall &&
	//           txn.applicationID === appToInclude[i] &&
	//           txn.onCompletion === 0 &&
	//           txn.numAppArgs === 1 &&
	//           txn.applicationArgs[0] === method('checkBalance():void')
	frame_dig 3 // txn: txn
	gtxns TypeEnum
	intc 3 //  appl
	==
	dup
	bz *skip_and4
	frame_dig 3 // txn: txn
	gtxns ApplicationID
	frame_dig -3 // appToInclude: AppID[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	==
	&&

*skip_and4:
	dup
	bz *skip_and5
	frame_dig 3 // txn: txn
	gtxns OnCompletion
	intc 0 // 0
	==
	&&

*skip_and5:
	dup
	bz *skip_and6
	frame_dig 3 // txn: txn
	gtxns NumAppArgs
	intc 1 // 1
	==
	&&

*skip_and6:
	dup
	bz *skip_and7
	frame_dig 3 // txn: txn
	gtxns ApplicationArgs 0
	pushbytes 0x3fa88fd0 // method "checkBalance():void"
	==
	&&

*skip_and7:
	bz *if23_end

	// *if23_consequent
	// contracts\CaelusAdmin.algo.ts:675
	// repaid = true
	intc 1 // 1
	frame_bury 4 // repaid: bool

*if23_end:
	// contracts\CaelusAdmin.algo.ts:677
	// assert(repaid)
	frame_dig 4 // repaid: bool
	assert

*for_6_continue:
	// contracts\CaelusAdmin.algo.ts:665
	// j += 1
	frame_dig 2 // j: uint64
	intc 1 // 1
	+
	frame_bury 2 // j: uint64
	b *for_6

*for_6_end:

*for_5_continue:
	// contracts\CaelusAdmin.algo.ts:659
	// i += 1
	frame_dig 1 // i: uint64
	intc 1 // 1
	+
	frame_bury 1 // i: uint64
	b *for_5

*for_5_end:
	// contracts\CaelusAdmin.algo.ts:680
	// this.pendingGroup.submit()
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:681
	// this.flashLoanEvent.log({ apps: appToInclude, amounts: amounts })
	pushbytes 0xaa4e641a // flashLoanEvent(uint64[],uint64[])
	bytec 0 //  initial head
	bytec 0 //  initial tail
	pushbytes 0x0004 // initial head offset
	frame_dig -3 // appToInclude: AppID[]
	dup
	len
	intc 2 // 8
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -2 // amounts: uint64[]
	dup
	len
	intc 2 // 8
	/
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	log
	retsub

// getFLcounter()uint64
*abi_route_getFLcounter:
	// The ABI return prefix
	bytec 17 // 0x151f7c75

	// execute getFLcounter()uint64
	callsub getFLcounter
	itob
	concat
	log
	intc 1 // 1
	return

// getFLcounter(): uint64
getFLcounter:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// *if24_condition
	// contracts\CaelusAdmin.algo.ts:688
	// this.lastFlashloanBlock.value === globals.round
	bytec 23 //  "last_flashloan_block"
	app_global_get
	global Round
	==
	bz *if24_end

	// *if24_consequent
	// contracts\CaelusAdmin.algo.ts:689
	// return this.flashLoanCounter.value;
	bytec 7 //  "flashloan_counter"
	app_global_get
	b *getFLcounter*return

*if24_end:
	// contracts\CaelusAdmin.algo.ts:691
	// reduce = globals.round - this.lastFlashloanBlock.value
	global Round
	bytec 23 //  "last_flashloan_block"
	app_global_get
	-
	frame_bury 0 // reduce: uint64

	// *if25_condition
	// contracts\CaelusAdmin.algo.ts:692
	// reduce > this.flashLoanCounter.value
	frame_dig 0 // reduce: uint64
	bytec 7 //  "flashloan_counter"
	app_global_get
	>
	bz *if25_end

	// *if25_consequent
	// contracts\CaelusAdmin.algo.ts:693
	// this.flashLoanCounter.value = 0
	bytec 7 //  "flashloan_counter"
	intc 0 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:694
	// return this.flashLoanCounter.value;
	bytec 7 //  "flashloan_counter"
	app_global_get
	b *getFLcounter*return

*if25_end:
	// contracts\CaelusAdmin.algo.ts:696
	// this.flashLoanCounter.value -= reduce * 2 > this.flashLoanCounter.value ? reduce * 2 : reduce
	bytec 7 //  "flashloan_counter"
	app_global_get
	frame_dig 0 // reduce: uint64
	intc 6 // 2
	*
	bytec 7 //  "flashloan_counter"
	app_global_get
	>
	bz *ternary4_false
	frame_dig 0 // reduce: uint64
	intc 6 // 2
	*
	b *ternary4_end

*ternary4_false:
	frame_dig 0 // reduce: uint64

*ternary4_end:
	-
	bytec 7 //  "flashloan_counter"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:697
	// return this.flashLoanCounter.value;
	bytec 7 //  "flashloan_counter"
	app_global_get

*getFLcounter*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// arc62_get_circulating_supply(uint64)uint64
*abi_route_arc62_get_circulating_supply:
	// The ABI return prefix
	bytec 17 // 0x151f7c75

	// asset_id: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc62_get_circulating_supply(uint64)uint64
	callsub arc62_get_circulating_supply
	itob
	concat
	log
	intc 1 // 1
	return

// arc62_get_circulating_supply(asset_id: AssetID): uint64
arc62_get_circulating_supply:
	proto 1 1

	// contracts\CaelusAdmin.algo.ts:702
	// assert(asset_id === this.tokenId.value, 'invalid asset id')
	frame_dig -1 // asset_id: AssetID
	bytec 6 //  "token_id"
	app_global_get
	==

	// invalid asset id
	assert

	// contracts\CaelusAdmin.algo.ts:703
	// return this.tokenCirculatingSupply.value;
	bytec 2 //  "token_circulating_supply"
	app_global_get
	retsub

// _calculateLSTRatio(): void
_calculateLSTRatio:
	proto 0 0

	// *if26_condition
	// contracts\CaelusAdmin.algo.ts:707
	// this.tokenCirculatingSupply.value === 0
	bytec 2 //  "token_circulating_supply"
	app_global_get
	intc 0 // 0
	==
	bz *if26_end

	// *if26_consequent
	// contracts\CaelusAdmin.algo.ts:708
	// return;
	retsub

*if26_end:
	// contracts\CaelusAdmin.algo.ts:710
	// this.pegRatio.value = wideRatio([this.totalStake.value, SCALE], [this.tokenCirculatingSupply.value])
	bytec 16 //  "peg_ratio"
	bytec 3 //  "total_stake"
	app_global_get
	intc 7 // 100000
	mulw
	intc 0 // 0
	bytec 2 //  "token_circulating_supply"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	app_global_put
	retsub

// _getMintAmount(amount: uint64): uint64
_getMintAmount:
	proto 1 1

	// contracts\CaelusAdmin.algo.ts:714
	// this._calculateLSTRatio()
	callsub _calculateLSTRatio

	// contracts\CaelusAdmin.algo.ts:715
	// return wideRatio([amount, SCALE], [this.pegRatio.value]);
	frame_dig -1 // amount: uint64
	intc 7 // 100000
	mulw
	intc 0 // 0
	bytec 16 //  "peg_ratio"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	retsub

// _getBurnAmount(amount: uint64): uint64
_getBurnAmount:
	proto 1 1

	// contracts\CaelusAdmin.algo.ts:719
	// this._calculateLSTRatio()
	callsub _calculateLSTRatio

	// contracts\CaelusAdmin.algo.ts:720
	// return wideRatio([amount, this.pegRatio.value], [SCALE]);
	frame_dig -1 // amount: uint64
	bytec 16 //  "peg_ratio"
	app_global_get
	mulw
	intc 0 // 0
	intc 7 // 100000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	retsub

// _doBurnTxn(target: AppID, args: [uint64, Address]): void
_doBurnTxn:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:724
	// sendMethodCall<typeof CaelusValidatorPool.prototype.burnStake, void>({
	//       applicationID: target,
	//       methodArgs: [args[0], args[1]],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x3dc7ae79 // method "burnStake(uint64,address)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:725
	// applicationID: target
	frame_dig -1 // target: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:726
	// methodArgs: [args[0], args[1]]
	frame_dig -2 // args: [uint64, Address]
	extract 0 8
	btoi
	itob
	itxn_field ApplicationArgs
	frame_dig -2 // args: [uint64, Address]
	extract 8 32
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// _doAxfer(receiver: Address, amount: uint64, asset: AssetID): void
_doAxfer:
	proto 3 0

	// contracts\CaelusAdmin.algo.ts:731
	// sendAssetTransfer({
	//       assetReceiver: receiver,
	//       assetAmount: amount,
	//       xferAsset: asset,
	//     })
	itxn_begin
	intc 5 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:732
	// assetReceiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field AssetReceiver

	// contracts\CaelusAdmin.algo.ts:733
	// assetAmount: amount
	frame_dig -2 // amount: uint64
	itxn_field AssetAmount

	// contracts\CaelusAdmin.algo.ts:734
	// xferAsset: asset
	frame_dig -3 // asset: AssetID
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// _isPool(app: AppID): boolean
_isPool:
	proto 1 1

	// contracts\CaelusAdmin.algo.ts:739
	// return app.creator === this.app.address;
	frame_dig -1 // app: AppID
	app_params_get AppCreator
	pop
	global CurrentApplicationAddress
	==
	retsub

// _queueIsFull(): boolean
_queueIsFull:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts\CaelusAdmin.algo.ts:743
	// prioIsSet = this._isPool(this.burnTarget.value)
	bytec 5 //  "burn_target"
	app_global_get
	callsub _isPool
	frame_bury 0 // prioIsSet: bool

	// contracts\CaelusAdmin.algo.ts:744
	// _queueIsFull = true
	intc 1 // 1
	frame_bury 1 // _queueIsFull: bool

	// contracts\CaelusAdmin.algo.ts:745
	// for (let i = 0; i < this.burnQueue.value.length; i += 1)
	intc 0 // 0
	frame_bury 2 // i: uint64

*for_7:
	// contracts\CaelusAdmin.algo.ts:745
	// i < this.burnQueue.value.length
	frame_dig 2 // i: uint64
	bytec 4 //  "burn_queue"
	app_global_get
	intc 4 // 10
	<
	bz *for_7_end

	// contracts\CaelusAdmin.algo.ts:746
	// _queueIsFull = this._isPool(this.burnQueue.value[i])
	bytec 4 //  "burn_queue"
	app_global_get
	frame_dig 2 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	extract3
	btoi
	callsub _isPool
	frame_bury 1 // _queueIsFull: bool

	// *if27_condition
	// contracts\CaelusAdmin.algo.ts:747
	// !_queueIsFull
	frame_dig 1 // _queueIsFull: bool
	!
	bz *if27_end

	// *if27_consequent
	b *for_7_end

*if27_end:

*for_7_continue:
	// contracts\CaelusAdmin.algo.ts:745
	// i += 1
	frame_dig 2 // i: uint64
	intc 1 // 1
	+
	frame_bury 2 // i: uint64
	b *for_7

*for_7_end:
	// contracts\CaelusAdmin.algo.ts:751
	// return prioIsSet && _queueIsFull;
	frame_dig 0 // prioIsSet: bool
	dup
	bz *skip_and8
	frame_dig 1 // _queueIsFull: bool
	&&

*skip_and8:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xe0fa426a // method "MANAGER_config(address,uint64)void"
	pushbytes 0x099e5cfd // method "MANAGER_updatePoolContractProgram(uint64)void"
	pushbytes 0xa4b503c1 // method "MANAGER_writePoolContractProgram(uint64,byte[])void"
	pushbytes 0x5075d8f0 // method "addValidator(pay)void"
	pushbytes 0xdc3f7be2 // method "delayedMintRequest(pay,pay)void"
	pushbytes 0x0179c1d2 // method "claimMint()void"
	pushbytes 0xe7a75417 // method "getPremiumAmount(uint64)uint64"
	pushbytes 0xc731d519 // method "instantMintRequest(pay)void"
	pushbytes 0x519abfa0 // method "burnRequest(axfer,address)void"
	pushbytes 0xe5747e07 // method "mintValidatorCommit(uint64,pay)void"
	pushbytes 0xefdf88d1 // method "burnValidatorCommit(uint64,axfer)void"
	pushbytes 0xb13cc0b1 // method "burnToDelinquentValidator(axfer,uint64)void"
	pushbytes 0x03747933 // method "reMintDelinquentCommit(uint64)void"
	pushbytes 0xeddfe598 // method "bid(uint64)void"
	pushbytes 0xe45c40e0 // method "delegateStake(uint64,uint64)void"
	pushbytes 0x31756a95 // method "snitchToBurn(uint64)void"
	pushbytes 0x66599703 // method "multiSnitchToBurn(uint64[])void"
	pushbytes 0xd2be586a // method "snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool"
	pushbytes 0x911c3c46 // method "reStakeFromSnitch(uint64,uint64,pay)void"
	pushbytes 0xefa32849 // method "declareRewards(pay,uint64)void"
	pushbytes 0x5e073e67 // method "onOperatorExit(uint64,pay)void"
	pushbytes 0x8bfa1157 // method "makeFlashLoanRequest(pay,uint64[],uint64[])void"
	pushbytes 0x7c941b35 // method "getFLcounter()uint64"
	pushbytes 0x5cc2c535 // method "arc62_get_circulating_supply(uint64)uint64"
	txna ApplicationArgs 0
	match *abi_route_MANAGER_config *abi_route_MANAGER_updatePoolContractProgram *abi_route_MANAGER_writePoolContractProgram *abi_route_addValidator *abi_route_delayedMintRequest *abi_route_claimMint *abi_route_getPremiumAmount *abi_route_instantMintRequest *abi_route_burnRequest *abi_route_mintValidatorCommit *abi_route_burnValidatorCommit *abi_route_burnToDelinquentValidator *abi_route_reMintDelinquentCommit *abi_route_bid *abi_route_delegateStake *abi_route_snitchToBurn *abi_route_multiSnitchToBurn *abi_route_snitchCheck *abi_route_reStakeFromSnitch *abi_route_declareRewards *abi_route_onOperatorExit *abi_route_makeFlashLoanRequest *abi_route_getFLcounter *abi_route_arc62_get_circulating_supply

	// this contract does not implement the given ABI method for call NoOp
	err

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub