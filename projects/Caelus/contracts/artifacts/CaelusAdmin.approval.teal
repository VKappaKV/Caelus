#pragma version 11
intcblock 1 0 8 6 4 100000 10000 4096 3 1000 28500 50000 2 10 14 80
bytecblock 0x 0x69646c65416c676f 0x63697263756c6174696e67537570706c79 0x666c6173684c6f616e436f756e746572 0x746f74616c7374616b65 0x6275726e5072696f 0x76414c474f6964 0x6275726e5175657565 0x76616c696461746f72417070726f76616c50726f6772616d 0x73617475726174696f6e427566666572 0x00 0x76616c696461746f72506f6f6c56657273696f6e 0x68696768657374426964646572 0x151f7c75 0x3dc7ae79 0x706567 0x696e6974506f6f6c436f6e7472616374 0x6f70657261746f7241646472657373 0x696e69745f76414c474f 0x6c617374466c6173686c6f616e426c6f636b 0x7665737469676541646472657373 0x64656c6567617465645374616b65 0x64656c6567617465645354616b65 0x6f70657261746f72436f6d6d6974 0x7374566573744944 0x766573744944

// This TEAL was generated by TEALScript v0.105.5
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts\CaelusAdmin.algo.ts:69
	// this.totalAlgoStaked.value = 0
	bytec 4 //  "totalstake"
	intc 1 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:70
	// this.init_vALGO.value = false
	bytec 18 //  "init_vALGO"
	intc 1 // 0
	bytec 10 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	app_global_put

	// contracts\CaelusAdmin.algo.ts:71
	// this.initializedPoolContract.value = false
	bytec 16 //  "initPoolContract"
	intc 1 // 0
	bytec 10 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	app_global_put

	// contracts\CaelusAdmin.algo.ts:72
	// this.validatorPoolContractVersion.value = 0
	bytec 11 //  "validatorPoolVersion"
	intc 1 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:73
	// this.pegRatio.value = 1 * SCALE
	bytec 15 //  "peg"
	intc 6 // 10000
	app_global_put

	// contracts\CaelusAdmin.algo.ts:74
	// this.circulatingSupply.value = 0
	bytec 2 //  "circulatingSupply"
	intc 1 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:75
	// this.idleAlgoToStake.value = 0
	bytec 1 //  "idleAlgo"
	intc 1 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:76
	// this.flashLoanCounter.value = 0
	bytec 3 //  "flashLoanCounter"
	intc 1 // 0
	app_global_put
	retsub

// creatorChangeCreatorRelatedParams(address,uint64,uint64)void
*abi_route_creatorChangeCreatorRelatedParams:
	// stVestID: uint64
	txna ApplicationArgs 3
	btoi

	// vestID: uint64
	txna ApplicationArgs 2
	btoi

	// newVestigeAddress: address
	txna ApplicationArgs 1
	dup
	len
	pushint 32
	==

	// argument 2 (newVestigeAddress) for creatorChangeCreatorRelatedParams must be a address
	assert

	// execute creatorChangeCreatorRelatedParams(address,uint64,uint64)void
	callsub creatorChangeCreatorRelatedParams
	intc 0 // 1
	return

// creatorChangeCreatorRelatedParams(newVestigeAddress: Address, vestID: AssetID, stVestID: AssetID): void
creatorChangeCreatorRelatedParams:
	proto 3 0

	// contracts\CaelusAdmin.algo.ts:80
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\CaelusAdmin.algo.ts:81
	// this.vestigeAddress.value = newVestigeAddress
	bytec 20 //  "vestigeAddress"
	frame_dig -1 // newVestigeAddress: Address
	app_global_put

	// contracts\CaelusAdmin.algo.ts:82
	// this.vestID.value = vestID
	bytec 25 //  "vestID"
	frame_dig -2 // vestID: AssetID
	app_global_put

	// contracts\CaelusAdmin.algo.ts:83
	// this.stVestID.value = stVestID
	bytec 24 //  "stVestID"
	frame_dig -3 // stVestID: AssetID
	app_global_put
	retsub

// initPoolContract(uint64)void
*abi_route_initPoolContract:
	// programSize: uint64
	txna ApplicationArgs 1
	btoi

	// execute initPoolContract(uint64)void
	callsub initPoolContract
	intc 0 // 1
	return

// initPoolContract(programSize: uint64): void
initPoolContract:
	proto 1 0

	// contracts\CaelusAdmin.algo.ts:87
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\CaelusAdmin.algo.ts:88
	// this.validatorPoolContractApprovalProgram.create(programSize)
	bytec 8 //  "validatorApprovalProgram"
	frame_dig -1 // programSize: uint64
	box_create
	pop
	retsub

// loadPoolContractProgram(uint64,byte[])void
*abi_route_loadPoolContractProgram:
	// data: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// offsett: uint64
	txna ApplicationArgs 1
	btoi

	// execute loadPoolContractProgram(uint64,byte[])void
	callsub loadPoolContractProgram
	intc 0 // 1
	return

// loadPoolContractProgram(offsett: uint64, data: bytes): void
loadPoolContractProgram:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:92
	// assert(!this.initializedPoolContract.value)
	bytec 16 //  "initPoolContract"
	app_global_get
	intc 1 // 0
	getbit
	!
	assert

	// contracts\CaelusAdmin.algo.ts:93
	// this.validatorPoolContractApprovalProgram.replace(offsett, data)
	bytec 8 //  "validatorApprovalProgram"
	frame_dig -1 // offsett: uint64
	frame_dig -2 // data: bytes
	box_replace
	retsub

// poolContractIsSet()void
*abi_route_poolContractIsSet:
	// execute poolContractIsSet()void
	callsub poolContractIsSet
	intc 0 // 1
	return

// poolContractIsSet(): void
poolContractIsSet:
	proto 0 0

	// contracts\CaelusAdmin.algo.ts:97
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\CaelusAdmin.algo.ts:98
	// this.initializedPoolContract.value = true
	bytec 16 //  "initPoolContract"
	intc 0 // 1
	bytec 10 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	app_global_put

	// contracts\CaelusAdmin.algo.ts:99
	// this.validatorPoolContractVersion.value += 1
	bytec 11 //  "validatorPoolVersion"
	app_global_get
	intc 0 // 1
	+
	bytec 11 //  "validatorPoolVersion"
	swap
	app_global_put
	retsub

// initLST(string,string,string)void
*abi_route_initLST:
	// url: string
	txna ApplicationArgs 3
	extract 2 0

	// unitName: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute initLST(string,string,string)void
	callsub initLST
	intc 0 // 1
	return

// initLST(name: string, unitName: string, url: string): void
initLST:
	proto 3 0

	// contracts\CaelusAdmin.algo.ts:103
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\CaelusAdmin.algo.ts:104
	// assert(!this.init_vALGO.value)
	bytec 18 //  "init_vALGO"
	app_global_get
	intc 1 // 0
	getbit
	!
	assert

	// contracts\CaelusAdmin.algo.ts:105
	// this.vALGOid.value = sendAssetCreation({
	//       configAssetTotal: 10_000_000,
	//       configAssetDecimals: 6,
	//       configAssetReserve: this.app.address,
	//       configAssetManager: globals.zeroAddress,
	//       configAssetClawback: globals.zeroAddress,
	//       configAssetFreeze: globals.zeroAddress,
	//       configAssetDefaultFrozen: 0,
	//       configAssetName: name,
	//       configAssetUnitName: unitName,
	//       configAssetURL: url,
	//     })
	bytec 6 //  "vALGOid"
	itxn_begin
	intc 8 //  acfg
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:106
	// configAssetTotal: 10_000_000
	pushint 10_000_000
	itxn_field ConfigAssetTotal

	// contracts\CaelusAdmin.algo.ts:107
	// configAssetDecimals: 6
	intc 3 // 6
	itxn_field ConfigAssetDecimals

	// contracts\CaelusAdmin.algo.ts:108
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// contracts\CaelusAdmin.algo.ts:109
	// configAssetManager: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetManager

	// contracts\CaelusAdmin.algo.ts:110
	// configAssetClawback: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetClawback

	// contracts\CaelusAdmin.algo.ts:111
	// configAssetFreeze: globals.zeroAddress
	global ZeroAddress
	itxn_field ConfigAssetFreeze

	// contracts\CaelusAdmin.algo.ts:112
	// configAssetDefaultFrozen: 0
	intc 1 // 0
	itxn_field ConfigAssetDefaultFrozen

	// contracts\CaelusAdmin.algo.ts:113
	// configAssetName: name
	frame_dig -1 // name: string
	itxn_field ConfigAssetName

	// contracts\CaelusAdmin.algo.ts:114
	// configAssetUnitName: unitName
	frame_dig -2 // unitName: string
	itxn_field ConfigAssetUnitName

	// contracts\CaelusAdmin.algo.ts:115
	// configAssetURL: url
	frame_dig -3 // url: string
	itxn_field ConfigAssetURL

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	app_global_put

	// contracts\CaelusAdmin.algo.ts:117
	// this.init_vALGO.value = true
	bytec 18 //  "init_vALGO"
	intc 0 // 1
	bytec 10 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	app_global_put
	retsub

// initBurnQueue()void
*abi_route_initBurnQueue:
	// execute initBurnQueue()void
	callsub initBurnQueue
	intc 0 // 1
	return

// initBurnQueue(): void
initBurnQueue:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:121
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\CaelusAdmin.algo.ts:122
	// fixedQueueLength = 8 * 10
	intc 15 // 80
	frame_bury 0 // fixedQueueLength: uint64

	// contracts\CaelusAdmin.algo.ts:123
	// this.burnQueue.create(fixedQueueLength)
	bytec 7 //  "burnQueue"
	intc 15 //  fixedQueueLength: uint64
	box_create
	pop
	retsub

// addCaelusValidator(pay)void
*abi_route_addCaelusValidator:
	// mbrPay: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (mbrPay) for addCaelusValidator must be a pay transaction
	assert

	// execute addCaelusValidator(pay)void
	callsub addCaelusValidator
	intc 0 // 1
	return

// addCaelusValidator(mbrPay: PayTxn): void
addCaelusValidator:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:127
	// mbr = this.minBalanceForAccount(
	//       1,
	//       3,
	//       1,
	//       0,
	//       0,
	//       CaelusValidatorPool.schema.global.numUint,
	//       CaelusValidatorPool.schema.global.numByteSlice
	//     )
	intc 4 // 4
	intc 14 // 14
	intc 1 // 0
	dup
	intc 0 // 1
	intc 8 // 3
	intc 0 // 1
	callsub minBalanceForAccount
	frame_bury 0 // mbr: uint64

	// contracts\CaelusAdmin.algo.ts:136
	// verifyPayTxn(mbrPay, {
	//       receiver: this.app.address,
	//       amount: mbr,
	//     })
	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	frame_dig 0 // mbr: uint64
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"mbr"}
	assert

	// contracts\CaelusAdmin.algo.ts:141
	// sendAppCall({
	//       onCompletion: OnCompletion.NoOp,
	//       approvalProgram: [
	//         this.validatorPoolContractApprovalProgram.extract(0, 4096),
	//         this.validatorPoolContractApprovalProgram.extract(4096, this.validatorPoolContractApprovalProgram.size - 4096),
	//       ],
	//       clearStateProgram: CaelusValidatorPool.clearProgram(),
	//       globalNumUint: CaelusValidatorPool.schema.global.numUint,
	//       globalNumByteSlice: CaelusValidatorPool.schema.global.numByteSlice,
	//       extraProgramPages: 3,
	//       applicationArgs: [
	//         method('createApplication(uint64,bytes,uint64,uint64,uint64,uint64)void'),
	//         itob(this.app.id),
	//         this.txn.sender,
	//         itob(this.validatorPoolContractVersion.value),
	//         itob(this.vestID.value),
	//         itob(this.stVestID.value),
	//         itob(this.vALGOid.value),
	//       ],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:142
	// onCompletion: OnCompletion.NoOp
	intc 1 //  NoOp
	itxn_field OnCompletion

	// contracts\CaelusAdmin.algo.ts:143
	// approvalProgram: [
	//         this.validatorPoolContractApprovalProgram.extract(0, 4096),
	//         this.validatorPoolContractApprovalProgram.extract(4096, this.validatorPoolContractApprovalProgram.size - 4096),
	//       ]
	bytec 8 //  "validatorApprovalProgram"
	intc 1 // 0
	intc 7 // 4096
	box_extract
	itxn_field ApprovalProgramPages
	bytec 8 //  "validatorApprovalProgram"
	intc 7 // 4096
	bytec 8 //  "validatorApprovalProgram"
	box_len

	// box value does not exist: this.validatorPoolContractApprovalProgram.size
	assert
	intc 7 // 4096
	-
	box_extract
	itxn_field ApprovalProgramPages

	// contracts\CaelusAdmin.algo.ts:147
	// clearStateProgram: CaelusValidatorPool.clearProgram()
	pushbytes 0x0b
	itxn_field ClearStateProgram

	// contracts\CaelusAdmin.algo.ts:148
	// globalNumUint: CaelusValidatorPool.schema.global.numUint
	intc 14 // 14
	itxn_field GlobalNumUint

	// contracts\CaelusAdmin.algo.ts:149
	// globalNumByteSlice: CaelusValidatorPool.schema.global.numByteSlice
	intc 4 // 4
	itxn_field GlobalNumByteSlice

	// contracts\CaelusAdmin.algo.ts:150
	// extraProgramPages: 3
	intc 8 // 3
	itxn_field ExtraProgramPages

	// contracts\CaelusAdmin.algo.ts:151
	// applicationArgs: [
	//         method('createApplication(uint64,bytes,uint64,uint64,uint64,uint64)void'),
	//         itob(this.app.id),
	//         this.txn.sender,
	//         itob(this.validatorPoolContractVersion.value),
	//         itob(this.vestID.value),
	//         itob(this.stVestID.value),
	//         itob(this.vALGOid.value),
	//       ]
	pushbytes 0x7869c387 // method "createApplication(uint64,bytes,uint64,uint64,uint64,uint64)void"
	itxn_field ApplicationArgs
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs
	bytec 11 //  "validatorPoolVersion"
	app_global_get
	itob
	itxn_field ApplicationArgs
	bytec 25 //  "vestID"
	app_global_get
	itob
	itxn_field ApplicationArgs
	bytec 24 //  "stVestID"
	app_global_get
	itob
	itxn_field ApplicationArgs
	bytec 6 //  "vALGOid"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// calculateLSTRatio()void
*abi_route_calculateLSTRatio:
	// execute calculateLSTRatio()void
	callsub calculateLSTRatio
	intc 0 // 1
	return

// calculateLSTRatio(): void
calculateLSTRatio:
	proto 0 0

	// contracts\CaelusAdmin.algo.ts:168
	// this.pegRatio.value = wideRatio([this.totalAlgoStaked.value, SCALE], [this.circulatingSupply.value])
	bytec 15 //  "peg"
	bytec 4 //  "totalstake"
	app_global_get
	intc 6 // 10000
	mulw
	intc 1 // 0
	bytec 2 //  "circulatingSupply"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	app_global_put
	retsub

// getMintAmount(uint64)uint64
*abi_route_getMintAmount:
	// The ABI return prefix
	bytec 13 // 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute getMintAmount(uint64)uint64
	callsub getMintAmount
	itob
	concat
	log
	intc 0 // 1
	return

// getMintAmount(amount: uint64): uint64
getMintAmount:
	proto 1 1

	// contracts\CaelusAdmin.algo.ts:172
	// this.calculateLSTRatio()
	callsub calculateLSTRatio

	// contracts\CaelusAdmin.algo.ts:173
	// return wideRatio([amount, SCALE], [this.pegRatio.value]);
	frame_dig -1 // amount: uint64
	intc 6 // 10000
	mulw
	intc 1 // 0
	bytec 15 //  "peg"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	retsub

// getBurnAmount(uint64)uint64
*abi_route_getBurnAmount:
	// The ABI return prefix
	bytec 13 // 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute getBurnAmount(uint64)uint64
	callsub getBurnAmount
	itob
	concat
	log
	intc 0 // 1
	return

// getBurnAmount(amount: uint64): uint64
getBurnAmount:
	proto 1 1

	// contracts\CaelusAdmin.algo.ts:177
	// this.calculateLSTRatio()
	callsub calculateLSTRatio

	// contracts\CaelusAdmin.algo.ts:178
	// return wideRatio([amount, this.pegRatio.value], [SCALE]);
	frame_dig -1 // amount: uint64
	bytec 15 //  "peg"
	app_global_get
	mulw
	intc 1 // 0
	intc 6 // 10000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	retsub

// mintRequest(pay)void
*abi_route_mintRequest:
	// mintTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (mintTxn) for mintRequest must be a pay transaction
	assert

	// execute mintRequest(pay)void
	callsub mintRequest
	intc 0 // 1
	return

// mintRequest(mintTxn: PayTxn): void
mintRequest:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:183
	// assert(mintTxn.amount >= ALGORAND_BASE_FEE, 'minimum amount to stake is 0.001 Algo')
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	intc 9 // 1000
	>=

	// minimum amount to stake is 0.001 Algo
	assert

	// contracts\CaelusAdmin.algo.ts:184
	// verifyPayTxn(mintTxn, {
	//       receiver: this.app.address,
	//     })
	// verify receiver
	frame_dig -1 // mintTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mintTxn","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:187
	// this.idleAlgoToStake.value += mintTxn.amount
	bytec 1 //  "idleAlgo"
	app_global_get
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	+
	bytec 1 //  "idleAlgo"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:188
	// minted = this.getMintAmount(mintTxn.amount)
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	callsub getMintAmount
	frame_bury 0 // minted: uint64

	// contracts\CaelusAdmin.algo.ts:189
	// sendAssetTransfer({
	//       xferAsset: this.vALGOid.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: minted,
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:190
	// xferAsset: this.vALGOid.value
	bytec 6 //  "vALGOid"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusAdmin.algo.ts:191
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts\CaelusAdmin.algo.ts:192
	// assetAmount: minted
	frame_dig 0 // minted: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:194
	// this.totalAlgoStaked.value += mintTxn.amount
	bytec 4 //  "totalstake"
	app_global_get
	frame_dig -1 // mintTxn: PayTxn
	gtxns Amount
	+
	bytec 4 //  "totalstake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:195
	// this.circulatingSupply.value += minted
	bytec 2 //  "circulatingSupply"
	app_global_get
	frame_dig 0 // minted: uint64
	+
	bytec 2 //  "circulatingSupply"
	swap
	app_global_put
	retsub

// burnRequest(axfer)void
*abi_route_burnRequest:
	// burnTxn: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 0 (burnTxn) for burnRequest must be a axfer transaction
	assert

	// execute burnRequest(axfer)void
	callsub burnRequest
	intc 0 // 1
	return

// burnRequest(burnTxn: AssetTransferTxn): void
burnRequest:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 6

	// contracts\CaelusAdmin.algo.ts:201
	// assert(burnTxn.assetAmount >= ALGORAND_BASE_FEE)
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	intc 9 // 1000
	>=
	assert

	// contracts\CaelusAdmin.algo.ts:202
	// amtToBurn = this.getBurnAmount(burnTxn.assetAmount)
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	callsub getBurnAmount
	frame_bury 0 // amtToBurn: uint64

	// contracts\CaelusAdmin.algo.ts:203
	// dlgToPrio = this.burnPrio.value.globalState('delegatedStake') as uint64
	bytec 5 //  "burnPrio"
	app_global_get
	bytec 21 //  "delegatedStake"
	app_global_get_ex

	// global state value does not exist: this.burnPrio.value.globalState('delegatedStake')
	assert
	frame_bury 1 // dlgToPrio: uint64

	// *if0_condition
	// contracts\CaelusAdmin.algo.ts:204
	// dlgToPrio >= amtToBurn
	frame_dig 1 // dlgToPrio: uint64
	frame_dig 0 // amtToBurn: uint64
	>=
	bz *if0_end

	// *if0_consequent
	// contracts\CaelusAdmin.algo.ts:205
	// sendMethodCall<typeof CaelusValidatorPool.prototype.burnStake, void>({
	//         applicationID: this.burnPrio.value,
	//         methodArgs: [amtToBurn, this.txn.sender],
	//         fee: 0,
	//       })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 14 //  method "burnStake(uint64,address)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:206
	// applicationID: this.burnPrio.value
	bytec 5 //  "burnPrio"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:207
	// methodArgs: [amtToBurn, this.txn.sender]
	frame_dig 0 // amtToBurn: uint64
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:208
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:210
	// this.snitch(this.burnQueue.value[0])
	bytec 7 //  "burnQueue"
	intc 1 // 0
	intc 2 // 8
	box_extract
	btoi
	callsub snitch

	// contracts\CaelusAdmin.algo.ts:211
	// return;
	retsub

*if0_end:
	// contracts\CaelusAdmin.algo.ts:213
	// burning = this.burnPrio.value.globalState('delegatedSTake') as uint64
	bytec 5 //  "burnPrio"
	app_global_get
	bytec 22 //  "delegatedSTake"
	app_global_get_ex

	// global state value does not exist: this.burnPrio.value.globalState('delegatedSTake')
	assert
	frame_bury 2 // burning: uint64

	// contracts\CaelusAdmin.algo.ts:214
	// this.pendingGroup.addMethodCall<typeof CaelusValidatorPool.prototype.burnStake, void>({
	//       applicationID: this.burnPrio.value,
	//       methodArgs: [dlgToPrio, this.txn.sender],
	//       fee: 0,
	//     })
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 14 //  method "burnStake(uint64,address)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:215
	// applicationID: this.burnPrio.value
	bytec 5 //  "burnPrio"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:216
	// methodArgs: [dlgToPrio, this.txn.sender]
	frame_dig 1 // dlgToPrio: uint64
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:217
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// contracts\CaelusAdmin.algo.ts:219
	// for (let i = 0; i < this.burnQueue.value.length; i += 1)
	intc 1 // 0
	frame_bury 3 // i: uint64

*for_0:
	// contracts\CaelusAdmin.algo.ts:219
	// i < this.burnQueue.value.length
	frame_dig 3 // i: uint64
	intc 13 // 10
	<
	bz *for_0_end

	// contracts\CaelusAdmin.algo.ts:220
	// v = this.burnQueue.value[i]
	frame_dig 3 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	bytec 7 //  "burnQueue"
	cover 2
	box_extract
	btoi
	frame_bury 4 // v: uint64

	// contracts\CaelusAdmin.algo.ts:221
	// dlgToV = v.globalState('delegatedSTake') as uint64
	frame_dig 4 // v: uint64
	bytec 22 //  "delegatedSTake"
	app_global_get_ex

	// global state value does not exist: v.globalState('delegatedSTake')
	assert
	frame_bury 5 // dlgToV: uint64

	// *if1_condition
	// contracts\CaelusAdmin.algo.ts:222
	// dlgToV < amtToBurn - burning
	frame_dig 5 // dlgToV: uint64
	frame_dig 0 // amtToBurn: uint64
	frame_dig 2 // burning: uint64
	-
	<
	bz *if1_else

	// *if1_consequent
	// contracts\CaelusAdmin.algo.ts:223
	// this.pendingGroup.addMethodCall<typeof CaelusValidatorPool.prototype.burnStake, void>({
	//           applicationID: v,
	//           methodArgs: [dlgToV, this.txn.sender],
	//           fee: 0,
	//         })
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 14 //  method "burnStake(uint64,address)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:224
	// applicationID: v
	frame_dig 4 // v: uint64
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:225
	// methodArgs: [dlgToV, this.txn.sender]
	frame_dig 5 // dlgToV: uint64
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:226
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// contracts\CaelusAdmin.algo.ts:228
	// burning += dlgToV
	frame_dig 2 // burning: uint64
	frame_dig 5 // dlgToV: uint64
	+
	frame_bury 2 // burning: uint64
	b *if1_end

*if1_else:
	// contracts\CaelusAdmin.algo.ts:230
	// this.pendingGroup.addMethodCall<typeof CaelusValidatorPool.prototype.burnStake, void>({
	//           applicationID: v,
	//           methodArgs: [amtToBurn - burning, this.txn.sender],
	//           fee: 0,
	//         })
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 14 //  method "burnStake(uint64,address)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:231
	// applicationID: v
	frame_dig 4 // v: uint64
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:232
	// methodArgs: [amtToBurn - burning, this.txn.sender]
	frame_dig 0 // amtToBurn: uint64
	frame_dig 2 // burning: uint64
	-
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:233
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// contracts\CaelusAdmin.algo.ts:235
	// burning = amtToBurn
	frame_dig 0 // amtToBurn: uint64
	frame_bury 2 // burning: uint64
	b *for_0_end

*if1_end:

*for_0_continue:
	// contracts\CaelusAdmin.algo.ts:219
	// i += 1
	frame_dig 3 // i: uint64
	intc 0 // 1
	+
	frame_bury 3 // i: uint64
	b *for_0

*for_0_end:
	// contracts\CaelusAdmin.algo.ts:240
	// amtLeft = this.getBurnAmount(amtToBurn - burning)
	frame_dig 0 // amtToBurn: uint64
	frame_dig 2 // burning: uint64
	-
	callsub getBurnAmount
	frame_bury 6 // amtLeft: uint64

	// *if2_condition
	// contracts\CaelusAdmin.algo.ts:241
	// amtLeft > 0
	frame_dig 6 // amtLeft: uint64
	intc 1 // 0
	>
	bz *if2_end

	// *if2_consequent
	// contracts\CaelusAdmin.algo.ts:242
	// this.pendingGroup.addAssetTransfer({
	//         xferAsset: this.vALGOid.value,
	//         assetAmount: amtLeft,
	//         assetReceiver: this.txn.sender,
	//         fee: 0,
	//       })
	itxn_next
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:243
	// xferAsset: this.vALGOid.value
	bytec 6 //  "vALGOid"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusAdmin.algo.ts:244
	// assetAmount: amtLeft
	frame_dig 6 // amtLeft: uint64
	itxn_field AssetAmount

	// contracts\CaelusAdmin.algo.ts:245
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts\CaelusAdmin.algo.ts:246
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// contracts\CaelusAdmin.algo.ts:248
	// this.circulatingSupply.value -= burnTxn.assetAmount - amtLeft
	bytec 2 //  "circulatingSupply"
	app_global_get
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig 6 // amtLeft: uint64
	-
	-
	bytec 2 //  "circulatingSupply"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:249
	// this.totalAlgoStaked.value -= burning
	bytec 4 //  "totalstake"
	app_global_get
	frame_dig 2 // burning: uint64
	-
	bytec 4 //  "totalstake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:250
	// return;
	retsub

*if2_end:
	// contracts\CaelusAdmin.algo.ts:252
	// this.totalAlgoStaked.value -= burning
	bytec 4 //  "totalstake"
	app_global_get
	frame_dig 2 // burning: uint64
	-
	bytec 4 //  "totalstake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:253
	// this.circulatingSupply.value -= burnTxn.assetAmount
	bytec 2 //  "circulatingSupply"
	app_global_get
	frame_dig -1 // burnTxn: AssetTransferTxn
	gtxns AssetAmount
	-
	bytec 2 //  "circulatingSupply"
	swap
	app_global_put
	retsub

// mintValidatorCommit(uint64,pay)void
*abi_route_mintValidatorCommit:
	// stakeCommit: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (stakeCommit) for mintValidatorCommit must be a pay transaction
	assert

	// validatorAppID: uint64
	txna ApplicationArgs 1
	btoi

	// execute mintValidatorCommit(uint64,pay)void
	callsub mintValidatorCommit
	intc 0 // 1
	return

// mintValidatorCommit(validatorAppID: AppID, stakeCommit: PayTxn): void
mintValidatorCommit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:262
	// assert(this.isPool(validatorAppID))
	frame_dig -1 // validatorAppID: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:263
	// operatorAddress = validatorAppID.globalState('operatorAddress') as Address
	frame_dig -1 // validatorAppID: AppID
	bytec 17 //  "operatorAddress"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('operatorAddress')
	assert
	frame_bury 0 // operatorAddress: address

	// contracts\CaelusAdmin.algo.ts:264
	// verifyPayTxn(stakeCommit, {
	//       sender: operatorAddress,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Sender
	frame_dig 0 // operatorAddress: address
	==

	// transaction verification failed: {"txn":"stakeCommit","field":"sender","expected":"operatorAddress"}
	assert

	// verify receiver
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeCommit","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:270
	// sendMethodCall<typeof CaelusValidatorPool.prototype.addToOperatorCommit>({
	//       applicationID: validatorAppID,
	//       methodArgs: [
	//         {
	//           sender: this.app.address,
	//           receiver: validatorAppID.address,
	//           amount: stakeCommit.amount,
	//           fee: 0,
	//         },
	//       ],
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:274
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts\CaelusAdmin.algo.ts:275
	// receiver: validatorAppID.address
	frame_dig -1 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:276
	// amount: stakeCommit.amount
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Amount
	itxn_field Amount

	// contracts\CaelusAdmin.algo.ts:277
	// fee: 0
	intc 1 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xdfa20764 // method "addToOperatorCommit(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:271
	// applicationID: validatorAppID
	frame_dig -1 // validatorAppID: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:272
	// methodArgs: [
	//         {
	//           sender: this.app.address,
	//           receiver: validatorAppID.address,
	//           amount: stakeCommit.amount,
	//           fee: 0,
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:282
	// amountToMint = this.getMintAmount(stakeCommit.amount)
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Amount
	callsub getMintAmount
	frame_bury 1 // amountToMint: uint64

	// contracts\CaelusAdmin.algo.ts:283
	// this.calculateLSTRatio()
	callsub calculateLSTRatio

	// contracts\CaelusAdmin.algo.ts:284
	// sendAssetTransfer({
	//       xferAsset: this.vALGOid.value,
	//       assetReceiver: validatorAppID.address,
	//       assetAmount: amountToMint,
	//       fee: 0,
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:285
	// xferAsset: this.vALGOid.value
	bytec 6 //  "vALGOid"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusAdmin.algo.ts:286
	// assetReceiver: validatorAppID.address
	frame_dig -1 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	itxn_field AssetReceiver

	// contracts\CaelusAdmin.algo.ts:287
	// assetAmount: amountToMint
	frame_dig 1 // amountToMint: uint64
	itxn_field AssetAmount

	// contracts\CaelusAdmin.algo.ts:288
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:290
	// this.totalAlgoStaked.value += stakeCommit.amount
	bytec 4 //  "totalstake"
	app_global_get
	frame_dig -2 // stakeCommit: PayTxn
	gtxns Amount
	+
	bytec 4 //  "totalstake"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:291
	// this.circulatingSupply.value += amountToMint
	bytec 2 //  "circulatingSupply"
	app_global_get
	frame_dig 1 // amountToMint: uint64
	+
	bytec 2 //  "circulatingSupply"
	swap
	app_global_put
	retsub

// burnValidatorCommit()void
*abi_route_burnValidatorCommit:
	// execute burnValidatorCommit()void
	callsub burnValidatorCommit
	intc 0 // 1
	return

// burnValidatorCommit(): void
burnValidatorCommit:
	proto 0 0
	retsub

// burnToDelinquentValidator(axfer,uint64)void
*abi_route_burnToDelinquentValidator:
	// validatorAppID: uint64
	txna ApplicationArgs 1
	btoi

	// burnTxn: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 1 (burnTxn) for burnToDelinquentValidator must be a axfer transaction
	assert

	// execute burnToDelinquentValidator(axfer,uint64)void
	callsub burnToDelinquentValidator
	intc 0 // 1
	return

// burnToDelinquentValidator(burnTxn: AssetTransferTxn, validatorAppID: AppID): void
burnToDelinquentValidator:
	proto 2 0
	retsub

// reMintDeliquentCommit(uint64,uint64)void
*abi_route_reMintDeliquentCommit:
	// app: uint64
	txna ApplicationArgs 2
	btoi

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute reMintDeliquentCommit(uint64,uint64)void
	callsub reMintDeliquentCommit
	intc 0 // 1
	return

// reMintDeliquentCommit(amount: uint64, app: AppID): void
reMintDeliquentCommit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 7

	// contracts\CaelusAdmin.algo.ts:316
	// this.isPool(app)
	frame_dig -2 // app: AppID
	callsub isPool

	// contracts\CaelusAdmin.algo.ts:317
	// opAmount = app.globalState('operatorCommit') as uint64
	frame_dig -2 // app: AppID
	bytec 23 //  "operatorCommit"
	app_global_get_ex

	// global state value does not exist: app.globalState('operatorCommit')
	assert
	frame_bury 0 // opAmount: uint64

	// contracts\CaelusAdmin.algo.ts:318
	// op = app.globalState('operatorAddress') as Address
	frame_dig -2 // app: AppID
	bytec 17 //  "operatorAddress"
	app_global_get_ex

	// global state value does not exist: app.globalState('operatorAddress')
	assert
	frame_bury 1 // op: address

	// contracts\CaelusAdmin.algo.ts:319
	// delnQ = app.globalState('isDelinquent') as boolean
	frame_dig -2 // app: AppID
	pushbytes 0x697344656c696e7175656e74 // "isDelinquent"
	app_global_get_ex

	// global state value does not exist: app.globalState('isDelinquent')
	assert
	frame_bury 2 // delnQ: bool

	// contracts\CaelusAdmin.algo.ts:320
	// isRightAmount = amount === opAmount
	frame_dig -1 // amount: uint64
	frame_dig 0 // opAmount: uint64
	==
	frame_bury 3 // isRightAmount: bool

	// contracts\CaelusAdmin.algo.ts:321
	// isRightOp = op === this.txn.sender
	frame_dig 1 // op: address
	txn Sender
	==
	frame_bury 4 // isRightOp: bool

	// contracts\CaelusAdmin.algo.ts:322
	// isNotDelinquent = !delnQ
	frame_dig 2 // delnQ: bool
	!
	frame_bury 5 // isNotDelinquent: bool

	// contracts\CaelusAdmin.algo.ts:323
	// hasNovAlgo = app.address.assetBalance(this.vALGOid.value) === 0
	frame_dig -2 // app: AppID
	app_params_get AppAddress
	pop
	bytec 6 //  "vALGOid"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 1 // 0
	==
	frame_bury 6 // hasNovAlgo: bool

	// contracts\CaelusAdmin.algo.ts:324
	// amountToMint = this.getMintAmount(amount)
	frame_dig -1 // amount: uint64
	callsub getMintAmount
	frame_bury 7 // amountToMint: uint64

	// contracts\CaelusAdmin.algo.ts:325
	// assert(isNotDelinquent && hasNovAlgo && isRightOp && isRightAmount)
	frame_dig 5 // isNotDelinquent: bool
	dup
	bz *skip_and0
	frame_dig 6 // hasNovAlgo: bool
	&&

*skip_and0:
	dup
	bz *skip_and1
	frame_dig 4 // isRightOp: bool
	&&

*skip_and1:
	dup
	bz *skip_and2
	frame_dig 3 // isRightAmount: bool
	&&

*skip_and2:
	assert

	// contracts\CaelusAdmin.algo.ts:326
	// this.calculateLSTRatio()
	callsub calculateLSTRatio

	// contracts\CaelusAdmin.algo.ts:327
	// sendAssetTransfer({
	//       xferAsset: this.vALGOid.value,
	//       assetReceiver: app.address,
	//       assetAmount: amountToMint,
	//       fee: 0,
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:328
	// xferAsset: this.vALGOid.value
	bytec 6 //  "vALGOid"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusAdmin.algo.ts:329
	// assetReceiver: app.address
	frame_dig -2 // app: AppID
	app_params_get AppAddress
	pop
	itxn_field AssetReceiver

	// contracts\CaelusAdmin.algo.ts:330
	// assetAmount: amountToMint
	frame_dig 7 // amountToMint: uint64
	itxn_field AssetAmount

	// contracts\CaelusAdmin.algo.ts:331
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:333
	// this.circulatingSupply.value += amountToMint
	bytec 2 //  "circulatingSupply"
	app_global_get
	frame_dig 7 // amountToMint: uint64
	+
	bytec 2 //  "circulatingSupply"
	swap
	app_global_put
	retsub

// bid(uint64)void
*abi_route_bid:
	// validatorAppID: uint64
	txna ApplicationArgs 1
	btoi

	// execute bid(uint64)void
	callsub bid
	intc 0 // 1
	return

// bid(validatorAppID: AppID): void
bid:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts\CaelusAdmin.algo.ts:340
	// assert(this.isPool(validatorAppID))
	frame_dig -1 // validatorAppID: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:341
	// doesExist = this.highestBidder.value.creator
	bytec 12 //  "highestBidder"
	app_global_get
	app_params_get AppCreator
	pop
	frame_bury 0 // doesExist: address

	// contracts\CaelusAdmin.algo.ts:342
	// valueC = validatorAppID.globalState('saturationBuffer') as uint64
	frame_dig -1 // validatorAppID: AppID
	bytec 9 //  "saturationBuffer"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('saturationBuffer')
	assert
	frame_bury 1 // valueC: uint64

	// contracts\CaelusAdmin.algo.ts:343
	// isDelegatable = validatorAppID.globalState('canBeDelegated') as boolean
	frame_dig -1 // validatorAppID: AppID
	pushbytes 0x63616e426544656c656761746564 // "canBeDelegated"
	app_global_get_ex

	// global state value does not exist: validatorAppID.globalState('canBeDelegated')
	assert
	frame_bury 2 // isDelegatable: bool

	// contracts\CaelusAdmin.algo.ts:344
	// valueB = this.highestBidder.value.globalState('saturationBuffer') as uint64
	bytec 12 //  "highestBidder"
	app_global_get
	bytec 9 //  "saturationBuffer"
	app_global_get_ex

	// global state value does not exist: this.highestBidder.value.globalState('saturationBuffer')
	assert
	frame_bury 3 // valueB: uint64

	// contracts\CaelusAdmin.algo.ts:345
	// assert(isDelegatable, 'only bid delegatable Apps')
	frame_dig 2 // isDelegatable: bool

	// only bid delegatable Apps
	assert

	// *if3_condition
	// contracts\CaelusAdmin.algo.ts:346
	// valueC > valueB && doesExist !== globals.zeroAddress
	frame_dig 1 // valueC: uint64
	frame_dig 3 // valueB: uint64
	>
	dup
	bz *skip_and3
	frame_dig 0 // doesExist: address
	global ZeroAddress
	!=
	&&

*skip_and3:
	bz *if3_end

	// *if3_consequent
	// contracts\CaelusAdmin.algo.ts:347
	// this.highestBidder.value = validatorAppID
	bytec 12 //  "highestBidder"
	frame_dig -1 // validatorAppID: AppID
	app_global_put

*if3_end:
	retsub

// delegateStake(uint64,uint64)void
*abi_route_delegateStake:
	// validatorAppID: uint64
	txna ApplicationArgs 2
	btoi

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute delegateStake(uint64,uint64)void
	callsub delegateStake
	intc 0 // 1
	return

// delegateStake(amount: uint64, validatorAppID: AppID): void
delegateStake:
	proto 2 0

	// contracts\CaelusAdmin.algo.ts:353
	// assert(this.isPool(validatorAppID))
	frame_dig -2 // validatorAppID: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:354
	// assert(validatorAppID === this.highestBidder.value, 'can only delegate to highest bidder account')
	frame_dig -2 // validatorAppID: AppID
	bytec 12 //  "highestBidder"
	app_global_get
	==

	// can only delegate to highest bidder account
	assert

	// contracts\CaelusAdmin.algo.ts:355
	// assert(amount <= this.idleAlgoToStake.value, 'cant withdraw more than the amount of idleAlgo in the contract')
	frame_dig -1 // amount: uint64
	bytec 1 //  "idleAlgo"
	app_global_get
	<=

	// cant withdraw more than the amount of idleAlgo in the contract
	assert

	// contracts\CaelusAdmin.algo.ts:356
	// sendMethodCall<typeof CaelusValidatorPool.prototype.addStake, void>({
	//       applicationID: validatorAppID,
	//       methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: amount,
	//           fee: 0,
	//         },
	//       ],
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:360
	// receiver: validatorAppID.address
	frame_dig -2 // validatorAppID: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:361
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// contracts\CaelusAdmin.algo.ts:362
	// fee: 0
	intc 1 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xd4502100 // method "addStake(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:357
	// applicationID: validatorAppID
	frame_dig -2 // validatorAppID: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:358
	// methodArgs: [
	//         {
	//           receiver: validatorAppID.address,
	//           amount: amount,
	//           fee: 0,
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:366
	// this.idleAlgoToStake.value -= amount
	bytec 1 //  "idleAlgo"
	app_global_get
	frame_dig -1 // amount: uint64
	-
	bytec 1 //  "idleAlgo"
	swap
	app_global_put
	retsub

// snitch(uint64)void
*abi_route_snitch:
	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute snitch(uint64)void
	callsub snitch
	intc 0 // 1
	return

// snitch(app: AppID): void
snitch:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts\CaelusAdmin.algo.ts:371
	// assert(this.isPool(app))
	frame_dig -1 // app: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:372
	// satSnitch = app.globalState('saturationBuffer') as uint64
	frame_dig -1 // app: AppID
	bytec 9 //  "saturationBuffer"
	app_global_get_ex

	// global state value does not exist: app.globalState('saturationBuffer')
	assert
	frame_bury 0 // satSnitch: uint64

	// contracts\CaelusAdmin.algo.ts:373
	// satPrio = this.burnPrio.value.globalState('saturationBuffer') as uint64
	bytec 5 //  "burnPrio"
	app_global_get
	bytec 9 //  "saturationBuffer"
	app_global_get_ex

	// global state value does not exist: this.burnPrio.value.globalState('saturationBuffer')
	assert
	frame_bury 1 // satPrio: uint64

	// contracts\CaelusAdmin.algo.ts:374
	// minPrio = app
	frame_dig -1 // app: AppID
	frame_bury 2 // minPrio: uint64

	// contracts\CaelusAdmin.algo.ts:375
	// minSat = satSnitch
	frame_dig 0 // satSnitch: uint64
	frame_bury 3 // minSat: uint64

	// *if4_condition
	// contracts\CaelusAdmin.algo.ts:376
	// satSnitch > satPrio
	frame_dig 0 // satSnitch: uint64
	frame_dig 1 // satPrio: uint64
	>
	bz *if4_end

	// *if4_consequent
	// contracts\CaelusAdmin.algo.ts:377
	// minPrio = this.burnPrio.value
	bytec 5 //  "burnPrio"
	app_global_get
	frame_bury 2 // minPrio: uint64

	// contracts\CaelusAdmin.algo.ts:378
	// minSat = satPrio
	frame_dig 1 // satPrio: uint64
	frame_bury 3 // minSat: uint64

	// contracts\CaelusAdmin.algo.ts:379
	// this.burnPrio.value = app
	bytec 5 //  "burnPrio"
	frame_dig -1 // app: AppID
	app_global_put

*if4_end:
	// contracts\CaelusAdmin.algo.ts:382
	// for (let i = 0; i < queue.length; i += 1)
	intc 1 // 0
	frame_bury 4 // i: uint64

*for_1:
	// contracts\CaelusAdmin.algo.ts:382
	// i < queue.length
	frame_dig 4 // i: uint64
	intc 13 // 10
	<
	bz *for_1_end

	// *if5_condition
	// contracts\CaelusAdmin.algo.ts:383
	// (queue[i].globalState('saturationBuffer') as uint64) < minSat
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	bytec 7 //  "burnQueue"
	cover 2
	box_extract
	btoi
	bytec 9 //  "saturationBuffer"
	app_global_get_ex

	// global state value does not exist: queue[i].globalState('saturationBuffer')
	assert
	frame_dig 3 // minSat: uint64
	<
	bz *if5_end

	// *if5_consequent
	// contracts\CaelusAdmin.algo.ts:384
	// temp = minPrio
	frame_dig 2 // minPrio: uint64
	frame_bury 5 // temp: uint64

	// contracts\CaelusAdmin.algo.ts:385
	// minPrio = queue[i]
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	intc 2 // 8
	bytec 7 //  "burnQueue"
	cover 2
	box_extract
	btoi
	frame_bury 2 // minPrio: uint64

	// contracts\CaelusAdmin.algo.ts:386
	// queue[i] = temp
	frame_dig 4 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	frame_dig 5 // temp: uint64
	itob
	bytec 7 //  "burnQueue"
	cover 2
	box_replace

*if5_end:

*for_1_continue:
	// contracts\CaelusAdmin.algo.ts:382
	// i += 1
	frame_dig 4 // i: uint64
	intc 0 // 1
	+
	frame_bury 4 // i: uint64
	b *for_1

*for_1_end:
	retsub

// reStakeFromSnitch(uint64,uint64,pay)void
*abi_route_reStakeFromSnitch:
	// restakeTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (restakeTxn) for reStakeFromSnitch must be a pay transaction
	assert

	// receiverApp: uint64
	txna ApplicationArgs 2
	btoi

	// snitchedApp: uint64
	txna ApplicationArgs 1
	btoi

	// execute reStakeFromSnitch(uint64,uint64,pay)void
	callsub reStakeFromSnitch
	intc 0 // 1
	return

// reStakeFromSnitch(snitchedApp: AppID, receiverApp: AppID, restakeTxn: PayTxn): void
reStakeFromSnitch:
	proto 3 0

	// contracts\CaelusAdmin.algo.ts:396
	// assert(this.isPool(snitchedApp))
	frame_dig -1 // snitchedApp: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:397
	// assert(receiverApp.address === restakeTxn.receiver)
	frame_dig -2 // receiverApp: AppID
	app_params_get AppAddress
	pop
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	==
	assert

	// *if6_condition
	// contracts\CaelusAdmin.algo.ts:398
	// restakeTxn.receiver !== this.app.address
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	!=
	bz *if6_end

	// *if6_consequent
	// contracts\CaelusAdmin.algo.ts:399
	// sendMethodCall<typeof CaelusValidatorPool.prototype.getClawbackedStake, void>({
	//         applicationID: receiverApp,
	//         methodArgs: [
	//           {
	//             receiver: restakeTxn.receiver,
	//             amount: restakeTxn.amount,
	//             fee: 0,
	//           },
	//         ],
	//         fee: 0,
	//       })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:403
	// receiver: restakeTxn.receiver
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:404
	// amount: restakeTxn.amount
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Amount
	itxn_field Amount

	// contracts\CaelusAdmin.algo.ts:405
	// fee: 0
	intc 1 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xbdf01e8e // method "getClawbackedStake(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:400
	// applicationID: receiverApp
	frame_dig -2 // receiverApp: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:401
	// methodArgs: [
	//           {
	//             receiver: restakeTxn.receiver,
	//             amount: restakeTxn.amount,
	//             fee: 0,
	//           },
	//         ]
	// contracts\CaelusAdmin.algo.ts:408
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:410
	// return;
	retsub

*if6_end:
	// contracts\CaelusAdmin.algo.ts:412
	// verifyPayTxn(restakeTxn, {
	//       sender: snitchedApp.address,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Sender
	frame_dig -1 // snitchedApp: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"restakeTxn","field":"sender","expected":"snitchedApp.address"}
	assert

	// verify receiver
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"restakeTxn","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusAdmin.algo.ts:416
	// this.idleAlgoToStake.value += restakeTxn.amount
	bytec 1 //  "idleAlgo"
	app_global_get
	frame_dig -3 // restakeTxn: PayTxn
	gtxns Amount
	+
	bytec 1 //  "idleAlgo"
	swap
	app_global_put
	retsub

// onOperatorExit(uint64,pay)void
*abi_route_onOperatorExit:
	// closeTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (closeTxn) for onOperatorExit must be a pay transaction
	assert

	// appToClose: uint64
	txna ApplicationArgs 1
	btoi

	// execute onOperatorExit(uint64,pay)void
	callsub onOperatorExit
	intc 0 // 1
	return

// onOperatorExit(appToClose: AppID, closeTxn: PayTxn): void
onOperatorExit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:421
	// operator = appToClose.globalState('operatorAddress') as Address
	frame_dig -1 // appToClose: AppID
	bytec 17 //  "operatorAddress"
	app_global_get_ex

	// global state value does not exist: appToClose.globalState('operatorAddress')
	assert
	frame_bury 0 // operator: address

	// contracts\CaelusAdmin.algo.ts:422
	// totalCheck =
	//       (appToClose.globalState('operatorCommit') as uint64) + (appToClose.globalState('delegatedStake') as uint64)
	frame_dig -1 // appToClose: AppID
	bytec 23 //  "operatorCommit"
	app_global_get_ex

	// global state value does not exist: appToClose.globalState('operatorCommit')
	assert
	frame_dig -1 // appToClose: AppID
	bytec 21 //  "delegatedStake"
	app_global_get_ex

	// global state value does not exist: appToClose.globalState('delegatedStake')
	assert
	+
	frame_bury 1 // totalCheck: uint64

	// contracts\CaelusAdmin.algo.ts:424
	// assert(this.txn.sender === operator, 'Only the operator can close out the contract')
	txn Sender
	frame_dig 0 // operator: address
	==

	// Only the operator can close out the contract
	assert

	// contracts\CaelusAdmin.algo.ts:425
	// verifyPayTxn(closeTxn, {
	//       receiver: this.app.address,
	//       sender: appToClose.address,
	//       amount: totalCheck,
	//     })
	// verify receiver
	frame_dig -2 // closeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"closeTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify sender
	frame_dig -2 // closeTxn: PayTxn
	gtxns Sender
	frame_dig -1 // appToClose: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"closeTxn","field":"sender","expected":"appToClose.address"}
	assert

	// verify amount
	frame_dig -2 // closeTxn: PayTxn
	gtxns Amount
	frame_dig 1 // totalCheck: uint64
	==

	// transaction verification failed: {"txn":"closeTxn","field":"amount","expected":"totalCheck"}
	assert

	// contracts\CaelusAdmin.algo.ts:430
	// this.idleAlgoToStake.value += closeTxn.amount
	bytec 1 //  "idleAlgo"
	app_global_get
	frame_dig -2 // closeTxn: PayTxn
	gtxns Amount
	+
	bytec 1 //  "idleAlgo"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:431
	// sendMethodCall<typeof CaelusValidatorPool.prototype.deleteApplication, void>({
	//       applicationID: appToClose,
	//       methodArgs: [],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x2487c32c // method "deleteApplication()void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:432
	// applicationID: appToClose
	frame_dig -1 // appToClose: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:433
	// methodArgs: []
	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// declareRewards(pay)void
*abi_route_declareRewards:
	// txn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (txn) for declareRewards must be a pay transaction
	assert

	// execute declareRewards(pay)void
	callsub declareRewards
	intc 0 // 1
	return

// declareRewards(txn: PayTxn): void
declareRewards:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\CaelusAdmin.algo.ts:438
	// assert(txn.receiver === this.app.address, 'payment must be done to this app address')
	frame_dig -1 // txn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// payment must be done to this app address
	assert

	// contracts\CaelusAdmin.algo.ts:439
	// protocolCut = (PROTOCOL_COMMISSION * txn.amount) / 100
	intc 4 // 4
	frame_dig -1 // txn: PayTxn
	gtxns Amount
	*
	pushint 100
	/
	frame_bury 0 // protocolCut: uint64

	// contracts\CaelusAdmin.algo.ts:440
	// restakeRewards = txn.amount - protocolCut
	frame_dig -1 // txn: PayTxn
	gtxns Amount
	frame_dig 0 // protocolCut: uint64
	-
	frame_bury 1 // restakeRewards: uint64

	// contracts\CaelusAdmin.algo.ts:441
	// sendPayment({
	//       receiver: this.vestigeAddress.value,
	//       amount: protocolCut,
	//       fee: 0,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\CaelusAdmin.algo.ts:442
	// receiver: this.vestigeAddress.value
	bytec 20 //  "vestigeAddress"
	app_global_get
	itxn_field Receiver

	// contracts\CaelusAdmin.algo.ts:443
	// amount: protocolCut
	frame_dig 0 // protocolCut: uint64
	itxn_field Amount

	// contracts\CaelusAdmin.algo.ts:444
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusAdmin.algo.ts:446
	// this.idleAlgoToStake.value += restakeRewards
	bytec 1 //  "idleAlgo"
	app_global_get
	frame_dig 1 // restakeRewards: uint64
	+
	bytec 1 //  "idleAlgo"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:447
	// this.totalAlgoStaked.value += restakeRewards
	bytec 4 //  "totalstake"
	app_global_get
	frame_dig 1 // restakeRewards: uint64
	+
	bytec 4 //  "totalstake"
	swap
	app_global_put
	retsub

// snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool
*abi_route_snitchCheck:
	// The ABI return prefix
	bytec 13 // 0x151f7c75

	// params: (bool,bool,bool,uint64,bool,uint64)
	txna ApplicationArgs 2
	dup
	len
	pushint 18
	==

	// argument 0 (params) for snitchCheck must be a (bool,bool,bool,uint64,bool,uint64)
	assert

	// appToCheck: uint64
	txna ApplicationArgs 1
	btoi

	// execute snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool
	callsub snitchCheck
	bytec 10 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// snitchCheck(appToCheck: AppID, params: SnitchInfo): boolean
snitchCheck:
	proto 2 1

	// contracts\CaelusAdmin.algo.ts:451
	// assert(this.isPool(appToCheck))
	frame_dig -1 // appToCheck: AppID
	callsub isPool
	assert

	// contracts\CaelusAdmin.algo.ts:452
	// assert(this.isPool(params.recipient) || params.recipient.address === this.app.address)
	frame_dig -2 // params: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 1 8
	btoi
	callsub isPool
	dup
	bnz *skip_or0
	frame_dig -2 // params: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 1 8
	btoi
	app_params_get AppAddress
	pop
	global CurrentApplicationAddress
	==
	||

*skip_or0:
	assert

	// contracts\CaelusAdmin.algo.ts:454
	// return sendMethodCall<typeof CaelusValidatorPool.prototype.getSnitched, boolean>({
	//       applicationID: appToCheck,
	//       methodArgs: [params],
	//     });
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x5b674f2f // method "getSnitched((bool,bool,bool,uint64,bool,uint64))bool"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:455
	// applicationID: appToCheck
	frame_dig -1 // appToCheck: AppID
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:456
	// methodArgs: [params]
	frame_dig -2 // params: SnitchInfo
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 0 // 1
	-
	itxnas Logs
	extract 4 0
	intc 1 // 0
	getbit
	retsub

// makeFlashLoanRequest(pay,uint64[],uint64[])void
*abi_route_makeFlashLoanRequest:
	// appToInclude: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// amounts: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// payFeeTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 2 (payFeeTxn) for makeFlashLoanRequest must be a pay transaction
	assert

	// execute makeFlashLoanRequest(pay,uint64[],uint64[])void
	callsub makeFlashLoanRequest
	intc 0 // 1
	return

// makeFlashLoanRequest(payFeeTxn: PayTxn, amounts: uint64[], appToInclude: AppID[]): void
makeFlashLoanRequest:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts\CaelusAdmin.algo.ts:463
	// this.getFLcounter()
	callsub getFLcounter
	pop

	// contracts\CaelusAdmin.algo.ts:464
	// this.flashLoanCounter.value += appToInclude.length
	bytec 3 //  "flashLoanCounter"
	app_global_get
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	+
	bytec 3 //  "flashLoanCounter"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:465
	// keepFee = this.flashLoanCounter.value + FLASH_LOAN_FEE
	bytec 3 //  "flashLoanCounter"
	app_global_get
	pushint 10000000
	+
	frame_bury 0 // keepFee: uint64

	// contracts\CaelusAdmin.algo.ts:467
	// verifyPayTxn(payFeeTxn, {
	//       receiver: this.app.address,
	//       amount: keepFee,
	//     })
	// verify receiver
	frame_dig -1 // payFeeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payFeeTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payFeeTxn: PayTxn
	gtxns Amount
	frame_dig 0 // keepFee: uint64
	==

	// transaction verification failed: {"txn":"payFeeTxn","field":"amount","expected":"keepFee"}
	assert

	// contracts\CaelusAdmin.algo.ts:472
	// this.idleAlgoToStake.value += keepFee
	bytec 1 //  "idleAlgo"
	app_global_get
	frame_dig 0 // keepFee: uint64
	+
	bytec 1 //  "idleAlgo"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:474
	// assert(amounts.length === appToInclude.length, 'array length [amount, appToInclude] mismatch')
	frame_dig -2 // amounts: uint64[]
	len
	intc 2 // 8
	/
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	==

	// array length [amount, appToInclude] mismatch
	assert

	// contracts\CaelusAdmin.algo.ts:476
	// for (let i = 0; i < appToInclude.length; i += 1)
	intc 1 // 0
	frame_bury 1 // i: uint64

*for_2:
	// contracts\CaelusAdmin.algo.ts:476
	// i < appToInclude.length
	frame_dig 1 // i: uint64
	frame_dig -3 // appToInclude: AppID[]
	len
	intc 2 // 8
	/
	<
	bz *for_2_end

	// contracts\CaelusAdmin.algo.ts:477
	// this.pendingGroup.addMethodCall<typeof CaelusValidatorPool.prototype.flashloan, void>({
	//         applicationID: appToInclude[i],
	//         methodArgs: [amounts[i], this.txn.sender],
	//         fee: 0,
	//       })
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x4a5356cc // method "flashloan(uint64,address)void"
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:478
	// applicationID: appToInclude[i]
	frame_dig -3 // appToInclude: AppID[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itxn_field ApplicationID

	// contracts\CaelusAdmin.algo.ts:479
	// methodArgs: [amounts[i], this.txn.sender]
	frame_dig -2 // amounts: uint64[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	itxn_field ApplicationArgs
	txn Sender
	itxn_field ApplicationArgs

	// contracts\CaelusAdmin.algo.ts:480
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// contracts\CaelusAdmin.algo.ts:483
	// for (let j = this.txn.groupIndex; j < this.txnGroup.length; j += 1)
	txn GroupIndex
	frame_bury 2 // j: uint64

*for_3:
	// contracts\CaelusAdmin.algo.ts:483
	// j < this.txnGroup.length
	frame_dig 2 // j: uint64
	global GroupSize
	<
	bz *for_3_end

	// contracts\CaelusAdmin.algo.ts:484
	// txn = this.txnGroup[j]
	frame_dig 2 // j: uint64
	frame_bury 3 // txn: txn

	// contracts\CaelusAdmin.algo.ts:485
	// repaid = false
	intc 1 // 0
	frame_bury 4 // repaid: bool

	// *if7_condition
	// contracts\CaelusAdmin.algo.ts:487
	// txn.typeEnum === TransactionType.ApplicationCall &&
	//           txn.applicationID === appToInclude[i] &&
	//           txn.onCompletion === 0 &&
	//           txn.numAppArgs === 1 &&
	//           txn.applicationArgs[0] === method('checkBalance():void')
	frame_dig 3 // txn: txn
	gtxns TypeEnum
	intc 3 //  appl
	==
	dup
	bz *skip_and4
	frame_dig 3 // txn: txn
	gtxns ApplicationID
	frame_dig -3 // appToInclude: AppID[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	==
	&&

*skip_and4:
	dup
	bz *skip_and5
	frame_dig 3 // txn: txn
	gtxns OnCompletion
	intc 1 // 0
	==
	&&

*skip_and5:
	dup
	bz *skip_and6
	frame_dig 3 // txn: txn
	gtxns NumAppArgs
	intc 0 // 1
	==
	&&

*skip_and6:
	dup
	bz *skip_and7
	frame_dig 3 // txn: txn
	gtxns ApplicationArgs 0
	pushbytes 0x3fa88fd0 // method "checkBalance():void"
	==
	&&

*skip_and7:
	bz *if7_end

	// *if7_consequent
	// contracts\CaelusAdmin.algo.ts:493
	// repaid = true
	intc 0 // 1
	frame_bury 4 // repaid: bool

*if7_end:
	// contracts\CaelusAdmin.algo.ts:495
	// assert(repaid)
	frame_dig 4 // repaid: bool
	assert

*for_3_continue:
	// contracts\CaelusAdmin.algo.ts:483
	// j += 1
	frame_dig 2 // j: uint64
	intc 0 // 1
	+
	frame_bury 2 // j: uint64
	b *for_3

*for_3_end:

*for_2_continue:
	// contracts\CaelusAdmin.algo.ts:476
	// i += 1
	frame_dig 1 // i: uint64
	intc 0 // 1
	+
	frame_bury 1 // i: uint64
	b *for_2

*for_2_end:
	// contracts\CaelusAdmin.algo.ts:498
	// this.pendingGroup.submit()
	itxn_submit
	retsub

// getFLcounter()uint64
*abi_route_getFLcounter:
	// The ABI return prefix
	bytec 13 // 0x151f7c75

	// execute getFLcounter()uint64
	callsub getFLcounter
	itob
	concat
	log
	intc 0 // 1
	return

// getFLcounter(): uint64
getFLcounter:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// *if8_condition
	// contracts\CaelusAdmin.algo.ts:503
	// this.lastFlashloanBlock.value === globals.round
	bytec 19 //  "lastFlashloanBlock"
	app_global_get
	global Round
	==
	bz *if8_end

	// *if8_consequent
	// contracts\CaelusAdmin.algo.ts:504
	// return this.flashLoanCounter.value;
	bytec 3 //  "flashLoanCounter"
	app_global_get
	b *getFLcounter*return

*if8_end:
	// contracts\CaelusAdmin.algo.ts:506
	// reduce = globals.round - this.lastFlashloanBlock.value
	global Round
	bytec 19 //  "lastFlashloanBlock"
	app_global_get
	-
	frame_bury 0 // reduce: uint64

	// *if9_condition
	// contracts\CaelusAdmin.algo.ts:507
	// reduce > this.flashLoanCounter.value
	frame_dig 0 // reduce: uint64
	bytec 3 //  "flashLoanCounter"
	app_global_get
	>
	bz *if9_end

	// *if9_consequent
	// contracts\CaelusAdmin.algo.ts:508
	// this.flashLoanCounter.value = 0
	bytec 3 //  "flashLoanCounter"
	intc 1 // 0
	app_global_put

	// contracts\CaelusAdmin.algo.ts:509
	// return this.flashLoanCounter.value;
	bytec 3 //  "flashLoanCounter"
	app_global_get
	b *getFLcounter*return

*if9_end:
	// contracts\CaelusAdmin.algo.ts:511
	// this.flashLoanCounter.value -= reduce * 2 > this.flashLoanCounter.value ? reduce * 2 : reduce
	bytec 3 //  "flashLoanCounter"
	app_global_get
	frame_dig 0 // reduce: uint64
	intc 12 // 2
	*
	bytec 3 //  "flashLoanCounter"
	app_global_get
	>
	bz *ternary1_false
	frame_dig 0 // reduce: uint64
	intc 12 // 2
	*
	b *ternary1_end

*ternary1_false:
	frame_dig 0 // reduce: uint64

*ternary1_end:
	-
	bytec 3 //  "flashLoanCounter"
	swap
	app_global_put

	// contracts\CaelusAdmin.algo.ts:512
	// return this.flashLoanCounter.value;
	bytec 3 //  "flashLoanCounter"
	app_global_get

*getFLcounter*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// isPool(app: AppID): boolean
isPool:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:516
	// isPool = (app.globalState('creator') as AppID) === this.app
	frame_dig -1 // app: AppID
	pushbytes 0x63726561746f72 // "creator"
	app_global_get_ex

	// global state value does not exist: app.globalState('creator')
	assert
	txna Applications 0
	==
	frame_bury 0 // isPool: bool

	// contracts\CaelusAdmin.algo.ts:517
	// return isPool;
	frame_dig 0 // isPool: bool

	// set the subroutine return value
	frame_bury 0
	retsub

// minBalanceForAccount(contracts: uint64, extraPages: uint64, assets: uint64, localInts: uint64, localBytes: uint64, globalInts: uint64, globalBytes: uint64): uint64
minBalanceForAccount:
	proto 7 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\CaelusAdmin.algo.ts:529
	// minBal = ALGORAND_ACCOUNT_MIN_BALANCE
	intc 5 // 100000
	frame_bury 0 // minBal: uint64

	// contracts\CaelusAdmin.algo.ts:530
	// minBal += contracts * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -1 // contracts: uint64
	intc 5 // 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts\CaelusAdmin.algo.ts:531
	// minBal += extraPages * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -2 // extraPages: uint64
	intc 5 // 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts\CaelusAdmin.algo.ts:532
	// minBal += assets * ASSET_HOLDING_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -3 // assets: uint64
	intc 5 // 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts\CaelusAdmin.algo.ts:533
	// minBal += localInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -4 // localInts: uint64
	intc 10 // 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts\CaelusAdmin.algo.ts:534
	// minBal += globalInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -6 // globalInts: uint64
	intc 10 // 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts\CaelusAdmin.algo.ts:535
	// minBal += localBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -5 // localBytes: uint64
	intc 11 // 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts\CaelusAdmin.algo.ts:536
	// minBal += globalBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -7 // globalBytes: uint64
	intc 11 // 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// contracts\CaelusAdmin.algo.ts:537
	// return minBal;
	frame_dig 0 // minBal: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// costForBoxStorage(totalNumBytes: uint64): uint64
costForBoxStorage:
	proto 1 1

	// contracts\CaelusAdmin.algo.ts:545
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE;
	pushint 2500
	frame_dig -1 // totalNumBytes: uint64
	pushint 400
	*
	+
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xd220832d // method "creatorChangeCreatorRelatedParams(address,uint64,uint64)void"
	pushbytes 0x33e463e5 // method "initPoolContract(uint64)void"
	pushbytes 0x4ca29361 // method "loadPoolContractProgram(uint64,byte[])void"
	pushbytes 0x05784379 // method "poolContractIsSet()void"
	pushbytes 0x124a9e30 // method "initLST(string,string,string)void"
	pushbytes 0x1f0ebf5f // method "initBurnQueue()void"
	pushbytes 0x1263175a // method "addCaelusValidator(pay)void"
	pushbytes 0x69035a1c // method "calculateLSTRatio()void"
	pushbytes 0x8b874f1d // method "getMintAmount(uint64)uint64"
	pushbytes 0x373465d7 // method "getBurnAmount(uint64)uint64"
	pushbytes 0x675396f4 // method "mintRequest(pay)void"
	pushbytes 0x62655960 // method "burnRequest(axfer)void"
	pushbytes 0xe5747e07 // method "mintValidatorCommit(uint64,pay)void"
	pushbytes 0x8036d528 // method "burnValidatorCommit()void"
	pushbytes 0xb13cc0b1 // method "burnToDelinquentValidator(axfer,uint64)void"
	pushbytes 0xb1d68139 // method "reMintDeliquentCommit(uint64,uint64)void"
	pushbytes 0xeddfe598 // method "bid(uint64)void"
	pushbytes 0xe45c40e0 // method "delegateStake(uint64,uint64)void"
	pushbytes 0x610a1fad // method "snitch(uint64)void"
	pushbytes 0x911c3c46 // method "reStakeFromSnitch(uint64,uint64,pay)void"
	pushbytes 0x5e073e67 // method "onOperatorExit(uint64,pay)void"
	pushbytes 0x548b59f6 // method "declareRewards(pay)void"
	pushbytes 0xd2be586a // method "snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool"
	pushbytes 0x8bfa1157 // method "makeFlashLoanRequest(pay,uint64[],uint64[])void"
	pushbytes 0x7c941b35 // method "getFLcounter()uint64"
	txna ApplicationArgs 0
	match *abi_route_creatorChangeCreatorRelatedParams *abi_route_initPoolContract *abi_route_loadPoolContractProgram *abi_route_poolContractIsSet *abi_route_initLST *abi_route_initBurnQueue *abi_route_addCaelusValidator *abi_route_calculateLSTRatio *abi_route_getMintAmount *abi_route_getBurnAmount *abi_route_mintRequest *abi_route_burnRequest *abi_route_mintValidatorCommit *abi_route_burnValidatorCommit *abi_route_burnToDelinquentValidator *abi_route_reMintDeliquentCommit *abi_route_bid *abi_route_delegateStake *abi_route_snitch *abi_route_reStakeFromSnitch *abi_route_onOperatorExit *abi_route_declareRewards *abi_route_snitchCheck *abi_route_makeFlashLoanRequest *abi_route_getFLcounter

	// this contract does not implement the given ABI method for call NoOp
	err