{
  "name": "CaelusValidatorPool",
  "desc": "",
  "methods": [
    {
      "name": "createApplication",
      "desc": "******************\nPublic Methods    *\n******************",
      "args": [
        {
          "name": "creatingContract",
          "type": "uint64"
        },
        {
          "name": "operatorAddress",
          "type": "address"
        },
        {
          "name": "contractVersion",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "addToOperatorCommit",
      "desc": "Used by the node operator to add to his stake amount for the node",
      "args": [
        {
          "name": "commit",
          "type": "pay",
          "desc": "node operator stake commitment"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "removeFromOperatorCommit",
      "desc": "Used by the node operator to remove from his stake amount for the node",
      "args": [
        {
          "name": "claimRequest",
          "type": "uint64",
          "desc": "amount claimed by the node operator to be removed from the contract balance and subtracted from the operator_commit counter"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "performanceCheck",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "getToleratedBlockDelta",
      "args": [],
      "returns": {
        "type": "uint64"
      }
    },
    {
      "name": "reportRewards",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "bid",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "addStake",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "snitchBurn",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "snitch",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "getSnitched",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "clawbackStake",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "clawbackStakeToValidator",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "claimLeftAlgo",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "checkAlgodVersion",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "goOnline",
      "desc": "Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake",
      "args": [
        {
          "name": "feePayment",
          "type": "pay",
          "desc": "Payment transaction to the contract to cover costs for Eligibility fee; 0 for renewal."
        },
        {
          "name": "votePK",
          "type": "byte[]",
          "desc": "The vote public key"
        },
        {
          "name": "selectionPK",
          "type": "byte[]",
          "desc": "The selection public key"
        },
        {
          "name": "stateProofPK",
          "type": "byte[]",
          "desc": "the state proof public key"
        },
        {
          "name": "voteFirst",
          "type": "uint64",
          "desc": "Index of first valid block for the participation keys"
        },
        {
          "name": "voteLast",
          "type": "uint64",
          "desc": "Index of last valid block for for the participation keys"
        },
        {
          "name": "voteKeyDilution",
          "type": "uint64",
          "desc": "The vote key dilution value"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "goOffline",
      "desc": "Set the contract account to offline so that it doesn't participate in consensus anymore.\nif graceful then it only means that there was some migration or other operation [CASE 1]\nif used to force the account offline because of bad behavior, then set up a flag for penalties [CASE 2]",
      "args": [
        {
          "name": "offlineCase",
          "type": "uint64",
          "desc": ": graceful offline of the node by the node runner or the main Caelus contract\n                             1: node is misbehaving and needs to be set offline by the main Caelus contract"
        }
      ],
      "returns": {
        "type": "void"
      }
    }
  ]
}