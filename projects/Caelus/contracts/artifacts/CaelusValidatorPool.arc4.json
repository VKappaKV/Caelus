{
  "name": "CaelusValidatorPool",
  "desc": "",
  "methods": [
    {
      "name": "createApplication",
      "desc": "createApplication method called at creation, initializes some globalKey values",
      "args": [
        {
          "name": "creatingContract",
          "type": "uint64",
          "desc": "ApplicationID for the creator contract (CaelusAdminContract)"
        },
        {
          "name": "operatorAddress",
          "type": "address",
          "desc": "Address of the node operator used to sign online/offline txns and participate in auctions"
        },
        {
          "name": "contractVersion",
          "type": "uint64",
          "desc": "Approval Program version for the node contract, stored in the CaelusAdminContract"
        },
        {
          "name": "tokenId",
          "type": "uint64",
          "desc": "AssetID of the LST token"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "optIntoLST",
      "desc": "ARC4 PUBLIC METHODS",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "addToOperatorCommit",
      "desc": "followup operation called by the Caelus Admin to send the correct amount into the operator commit",
      "args": [
        {
          "name": "opStake",
          "type": "pay",
          "desc": "node operator stake commitment"
        }
      ],
      "returns": {
        "type": "void"
      },
      "events": [
        {
          "name": "operatorCommitUpdateEvent",
          "args": [
            {
              "name": "app",
              "type": "uint64"
            },
            {
              "name": "operator",
              "type": "address"
            },
            {
              "name": "amountAdded",
              "type": "uint64"
            },
            {
              "name": "amountRemoved",
              "type": "uint64"
            }
          ],
          "desc": ""
        }
      ]
    },
    {
      "name": "removeFromOperatorCommit",
      "desc": "Used by the node operator to remove from his stake amount for the node",
      "args": [
        {
          "name": "claimRequest",
          "type": "uint64",
          "desc": "amount claimed by the node operator to be removed from the operator_commit counter and moved into delegated stake"
        },
        {
          "name": "claimRequestLST",
          "type": "uint64",
          "desc": "amount of LST to be sent back to the node operator"
        }
      ],
      "returns": {
        "type": "void"
      },
      "events": [
        {
          "name": "operatorCommitUpdateEvent",
          "args": [
            {
              "name": "app",
              "type": "uint64"
            },
            {
              "name": "operator",
              "type": "address"
            },
            {
              "name": "amountAdded",
              "type": "uint64"
            },
            {
              "name": "amountRemoved",
              "type": "uint64"
            }
          ],
          "desc": ""
        }
      ]
    },
    {
      "name": "solveDelinquency",
      "desc": "Delinquent Validators need to propose a valid block to clear up their delinquency status.\n\n\nThis method should be called when the delinquency score is below the threshold and the operator has proposed a block.",
      "args": [
        {
          "name": "block",
          "type": "uint64",
          "desc": "block number of the block proposed by the node operator while the account was in delinquency"
        }
      ],
      "returns": {
        "type": "void"
      },
      "events": [
        {
          "name": "solvedDelinquencyEvent",
          "args": [
            {
              "name": "app",
              "type": "uint64"
            },
            {
              "name": "operator",
              "type": "address"
            },
            {
              "name": "stake",
              "type": "uint64"
            }
          ],
          "desc": ""
        }
      ]
    },
    {
      "name": "reportRewards",
      "desc": "Called by the node operator to report the rewards of a block proposed by the contract account.",
      "args": [
        {
          "name": "block",
          "type": "uint64",
          "desc": "Block number of the block proposed by the node operator"
        }
      ],
      "returns": {
        "type": "void"
      },
      "events": [
        {
          "name": "rewardsEvent",
          "args": [
            {
              "name": "app",
              "type": "uint64"
            },
            {
              "name": "block",
              "type": "uint64"
            },
            {
              "name": "payout",
              "type": "uint64"
            }
          ],
          "desc": ""
        }
      ]
    },
    {
      "name": "addStake",
      "desc": "FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO SEND THE DELEGATED STAKE TO THE NODE OPERATOR\n\n\nReceive delegated stake and update the delegation factors.",
      "args": [
        {
          "name": "txnWithStake",
          "type": "pay",
          "desc": "Payment transaction to the contract account with the delegated stake"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "burnStake",
      "desc": "FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO CLAWBACK THE DELEGATED STAKE ON BURN OPERATION",
      "args": [
        {
          "name": "amountRequested",
          "type": "uint64",
          "desc": "amount of Algo to be burned"
        },
        {
          "name": "receiverBurn",
          "type": "address",
          "desc": "address of the receiver of the burn transaction triggered on the Caelus Admin contract"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "snitchValidator",
      "desc": "Snitch another Validator Contract. A valid snitch will improve the performance counter.",
      "args": [
        {
          "name": "appToSnitch",
          "type": "uint64",
          "desc": "ApplicationID of the validator to be snitched"
        },
        {
          "name": "params",
          "type": "(bool,bool,bool,bool,uint64,bool,uint64)",
          "desc": "parameters to check for the validator (For example: performanceCheck, stakeAmountCheck, delinquentCheck, versionCheck)"
        }
      ],
      "returns": {
        "type": "void"
      },
      "events": [
        {
          "name": "snitchValidatorEvent",
          "args": [
            {
              "name": "request",
              "type": "(bool,bool,bool,bool,uint64,bool,uint64)"
            },
            {
              "name": "result",
              "type": "bool"
            }
          ],
          "desc": ""
        }
      ]
    },
    {
      "name": "getSnitched",
      "args": [
        {
          "name": "checks",
          "type": "(bool,bool,bool,bool,uint64,bool,uint64)"
        }
      ],
      "returns": {
        "type": "bool"
      }
    },
    {
      "name": "flashloan",
      "args": [
        {
          "name": "amount",
          "type": "uint64"
        },
        {
          "name": "receiver",
          "type": "address"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "checkBalance",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "goOnline",
      "desc": "Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake",
      "args": [
        {
          "name": "feePayment",
          "type": "pay",
          "desc": "Payment transaction to the contract to cover costs for Eligibility fee 0 for renewal."
        },
        {
          "name": "votePK",
          "type": "byte[]",
          "desc": "The vote public key"
        },
        {
          "name": "selectionPK",
          "type": "byte[]",
          "desc": "The selection public key"
        },
        {
          "name": "stateProofPK",
          "type": "byte[]",
          "desc": "the state proof public key"
        },
        {
          "name": "voteFirst",
          "type": "uint64",
          "desc": "Index of first valid block for the participation keys"
        },
        {
          "name": "voteLast",
          "type": "uint64",
          "desc": "Index of last valid block for for the participation keys"
        },
        {
          "name": "voteKeyDilution",
          "type": "uint64",
          "desc": "The vote key dilution value"
        }
      ],
      "returns": {
        "type": "void"
      },
      "events": [
        {
          "name": "goOnlineEvent",
          "args": [
            {
              "name": "app",
              "type": "uint64"
            },
            {
              "name": "operator",
              "type": "address"
            },
            {
              "name": "operatorStake",
              "type": "uint64"
            },
            {
              "name": "delegatedStake",
              "type": "uint64"
            }
          ],
          "desc": ""
        }
      ]
    },
    {
      "name": "goOffline",
      "desc": "Set the contract account to offline so that it doesn't participate in consensus anymore.\nNo force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status\nOnce the account is set offline the method ensures that it cannot be delegated to.",
      "args": [],
      "returns": {
        "type": "void"
      },
      "events": [
        {
          "name": "goOfflineEvent",
          "args": [
            {
              "name": "app",
              "type": "uint64"
            },
            {
              "name": "operator",
              "type": "address"
            },
            {
              "name": "operatorStake",
              "type": "uint64"
            },
            {
              "name": "delegatedStake",
              "type": "uint64"
            }
          ],
          "desc": ""
        }
      ]
    },
    {
      "name": "getEligibilityFlag",
      "readonly": true,
      "args": [],
      "returns": {
        "type": "bool"
      }
    },
    {
      "name": "migrateToPool",
      "desc": "Migrate the validator pool to a new pool. Useful to migrate this validator pool to a new version of the contract without losing the state.",
      "args": [
        {
          "name": "newPool",
          "type": "uint64",
          "desc": "ApplicationID of the new pool to migrate to"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "mergeStateOnMigration",
      "desc": "FOLLOWUP OPERATION Receiving call from the old pool to merge the state into the new pool.",
      "args": [
        {
          "name": "from",
          "type": "uint64"
        },
        {
          "name": "opCommit",
          "type": "uint64"
        },
        {
          "name": "delegatedAmount",
          "type": "uint64"
        },
        {
          "name": "performanceCounter",
          "type": "uint64"
        },
        {
          "name": "stakeTxn",
          "type": "pay"
        },
        {
          "name": "lstTxn",
          "type": "axfer"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "claimLeftAlgo",
      "desc": "Used by anyone to clear up remaining Algo outside of stake counters back to the Caelus Admin contract to be redistributed",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "deleteApplication",
      "desc": "Node operator can close the Validator and get back his stake. Delegated stake is put back into the Caelus Admin contract.",
      "args": [],
      "returns": {
        "type": "void"
      },
      "events": [
        {
          "name": "validatorCloseEvent",
          "args": [
            {
              "name": "app",
              "type": "uint64"
            },
            {
              "name": "operator",
              "type": "address"
            },
            {
              "name": "returnedStake",
              "type": "uint64"
            },
            {
              "name": "operatorStake",
              "type": "uint64"
            }
          ],
          "desc": ""
        }
      ]
    }
  ],
  "events": [
    {
      "name": "validatorCloseEvent",
      "args": [
        {
          "name": "app",
          "type": "uint64"
        },
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "returnedStake",
          "type": "uint64"
        },
        {
          "name": "operatorStake",
          "type": "uint64"
        }
      ],
      "desc": ""
    },
    {
      "name": "goOnlineEvent",
      "args": [
        {
          "name": "app",
          "type": "uint64"
        },
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "operatorStake",
          "type": "uint64"
        },
        {
          "name": "delegatedStake",
          "type": "uint64"
        }
      ],
      "desc": ""
    },
    {
      "name": "goOfflineEvent",
      "args": [
        {
          "name": "app",
          "type": "uint64"
        },
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "operatorStake",
          "type": "uint64"
        },
        {
          "name": "delegatedStake",
          "type": "uint64"
        }
      ],
      "desc": ""
    },
    {
      "name": "operatorCommitUpdateEvent",
      "args": [
        {
          "name": "app",
          "type": "uint64"
        },
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "amountAdded",
          "type": "uint64"
        },
        {
          "name": "amountRemoved",
          "type": "uint64"
        }
      ],
      "desc": ""
    },
    {
      "name": "delinquencyEvent",
      "args": [
        {
          "name": "app",
          "type": "uint64"
        },
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "stakeAtRisk",
          "type": "uint64"
        },
        {
          "name": "delinquencyScore",
          "type": "uint64"
        },
        {
          "name": "status",
          "type": "uint64"
        }
      ],
      "desc": ""
    },
    {
      "name": "solvedDelinquencyEvent",
      "args": [
        {
          "name": "app",
          "type": "uint64"
        },
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "stake",
          "type": "uint64"
        }
      ],
      "desc": ""
    },
    {
      "name": "rewardsEvent",
      "args": [
        {
          "name": "app",
          "type": "uint64"
        },
        {
          "name": "block",
          "type": "uint64"
        },
        {
          "name": "payout",
          "type": "uint64"
        }
      ],
      "desc": ""
    },
    {
      "name": "snitchValidatorEvent",
      "args": [
        {
          "name": "request",
          "type": "(bool,bool,bool,bool,uint64,bool,uint64)"
        },
        {
          "name": "result",
          "type": "bool"
        }
      ],
      "desc": ""
    }
  ]
}