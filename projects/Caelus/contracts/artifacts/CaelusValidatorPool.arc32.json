{
  "hints": {
    "createApplication(uint64,address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optIntoLST()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addToOperatorCommit(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeFromOperatorCommit(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "solveDelinquency(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reportRewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnStake(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSnitched((bool,bool,bool,uint64,bool,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "flashloan(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkBalance()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimLeftAlgo()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getEligibilityFlag()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "creatorContractAppID": {
          "type": "uint64",
          "key": "creator"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "contract_version"
        },
        "tokenId": {
          "type": "uint64",
          "key": "token_id"
        },
        "vestID": {
          "type": "uint64",
          "key": "vest_id"
        },
        "stVestID": {
          "type": "uint64",
          "key": "staked_vest_id"
        },
        "operatorAddress": {
          "type": "bytes",
          "key": "operator"
        },
        "operatorCommit": {
          "type": "uint64",
          "key": "operator_commit"
        },
        "delegatedStake": {
          "type": "uint64",
          "key": "delegated_stake"
        },
        "maxDelegatableStake": {
          "type": "uint64",
          "key": "max_delegatable_stake"
        },
        "status": {
          "type": "uint64",
          "key": "status"
        },
        "performanceCounter": {
          "type": "uint64",
          "key": "performance"
        },
        "saturationBUFFER": {
          "type": "uint64",
          "key": "saturation_buffer"
        },
        "lastRewardReport": {
          "type": "uint64",
          "key": "reward_report"
        },
        "lastDelinquencyReport": {
          "type": "uint64",
          "key": "delinquency_report"
        },
        "delinquencyScore": {
          "type": "uint64",
          "key": "delinquency_score"
        },
        "balanceCheckpoint": {
          "type": "uint64",
          "key": "balance_checkpoint"
        },
        "repaid": {
          "type": "bytes",
          "key": "repaid"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 15
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusValidatorPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "createApplication method called at creation, initializes some globalKey values",
        "args": [
          {
            "name": "creatingContract",
            "type": "uint64",
            "desc": "ApplicationID for the creator contract (CaelusAdminContract)"
          },
          {
            "name": "operatorAddress",
            "type": "address",
            "desc": "Address of the node operator used to sign online/offline txns and participate in auctions"
          },
          {
            "name": "contractVersion",
            "type": "uint64",
            "desc": "Approval Program version for the node contract, stored in the CaelusAdminContract\nTODO UPDATE"
          },
          {
            "name": "tokenId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optIntoLST",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addToOperatorCommit",
        "desc": "Used by the Caelus Admin to send the correct amount into the operator commit",
        "args": [
          {
            "name": "opStake",
            "type": "pay",
            "desc": "node operator stake commitment"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "operatorCommitUpdateEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "amountAdded",
                "type": "uint64"
              },
              {
                "name": "amountRemoved",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "removeFromOperatorCommit",
        "desc": "Used by the node operator to remove from his stake amount for the node",
        "args": [
          {
            "name": "claimRequest",
            "type": "uint64",
            "desc": "amount claimed by the node operator to be removed from the contract balance and subtracted from the operator_commit counter"
          },
          {
            "name": "claimRequestLST",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "operatorCommitUpdateEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "amountAdded",
                "type": "uint64"
              },
              {
                "name": "amountRemoved",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "solveDelinquency",
        "args": [
          {
            "name": "block",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "solvedDelinquencyEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "stake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "reportRewards",
        "args": [
          {
            "name": "block",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "rewardsEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "block",
                "type": "uint64"
              },
              {
                "name": "payout",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "addStake",
        "args": [
          {
            "name": "txnWithStake",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnStake",
        "args": [
          {
            "name": "amountRequested",
            "type": "uint64"
          },
          {
            "name": "receiverBurn",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchValidator",
        "args": [
          {
            "name": "appToSnitch",
            "type": "uint64"
          },
          {
            "name": "params",
            "type": "(bool,bool,bool,uint64,bool,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "snitchValidatorEvent",
            "args": [
              {
                "name": "request",
                "type": "(bool,bool,bool,uint64,bool,uint64)"
              },
              {
                "name": "result",
                "type": "bool"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getSnitched",
        "args": [
          {
            "name": "checks",
            "type": "(bool,bool,bool,uint64,bool,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "flashloan",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "receiver",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "checkBalance",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimLeftAlgo",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "validatorCloseEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "returnedStake",
                "type": "uint64"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "goOnline",
        "desc": "Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake",
        "args": [
          {
            "name": "feePayment",
            "type": "pay",
            "desc": "Payment transaction to the contract to cover costs for Eligibility fee 0 for renewal."
          },
          {
            "name": "votePK",
            "type": "byte[]",
            "desc": "The vote public key"
          },
          {
            "name": "selectionPK",
            "type": "byte[]",
            "desc": "The selection public key"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]",
            "desc": "the state proof public key"
          },
          {
            "name": "voteFirst",
            "type": "uint64",
            "desc": "Index of first valid block for the participation keys"
          },
          {
            "name": "voteLast",
            "type": "uint64",
            "desc": "Index of last valid block for for the participation keys"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64",
            "desc": "The vote key dilution value"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "goOnlineEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              },
              {
                "name": "delegatedStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "goOffline",
        "desc": "Set the contract account to offline so that it doesn't participate in consensus anymore.\nNo force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status\nOnce the account is set offline the method ensures that it cannot be delegated to.",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "goOfflineEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              },
              {
                "name": "delegatedStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getEligibilityFlag",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "bool"
        }
      }
    ],
    "events": [
      {
        "name": "validatorCloseEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "returnedStake",
            "type": "uint64"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "goOnlineEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          },
          {
            "name": "delegatedStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "goOfflineEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          },
          {
            "name": "delegatedStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "operatorCommitUpdateEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "amountAdded",
            "type": "uint64"
          },
          {
            "name": "amountRemoved",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "delinquencyEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "stakeAtRisk",
            "type": "uint64"
          },
          {
            "name": "delinquencyScore",
            "type": "uint64"
          },
          {
            "name": "status",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "solvedDelinquencyEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "stake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "rewardsEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "block",
            "type": "uint64"
          },
          {
            "name": "payout",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "snitchValidatorEvent",
        "args": [
          {
            "name": "request",
            "type": "(bool,bool,bool,uint64,bool,uint64)"
          },
          {
            "name": "result",
            "type": "bool"
          }
        ],
        "desc": ""
      }
    ]
  }
}