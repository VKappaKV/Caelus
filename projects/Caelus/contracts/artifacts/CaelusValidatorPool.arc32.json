{
  "hints": {
    "createApplication(uint64,address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optIntoLST()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "__addToOperatorCommit(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "__removeFromOperatorCommit(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "__updateYieldAccrued(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "solveDelinquency(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reportRewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "__addStake(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "__burnStake(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchValidator(uint64,(bool,bool,bool,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSnitched((bool,bool,bool,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "__flashloan(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkBalance()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getEligibilityFlag()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "migrateToPool(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "__mergeStateOnMigration(uint64,uint64,uint64,uint64,uint64,pay,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimLeftAlgo()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "creatorContractAppID": {
          "type": "uint64",
          "key": "creator"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "contract_version"
        },
        "tokenId": {
          "type": "uint64",
          "key": "token_id"
        },
        "boostTokenID": {
          "type": "uint64",
          "key": "boost_token_id"
        },
        "operatorAddress": {
          "type": "bytes",
          "key": "operator"
        },
        "operatorCommit": {
          "type": "uint64",
          "key": "operator_commit"
        },
        "operatorYieldAccrued": {
          "type": "uint64",
          "key": "operator_yield_accrued"
        },
        "delegatedStake": {
          "type": "uint64",
          "key": "delegated_stake"
        },
        "maxDelegatableStake": {
          "type": "uint64",
          "key": "max_delegatable_stake"
        },
        "status": {
          "type": "uint64",
          "key": "status"
        },
        "performanceCounter": {
          "type": "uint64",
          "key": "performance"
        },
        "saturationBuffer": {
          "type": "uint64",
          "key": "saturation_buffer"
        },
        "lastRewardReport": {
          "type": "uint64",
          "key": "reward_report"
        },
        "lastDelinquencyReport": {
          "type": "uint64",
          "key": "delinquency_report"
        },
        "delinquencyScore": {
          "type": "uint64",
          "key": "delinquency_score"
        },
        "balanceCheckpoint": {
          "type": "uint64",
          "key": "balance_checkpoint"
        },
        "repaid": {
          "type": "bytes",
          "key": "repaid"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 15
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCmludGNibG9jayAwIDEgMiA2IDUwMDAwMDAwMDAwMDAwIDQgMTAwMDAwMCA1IDMyIDkKYnl0ZWNibG9jayAweDZmNzA2NTcyNjE3NDZmNzI1ZjYzNmY2ZDZkNjk3NCAweDY0NjU2YzY1Njc2MTc0NjU2NDVmNzM3NDYxNmI2NSAweCAweDYzNzI2NTYxNzQ2ZjcyIDB4NmY3MDY1NzI2MTc0NmY3MiAweDczNzQ2MTc0NzU3MyAweDZkNjE3ODVmNjQ2NTZjNjU2NzYxNzQ2MTYyNmM2NTVmNzM3NDYxNmI2NSAweDY0NjU2YzY5NmU3MTc1NjU2ZTYzNzk1ZjczNjM2ZjcyNjUgMHg2ZjcwNjU3MjYxNzQ2ZjcyNWY3OTY5NjU2YzY0NWY2MTYzNjM3Mjc1NjU2NCAweDcwNjU3MjY2NmY3MjZkNjE2ZTYzNjUgMHg3NDZmNmI2NTZlNWY2OTY0IDB4NjQ2NTZjNjk2ZTcxNzU2NTZlNjM3OTVmNzI2NTcwNmY3Mjc0IDB4NzM2MTc0NzU3MjYxNzQ2OTZmNmU1ZjYyNzU2NjY2NjU3MiAweDcyNjU3NzYxNzI2NDVmNzI2NTcwNmY3Mjc0IDB4NjI2MTZjNjE2ZTYzNjU1ZjYzNjg2NTYzNmI3MDZmNjk2ZTc0IDB4NjI2ZjZmNzM3NDVmNzQ2ZjZiNjU2ZTVmNjk2NCAweDAwIDB4MDAwMDAwMDAwMDAwMDAwMCAweGNkNTNiYzliIDB4NjM2ZjZlNzQ3MjYxNjM3NDVmNzY2NTcyNzM2OTZmNmUgMHg4OGYzMzFmZSAweDE1MWY3Yzc1IDB4MmNjNTk2OTcgMHg0MTJiNzBhOAoKLy8gVGhpcyBURUFMIHdhcyBnZW5lcmF0ZWQgYnkgVEVBTFNjcmlwdCB2MC4xMDUuNQovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKaW50YyAzIC8vIDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY2FsbF9EZWxldGVBcHBsaWNhdGlvbiAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gdG9rZW5JZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gY29udHJhY3RWZXJzaW9uOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBvcGVyYXRvckFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnRjIDggLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMiAob3BlcmF0b3JBZGRyZXNzKSBmb3IgY3JlYXRlQXBwbGljYXRpb24gbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGNyZWF0aW5nQ29udHJhY3Q6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24odWludDY0LGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbihjcmVhdGluZ0NvbnRyYWN0OiBBcHBJRCwgb3BlcmF0b3JBZGRyZXNzOiBBZGRyZXNzLCBjb250cmFjdFZlcnNpb246IHVpbnQ2NCwgdG9rZW5JZDogQXNzZXRJRCk6IHZvaWQKLy8KLy8gY3JlYXRlQXBwbGljYXRpb24gbWV0aG9kIGNhbGxlZCBhdCBjcmVhdGlvbiwgaW5pdGlhbGl6ZXMgc29tZSBnbG9iYWxLZXkgdmFsdWVzCi8vIEBwYXJhbSB7QXBwSUR9IGNyZWF0aW5nQ29udHJhY3QgLSBBcHBsaWNhdGlvbklEIGZvciB0aGUgY3JlYXRvciBjb250cmFjdCAoQ2FlbHVzQWRtaW5Db250cmFjdCkKLy8gQHBhcmFtIHtBZGRyZXNzfSBvcGVyYXRvckFkZHJlc3MgLSBBZGRyZXNzIG9mIHRoZSBub2RlIG9wZXJhdG9yIHVzZWQgdG8gc2lnbiBvbmxpbmUvb2ZmbGluZSB0eG5zIGFuZCBwYXJ0aWNpcGF0ZSBpbiBhdWN0aW9ucwovLyBAcGFyYW0ge3VpbnQ2NH0gY29udHJhY3RWZXJzaW9uIC0gQXBwcm92YWwgUHJvZ3JhbSB2ZXJzaW9uIGZvciB0aGUgbm9kZSBjb250cmFjdCwgc3RvcmVkIGluIHRoZSBDYWVsdXNBZG1pbkNvbnRyYWN0Ci8vIEBwYXJhbSB7QXNzZXRJRH0gdG9rZW5JZCAtIEFzc2V0SUQgb2YgdGhlIExTVCB0b2tlbgpjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDQgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo5MQoJLy8gYXNzZXJ0KGNyZWF0aW5nQ29udHJhY3QgPT09IGdsb2JhbHMuY2FsbGVyQXBwbGljYXRpb25JRCkKCWZyYW1lX2RpZyAtMSAvLyBjcmVhdGluZ0NvbnRyYWN0OiBBcHBJRAoJZ2xvYmFsIENhbGxlckFwcGxpY2F0aW9uSUQKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6OTIKCS8vIHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUgPSBjcmVhdGluZ0NvbnRyYWN0CglieXRlYyAzIC8vICAiY3JlYXRvciIKCWZyYW1lX2RpZyAtMSAvLyBjcmVhdGluZ0NvbnRyYWN0OiBBcHBJRAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6OTMKCS8vIHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlID0gb3BlcmF0b3JBZGRyZXNzCglieXRlYyA0IC8vICAib3BlcmF0b3IiCglmcmFtZV9kaWcgLTIgLy8gb3BlcmF0b3JBZGRyZXNzOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo5NAoJLy8gdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RWZXJzaW9uLnZhbHVlID0gY29udHJhY3RWZXJzaW9uCglieXRlYyAxOSAvLyAgImNvbnRyYWN0X3ZlcnNpb24iCglmcmFtZV9kaWcgLTMgLy8gY29udHJhY3RWZXJzaW9uOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjk2CgkvLyB0aGlzLnRva2VuSWQudmFsdWUgPSB0b2tlbklkCglieXRlYyAxMCAvLyAgInRva2VuX2lkIgoJZnJhbWVfZGlnIC00IC8vIHRva2VuSWQ6IEFzc2V0SUQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjk5CgkvLyB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlID0gMAoJYnl0ZWMgMCAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMDAKCS8vIHRoaXMub3BlcmF0b3JZaWVsZEFjY3J1ZWQudmFsdWUgPSAwCglieXRlYyA4IC8vICAib3BlcmF0b3JfeWllbGRfYWNjcnVlZCIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMDEKCS8vIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgPSAwCglieXRlYyAxIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjEwMgoJLy8gdGhpcy5tYXhEZWxlZ2F0YWJsZVN0YWtlLnZhbHVlID0gMAoJYnl0ZWMgNiAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMDUKCS8vIHRoaXMuc3RhdHVzLnZhbHVlID0gTk9UX0RFTEVHQVRBQkxFX1NUQVRVUwoJYnl0ZWMgNSAvLyAgInN0YXR1cyIKCWludGMgMSAvLyAxCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMDYKCS8vIHRoaXMuc2F0dXJhdGlvbkJ1ZmZlci52YWx1ZSA9IDAKCWJ5dGVjIDEyIC8vICAic2F0dXJhdGlvbl9idWZmZXIiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTA3CgkvLyB0aGlzLnBlcmZvcm1hbmNlQ291bnRlci52YWx1ZSA9IDAKCWJ5dGVjIDkgLy8gICJwZXJmb3JtYW5jZSIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMDgKCS8vIHRoaXMuZGVsaW5xdWVuY3lTY29yZS52YWx1ZSA9IDAKCWJ5dGVjIDcgLy8gICJkZWxpbnF1ZW5jeV9zY29yZSIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMDkKCS8vIHRoaXMubGFzdFJld2FyZFJlcG9ydC52YWx1ZSA9IDAKCWJ5dGVjIDEzIC8vICAicmV3YXJkX3JlcG9ydCIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMTAKCS8vIHRoaXMubGFzdERlbGlucXVlbmN5UmVwb3J0LnZhbHVlID0gMAoJYnl0ZWMgMTEgLy8gICJkZWxpbnF1ZW5jeV9yZXBvcnQiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTEyCgkvLyB0aGlzLnJlcGFpZC52YWx1ZSA9IHRydWUKCXB1c2hieXRlcyAweDcyNjU3MDYxNjk2NCAvLyAicmVwYWlkIgoJaW50YyAxIC8vIDEKCWJ5dGVjIDE2IC8vIDB4MDAKCWludGMgMCAvLyAwCgl1bmNvdmVyIDIKCXNldGJpdAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gb3B0SW50b0xTVCgpdm9pZAoqYWJpX3JvdXRlX29wdEludG9MU1Q6CgkvLyBleGVjdXRlIG9wdEludG9MU1QoKXZvaWQKCWNhbGxzdWIgb3B0SW50b0xTVAoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gb3B0SW50b0xTVCgpOiB2b2lkCi8vCi8vIEFSQzQgUFVCTElDIE1FVEhPRFMKb3B0SW50b0xTVDoKCXByb3RvIDAgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAyIC8vIDB4CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjEyMAoJLy8gYXNzZXJ0KCF0aGlzLmFwcC5hZGRyZXNzLmlzT3B0ZWRJblRvQXNzZXQodGhpcy50b2tlbklkLnZhbHVlKSwgJ2FscmVhZHkgb3B0ZWQgaW4gdG9rZW5JZCcpCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYnl0ZWMgMTAgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0Cglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXN3YXAKCXBvcAoJIQoKCS8vIGFscmVhZHkgb3B0ZWQgaW4gdG9rZW5JZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjEyMQoJLy8gbHN0ID0gdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5nbG9iYWxTdGF0ZSgndG9rZW5faWQnKSBhcyBBc3NldElECglieXRlYyAzIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAxMCAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuZ2xvYmFsU3RhdGUoJ3Rva2VuX2lkJykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIGxzdDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjEyMgoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIHhmZXJBc3NldDogbHN0LAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IDAsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgNSAvLyAgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTIzCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjEyNAoJLy8geGZlckFzc2V0OiBsc3QKCWZyYW1lX2RpZyAwIC8vIGxzdDogdWludDY0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMjUKCS8vIGFzc2V0QW1vdW50OiAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gX19hZGRUb09wZXJhdG9yQ29tbWl0KHBheSl2b2lkCiphYmlfcm91dGVfX19hZGRUb09wZXJhdG9yQ29tbWl0OgoJLy8gb3BTdGFrZTogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAxIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMSAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKG9wU3Rha2UpIGZvciBfX2FkZFRvT3BlcmF0b3JDb21taXQgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBfX2FkZFRvT3BlcmF0b3JDb21taXQocGF5KXZvaWQKCWNhbGxzdWIgX19hZGRUb09wZXJhdG9yQ29tbWl0CglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBfX2FkZFRvT3BlcmF0b3JDb21taXQob3BTdGFrZTogUGF5VHhuKTogdm9pZAovLwovLyBmb2xsb3d1cCBvcGVyYXRpb24gY2FsbGVkIGJ5IHRoZSBWZXN0Z3VhcmQgQWRtaW4gdG8gc2VuZCB0aGUgY29ycmVjdCBhbW91bnQgaW50byB0aGUgb3BlcmF0b3IgY29tbWl0Ci8vCi8vIEBwYXJhbSB7UGF5VHhufSBvcFN0YWtlIC0gbm9kZSBvcGVyYXRvciBzdGFrZSBjb21taXRtZW50Cl9fYWRkVG9PcGVyYXRvckNvbW1pdDoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMzUKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLAoJLy8gICAgICAgJ29ubHkgVmVzdGd1YXJkIGFkbWluIGNhbiByb3V0ZSBvcGVyYXRvciBzdGFrZSB3aXRob3V0IExTVCcKCS8vICAgICApCgl0eG4gU2VuZGVyCglieXRlYyAzIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09CgoJLy8gb25seSBWZXN0Z3VhcmQgYWRtaW4gY2FuIHJvdXRlIG9wZXJhdG9yIHN0YWtlIHdpdGhvdXQgTFNUCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTM5CgkvLyBhc3NlcnQoCgkvLyAgICAgICB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlICsgb3BTdGFrZS5hbW91bnQgPD0gTUFYX1NUQUtFX1BFUl9BQ0NPVU5ULAoJLy8gICAgICAgJ09wZXJhdG9yIGNvbW1pdCBjYW5ub3QgZXhjZWVkIDUwTSBBbGdvJwoJLy8gICAgICkKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIG9wU3Rha2U6IFBheVR4bgoJZ3R4bnMgQW1vdW50CgkrCglpbnRjIDQgLy8gNTAwMDAwMDAwMDAwMDAKCTw9CgoJLy8gT3BlcmF0b3IgY29tbWl0IGNhbm5vdCBleGNlZWQgNTBNIEFsZ28KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxNDMKCS8vIHZlcmlmeVBheVR4bihvcFN0YWtlLCB7CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gb3BTdGFrZTogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJvcFN0YWtlIiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTQ2CgkvLyB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlICs9IG9wU3Rha2UuYW1vdW50CglieXRlYyAwIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBvcFN0YWtlOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJKwoJYnl0ZWMgMCAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gKmlmMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxNDcKCS8vIHRoaXMuc3RhdHVzLnZhbHVlID09PSBERUxJTlFVRU5DWV9TVEFUVVMKCWJ5dGVjIDUgLy8gICJzdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAyIC8vIDIKCT09CglieiAqaWYwX2VuZAoKCS8vICppZjBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjE0OAoJLy8gcmV0dXJuOwoJcmV0c3ViCgoqaWYwX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxNTAKCS8vIHRoaXMudXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMoKQoJY2FsbHN1YiB1cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxNTIKCS8vIHRoaXMub3BlcmF0b3JDb21taXRVcGRhdGVFdmVudC5sb2coewoJLy8gICAgICAgYXBwOiB0aGlzLmFwcCwKCS8vICAgICAgIG9wZXJhdG9yOiB0aGlzLm9wZXJhdG9yQWRkcmVzcy52YWx1ZSwKCS8vICAgICAgIGFtb3VudEFkZGVkOiBvcFN0YWtlLmFtb3VudCwKCS8vICAgICAgIGFtb3VudFJlbW92ZWQ6IDAsCgkvLyAgICAgfSkKCWJ5dGVjIDE4IC8vICBvcGVyYXRvckNvbW1pdFVwZGF0ZUV2ZW50KHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglpdG9iCglieXRlYyA0IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gb3BTdGFrZTogUGF5VHhuCglndHhucyBBbW91bnQKCWl0b2IKCWNvbmNhdAoJYnl0ZWMgMTcgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIF9fcmVtb3ZlRnJvbU9wZXJhdG9yQ29tbWl0KHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX19fcmVtb3ZlRnJvbU9wZXJhdG9yQ29tbWl0OgoJLy8gY2xhaW1SZXF1ZXN0TFNUOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBjbGFpbVJlcXVlc3Q6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgX19yZW1vdmVGcm9tT3BlcmF0b3JDb21taXQodWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIF9fcmVtb3ZlRnJvbU9wZXJhdG9yQ29tbWl0CglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBfX3JlbW92ZUZyb21PcGVyYXRvckNvbW1pdChjbGFpbVJlcXVlc3Q6IHVpbnQ2NCwgY2xhaW1SZXF1ZXN0TFNUOiB1aW50NjQpOiB2b2lkCi8vCi8vIFVzZWQgYnkgdGhlIG5vZGUgb3BlcmF0b3IgdG8gcmVtb3ZlIGZyb20gaGlzIHN0YWtlIGFtb3VudCBmb3IgdGhlIG5vZGUKLy8gQHBhcmFtIHt1aW50NjR9IGNsYWltUmVxdWVzdCAtIGFtb3VudCBjbGFpbWVkIGJ5IHRoZSBub2RlIG9wZXJhdG9yIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgb3BlcmF0b3JfY29tbWl0IGNvdW50ZXIgYW5kIG1vdmVkIGludG8gZGVsZWdhdGVkIHN0YWtlCi8vIEBwYXJhbSB7dWludDY0fSBjbGFpbVJlcXVlc3RMU1QgLSBhbW91bnQgb2YgTFNUIHRvIGJlIHNlbnQgYmFjayB0byB0aGUgbm9kZSBvcGVyYXRvcgpfX3JlbW92ZUZyb21PcGVyYXRvckNvbW1pdDoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxNjYKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcykKCXR4biBTZW5kZXIKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxNjcKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMuc3RhdHVzLnZhbHVlICE9PSBERUxJTlFVRU5DWV9TVEFUVVMsCgkvLyAgICAgICAnY2Fubm90IHdpdGhkcmF3IGZ1bmRzIGlmIHRoZSBhY2NvdW50IGlzIGZsYWdnZWQgYXMgZGVsaW5xdWVudCwgbXVzdCBzb2x2ZSBkZWxpbnF1ZW5jeSBmaXJzdCcKCS8vICAgICApCglieXRlYyA1IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMiAvLyAyCgkhPQoKCS8vIGNhbm5vdCB3aXRoZHJhdyBmdW5kcyBpZiB0aGUgYWNjb3VudCBpcyBmbGFnZ2VkIGFzIGRlbGlucXVlbnQsIG11c3Qgc29sdmUgZGVsaW5xdWVuY3kgZmlyc3QKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxNzEKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUgLSBjbGFpbVJlcXVlc3QgPiBnbG9iYWxzLnBheW91dHNNaW5CYWxhbmNlLAoJLy8gICAgICAgJ05vZGUgT3BlcmF0b3IgY2FuIHRha2UgaGlzIHN0YWtlIGJlbG93IDMwayBvbmx5IGlmIHRoZSBub2RlIGNvbnRyYWN0IHdpbGwgYmUgY2xvc2VkJwoJLy8gICAgICkKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGNsYWltUmVxdWVzdDogdWludDY0CgktCglnbG9iYWwgUGF5b3V0c01pbkJhbGFuY2UKCT4KCgkvLyBOb2RlIE9wZXJhdG9yIGNhbiB0YWtlIGhpcyBzdGFrZSBiZWxvdyAzMGsgb25seSBpZiB0aGUgbm9kZSBjb250cmFjdCB3aWxsIGJlIGNsb3NlZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjE3NQoJLy8gYXNzZXJ0KHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUgPiBjbGFpbVJlcXVlc3QsICdOb2RlIE9wZXJhdG9yIGNhbm5vdCBjbGFpbSBtb3JlIHRoYW4gaGUgaGFzJykKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGNsYWltUmVxdWVzdDogdWludDY0Cgk+CgoJLy8gTm9kZSBPcGVyYXRvciBjYW5ub3QgY2xhaW0gbW9yZSB0aGFuIGhlIGhhcwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjE3OAoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgeGZlckFzc2V0OiB0aGlzLnRva2VuSWQudmFsdWUsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLm9wZXJhdG9yQWRkcmVzcy52YWx1ZSwKCS8vICAgICAgIGFzc2V0QW1vdW50OiBjbGFpbVJlcXVlc3RMU1QsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgNSAvLyAgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTc5CgkvLyB4ZmVyQXNzZXQ6IHRoaXMudG9rZW5JZC52YWx1ZQoJYnl0ZWMgMTAgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxODAKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlCglieXRlYyA0IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjE4MQoJLy8gYXNzZXRBbW91bnQ6IGNsYWltUmVxdWVzdExTVAoJZnJhbWVfZGlnIC0yIC8vIGNsYWltUmVxdWVzdExTVDogdWludDY0CglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxODQKCS8vIHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUgLT0gY2xhaW1SZXF1ZXN0CglieXRlYyAwIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBjbGFpbVJlcXVlc3Q6IHVpbnQ2NAoJLQoJYnl0ZWMgMCAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjE4NQoJLy8gdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSArPSBjbGFpbVJlcXVlc3QKCWJ5dGVjIDEgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGNsYWltUmVxdWVzdDogdWludDY0CgkrCglieXRlYyAxIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTg2CgkvLyB0aGlzLnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCkKCWNhbGxzdWIgdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTg4CgkvLyB0aGlzLm9wZXJhdG9yQ29tbWl0VXBkYXRlRXZlbnQubG9nKHsKCS8vICAgICAgIGFwcDogdGhpcy5hcHAsCgkvLyAgICAgICBvcGVyYXRvcjogdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICBhbW91bnRBZGRlZDogMCwKCS8vICAgICAgIGFtb3VudFJlbW92ZWQ6IGNsYWltUmVxdWVzdCwKCS8vICAgICB9KQoJYnl0ZWMgMTggLy8gIG9wZXJhdG9yQ29tbWl0VXBkYXRlRXZlbnQodWludDY0LGFkZHJlc3MsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWJ5dGVjIDQgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgljb25jYXQKCWJ5dGVjIDE3IC8vIDB4MDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gY2xhaW1SZXF1ZXN0OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gX191cGRhdGVZaWVsZEFjY3J1ZWQocGF5KXZvaWQKKmFiaV9yb3V0ZV9fX3VwZGF0ZVlpZWxkQWNjcnVlZDoKCS8vIHlpZWxkQWNjcnVlZFR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAxIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMSAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKHlpZWxkQWNjcnVlZFR4bikgZm9yIF9fdXBkYXRlWWllbGRBY2NydWVkIG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgX191cGRhdGVZaWVsZEFjY3J1ZWQocGF5KXZvaWQKCWNhbGxzdWIgX191cGRhdGVZaWVsZEFjY3J1ZWQKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIF9fdXBkYXRlWWllbGRBY2NydWVkKHlpZWxkQWNjcnVlZFR4bjogUGF5VHhuKTogdm9pZApfX3VwZGF0ZVlpZWxkQWNjcnVlZDoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxOTcKCS8vIHZlcmlmeVBheVR4bih5aWVsZEFjY3J1ZWRUeG4sIHsKCS8vICAgICAgIHNlbmRlcjogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLAoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICBhbW91bnQ6IHsgbGVzc1RoYW5FcXVhbFRvOiB0aGlzLm9wZXJhdG9yWWllbGRBY2NydWVkLnZhbHVlIH0sCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyB5aWVsZEFjY3J1ZWRUeG46IFBheVR4bgoJZ3R4bnMgU2VuZGVyCglieXRlYyAzIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJ5aWVsZEFjY3J1ZWRUeG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHlpZWxkQWNjcnVlZFR4bjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJ5aWVsZEFjY3J1ZWRUeG4iLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyB5aWVsZEFjY3J1ZWRUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglieXRlYyA4IC8vICAib3BlcmF0b3JfeWllbGRfYWNjcnVlZCIKCWFwcF9nbG9iYWxfZ2V0Cgk8PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoieWllbGRBY2NydWVkVHhuIiwiZmllbGQiOiJhbW91bnQiLCJjb25kaXRpb24iOiJsZXNzVGhhbkVxdWFsVG8iLCJleHBlY3RlZCI6Ijw9dGhpcy5vcGVyYXRvcllpZWxkQWNjcnVlZC52YWx1ZSJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjAyCgkvLyB0aGlzLm9wZXJhdG9yWWllbGRBY2NydWVkLnZhbHVlIC09IHlpZWxkQWNjcnVlZFR4bi5hbW91bnQKCWJ5dGVjIDggLy8gICJvcGVyYXRvcl95aWVsZF9hY2NydWVkIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyB5aWVsZEFjY3J1ZWRUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CgktCglieXRlYyA4IC8vICAib3BlcmF0b3JfeWllbGRfYWNjcnVlZCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjIwMwoJLy8gdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSArPSB5aWVsZEFjY3J1ZWRUeG4uYW1vdW50CglieXRlYyAwIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyB5aWVsZEFjY3J1ZWRUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CgkrCglieXRlYyAwIC8vICAib3BlcmF0b3JfY29tbWl0IgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjA0CgkvLyB0aGlzLnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCkKCWNhbGxzdWIgdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjA1CgkvLyB0aGlzLm9wZXJhdG9yQ29tbWl0VXBkYXRlRXZlbnQubG9nKHsKCS8vICAgICAgIGFwcDogdGhpcy5hcHAsCgkvLyAgICAgICBvcGVyYXRvcjogdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICBhbW91bnRBZGRlZDogeWllbGRBY2NydWVkVHhuLmFtb3VudCwKCS8vICAgICAgIGFtb3VudFJlbW92ZWQ6IDAsCgkvLyAgICAgfSkKCWJ5dGVjIDE4IC8vICBvcGVyYXRvckNvbW1pdFVwZGF0ZUV2ZW50KHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglpdG9iCglieXRlYyA0IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8geWllbGRBY2NydWVkVHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaXRvYgoJY29uY2F0CglieXRlYyAxNyAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gc29sdmVEZWxpbnF1ZW5jeSh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3NvbHZlRGVsaW5xdWVuY3k6CgkvLyBibG9jazogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzb2x2ZURlbGlucXVlbmN5KHVpbnQ2NCl2b2lkCgljYWxsc3ViIHNvbHZlRGVsaW5xdWVuY3kKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIHNvbHZlRGVsaW5xdWVuY3koYmxvY2s6IHVpbnQ2NCk6IHZvaWQKLy8KLy8gRGVsaW5xdWVudCBWYWxpZGF0b3JzIG5lZWQgdG8gcHJvcG9zZSBhIHZhbGlkIGJsb2NrIHRvIGNsZWFyIHVwIHRoZWlyIGRlbGlucXVlbmN5IHN0YXR1cy4KLy8KLy8gVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSBkZWxpbnF1ZW5jeSBzY29yZSBpcyBiZWxvdyB0aGUgdGhyZXNob2xkIGFuZCB0aGUgb3BlcmF0b3IgaGFzIHByb3Bvc2VkIGEgYmxvY2suCi8vCi8vIEBwYXJhbSBibG9jayAtIGJsb2NrIG51bWJlciBvZiB0aGUgYmxvY2sgcHJvcG9zZWQgYnkgdGhlIG5vZGUgb3BlcmF0b3Igd2hpbGUgdGhlIGFjY291bnQgd2FzIGluIGRlbGlucXVlbmN5CnNvbHZlRGVsaW5xdWVuY3k6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjIxCgkvLyBhc3NlcnQodGhpcy5zdGF0dXMudmFsdWUgPT09IERFTElOUVVFTkNZX1NUQVRVUywgJ0FjY291bnQgaXMgbm90IGRlbGlucXVlbnQnKQoJYnl0ZWMgNSAvLyAgInN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDIgLy8gMgoJPT0KCgkvLyBBY2NvdW50IGlzIG5vdCBkZWxpbnF1ZW50Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjIyCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm9wZXJhdG9yQWRkcmVzcy52YWx1ZSwgJ09ubHkgdGhlIE5vZGUgT3BlcmF0b3IgY2FuIGNsZWFyIHVwIERlbGlucXVlbmN5JykKCXR4biBTZW5kZXIKCWJ5dGVjIDQgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIE9ubHkgdGhlIE5vZGUgT3BlcmF0b3IgY2FuIGNsZWFyIHVwIERlbGlucXVlbmN5Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjIzCgkvLyBhc3NlcnQoCgkvLyAgICAgICB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlID09PSAwLAoJLy8gICAgICAgJ0JlZm9yZSBjbGVhcmluZyB1cCBkZWxpbnF1ZW5jeSBhbGwgdGhlIGRlbGVnYXRlZCBzdGFrZSBtdXN0IGhhdmUgYmVlbiByZWRpc3RyaWJ1dGVkJwoJLy8gICAgICkKCWJ5dGVjIDEgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDAKCT09CgoJLy8gQmVmb3JlIGNsZWFyaW5nIHVwIGRlbGlucXVlbmN5IGFsbCB0aGUgZGVsZWdhdGVkIHN0YWtlIG11c3QgaGF2ZSBiZWVuIHJlZGlzdHJpYnV0ZWQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMjcKCS8vIGFzc2VydChibG9ja3NbYmxvY2tdLnByb3Bvc2VyID09PSB0aGlzLmFwcC5hZGRyZXNzLCAndGhlIHNvbHZpbmcgYmxvY2sgbXVzdCBiZSBwcm9wb3NlZCBieSB0aGlzIGFjY291bnQnKQoJZnJhbWVfZGlnIC0xIC8vIGJsb2NrOiB1aW50NjQKCWJsb2NrIEJsa1Byb3Bvc2VyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0aGUgc29sdmluZyBibG9jayBtdXN0IGJlIHByb3Bvc2VkIGJ5IHRoaXMgYWNjb3VudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjIyOAoJLy8gYXNzZXJ0KHRoaXMubGFzdERlbGlucXVlbmN5UmVwb3J0LnZhbHVlIDwgYmxvY2spCglieXRlYyAxMSAvLyAgImRlbGlucXVlbmN5X3JlcG9ydCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gYmxvY2s6IHVpbnQ2NAoJPAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjIyOQoJLy8gYXNzZXJ0KHRoaXMuZGVsaW5xdWVuY3lUaHJlc2hvbGRDaGVjaygpLCAnRGVsaW5xdWVuY3kgc2NvcmUgbXVzdCBiZSBiZWxvdyB0aHJlc2hvbGQnKQoJY2FsbHN1YiBkZWxpbnF1ZW5jeVRocmVzaG9sZENoZWNrCgoJLy8gRGVsaW5xdWVuY3kgc2NvcmUgbXVzdCBiZSBiZWxvdyB0aHJlc2hvbGQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMzAKCS8vIHRoaXMuc3RhdHVzLnZhbHVlID0gTkVVVFJBTF9TVEFUVVMKCWJ5dGVjIDUgLy8gICJzdGF0dXMiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjMxCgkvLyB0aGlzLnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCkKCWNhbGxzdWIgdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjMyCgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzQWRtaW4ucHJvdG90eXBlLl9fcmVNaW50RGVsaW5xdWVudENvbW1pdCwgdm9pZD4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZSwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFt0aGlzLmFwcF0sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4ZDdkYjI3NDMgLy8gbWV0aG9kICJfX3JlTWludERlbGlucXVlbnRDb21taXQodWludDY0KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMzMKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMzQKCS8vIG1ldGhvZEFyZ3M6IFt0aGlzLmFwcF0KCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMzcKCS8vIHRoaXMuc29sdmVkRGVsaW5xdWVuY3lFdmVudC5sb2coewoJLy8gICAgICAgYXBwOiB0aGlzLmFwcCwKCS8vICAgICAgIG9wZXJhdG9yOiB0aGlzLm9wZXJhdG9yQWRkcmVzcy52YWx1ZSwKCS8vICAgICAgIHN0YWtlOiB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlLAoJLy8gICAgIH0pCglwdXNoYnl0ZXMgMHhkYjNlMTZmYiAvLyBzb2x2ZWREZWxpbnF1ZW5jeUV2ZW50KHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWJ5dGVjIDQgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgljb25jYXQKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyByZXBvcnRSZXdhcmRzKHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfcmVwb3J0UmV3YXJkczoKCS8vIGJsb2NrOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHJlcG9ydFJld2FyZHModWludDY0KXZvaWQKCWNhbGxzdWIgcmVwb3J0UmV3YXJkcwoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gcmVwb3J0UmV3YXJkcyhibG9jazogdWludDY0KTogdm9pZAovLwovLyBDYWxsZWQgYnkgdGhlIG5vZGUgb3BlcmF0b3IgdG8gcmVwb3J0IHRoZSByZXdhcmRzIG9mIGEgYmxvY2sgcHJvcG9zZWQgYnkgdGhlIGNvbnRyYWN0IGFjY291bnQuCi8vCi8vIEBwYXJhbSB7dWludDY0fSBibG9jayAtIEJsb2NrIG51bWJlciBvZiB0aGUgYmxvY2sgcHJvcG9zZWQgYnkgdGhlIG5vZGUgb3BlcmF0b3IKcmVwb3J0UmV3YXJkczoKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAyIC8vIDB4CglkdXBuIDIKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjUxCgkvLyBhc3NlcnQoYmxvY2tzW2Jsb2NrXS5wcm9wb3NlciA9PT0gdGhpcy5hcHAuYWRkcmVzcykKCWZyYW1lX2RpZyAtMSAvLyBibG9jazogdWludDY0CglibG9jayBCbGtQcm9wb3NlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjU0CgkvLyBhc3NlcnQoYmxvY2sgPiB0aGlzLmxhc3RSZXdhcmRSZXBvcnQudmFsdWUpCglmcmFtZV9kaWcgLTEgLy8gYmxvY2s6IHVpbnQ2NAoJYnl0ZWMgMTMgLy8gICJyZXdhcmRfcmVwb3J0IgoJYXBwX2dsb2JhbF9nZXQKCT4KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyNTUKCS8vIGlzT3BlcmF0b3JSZXBvcnRUaW1lID0gZ2xvYmFscy5yb3VuZCAtIGJsb2NrIDwgT1BFUkFUT1JfUkVQT1JUX01BWF9USU1FCglnbG9iYWwgUm91bmQKCWZyYW1lX2RpZyAtMSAvLyBibG9jazogdWludDY0CgktCglwdXNoaW50IDcwMAoJPAoJZnJhbWVfYnVyeSAwIC8vIGlzT3BlcmF0b3JSZXBvcnRUaW1lOiBib29sCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjI1NgoJLy8gcmVwb3J0ID0gYmxvY2tzW2Jsb2NrXS5wcm9wb3NlclBheW91dAoJZnJhbWVfZGlnIC0xIC8vIGJsb2NrOiB1aW50NjQKCWJsb2NrIEJsa1Byb3Bvc2VyUGF5b3V0CglmcmFtZV9idXJ5IDEgLy8gcmVwb3J0OiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjU3CgkvLyB0YWtlRmVlID0gd2lkZVJhdGlvKFtyZXBvcnQsIFZBTElEQVRPUl9DT01NSVNTSU9OXSwgWzEwMF0pCglmcmFtZV9kaWcgMSAvLyByZXBvcnQ6IHVpbnQ2NAoJaW50YyAzIC8vIDYKCW11bHcKCWludGMgMCAvLyAwCglwdXNoaW50IDEwMAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCgkvLyB3aWRlUmF0aW8gZmFpbGVkCglhc3NlcnQKCWZyYW1lX2J1cnkgMiAvLyB0YWtlRmVlOiB1aW50NjQKCgkvLyAqaWYxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjI1OQoJLy8gdGhpcy5nZXRFeHBlY3RlZFByb3Bvc2Fsc0RlbHRhKCkgPiBnbG9iYWxzLnJvdW5kIC0gdGhpcy5sYXN0UmV3YXJkUmVwb3J0LnZhbHVlCgljYWxsc3ViIGdldEV4cGVjdGVkUHJvcG9zYWxzRGVsdGEKCWdsb2JhbCBSb3VuZAoJYnl0ZWMgMTMgLy8gICJyZXdhcmRfcmVwb3J0IgoJYXBwX2dsb2JhbF9nZXQKCS0KCT4KCWJ6ICppZjFfZW5kCgoJLy8gKmlmMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjYwCgkvLyB0aGlzLnBlcmZvcm1hbmNlQ291bnRlci52YWx1ZSArPSAxCglieXRlYyA5IC8vICAicGVyZm9ybWFuY2UiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAxIC8vIDEKCSsKCWJ5dGVjIDkgLy8gICJwZXJmb3JtYW5jZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoqaWYxX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyNjIKCS8vIHRoaXMuZml4RGVsaW5xdWVuY3lTY29yZSgpCgljYWxsc3ViIGZpeERlbGlucXVlbmN5U2NvcmUKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjYzCgkvLyB0aGlzLmxhc3RSZXdhcmRSZXBvcnQudmFsdWUgPSBibG9jawoJYnl0ZWMgMTMgLy8gICJyZXdhcmRfcmVwb3J0IgoJZnJhbWVfZGlnIC0xIC8vIGJsb2NrOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gKmlmMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyNjQKCS8vIGlzT3BlcmF0b3JSZXBvcnRUaW1lCglmcmFtZV9kaWcgMCAvLyBpc09wZXJhdG9yUmVwb3J0VGltZTogYm9vbAoJYnogKmlmMl9lbHNlCgoJLy8gKmlmMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjY1CgkvLyB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlICs9IHRha2VGZWUKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDIgLy8gdGFrZUZlZTogdWludDY0CgkrCglieXRlYyAwIC8vICAib3BlcmF0b3JfY29tbWl0IgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMl9lbmQKCippZjJfZWxzZToKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyNjcKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgYW1vdW50OiB0YWtlRmVlLAoJLy8gICAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjI2OAoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyNjkKCS8vIGFtb3VudDogdGFrZUZlZQoJZnJhbWVfZGlnIDIgLy8gdGFrZUZlZTogdWludDY0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCippZjJfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjI3MwoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c0FkbWluLnByb3RvdHlwZS5kZWNsYXJlUmV3YXJkcz4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZSwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgdGhpcy5hcHAsCgkvLyAgICAgICAgIGJsb2NrLAoJLy8gICAgICAgICB7CgkvLyAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcywKCS8vICAgICAgICAgICBhbW91bnQ6IHJlcG9ydCAtIHRha2VGZWUsCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICBdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyNzkKCS8vIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyODAKCS8vIGFtb3VudDogcmVwb3J0IC0gdGFrZUZlZQoJZnJhbWVfZGlnIDEgLy8gcmVwb3J0OiB1aW50NjQKCWZyYW1lX2RpZyAyIC8vIHRha2VGZWU6IHVpbnQ2NAoJLQoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCWl0eG5fbmV4dAoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHg4YWY0OTYzOSAvLyBtZXRob2QgImRlY2xhcmVSZXdhcmRzKHVpbnQ2NCx1aW50NjQscGF5KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyNzQKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyNzUKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgdGhpcy5hcHAsCgkvLyAgICAgICAgIGJsb2NrLAoJLy8gICAgICAgICB7CgkvLyAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcywKCS8vICAgICAgICAgICBhbW91bnQ6IHJlcG9ydCAtIHRha2VGZWUsCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICBdCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0xIC8vIGJsb2NrOiB1aW50NjQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyODUKCS8vIHRoaXMudXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMoKQoJY2FsbHN1YiB1cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyODcKCS8vIHRoaXMucmV3YXJkc0V2ZW50LmxvZyh7CgkvLyAgICAgICBhcHA6IHRoaXMuYXBwLAoJLy8gICAgICAgYmxvY2s6IGJsb2NrLAoJLy8gICAgICAgcGF5b3V0OiByZXBvcnQsCgkvLyAgICAgfSkKCXB1c2hieXRlcyAweGYyM2JkODgyIC8vIHJld2FyZHNFdmVudCh1aW50NjQsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWZyYW1lX2RpZyAtMSAvLyBibG9jazogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAxIC8vIHJlcG9ydDogdWludDY0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIF9fYWRkU3Rha2UocGF5KXZvaWQKKmFiaV9yb3V0ZV9fX2FkZFN0YWtlOgoJLy8gdHhuV2l0aFN0YWtlOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAodHhuV2l0aFN0YWtlKSBmb3IgX19hZGRTdGFrZSBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIF9fYWRkU3Rha2UocGF5KXZvaWQKCWNhbGxzdWIgX19hZGRTdGFrZQoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gX19hZGRTdGFrZSh0eG5XaXRoU3Rha2U6IFBheVR4bik6IHZvaWQKLy8KLy8gRk9MTE9XVVAgT1BFUkFUSU9OIENBTExFRCBCWSBUSEUgVmVzdGd1YXJkIEFETUlOIFRPIFNFTkQgVEhFIERFTEVHQVRFRCBTVEFLRSBUTyBUSEUgTk9ERSBPUEVSQVRPUgovLwovLyBSZWNlaXZlIGRlbGVnYXRlZCBzdGFrZSBhbmQgdXBkYXRlIHRoZSBkZWxlZ2F0aW9uIGZhY3RvcnMuCi8vCi8vIEBwYXJhbSB7UGF5VHhufSB0eG5XaXRoU3Rha2UgLSBQYXltZW50IHRyYW5zYWN0aW9uIHRvIHRoZSBjb250cmFjdCBhY2NvdW50IHdpdGggdGhlIGRlbGVnYXRlZCBzdGFrZQpfX2FkZFN0YWtlOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjMwMgoJLy8gdmVyaWZ5UGF5VHhuKHR4bldpdGhTdGFrZSwgewoJLy8gICAgICAgc2VuZGVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHR4bldpdGhTdGFrZTogUGF5VHhuCglndHhucyBTZW5kZXIKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InR4bldpdGhTdGFrZSIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gdHhuV2l0aFN0YWtlOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InR4bldpdGhTdGFrZSIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjMwNgoJLy8gdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSArPSB0eG5XaXRoU3Rha2UuYW1vdW50CglieXRlYyAxIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyB0eG5XaXRoU3Rha2U6IFBheVR4bgoJZ3R4bnMgQW1vdW50CgkrCglieXRlYyAxIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzA3CgkvLyB0aGlzLnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCkKCWNhbGxzdWIgdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMKCXJldHN1YgoKLy8gX19idXJuU3Rha2UodWludDY0LGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX19fYnVyblN0YWtlOgoJLy8gcmVjZWl2ZXJCdXJuOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50YyA4IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKHJlY2VpdmVyQnVybikgZm9yIF9fYnVyblN0YWtlIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBhbW91bnRSZXF1ZXN0ZWQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgX19idXJuU3Rha2UodWludDY0LGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBfX2J1cm5TdGFrZQoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gX19idXJuU3Rha2UoYW1vdW50UmVxdWVzdGVkOiB1aW50NjQsIHJlY2VpdmVyQnVybjogQWRkcmVzcyk6IHZvaWQKLy8KLy8gRk9MTE9XVVAgT1BFUkFUSU9OIENBTExFRCBCWSBUSEUgVmVzdGd1YXJkIEFETUlOIFRPIENMQVdCQUNLIFRIRSBERUxFR0FURUQgU1RBS0UgT04gQlVSTiBPUEVSQVRJT04KLy8KLy8gQHBhcmFtIHt1aW50NjR9IGFtb3VudFJlcXVlc3RlZCAtIGFtb3VudCBvZiBBbGdvIHRvIGJlIGJ1cm5lZAovLyBAcGFyYW0ge0FkZHJlc3N9IHJlY2VpdmVyQnVybiAtIGFkZHJlc3Mgb2YgdGhlIHJlY2VpdmVyIG9mIHRoZSBidXJuIHRyYW5zYWN0aW9uIHRyaWdnZXJlZCBvbiB0aGUgVmVzdGd1YXJkIEFkbWluIGNvbnRyYWN0Cl9fYnVyblN0YWtlOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjMxNwoJLy8gYXNzZXJ0KAoJLy8gICAgICAgdGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICAnT25seSB0aGUgVmVzdGd1YXJkIEFkbWluIGNvbnRyYWN0IGNhbiBjYWxsIHRoaXMgbWV0aG9kJwoJLy8gICAgICkKCXR4biBTZW5kZXIKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJPT0KCgkvLyBPbmx5IHRoZSBWZXN0Z3VhcmQgQWRtaW4gY29udHJhY3QgY2FuIGNhbGwgdGhpcyBtZXRob2QKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozMjEKCS8vIGFzc2VydChhbW91bnRSZXF1ZXN0ZWQgPD0gdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSwgJ0Nhbm5vdCB3aXRoZHJhdyBtb3JlIHN0YWtlIHRoYW4gdGhlIGRlbGVnYXRlZCBhbW91bnQnKQoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudFJlcXVlc3RlZDogdWludDY0CglieXRlYyAxIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCTw9CgoJLy8gQ2Fubm90IHdpdGhkcmF3IG1vcmUgc3Rha2UgdGhhbiB0aGUgZGVsZWdhdGVkIGFtb3VudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjMyMgoJLy8gYXNzZXJ0KAoJLy8gICAgICAgdGhpcy5hcHAuYWRkcmVzcy5iYWxhbmNlIC0gYW1vdW50UmVxdWVzdGVkID49IHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUsCgkvLyAgICAgICAnQ2Fubm90IGxlYXZlIHRoZSBPcHBlcmF0b3Igd2l0aCBsZXNzIHRoYW4gdGhlaXIgb3duIHN0YWtlJwoJLy8gICAgICkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCXBvcAoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudFJlcXVlc3RlZDogdWludDY0CgktCglieXRlYyAwIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCT49CgoJLy8gQ2Fubm90IGxlYXZlIHRoZSBPcHBlcmF0b3Igd2l0aCBsZXNzIHRoYW4gdGhlaXIgb3duIHN0YWtlCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzI2CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICBhbW91bnQ6IGFtb3VudFJlcXVlc3RlZCwKCS8vICAgICAgIHJlY2VpdmVyOiByZWNlaXZlckJ1cm4sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjMyNwoJLy8gYW1vdW50OiBhbW91bnRSZXF1ZXN0ZWQKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRSZXF1ZXN0ZWQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzI4CgkvLyByZWNlaXZlcjogcmVjZWl2ZXJCdXJuCglmcmFtZV9kaWcgLTIgLy8gcmVjZWl2ZXJCdXJuOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozMzAKCS8vIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgLT0gYW1vdW50UmVxdWVzdGVkCglieXRlYyAxIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRSZXF1ZXN0ZWQ6IHVpbnQ2NAoJLQoJYnl0ZWMgMSAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjMzMQoJLy8gdGhpcy51cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycygpCgljYWxsc3ViIHVwZGF0ZURlbGVnYXRpb25GYWN0b3JzCglyZXRzdWIKCi8vIHNuaXRjaFZhbGlkYXRvcih1aW50NjQsKGJvb2wsYm9vbCxib29sLHVpbnQ2NCkpdm9pZAoqYWJpX3JvdXRlX3NuaXRjaFZhbGlkYXRvcjoKCS8vIHBhcmFtczogKGJvb2wsYm9vbCxib29sLHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnRjIDkgLy8gOQoJPT0KCgkvLyBhcmd1bWVudCAwIChwYXJhbXMpIGZvciBzbml0Y2hWYWxpZGF0b3IgbXVzdCBiZSBhIChib29sLGJvb2wsYm9vbCx1aW50NjQpCglhc3NlcnQKCgkvLyBhcHBUb1NuaXRjaDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzbml0Y2hWYWxpZGF0b3IodWludDY0LChib29sLGJvb2wsYm9vbCx1aW50NjQpKXZvaWQKCWNhbGxzdWIgc25pdGNoVmFsaWRhdG9yCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBzbml0Y2hWYWxpZGF0b3IoYXBwVG9Tbml0Y2g6IEFwcElELCBwYXJhbXM6IFNuaXRjaEluZm8pOiB2b2lkCi8vCi8vIFNuaXRjaCBhbm90aGVyIFZhbGlkYXRvciBDb250cmFjdC4gQSB2YWxpZCBzbml0Y2ggd2lsbCBpbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBjb3VudGVyLgovLyBAcGFyYW0ge0FwcElEfSBhcHBUb1NuaXRjaCAtIEFwcGxpY2F0aW9uSUQgb2YgdGhlIHZhbGlkYXRvciB0byBiZSBzbml0Y2hlZAovLyBAcGFyYW0ge1NuaXRjaEluZm99IHBhcmFtcyAtIHBhcmFtZXRlcnMgdG8gY2hlY2sgZm9yIHRoZSB2YWxpZGF0b3IgKEZvciBleGFtcGxlOiBwZXJmb3JtYW5jZUNoZWNrLCBzdGFrZUFtb3VudENoZWNrLCBkZWxpbnF1ZW50Q2hlY2ssIHZlcnNpb25DaGVjaykKc25pdGNoVmFsaWRhdG9yOgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDIgLy8gMHgKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzQwCgkvLyBhc3NlcnQodGhpcy5zdGF0dXMudmFsdWUgIT09IERFTElOUVVFTkNZX1NUQVRVUywgJ0Nhbm5vdCBzbml0Y2ggaWYgdGhlIGFjY291bnQgaXMgZGVsaW5xdWVudCcpCglieXRlYyA1IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMiAvLyAyCgkhPQoKCS8vIENhbm5vdCBzbml0Y2ggaWYgdGhlIGFjY291bnQgaXMgZGVsaW5xdWVudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM0MQoJLy8gcmVzdWx0ID0gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLmdldFNuaXRjaGVkLCBib29sZWFuPih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiBhcHBUb1NuaXRjaCwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFtwYXJhbXNdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCWJ5dGVjIDIwIC8vICBtZXRob2QgImdldFNuaXRjaGVkKChib29sLGJvb2wsYm9vbCx1aW50NjQpKWJvb2wiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNDIKCS8vIGFwcGxpY2F0aW9uSUQ6IGFwcFRvU25pdGNoCglmcmFtZV9kaWcgLTEgLy8gYXBwVG9Tbml0Y2g6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzQzCgkvLyBtZXRob2RBcmdzOiBbcGFyYW1zXQoJZnJhbWVfZGlnIC0yIC8vIHBhcmFtczogU25pdGNoSW5mbwoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludGMgMSAvLyAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWludGMgMCAvLyAwCglnZXRiaXQKCWZyYW1lX2J1cnkgMCAvLyByZXN1bHQ6IGJvb2wKCgkvLyAqaWYzX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM0NQoJLy8gcmVzdWx0CglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IGJvb2wKCWJ6ICppZjNfZW5kCgoJLy8gKmlmM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzQ2CgkvLyB0aGlzLnBlcmZvcm1hbmNlQ291bnRlci52YWx1ZSArPSAxCglieXRlYyA5IC8vICAicGVyZm9ybWFuY2UiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAxIC8vIDEKCSsKCWJ5dGVjIDkgLy8gICJwZXJmb3JtYW5jZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoqaWYzX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNDgKCS8vIHRoaXMudXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMoKQoJY2FsbHN1YiB1cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNTAKCS8vIHRoaXMuc25pdGNoVmFsaWRhdG9yRXZlbnQubG9nKHsgcmVxdWVzdDogcGFyYW1zLCByZXN1bHQ6IHJlc3VsdCB9KQoJcHVzaGJ5dGVzIDB4MTk1YTk0NjYgLy8gc25pdGNoVmFsaWRhdG9yRXZlbnQoKGJvb2wsYm9vbCxib29sLHVpbnQ2NCksYm9vbCkKCWZyYW1lX2RpZyAtMiAvLyBwYXJhbXM6IFNuaXRjaEluZm8KCWJ5dGVjIDE2IC8vIDB4MDAKCWludGMgMCAvLyAwCglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IGJvb2wKCXNldGJpdAoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBnZXRTbml0Y2hlZCgoYm9vbCxib29sLGJvb2wsdWludDY0KSlib29sCiphYmlfcm91dGVfZ2V0U25pdGNoZWQ6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIxIC8vIDB4MTUxZjdjNzUKCgkvLyBjaGVja3M6IChib29sLGJvb2wsYm9vbCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyA5IC8vIDkKCT09CgoJLy8gYXJndW1lbnQgMCAoY2hlY2tzKSBmb3IgZ2V0U25pdGNoZWQgbXVzdCBiZSBhIChib29sLGJvb2wsYm9vbCx1aW50NjQpCglhc3NlcnQKCgkvLyBleGVjdXRlIGdldFNuaXRjaGVkKChib29sLGJvb2wsYm9vbCx1aW50NjQpKWJvb2wKCWNhbGxzdWIgZ2V0U25pdGNoZWQKCWJ5dGVjIDE2IC8vIDB4MDAKCWludGMgMCAvLyAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGdldFNuaXRjaGVkKGNoZWNrczogU25pdGNoSW5mbyk6IGJvb2xlYW4KZ2V0U25pdGNoZWQ6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMiAvLyAweAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNTQKCS8vIHJlc3VsdCA9IGZhbHNlCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAwIC8vIHJlc3VsdDogYm9vbAoKCS8vICppZjRfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzU2CgkvLyBjaGVja3MucGVyZm9ybWFuY2VDaGVjawoJZnJhbWVfZGlnIC0xIC8vIGNoZWNrczogU25pdGNoSW5mbwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAwCglnZXRiaXQKCWJ6ICppZjRfZW5kCgoJLy8gKmlmNF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzU3CgkvLyByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5wZXJmb3JtYW5jZUNoZWNrKCkKCWZyYW1lX2RpZyAwIC8vIHJlc3VsdDogYm9vbAoJZHVwCglibnogKnNraXBfb3IwCgljYWxsc3ViIHBlcmZvcm1hbmNlQ2hlY2sKCXx8Cgoqc2tpcF9vcjA6CglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiBib29sCgoqaWY0X2VuZDoKCS8vICppZjVfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzU5CgkvLyBjaGVja3Muc3Rha2VBbW91bnRDaGVjawoJZnJhbWVfZGlnIC0xIC8vIGNoZWNrczogU25pdGNoSW5mbwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMSAvLyAxCglnZXRiaXQKCWJ6ICppZjVfZW5kCgoJLy8gKmlmNV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzYwCgkvLyByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5jaGVja1N0YWtlT25Tbml0Y2goY2hlY2tzLnJlY2lwaWVudCkKCWZyYW1lX2RpZyAwIC8vIHJlc3VsdDogYm9vbAoJZHVwCglibnogKnNraXBfb3IxCglmcmFtZV9kaWcgLTEgLy8gY2hlY2tzOiBTbml0Y2hJbmZvCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAxIDgKCWJ0b2kKCWNhbGxzdWIgY2hlY2tTdGFrZU9uU25pdGNoCgl8fAoKKnNraXBfb3IxOgoJZnJhbWVfYnVyeSAwIC8vIHJlc3VsdDogYm9vbAoKKmlmNV9lbmQ6CgkvLyAqaWY2X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM2MgoJLy8gY2hlY2tzLnZlcnNpb25DaGVjawoJZnJhbWVfZGlnIC0xIC8vIGNoZWNrczogU25pdGNoSW5mbwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMiAvLyAyCglnZXRiaXQKCWJ6ICppZjZfZW5kCgoJLy8gKmlmNl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzYzCgkvLyByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5jaGVja1Byb2dyYW1WZXJzaW9uKCkKCWZyYW1lX2RpZyAwIC8vIHJlc3VsdDogYm9vbAoJZHVwCglibnogKnNraXBfb3IyCgljYWxsc3ViIGNoZWNrUHJvZ3JhbVZlcnNpb24KCXx8Cgoqc2tpcF9vcjI6CglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiBib29sCgoqaWY2X2VuZDoKCS8vICppZjdfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzY1CgkvLyB0aGlzLnN0YXR1cy52YWx1ZSAhPT0gREVMSU5RVUVOQ1lfU1RBVFVTCglieXRlYyA1IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMiAvLyAyCgkhPQoJYnogKmlmN19lbmQKCgkvLyAqaWY3X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNjUKCS8vIHRoaXMudXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMoKQoJY2FsbHN1YiB1cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycwoKKmlmN19lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzY2CgkvLyByZXR1cm4gcmVzdWx0OwoJZnJhbWVfZGlnIDAgLy8gcmVzdWx0OiBib29sCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCi8vIF9fZmxhc2hsb2FuKHVpbnQ2NCxhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9fX2ZsYXNobG9hbjoKCS8vIHJlY2VpdmVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50YyA4IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKHJlY2VpdmVyKSBmb3IgX19mbGFzaGxvYW4gbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBfX2ZsYXNobG9hbih1aW50NjQsYWRkcmVzcyl2b2lkCgljYWxsc3ViIF9fZmxhc2hsb2FuCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBfX2ZsYXNobG9hbihhbW91bnQ6IHVpbnQ2NCwgcmVjZWl2ZXI6IEFkZHJlc3MpOiB2b2lkCl9fZmxhc2hsb2FuOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM3MAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLCAnQ2FsbGVyIG11c3QgYmUgdGhlIFZlc3RndWFyZCBBZG1pbiBDb250cmFjdCcpCgl0eG4gU2VuZGVyCglieXRlYyAzIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09CgoJLy8gQ2FsbGVyIG11c3QgYmUgdGhlIFZlc3RndWFyZCBBZG1pbiBDb250cmFjdAoJYXNzZXJ0CgoJLy8gKmlmOF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNzIKCS8vICF0aGlzLmJhbGFuY2VDaGVja3BvaW50LmV4aXN0cwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZWMgMTQgLy8gICJiYWxhbmNlX2NoZWNrcG9pbnQiCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCgkhCglieiAqaWY4X2VuZAoKCS8vICppZjhfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM3MwoJLy8gdGhpcy5iYWxhbmNlQ2hlY2twb2ludC52YWx1ZSA9IHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZQoJYnl0ZWMgMTQgLy8gICJiYWxhbmNlX2NoZWNrcG9pbnQiCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWFwcF9nbG9iYWxfcHV0CgoqaWY4X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNzUKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgIHJlY2VpdmVyOiByZWNlaXZlciwKCS8vICAgICAgIGFtb3VudDogYW1vdW50LAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNzYKCS8vIHJlY2VpdmVyOiByZWNlaXZlcgoJZnJhbWVfZGlnIC0yIC8vIHJlY2VpdmVyOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM3NwoJLy8gYW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGNoZWNrQmFsYW5jZSgpdm9pZAoqYWJpX3JvdXRlX2NoZWNrQmFsYW5jZToKCS8vIGV4ZWN1dGUgY2hlY2tCYWxhbmNlKCl2b2lkCgljYWxsc3ViIGNoZWNrQmFsYW5jZQoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gY2hlY2tCYWxhbmNlKCk6IHZvaWQKY2hlY2tCYWxhbmNlOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM4NAoJLy8gYXNzZXJ0KHRoaXMuYmFsYW5jZUNoZWNrcG9pbnQudmFsdWUgPT09IHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZSkKCWJ5dGVjIDE0IC8vICAiYmFsYW5jZV9jaGVja3BvaW50IgoJYXBwX2dsb2JhbF9nZXQKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCXBvcAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozODUKCS8vIHRoaXMuYmFsYW5jZUNoZWNrcG9pbnQuZGVsZXRlKCkKCWJ5dGVjIDE0IC8vICAiYmFsYW5jZV9jaGVja3BvaW50IgoJYXBwX2dsb2JhbF9kZWwKCXJldHN1YgoKLy8gZ29PbmxpbmUocGF5LGJ5dGVbXSxieXRlW10sYnl0ZVtdLHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9nb09ubGluZToKCS8vIHZvdGVLZXlEaWx1dGlvbjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA2CglidG9pCgoJLy8gdm90ZUxhc3Q6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQoJYnRvaQoKCS8vIHZvdGVGaXJzdDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gc3RhdGVQcm9vZlBLOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWV4dHJhY3QgMiAwCgoJLy8gc2VsZWN0aW9uUEs6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyB2b3RlUEs6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBmZWVQYXltZW50OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgNiAoZmVlUGF5bWVudCkgZm9yIGdvT25saW5lIG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgZ29PbmxpbmUocGF5LGJ5dGVbXSxieXRlW10sYnl0ZVtdLHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgZ29PbmxpbmUKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGdvT25saW5lKGZlZVBheW1lbnQ6IFBheVR4biwgdm90ZVBLOiBieXRlcywgc2VsZWN0aW9uUEs6IGJ5dGVzLCBzdGF0ZVByb29mUEs6IGJ5dGVzLCB2b3RlRmlyc3Q6IHVpbnQ2NCwgdm90ZUxhc3Q6IHVpbnQ2NCwgdm90ZUtleURpbHV0aW9uOiB1aW50NjQpOiB2b2lkCi8vCi8vIFVzZWQgdG8gc2V0IHRoZSBDb250cmFjdCBhY2NvdW50IG9ubGluZSBmb3IgY29uc2Vuc3VzLiBBbHdheXMgY2hlY2sgdGhhdCBhY2NvdW50IGlzIG9ubGluZSBhbmQgaW5jZW50aXZlc0VsaWdpYmxlIGJlZm9yZSBoYXZpbmcgZGVsZWdhdGFibGUgc3Rha2UKLy8KLy8gQHBhcmFtIHtQYXlUeG59IGZlZVBheW1lbnQgLSBQYXltZW50IHRyYW5zYWN0aW9uIHRvIHRoZSBjb250cmFjdCB0byBjb3ZlciBjb3N0cyBmb3IgRWxpZ2liaWxpdHkgZmVlIDAgZm9yIHJlbmV3YWwuCi8vIEBwYXJhbSB7Ynl0ZXN9IHZvdGVQSyAtIFRoZSB2b3RlIHB1YmxpYyBrZXkKLy8gQHBhcmFtIHtieXRlc30gc2VsZWN0aW9uUEsgLSBUaGUgc2VsZWN0aW9uIHB1YmxpYyBrZXkKLy8gQHBhcmFtIHtieXRlc30gc3RhdGVQcm9vZlBLIC0gdGhlIHN0YXRlIHByb29mIHB1YmxpYyBrZXkKLy8gQHBhcmFtIHt1aW50NjR9IHZvdGVGaXJzdCAtIEluZGV4IG9mIGZpcnN0IHZhbGlkIGJsb2NrIGZvciB0aGUgcGFydGljaXBhdGlvbiBrZXlzCi8vIEBwYXJhbSB7dWludDY0fSB2b3RlTGFzdCAtIEluZGV4IG9mIGxhc3QgdmFsaWQgYmxvY2sgZm9yIGZvciB0aGUgcGFydGljaXBhdGlvbiBrZXlzCi8vIEBwYXJhbSB7dWludDY0fSB2b3RlS2V5RGlsdXRpb24gLSBUaGUgdm90ZSBrZXkgZGlsdXRpb24gdmFsdWUKLy8gQHRocm93cyB7RXJyb3J9IGlmIHRoZSBjYWxsZXIgaXNuJ3QgdGhlIG5vZGUgb3BlcmF0b3IKZ29PbmxpbmU6Cglwcm90byA3IDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMiAvLyAweAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0MTAKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICAnT25seSB0aGUgTm9kZSBPcGVyYXRvciBjYW4gcmVnaXN0ZXIgb25saW5lIHdpdGggcGFydGljaXBhdGlvbiBrZXknCgkvLyAgICAgKQoJdHhuIFNlbmRlcgoJYnl0ZWMgNCAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gT25seSB0aGUgTm9kZSBPcGVyYXRvciBjYW4gcmVnaXN0ZXIgb25saW5lIHdpdGggcGFydGljaXBhdGlvbiBrZXkKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0MTQKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZSA+PSBnbG9iYWxzLnBheW91dHNNaW5CYWxhbmNlICYmIHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZSA8PSBNQVhfU1RBS0VfUEVSX0FDQ09VTlQsCgkvLyAgICAgICAnQ29udHJhY3QgbmVlZHMgMzBrIEFsZ28gYXMgbWluaW11bSBiYWxhbmNlIGZvciByZXdhcmRzIGVsaWdpYmlsaXR5IGFuZCBhdCBtb3N0IDUwTSBBbGdvJwoJLy8gICAgICkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCXBvcAoJZ2xvYmFsIFBheW91dHNNaW5CYWxhbmNlCgk+PQoJZHVwCglieiAqc2tpcF9hbmQwCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWludGMgNCAvLyA1MDAwMDAwMDAwMDAwMAoJPD0KCSYmCgoqc2tpcF9hbmQwOgoJLy8gQ29udHJhY3QgbmVlZHMgMzBrIEFsZ28gYXMgbWluaW11bSBiYWxhbmNlIGZvciByZXdhcmRzIGVsaWdpYmlsaXR5IGFuZCBhdCBtb3N0IDUwTSBBbGdvCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDE4CgkvLyBhc3NlcnQoCgkvLyAgICAgICB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlID49IGdsb2JhbHMucGF5b3V0c01pbkJhbGFuY2UsCgkvLyAgICAgICAnT3BlcmF0b3IgY29tbWl0IG11c3QgYmUgaGlnaGVyIHRoYW4gbWluaW11bSBiYWxhbmNlIGZvciByZXdhcmRzIGVsaWdpYmlsaXR5JwoJLy8gICAgICkKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJZ2xvYmFsIFBheW91dHNNaW5CYWxhbmNlCgk+PQoKCS8vIE9wZXJhdG9yIGNvbW1pdCBtdXN0IGJlIGhpZ2hlciB0aGFuIG1pbmltdW0gYmFsYW5jZSBmb3IgcmV3YXJkcyBlbGlnaWJpbGl0eQoJYXNzZXJ0CgoJLy8gKmlmOV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0MjMKCS8vIHRoaXMuc3RhdHVzLnZhbHVlID09PSBERUxJTlFVRU5DWV9TVEFUVVMKCWJ5dGVjIDUgLy8gICJzdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAyIC8vIDIKCT09CglieiAqaWY5X2VuZAoKCS8vICppZjlfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQyNAoJLy8gYXNzZXJ0KAoJLy8gICAgICAgICB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlID09PSAwLAoJLy8gICAgICAgICAnaWYgRGVsaW5xdWVudCBnbyBPbmxpbmUgb25seSB3aXRoIHlvdXIgb3duIHN0YWtlIHRvIGNsZWFyIHVwIGRlbGlucXVlbmN5JwoJLy8gICAgICAgKQoJYnl0ZWMgMSAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDAgLy8gMAoJPT0KCgkvLyBpZiBEZWxpbnF1ZW50IGdvIE9ubGluZSBvbmx5IHdpdGggeW91ciBvd24gc3Rha2UgdG8gY2xlYXIgdXAgZGVsaW5xdWVuY3kKCWFzc2VydAoKKmlmOV9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDMwCgkvLyBleHRyYUZlZSA9IHRoaXMuZ2V0R29PbmxpbmVGZWVBbW91bnQoKQoJY2FsbHN1YiBnZXRHb09ubGluZUZlZUFtb3VudAoJZnJhbWVfYnVyeSAwIC8vIGV4dHJhRmVlOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDMyCgkvLyB2ZXJpZnlQYXlUeG4oZmVlUGF5bWVudCwgeyByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywgYW1vdW50OiBleHRyYUZlZSB9KQoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gZmVlUGF5bWVudDogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJmZWVQYXltZW50IiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gZmVlUGF5bWVudDogUGF5VHhuCglndHhucyBBbW91bnQKCWZyYW1lX2RpZyAwIC8vIGV4dHJhRmVlOiB1aW50NjQKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJmZWVQYXltZW50IiwiZmllbGQiOiJhbW91bnQiLCJleHBlY3RlZCI6ImV4dHJhRmVlIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0MzQKCS8vIHNlbmRPbmxpbmVLZXlSZWdpc3RyYXRpb24oewoJLy8gICAgICAgdm90ZVBLOiB2b3RlUEssCgkvLyAgICAgICBzZWxlY3Rpb25QSzogc2VsZWN0aW9uUEssCgkvLyAgICAgICBzdGF0ZVByb29mUEs6IHN0YXRlUHJvb2ZQSywKCS8vICAgICAgIHZvdGVGaXJzdDogdm90ZUZpcnN0LAoJLy8gICAgICAgdm90ZUxhc3Q6IHZvdGVMYXN0LAoJLy8gICAgICAgdm90ZUtleURpbHV0aW9uOiB2b3RlS2V5RGlsdXRpb24sCgkvLyAgICAgICBmZWU6IGV4dHJhRmVlLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDIgLy8gIGtleXJlZwoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0MzUKCS8vIHZvdGVQSzogdm90ZVBLCglmcmFtZV9kaWcgLTIgLy8gdm90ZVBLOiBieXRlcwoJaXR4bl9maWVsZCBWb3RlUEsKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDM2CgkvLyBzZWxlY3Rpb25QSzogc2VsZWN0aW9uUEsKCWZyYW1lX2RpZyAtMyAvLyBzZWxlY3Rpb25QSzogYnl0ZXMKCWl0eG5fZmllbGQgU2VsZWN0aW9uUEsKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDM3CgkvLyBzdGF0ZVByb29mUEs6IHN0YXRlUHJvb2ZQSwoJZnJhbWVfZGlnIC00IC8vIHN0YXRlUHJvb2ZQSzogYnl0ZXMKCWl0eG5fZmllbGQgU3RhdGVQcm9vZlBLCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQzOAoJLy8gdm90ZUZpcnN0OiB2b3RlRmlyc3QKCWZyYW1lX2RpZyAtNSAvLyB2b3RlRmlyc3Q6IHVpbnQ2NAoJaXR4bl9maWVsZCBWb3RlRmlyc3QKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDM5CgkvLyB2b3RlTGFzdDogdm90ZUxhc3QKCWZyYW1lX2RpZyAtNiAvLyB2b3RlTGFzdDogdWludDY0CglpdHhuX2ZpZWxkIFZvdGVMYXN0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQ0MAoJLy8gdm90ZUtleURpbHV0aW9uOiB2b3RlS2V5RGlsdXRpb24KCWZyYW1lX2RpZyAtNyAvLyB2b3RlS2V5RGlsdXRpb246IHVpbnQ2NAoJaXR4bl9maWVsZCBWb3RlS2V5RGlsdXRpb24KCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDQxCgkvLyBmZWU6IGV4dHJhRmVlCglmcmFtZV9kaWcgMCAvLyBleHRyYUZlZTogdWludDY0CglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyAqaWYxMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0NDQKCS8vIHRoaXMuc3RhdHVzLnZhbHVlICE9PSBERUxJTlFVRU5DWV9TVEFUVVMKCWJ5dGVjIDUgLy8gICJzdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAyIC8vIDIKCSE9CglieiAqaWYxMF9lbmQKCgkvLyAqaWYxMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDQ1CgkvLyB0aGlzLnN0YXR1cy52YWx1ZSA9IE5FVVRSQUxfU1RBVFVTCglieXRlYyA1IC8vICAic3RhdHVzIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoqaWYxMF9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDQ4CgkvLyB0aGlzLmdvT25saW5lRXZlbnQubG9nKHsKCS8vICAgICAgIGFwcDogdGhpcy5hcHAsCgkvLyAgICAgICBvcGVyYXRvcjogdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICBvcGVyYXRvclN0YWtlOiB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlLAoJLy8gICAgICAgZGVsZWdhdGVkU3Rha2U6IHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUsCgkvLyAgICAgfSkKCXB1c2hieXRlcyAweGM0YzBhOTcyIC8vIGdvT25saW5lRXZlbnQodWludDY0LGFkZHJlc3MsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWJ5dGVjIDQgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgljb25jYXQKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0CglieXRlYyAxIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gZ29PZmZsaW5lKCl2b2lkCiphYmlfcm91dGVfZ29PZmZsaW5lOgoJLy8gZXhlY3V0ZSBnb09mZmxpbmUoKXZvaWQKCWNhbGxzdWIgZ29PZmZsaW5lCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBnb09mZmxpbmUoKTogdm9pZAovLwovLyBTZXQgdGhlIGNvbnRyYWN0IGFjY291bnQgdG8gb2ZmbGluZSBzbyB0aGF0IGl0IGRvZXNuJ3QgcGFydGljaXBhdGUgaW4gY29uc2Vuc3VzIGFueW1vcmUuCi8vIE5vIGZvcmNlIG9mZmxpbmUgYnkgdGhlIHByb3RvY29sIChtaWdodCBiZSBjaGFuZ2VkIHRvIGEgdmVyeSBsb25nIHRpbWUgd2FpdCBpbiBjYXNlIHRoZSBub2RlIGlzbid0IHByb3Bvc2luZyBibG9ja3MgYXQgYWxsKS4gTG9va3VwIERlbGlucXVlbmN5IHN0YXR1cwovLyBPbmNlIHRoZSBhY2NvdW50IGlzIHNldCBvZmZsaW5lIHRoZSBtZXRob2QgZW5zdXJlcyB0aGF0IGl0IGNhbm5vdCBiZSBkZWxlZ2F0ZWQgdG8uCmdvT2ZmbGluZToKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0NjQKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUgfHwgdGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICAnT25seSBOb2RlIE9wZXJhdG9yIG9yIFZlc3RndWFyZCBBZG1pbiBjb250cmFjdCBjYW4gc2V0IHRoZSBjb250cmFjdCBvZmZsaW5lJwoJLy8gICAgICkKCXR4biBTZW5kZXIKCWJ5dGVjIDQgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJZHVwCglibnogKnNraXBfb3IzCgl0eG4gU2VuZGVyCglieXRlYyAzIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09Cgl8fAoKKnNraXBfb3IzOgoJLy8gT25seSBOb2RlIE9wZXJhdG9yIG9yIFZlc3RndWFyZCBBZG1pbiBjb250cmFjdCBjYW4gc2V0IHRoZSBjb250cmFjdCBvZmZsaW5lCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDY4CgkvLyBzZW5kT2ZmbGluZUtleVJlZ2lzdHJhdGlvbih7fSkKCWl0eG5fYmVnaW4KCWludGMgMiAvLyAga2V5cmVnCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0NjkKCS8vIHRoaXMuc3RhdHVzLnZhbHVlID0gTk9UX0RFTEVHQVRBQkxFX1NUQVRVUwoJYnl0ZWMgNSAvLyAgInN0YXR1cyIKCWludGMgMSAvLyAxCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0NzEKCS8vIHRoaXMuZ29PZmZsaW5lRXZlbnQubG9nKHsKCS8vICAgICAgIGFwcDogdGhpcy5hcHAsCgkvLyAgICAgICBvcGVyYXRvcjogdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICBvcGVyYXRvclN0YWtlOiB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlLAoJLy8gICAgICAgZGVsZWdhdGVkU3Rha2U6IHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUsCgkvLyAgICAgfSkKCXB1c2hieXRlcyAweDYxYTk5YzIzIC8vIGdvT2ZmbGluZUV2ZW50KHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglpdG9iCglieXRlYyA0IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJY29uY2F0CglieXRlYyAwIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWNvbmNhdAoJYnl0ZWMgMSAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGdldEVsaWdpYmlsaXR5RmxhZygpYm9vbAoqYWJpX3JvdXRlX2dldEVsaWdpYmlsaXR5RmxhZzoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMjEgLy8gMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZ2V0RWxpZ2liaWxpdHlGbGFnKClib29sCgljYWxsc3ViIGdldEVsaWdpYmlsaXR5RmxhZwoJYnl0ZWMgMTYgLy8gMHgwMAoJaW50YyAwIC8vIDAKCXVuY292ZXIgMgoJc2V0Yml0Cgljb25jYXQKCWxvZwoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gZ2V0RWxpZ2liaWxpdHlGbGFnKCk6IGJvb2xlYW4KZ2V0RWxpZ2liaWxpdHlGbGFnOgoJcHJvdG8gMCAxCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQ4MQoJLy8gcmV0dXJuIHRoaXMuYXBwLmFkZHJlc3MuaW5jZW50aXZlRWxpZ2libGU7CglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RJbmNlbnRpdmVFbGlnaWJsZQoJcG9wCglyZXRzdWIKCi8vIG1pZ3JhdGVUb1Bvb2wodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9taWdyYXRlVG9Qb29sOgoJLy8gbmV3UG9vbDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBtaWdyYXRlVG9Qb29sKHVpbnQ2NCl2b2lkCgljYWxsc3ViIG1pZ3JhdGVUb1Bvb2wKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIG1pZ3JhdGVUb1Bvb2wobmV3UG9vbDogQXBwSUQpOiB2b2lkCi8vCi8vIE1pZ3JhdGUgdGhlIHZhbGlkYXRvciBwb29sIHRvIGEgbmV3IHBvb2wuIFVzZWZ1bCB0byBtaWdyYXRlIHRoaXMgdmFsaWRhdG9yIHBvb2wgdG8gYSBuZXcgdmVyc2lvbiBvZiB0aGUgY29udHJhY3Qgd2l0aG91dCBsb3NpbmcgdGhlIHN0YXRlLgovLwovLyBAcGFyYW0ge0FwcElEfSBuZXdQb29sIC0gQXBwbGljYXRpb25JRCBvZiB0aGUgbmV3IHBvb2wgdG8gbWlncmF0ZSB0bwptaWdyYXRlVG9Qb29sOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQ5MAoJLy8gYXNzZXJ0KG5ld1Bvb2wuY3JlYXRvciA9PT0gdGhpcy5hcHAuY3JlYXRvciwgJ25ldyBwb29sIGhhcyB0byBiZSBhIHBvb2wgY3JlYXRlZCBieSB0aGUgYWRtaW4gY29udHJhY3QnKQoJZnJhbWVfZGlnIC0xIC8vIG5ld1Bvb2w6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCgkvLyBuZXcgcG9vbCBoYXMgdG8gYmUgYSBwb29sIGNyZWF0ZWQgYnkgdGhlIGFkbWluIGNvbnRyYWN0Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDkxCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm9wZXJhdG9yQWRkcmVzcy52YWx1ZSwgJ29ubHkgdGhlIG9wZXJhdG9yIGNhbiBtaWdyYXRlIHRvIGEgbmV3IHBvb2wnKQoJdHhuIFNlbmRlcgoJYnl0ZWMgNCAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gb25seSB0aGUgb3BlcmF0b3IgY2FuIG1pZ3JhdGUgdG8gYSBuZXcgcG9vbAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQ5MgoJLy8gYXNzZXJ0KHRoaXMuc3RhdHVzLnZhbHVlICE9PSBERUxJTlFVRU5DWV9TVEFUVVMsICdjYW5ub3QgbWlncmF0ZSBpZiBkZWxpbnF1ZW50JykKCWJ5dGVjIDUgLy8gICJzdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAyIC8vIDIKCSE9CgoJLy8gY2Fubm90IG1pZ3JhdGUgaWYgZGVsaW5xdWVudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQ5NAoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLl9fbWVyZ2VTdGF0ZU9uTWlncmF0aW9uPih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiBuZXdQb29sLAoJLy8gICAgICAgbWV0aG9kQXJnczogWwoJLy8gICAgICAgICB0aGlzLmFwcCwKCS8vICAgICAgICAgdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSwKCS8vICAgICAgICAgdGhpcy5vcGVyYXRvcllpZWxkQWNjcnVlZC52YWx1ZSwKCS8vICAgICAgICAgdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSwKCS8vICAgICAgICAgdGhpcy5wZXJmb3JtYW5jZUNvdW50ZXIudmFsdWUsCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICByZWNlaXZlcjogbmV3UG9vbC5hZGRyZXNzLAoJLy8gICAgICAgICAgIGFtb3VudDogdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSArIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgKyB0aGlzLm9wZXJhdG9yWWllbGRBY2NydWVkLnZhbHVlLAoJLy8gICAgICAgICB9LAoJLy8gICAgICAgICB7CgkvLyAgICAgICAgICAgeGZlckFzc2V0OiB0aGlzLnRva2VuSWQudmFsdWUsCgkvLyAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogbmV3UG9vbC5hZGRyZXNzLAoJLy8gICAgICAgICAgIGFzc2V0QW1vdW50OiB0aGlzLmFwcC5hZGRyZXNzLmFzc2V0QmFsYW5jZSh0aGlzLnRva2VuSWQudmFsdWUpLAoJLy8gICAgICAgICB9LAoJLy8gICAgICAgXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAxIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTAzCgkvLyByZWNlaXZlcjogbmV3UG9vbC5hZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gbmV3UG9vbDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1MDQKCS8vIGFtb3VudDogdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSArIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgKyB0aGlzLm9wZXJhdG9yWWllbGRBY2NydWVkLnZhbHVlCglieXRlYyAwIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDEgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJKwoJYnl0ZWMgOCAvLyAgIm9wZXJhdG9yX3lpZWxkX2FjY3J1ZWQiCglhcHBfZ2xvYmFsX2dldAoJKwoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCWl0eG5fbmV4dAoJaW50YyA1IC8vICBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1MDcKCS8vIHhmZXJBc3NldDogdGhpcy50b2tlbklkLnZhbHVlCglieXRlYyAxMCAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjUwOAoJLy8gYXNzZXRSZWNlaXZlcjogbmV3UG9vbC5hZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gbmV3UG9vbDogQXBwSUQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjUwOQoJLy8gYXNzZXRBbW91bnQ6IHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMudG9rZW5JZC52YWx1ZSkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglieXRlYyAxMCAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJYnl0ZWMgMjIgLy8gIG1ldGhvZCAiX19tZXJnZVN0YXRlT25NaWdyYXRpb24odWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCxwYXksYXhmZXIpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQ5NQoJLy8gYXBwbGljYXRpb25JRDogbmV3UG9vbAoJZnJhbWVfZGlnIC0xIC8vIG5ld1Bvb2w6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDk2CgkvLyBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHRoaXMuYXBwLAoJLy8gICAgICAgICB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlLAoJLy8gICAgICAgICB0aGlzLm9wZXJhdG9yWWllbGRBY2NydWVkLnZhbHVlLAoJLy8gICAgICAgICB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlLAoJLy8gICAgICAgICB0aGlzLnBlcmZvcm1hbmNlQ291bnRlci52YWx1ZSwKCS8vICAgICAgICAgewoJLy8gICAgICAgICAgIHJlY2VpdmVyOiBuZXdQb29sLmFkZHJlc3MsCgkvLyAgICAgICAgICAgYW1vdW50OiB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlICsgdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSArIHRoaXMub3BlcmF0b3JZaWVsZEFjY3J1ZWQudmFsdWUsCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICB4ZmVyQXNzZXQ6IHRoaXMudG9rZW5JZC52YWx1ZSwKCS8vICAgICAgICAgICBhc3NldFJlY2VpdmVyOiBuZXdQb29sLmFkZHJlc3MsCgkvLyAgICAgICAgICAgYXNzZXRBbW91bnQ6IHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMudG9rZW5JZC52YWx1ZSksCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICBdCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJYnl0ZWMgMCAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJYnl0ZWMgOCAvLyAgIm9wZXJhdG9yX3lpZWxkX2FjY3J1ZWQiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWJ5dGVjIDEgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWJ5dGVjIDkgLy8gICJwZXJmb3JtYW5jZSIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTE0CgkvLyB0aGlzLmdvT2ZmbGluZSgpCgljYWxsc3ViIGdvT2ZmbGluZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1MTUKCS8vIHRoaXMub3BlcmF0b3JZaWVsZEFjY3J1ZWQudmFsdWUgPSAwCglieXRlYyA4IC8vICAib3BlcmF0b3JfeWllbGRfYWNjcnVlZCIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1MTYKCS8vIHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUgPSAwCglieXRlYyAwIC8vICAib3BlcmF0b3JfY29tbWl0IgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjUxNwoJLy8gdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSA9IDAKCWJ5dGVjIDEgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTE4CgkvLyB0aGlzLnBlcmZvcm1hbmNlQ291bnRlci52YWx1ZSA9IDAKCWJ5dGVjIDkgLy8gICJwZXJmb3JtYW5jZSIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1MTkKCS8vIHRoaXMudXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMoKQoJY2FsbHN1YiB1cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycwoJcmV0c3ViCgovLyBfX21lcmdlU3RhdGVPbk1pZ3JhdGlvbih1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHBheSxheGZlcil2b2lkCiphYmlfcm91dGVfX19tZXJnZVN0YXRlT25NaWdyYXRpb246CgkvLyBsc3RUeG46IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50YyAxIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgNSAvLyAgYXhmZXIKCT09CgoJLy8gYXJndW1lbnQgMCAobHN0VHhuKSBmb3IgX19tZXJnZVN0YXRlT25NaWdyYXRpb24gbXVzdCBiZSBhIGF4ZmVyIHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBzdGFrZVR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAyIC8vIDIKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMSAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDEgKHN0YWtlVHhuKSBmb3IgX19tZXJnZVN0YXRlT25NaWdyYXRpb24gbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gcGVyZm9ybWFuY2VDb3VudGVyOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWJ0b2kKCgkvLyBkZWxlZ2F0ZWRBbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJYnRvaQoKCS8vIG9wWWllbGRBY2NydWVkOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBvcENvbW1pdDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gZnJvbTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBfX21lcmdlU3RhdGVPbk1pZ3JhdGlvbih1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHBheSxheGZlcil2b2lkCgljYWxsc3ViIF9fbWVyZ2VTdGF0ZU9uTWlncmF0aW9uCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBfX21lcmdlU3RhdGVPbk1pZ3JhdGlvbihmcm9tOiBBcHBJRCwgb3BDb21taXQ6IHVpbnQ2NCwgb3BZaWVsZEFjY3J1ZWQ6IHVpbnQ2NCwgZGVsZWdhdGVkQW1vdW50OiB1aW50NjQsIHBlcmZvcm1hbmNlQ291bnRlcjogdWludDY0LCBzdGFrZVR4bjogUGF5VHhuLCBsc3RUeG46IEFzc2V0VHJhbnNmZXJUeG4pOiB2b2lkCi8vCi8vIEZPTExPV1VQIE9QRVJBVElPTiBSZWNlaXZpbmcgY2FsbCBmcm9tIHRoZSBvbGQgcG9vbCB0byBtZXJnZSB0aGUgc3RhdGUgaW50byB0aGUgbmV3IHBvb2wuCl9fbWVyZ2VTdGF0ZU9uTWlncmF0aW9uOgoJcHJvdG8gNyAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDIgLy8gMHgKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTM0CgkvLyBmcm9tT3AgPSBmcm9tLmdsb2JhbFN0YXRlKCdvcGVyYXRvcicpIGFzIEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBcHBJRAoJYnl0ZWMgNCAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGZyb20uZ2xvYmFsU3RhdGUoJ29wZXJhdG9yJykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIGZyb21PcDogYWRkcmVzcwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1MzUKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gZnJvbS5hZGRyZXNzICYmIGZyb21PcCA9PT0gdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICAnb25seSB0aGUgb3BlcmF0b3IgY2FuIGluaXRpYXRlIG1pZ3JhdGlvbiBtZXJnZSB3aXRoIHByb3BlciBtZXRob2QnCgkvLyAgICAgKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGZyb206IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09CglkdXAKCWJ6ICpza2lwX2FuZDEKCWZyYW1lX2RpZyAwIC8vIGZyb21PcDogYWRkcmVzcwoJYnl0ZWMgNCAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCT09CgkmJgoKKnNraXBfYW5kMToKCS8vIG9ubHkgdGhlIG9wZXJhdG9yIGNhbiBpbml0aWF0ZSBtaWdyYXRpb24gbWVyZ2Ugd2l0aCBwcm9wZXIgbWV0aG9kCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTM5CgkvLyB2ZXJpZnlQYXlUeG4oc3Rha2VUeG4sIHsKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiBvcENvbW1pdCArIGRlbGVnYXRlZEFtb3VudCArIG9wWWllbGRBY2NydWVkLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtNiAvLyBzdGFrZVR4bjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJzdGFrZVR4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC02IC8vIHN0YWtlVHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZnJhbWVfZGlnIC0yIC8vIG9wQ29tbWl0OiB1aW50NjQKCWZyYW1lX2RpZyAtNCAvLyBkZWxlZ2F0ZWRBbW91bnQ6IHVpbnQ2NAoJKwoJZnJhbWVfZGlnIC0zIC8vIG9wWWllbGRBY2NydWVkOiB1aW50NjQKCSsKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJzdGFrZVR4biIsImZpZWxkIjoiYW1vdW50IiwiZXhwZWN0ZWQiOiJvcENvbW1pdCArIGRlbGVnYXRlZEFtb3VudCArIG9wWWllbGRBY2NydWVkIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NDMKCS8vIHZlcmlmeUFzc2V0VHJhbnNmZXJUeG4obHN0VHhuLCB7CgkvLyAgICAgICB4ZmVyQXNzZXQ6IHRoaXMudG9rZW5JZC52YWx1ZSwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSB4ZmVyQXNzZXQKCWZyYW1lX2RpZyAtNyAvLyBsc3RUeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFhmZXJBc3NldAoJYnl0ZWMgMTAgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibHN0VHhuIiwiZmllbGQiOiJ4ZmVyQXNzZXQiLCJleHBlY3RlZCI6InRoaXMudG9rZW5JZC52YWx1ZSJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC03IC8vIGxzdFR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJsc3RUeG4iLCJmaWVsZCI6ImFzc2V0UmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU0OAoJLy8gdGhpcy5wZXJmb3JtYW5jZUNvdW50ZXIudmFsdWUgKz0gcGVyZm9ybWFuY2VDb3VudGVyCglieXRlYyA5IC8vICAicGVyZm9ybWFuY2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC01IC8vIHBlcmZvcm1hbmNlQ291bnRlcjogdWludDY0CgkrCglieXRlYyA5IC8vICAicGVyZm9ybWFuY2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NDkKCS8vIHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUgKz0gb3BDb21taXQKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0yIC8vIG9wQ29tbWl0OiB1aW50NjQKCSsKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NTAKCS8vIHRoaXMub3BlcmF0b3JZaWVsZEFjY3J1ZWQudmFsdWUgKz0gb3BZaWVsZEFjY3J1ZWQKCWJ5dGVjIDggLy8gICJvcGVyYXRvcl95aWVsZF9hY2NydWVkIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMyAvLyBvcFlpZWxkQWNjcnVlZDogdWludDY0CgkrCglieXRlYyA4IC8vICAib3BlcmF0b3JfeWllbGRfYWNjcnVlZCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU1MQoJLy8gdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSArPSBkZWxlZ2F0ZWRBbW91bnQKCWJ5dGVjIDEgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC00IC8vIGRlbGVnYXRlZEFtb3VudDogdWludDY0CgkrCglieXRlYyAxIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTUzCgkvLyB0aGlzLnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCkKCWNhbGxzdWIgdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMKCXJldHN1YgoKLy8gY2xhaW1MZWZ0QWxnbygpdm9pZAoqYWJpX3JvdXRlX2NsYWltTGVmdEFsZ286CgkvLyBleGVjdXRlIGNsYWltTGVmdEFsZ28oKXZvaWQKCWNhbGxzdWIgY2xhaW1MZWZ0QWxnbwoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gY2xhaW1MZWZ0QWxnbygpOiB2b2lkCi8vCi8vIFVzZWQgYnkgYW55b25lIHRvIGNsZWFyIHVwIHJlbWFpbmluZyBBbGdvIG91dHNpZGUgb2Ygc3Rha2UgY291bnRlcnMgYmFjayB0byB0aGUgVmVzdGd1YXJkIEFkbWluIGNvbnRyYWN0IHRvIGJlIHJlZGlzdHJpYnV0ZWQKY2xhaW1MZWZ0QWxnbzoKCXByb3RvIDAgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAyIC8vIDB4CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU2MAoJLy8gZHVzdCA9CgkvLyAgICAgICB0aGlzLmFwcC5hZGRyZXNzLmJhbGFuY2UgLQoJLy8gICAgICAgdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSAtCgkvLyAgICAgICB0aGlzLm9wZXJhdG9yWWllbGRBY2NydWVkLnZhbHVlIC0KCS8vICAgICAgIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgLQoJLy8gICAgICAgdGhpcy5hcHAuYWRkcmVzcy5taW5CYWxhbmNlCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJLQoJYnl0ZWMgOCAvLyAgIm9wZXJhdG9yX3lpZWxkX2FjY3J1ZWQiCglhcHBfZ2xvYmFsX2dldAoJLQoJYnl0ZWMgMSAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CgktCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RNaW5CYWxhbmNlCglwb3AKCS0KCWZyYW1lX2J1cnkgMCAvLyBkdXN0OiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTY2CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiBkdXN0LAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NjcKCS8vIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NjgKCS8vIGFtb3VudDogZHVzdAoJZnJhbWVfZGlnIDAgLy8gZHVzdDogdWludDY0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gZGVsZXRlQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9kZWxldGVBcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgZGVsZXRlQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgZGVsZXRlQXBwbGljYXRpb24KCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGRlbGV0ZUFwcGxpY2F0aW9uKCk6IHZvaWQKLy8KLy8gTm9kZSBvcGVyYXRvciBjYW4gY2xvc2UgdGhlIFZhbGlkYXRvciBhbmQgZ2V0IGJhY2sgaGlzIHN0YWtlLiBEZWxlZ2F0ZWQgc3Rha2UgaXMgcHV0IGJhY2sgaW50byB0aGUgVmVzdGd1YXJkIEFkbWluIGNvbnRyYWN0LgpkZWxldGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NzYKCS8vIGFzc2VydCh0aGlzLnN0YXR1cy52YWx1ZSAhPT0gREVMSU5RVUVOQ1lfU1RBVFVTLCAnQWNjb3VudCBpcyBkZWxpbnF1ZW50LiBTb2x2ZSBEZWxpbnF1ZW5jeSBzdGF0ZSBiZWZvcmUgY2xvc2luZycpCglieXRlYyA1IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMiAvLyAyCgkhPQoKCS8vIEFjY291bnQgaXMgZGVsaW5xdWVudC4gU29sdmUgRGVsaW5xdWVuY3kgc3RhdGUgYmVmb3JlIGNsb3NpbmcKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NzcKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlLCAnT25seSB0aGUgbm9kZSBvcGVyYXRvciBjYW4gY2xvc2UgdGhlIG5vZGUnKQoJdHhuIFNlbmRlcgoJYnl0ZWMgNCAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gT25seSB0aGUgbm9kZSBvcGVyYXRvciBjYW4gY2xvc2UgdGhlIG5vZGUKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NzgKCS8vIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNBZG1pbi5wcm90b3R5cGUuX19jbGVhbnNlT25WYWxpZGF0b3JEZWxldGlvbj4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZSwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFt0aGlzLmFwcF0sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4MGMxZDBjMjggLy8gbWV0aG9kICJfX2NsZWFuc2VPblZhbGlkYXRvckRlbGV0aW9uKHVpbnQ2NCl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTc5CgkvLyBhcHBsaWNhdGlvbklEOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlCglieXRlYyAzIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTgwCgkvLyBtZXRob2RBcmdzOiBbdGhpcy5hcHBdCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTgyCgkvLyB0aGlzLnB1cmdlKCkKCWNhbGxzdWIgcHVyZ2UKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTgzCgkvLyB0aGlzLnZhbGlkYXRvckNsb3NlRXZlbnQubG9nKHsKCS8vICAgICAgIGFwcDogdGhpcy5hcHAsCgkvLyAgICAgICBvcGVyYXRvcjogdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICByZXR1cm5lZFN0YWtlOiB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlLAoJLy8gICAgICAgb3BlcmF0b3JTdGFrZTogdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSwKCS8vICAgICB9KQoJcHVzaGJ5dGVzIDB4YWJhNjgyZGUgLy8gdmFsaWRhdG9yQ2xvc2VFdmVudCh1aW50NjQsYWRkcmVzcyx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJaXRvYgoJYnl0ZWMgNCAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWNvbmNhdAoJYnl0ZWMgMSAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCgljb25jYXQKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBwZXJmb3JtYW5jZUNoZWNrKCk6IGJvb2xlYW4KLy8KLy8gU1VCUk9VVElORVMKcGVyZm9ybWFuY2VDaGVjazoKCXByb3RvIDAgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAyIC8vIDB4CglkdXBuIDIKCgkvLyAqaWYxMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1OTcKCS8vICF0aGlzLmFwcC5hZGRyZXNzLmluY2VudGl2ZUVsaWdpYmxlCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RJbmNlbnRpdmVFbGlnaWJsZQoJcG9wCgkhCglieiAqaWYxMV9lbmQKCgkvLyAqaWYxMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTk4CgkvLyB0aGlzLnNldERlbGlucXVlbmN5KCkKCWNhbGxzdWIgc2V0RGVsaW5xdWVuY3kKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjAwCgkvLyB0aGlzLmRlbGlucXVlbmN5RXZlbnQubG9nKHsKCS8vICAgICAgICAgYXBwOiB0aGlzLmFwcCwKCS8vICAgICAgICAgb3BlcmF0b3I6IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlLAoJLy8gICAgICAgICBzdGFrZUF0UmlzazogdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSwKCS8vICAgICAgICAgZGVsaW5xdWVuY3lTY29yZTogdGhpcy5kZWxpbnF1ZW5jeVNjb3JlLnZhbHVlLAoJLy8gICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLnZhbHVlLAoJLy8gICAgICAgfSkKCWJ5dGVjIDIzIC8vICBkZWxpbnF1ZW5jeUV2ZW50KHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJaXRvYgoJYnl0ZWMgNCAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWNvbmNhdAoJYnl0ZWMgMSAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCgljb25jYXQKCWJ5dGVjIDcgLy8gICJkZWxpbnF1ZW5jeV9zY29yZSIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCgljb25jYXQKCWJ5dGVjIDUgLy8gICJzdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MDgKCS8vIHJldHVybiB0cnVlOwoJaW50YyAxIC8vIDEKCWIgKnBlcmZvcm1hbmNlQ2hlY2sqcmV0dXJuCgoqaWYxMV9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjExCgkvLyBhc3NlcnQoCgkvLyAgICAgICBnbG9iYWxzLnJvdW5kIC0gdGhpcy5sYXN0RGVsaW5xdWVuY3lSZXBvcnQudmFsdWUgPiB0aGlzLmdldEV4cGVjdGVkUHJvcG9zYWxzRGVsdGEoKSAvIDIsCgkvLyAgICAgICAnV2FpdCBhdCBsZWFzdCBoYWxmIHRoZSBwcm9wb3NhbCBleHBlY3RlZCB0aW1lIGJldHdlZW4gUGVyZm9ybWFuY2UgY2hlY2tzJwoJLy8gICAgICkKCWdsb2JhbCBSb3VuZAoJYnl0ZWMgMTEgLy8gICJkZWxpbnF1ZW5jeV9yZXBvcnQiCglhcHBfZ2xvYmFsX2dldAoJLQoJY2FsbHN1YiBnZXRFeHBlY3RlZFByb3Bvc2Fsc0RlbHRhCglpbnRjIDIgLy8gMgoJLwoJPgoKCS8vIFdhaXQgYXQgbGVhc3QgaGFsZiB0aGUgcHJvcG9zYWwgZXhwZWN0ZWQgdGltZSBiZXR3ZWVuIFBlcmZvcm1hbmNlIGNoZWNrcwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjYxNQoJLy8gZGVsdGFXaXRoTGF0ZXN0UHJvcG9zYWwgPSBnbG9iYWxzLnJvdW5kIC0gdGhpcy5hcHAuYWRkcmVzcy5sYXN0UHJvcG9zZWQKCWdsb2JhbCBSb3VuZAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0TGFzdFByb3Bvc2VkCglwb3AKCS0KCWZyYW1lX2J1cnkgMCAvLyBkZWx0YVdpdGhMYXRlc3RQcm9wb3NhbDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjYxNgoJLy8gaXNQZXJmb3JtaW5nQXNFeHBlY3RlZCA9IGRlbHRhV2l0aExhdGVzdFByb3Bvc2FsIDwgdGhpcy5nZXRFeHBlY3RlZFByb3Bvc2Fsc0RlbHRhKCkKCWZyYW1lX2RpZyAwIC8vIGRlbHRhV2l0aExhdGVzdFByb3Bvc2FsOiB1aW50NjQKCWNhbGxzdWIgZ2V0RXhwZWN0ZWRQcm9wb3NhbHNEZWx0YQoJPAoJZnJhbWVfYnVyeSAxIC8vIGlzUGVyZm9ybWluZ0FzRXhwZWN0ZWQ6IGJvb2wKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjE3CgkvLyBpc1BlcmZvcm1pbmdBc1RvbGVyYXRlZCA9IGRlbHRhV2l0aExhdGVzdFByb3Bvc2FsIDwgdGhpcy5nZXRUb2xlcmF0ZWRQcm9wb3NhbERlbHRhKCkKCWZyYW1lX2RpZyAwIC8vIGRlbHRhV2l0aExhdGVzdFByb3Bvc2FsOiB1aW50NjQKCWNhbGxzdWIgZ2V0VG9sZXJhdGVkUHJvcG9zYWxEZWx0YQoJPAoJZnJhbWVfYnVyeSAyIC8vIGlzUGVyZm9ybWluZ0FzVG9sZXJhdGVkOiBib29sCgoJLy8gKmlmMTJfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjE4CgkvLyBpc1BlcmZvcm1pbmdBc0V4cGVjdGVkICYmIGlzUGVyZm9ybWluZ0FzVG9sZXJhdGVkCglmcmFtZV9kaWcgMSAvLyBpc1BlcmZvcm1pbmdBc0V4cGVjdGVkOiBib29sCglkdXAKCWJ6ICpza2lwX2FuZDIKCWZyYW1lX2RpZyAyIC8vIGlzUGVyZm9ybWluZ0FzVG9sZXJhdGVkOiBib29sCgkmJgoKKnNraXBfYW5kMjoKCWJ6ICppZjEyX2VuZAoKCS8vICppZjEyX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MTkKCS8vIHJldHVybiBmYWxzZTsKCWludGMgMCAvLyAwCgliICpwZXJmb3JtYW5jZUNoZWNrKnJldHVybgoKKmlmMTJfZW5kOgoJLy8gKmlmMTNfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjIxCgkvLyAhaXNQZXJmb3JtaW5nQXNUb2xlcmF0ZWQKCWZyYW1lX2RpZyAyIC8vIGlzUGVyZm9ybWluZ0FzVG9sZXJhdGVkOiBib29sCgkhCglieiAqaWYxM19lbHNlaWYxX2NvbmRpdGlvbgoKCS8vICppZjEzX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MjIKCS8vIHRoaXMuZGVsaW5xdWVuY3lTY29yZS52YWx1ZSArPSA1CglieXRlYyA3IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglhcHBfZ2xvYmFsX2dldAoJaW50YyA3IC8vIDUKCSsKCWJ5dGVjIDcgLy8gICJkZWxpbnF1ZW5jeV9zY29yZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgliICppZjEzX2VuZAoKKmlmMTNfZWxzZWlmMV9jb25kaXRpb246CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjIzCgkvLyAhaXNQZXJmb3JtaW5nQXNFeHBlY3RlZAoJZnJhbWVfZGlnIDEgLy8gaXNQZXJmb3JtaW5nQXNFeHBlY3RlZDogYm9vbAoJIQoJYnogKmlmMTNfZW5kCgoJLy8gKmlmMTNfZWxzZWlmMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjI0CgkvLyB0aGlzLmRlbGlucXVlbmN5U2NvcmUudmFsdWUgKz0KCS8vICAgICAgICAgdGhpcy5sYXN0RGVsaW5xdWVuY3lSZXBvcnQudmFsdWUgPiB0aGlzLmxhc3RSZXdhcmRSZXBvcnQudmFsdWUgfHwgdGhpcy5kZWxpbnF1ZW5jeVNjb3JlLnZhbHVlID4gNSA/IDIgOiAxCglieXRlYyA3IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMTEgLy8gICJkZWxpbnF1ZW5jeV9yZXBvcnQiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMTMgLy8gICJyZXdhcmRfcmVwb3J0IgoJYXBwX2dsb2JhbF9nZXQKCT4KCWR1cAoJYm56ICpza2lwX29yNQoJYnl0ZWMgNyAvLyAgImRlbGlucXVlbmN5X3Njb3JlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgNyAvLyA1Cgk+Cgl8fAoKKnNraXBfb3I1OgoJYnogKnRlcm5hcnkxX2ZhbHNlCglpbnRjIDIgLy8gMgoJYiAqdGVybmFyeTFfZW5kCgoqdGVybmFyeTFfZmFsc2U6CglpbnRjIDEgLy8gMQoKKnRlcm5hcnkxX2VuZDoKCSsKCWJ5dGVjIDcgLy8gICJkZWxpbnF1ZW5jeV9zY29yZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoqaWYxM19lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjI3CgkvLyB0aGlzLnNldERlbGlucXVlbmN5T25UaHJlc2hvbGRDaGVjaygpCgljYWxsc3ViIHNldERlbGlucXVlbmN5T25UaHJlc2hvbGRDaGVjawoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MjgKCS8vIHRoaXMubGFzdERlbGlucXVlbmN5UmVwb3J0LnZhbHVlID0gZ2xvYmFscy5yb3VuZAoJYnl0ZWMgMTEgLy8gICJkZWxpbnF1ZW5jeV9yZXBvcnQiCglnbG9iYWwgUm91bmQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjYzMAoJLy8gdGhpcy5kZWxpbnF1ZW5jeUV2ZW50LmxvZyh7CgkvLyAgICAgICBhcHA6IHRoaXMuYXBwLAoJLy8gICAgICAgb3BlcmF0b3I6IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlLAoJLy8gICAgICAgc3Rha2VBdFJpc2s6IHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUsCgkvLyAgICAgICBkZWxpbnF1ZW5jeVNjb3JlOiB0aGlzLmRlbGlucXVlbmN5U2NvcmUudmFsdWUsCgkvLyAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLnZhbHVlLAoJLy8gICAgIH0pCglieXRlYyAyMyAvLyAgZGVsaW5xdWVuY3lFdmVudCh1aW50NjQsYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWJ5dGVjIDQgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgljb25jYXQKCWJ5dGVjIDEgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0CglieXRlYyA3IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0CglieXRlYyA1IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjM3CgkvLyByZXR1cm4gdHJ1ZTsKCWludGMgMSAvLyAxCgoqcGVyZm9ybWFuY2VDaGVjaypyZXR1cm46CgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCi8vIGNoZWNrU3Rha2VPblNuaXRjaChyZWNpcGllbnQ6IEFwcElEKTogYm9vbGVhbgpjaGVja1N0YWtlT25Tbml0Y2g6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMiAvLyAweAoJZHVwbiAyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY0MQoJLy8gaGFzTW9yZVRoYW5NYXggPSB0aGlzLmFwcC5hZGRyZXNzLmJhbGFuY2UgPiBNQVhfU1RBS0VfUEVSX0FDQ09VTlQKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCXBvcAoJaW50YyA0IC8vIDUwMDAwMDAwMDAwMDAwCgk+CglmcmFtZV9idXJ5IDAgLy8gaGFzTW9yZVRoYW5NYXg6IGJvb2wKCgkvLyAqaWYxNF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NDIKCS8vIGhhc01vcmVUaGFuTWF4CglmcmFtZV9kaWcgMCAvLyBoYXNNb3JlVGhhbk1heDogYm9vbAoJYnogKmlmMTRfZW5kCgoJLy8gKmlmMTRfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY0MgoJLy8gdGhpcy51cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycygpCgljYWxsc3ViIHVwZGF0ZURlbGVnYXRpb25GYWN0b3JzCgoqaWYxNF9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjQzCgkvLyBoYXNNb3JlVGhhbkRlbGVnYXRhYmxlID0gdGhpcy5zYXR1cmF0aW9uQnVmZmVyLnZhbHVlID4gQlVGRkVSX01BWAoJYnl0ZWMgMTIgLy8gICJzYXR1cmF0aW9uX2J1ZmZlciIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDYgLy8gMTAwMDAwMAoJPgoJZnJhbWVfYnVyeSAxIC8vIGhhc01vcmVUaGFuRGVsZWdhdGFibGU6IGJvb2wKCgkvLyAqaWYxNV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NDQKCS8vIGhhc01vcmVUaGFuRGVsZWdhdGFibGUKCWZyYW1lX2RpZyAxIC8vIGhhc01vcmVUaGFuRGVsZWdhdGFibGU6IGJvb2wKCWJ6ICppZjE1X2VuZAoKCS8vICppZjE1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NDUKCS8vIHJlc3Rha2UgPSB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlIC0gdGhpcy5tYXhEZWxlZ2F0YWJsZVN0YWtlLnZhbHVlCglieXRlYyAxIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDYgLy8gICJtYXhfZGVsZWdhdGFibGVfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJLQoJZnJhbWVfYnVyeSAyIC8vIHJlc3Rha2U6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NDYKCS8vIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgLT0gcmVzdGFrZQoJYnl0ZWMgMSAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMiAvLyByZXN0YWtlOiB1aW50NjQKCS0KCWJ5dGVjIDEgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NDgKCS8vIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNBZG1pbi5wcm90b3R5cGUucmVTdGFrZUZyb21Tbml0Y2g+KHsKCS8vICAgICAgICAgYXBwbGljYXRpb25JRDogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZSwKCS8vICAgICAgICAgbWV0aG9kQXJnczogWwoJLy8gICAgICAgICAgIHRoaXMuYXBwLAoJLy8gICAgICAgICAgIHJlY2lwaWVudCwKCS8vICAgICAgICAgICB7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiByZXN0YWtlLAoJLy8gICAgICAgICAgIH0sCgkvLyAgICAgICAgIF0sCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAxIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjU0CgkvLyByZWNlaXZlcjogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzCglieXRlYyAzIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjU1CgkvLyBhbW91bnQ6IHJlc3Rha2UKCWZyYW1lX2RpZyAyIC8vIHJlc3Rha2U6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCWl0eG5fbmV4dAoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHg5MTFjM2M0NiAvLyBtZXRob2QgInJlU3Rha2VGcm9tU25pdGNoKHVpbnQ2NCx1aW50NjQscGF5KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NDkKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NTAKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgICB0aGlzLmFwcCwKCS8vICAgICAgICAgICByZWNpcGllbnQsCgkvLyAgICAgICAgICAgewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFtb3VudDogcmVzdGFrZSwKCS8vICAgICAgICAgICB9LAoJLy8gICAgICAgICBdCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0xIC8vIHJlY2lwaWVudDogQXBwSUQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKKmlmMTVfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY2MQoJLy8gcmV0dXJuIGhhc01vcmVUaGFuTWF4IHx8IGhhc01vcmVUaGFuRGVsZWdhdGFibGU7CglmcmFtZV9kaWcgMCAvLyBoYXNNb3JlVGhhbk1heDogYm9vbAoJZHVwCglibnogKnNraXBfb3I2CglmcmFtZV9kaWcgMSAvLyBoYXNNb3JlVGhhbkRlbGVnYXRhYmxlOiBib29sCgl8fAoKKnNraXBfb3I2OgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMgoJcmV0c3ViCgovLyBjaGVja1Byb2dyYW1WZXJzaW9uKCk6IGJvb2xlYW4KY2hlY2tQcm9ncmFtVmVyc2lvbjoKCXByb3RvIDAgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAyIC8vIDB4CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY2NQoJLy8gbGF0ZXN0VmVyc2lvbiA9IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuZ2xvYmFsU3RhdGUoJ3ZhbGlkYXRvcl9wb29sX3ZlcnNpb24nKSBhcyB1aW50NjQKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCXB1c2hieXRlcyAweDc2NjE2YzY5NjQ2MTc0NmY3MjVmNzA2ZjZmNmM1Zjc2NjU3MjczNjk2ZjZlIC8vICJ2YWxpZGF0b3JfcG9vbF92ZXJzaW9uIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuZ2xvYmFsU3RhdGUoJ3ZhbGlkYXRvcl9wb29sX3ZlcnNpb24nKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDAgLy8gbGF0ZXN0VmVyc2lvbjogdWludDY0CgoJLy8gKmlmMTZfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjY2CgkvLyBsYXRlc3RWZXJzaW9uID09PSB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdFZlcnNpb24udmFsdWUKCWZyYW1lX2RpZyAwIC8vIGxhdGVzdFZlcnNpb246IHVpbnQ2NAoJYnl0ZWMgMTkgLy8gICJjb250cmFjdF92ZXJzaW9uIgoJYXBwX2dsb2JhbF9nZXQKCT09CglieiAqaWYxNl9lbmQKCgkvLyAqaWYxNl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjY2CgkvLyByZXR1cm4gZmFsc2U7CglpbnRjIDAgLy8gMAoJYiAqY2hlY2tQcm9ncmFtVmVyc2lvbipyZXR1cm4KCippZjE2X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NjcKCS8vIHRoaXMucHVyZ2UoKQoJY2FsbHN1YiBwdXJnZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NjgKCS8vIHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUgPSAwCglieXRlYyAwIC8vICAib3BlcmF0b3JfY29tbWl0IgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY2OQoJLy8gdGhpcy5vcGVyYXRvcllpZWxkQWNjcnVlZC52YWx1ZSA9IDAKCWJ5dGVjIDggLy8gICJvcGVyYXRvcl95aWVsZF9hY2NydWVkIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY3MAoJLy8gdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSA9IDAKCWJ5dGVjIDEgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjcxCgkvLyB0aGlzLnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCkKCWNhbGxzdWIgdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjcyCgkvLyB0aGlzLmdvT2ZmbGluZSgpCgljYWxsc3ViIGdvT2ZmbGluZQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NzMKCS8vIHJldHVybiB0cnVlOwoJaW50YyAxIC8vIDEKCipjaGVja1Byb2dyYW1WZXJzaW9uKnJldHVybjoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBnZXRHb09ubGluZUZlZUFtb3VudCgpOiB1aW50NjQKZ2V0R29PbmxpbmVGZWVBbW91bnQ6Cglwcm90byAwIDEKCgkvLyAqaWYxN19jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NzcKCS8vICF0aGlzLmdldEVsaWdpYmlsaXR5RmxhZygpCgljYWxsc3ViIGdldEVsaWdpYmlsaXR5RmxhZwoJIQoJYnogKmlmMTdfZW5kCgoJLy8gKmlmMTdfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY3OAoJLy8gcmV0dXJuIGdsb2JhbHMucGF5b3V0c0dvT25saW5lRmVlOwoJZ2xvYmFsIFBheW91dHNHb09ubGluZUZlZQoJcmV0c3ViCgoqaWYxN19lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjgwCgkvLyByZXR1cm4gMDsKCWludGMgMCAvLyAwCglyZXRzdWIKCi8vIHNldERlbGlucXVlbmN5T25UaHJlc2hvbGRDaGVjaygpOiB2b2lkCnNldERlbGlucXVlbmN5T25UaHJlc2hvbGRDaGVjazoKCXByb3RvIDAgMAoKCS8vICppZjE4X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY4NAoJLy8gIXRoaXMuZGVsaW5xdWVuY3lUaHJlc2hvbGRDaGVjaygpCgljYWxsc3ViIGRlbGlucXVlbmN5VGhyZXNob2xkQ2hlY2sKCSEKCWJ6ICppZjE4X2VuZAoKCS8vICppZjE4X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2ODUKCS8vIHRoaXMuc2V0RGVsaW5xdWVuY3koKQoJY2FsbHN1YiBzZXREZWxpbnF1ZW5jeQoKKmlmMThfZW5kOgoJcmV0c3ViCgovLyBkZWxpbnF1ZW5jeVRocmVzaG9sZENoZWNrKCk6IGJvb2xlYW4KZGVsaW5xdWVuY3lUaHJlc2hvbGRDaGVjazoKCXByb3RvIDAgMQoKCS8vICppZjE5X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY5MAoJLy8gdGhpcy5kZWxpbnF1ZW5jeVNjb3JlLnZhbHVlID4gTUFYX0RFTElOUVVFTkNZX1RPTEVSQVRFRAoJYnl0ZWMgNyAvLyAgImRlbGlucXVlbmN5X3Njb3JlIgoJYXBwX2dsb2JhbF9nZXQKCXB1c2hpbnQgMTAKCT4KCWJ6ICppZjE5X2VuZAoKCS8vICppZjE5X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2OTEKCS8vIHJldHVybiBmYWxzZTsKCWludGMgMCAvLyAwCglyZXRzdWIKCippZjE5X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2OTMKCS8vIHJldHVybiB0cnVlOwoJaW50YyAxIC8vIDEKCXJldHN1YgoKLy8gc2V0RGVsaW5xdWVuY3koKTogdm9pZApzZXREZWxpbnF1ZW5jeToKCXByb3RvIDAgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAyIC8vIDB4CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY5NwoJLy8geWllbGRBY2NydWVkID0gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c0FkbWluLnByb3RvdHlwZS5fX29uRGVsaW5xdWVuY3ksIHVpbnQ2ND4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZSwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgdGhpcy5hcHAsCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICB4ZmVyQXNzZXQ6IHRoaXMudG9rZW5JZC52YWx1ZSwKCS8vICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICAgICAgYXNzZXRBbW91bnQ6IHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMudG9rZW5JZC52YWx1ZSksCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICBdLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDUgLy8gIGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjcwMgoJLy8geGZlckFzc2V0OiB0aGlzLnRva2VuSWQudmFsdWUKCWJ5dGVjIDEwIC8vICAidG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzAzCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjcwNAoJLy8gYXNzZXRBbW91bnQ6IHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMudG9rZW5JZC52YWx1ZSkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglieXRlYyAxMCAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4NmZmNDcyODcgLy8gbWV0aG9kICJfX29uRGVsaW5xdWVuY3kodWludDY0LGF4ZmVyKXVpbnQ2NCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY5OAoJLy8gYXBwbGljYXRpb25JRDogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZQoJYnl0ZWMgMyAvLyAgImNyZWF0b3IiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY5OQoJLy8gbWV0aG9kQXJnczogWwoJLy8gICAgICAgICB0aGlzLmFwcCwKCS8vICAgICAgICAgewoJLy8gICAgICAgICAgIHhmZXJBc3NldDogdGhpcy50b2tlbklkLnZhbHVlLAoJLy8gICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcywKCS8vICAgICAgICAgICBhc3NldEFtb3VudDogdGhpcy5hcHAuYWRkcmVzcy5hc3NldEJhbGFuY2UodGhpcy50b2tlbklkLnZhbHVlKSwKCS8vICAgICAgICAgfSwKCS8vICAgICAgIF0KCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnRjIDEgLy8gMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglidG9pCglmcmFtZV9idXJ5IDAgLy8geWllbGRBY2NydWVkOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzA4CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MDkKCS8vIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MTAKCS8vIGFtb3VudDogdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZQoJYnl0ZWMgMSAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzEyCgkvLyB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlID0gMAoJYnl0ZWMgMSAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MTMKCS8vIHRoaXMucGVyZm9ybWFuY2VDb3VudGVyLnZhbHVlID0gMAoJYnl0ZWMgOSAvLyAgInBlcmZvcm1hbmNlIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjcxNAoJLy8gdGhpcy51cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycygpCgljYWxsc3ViIHVwZGF0ZURlbGVnYXRpb25GYWN0b3JzCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjcxNQoJLy8gdGhpcy5zdGF0dXMudmFsdWUgPSBERUxJTlFVRU5DWV9TVEFUVVMKCWJ5dGVjIDUgLy8gICJzdGF0dXMiCglpbnRjIDIgLy8gMgoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzE2CgkvLyB0aGlzLm9wZXJhdG9yWWllbGRBY2NydWVkLnZhbHVlID0geWllbGRBY2NydWVkCglieXRlYyA4IC8vICAib3BlcmF0b3JfeWllbGRfYWNjcnVlZCIKCWZyYW1lX2RpZyAwIC8vIHlpZWxkQWNjcnVlZDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBmaXhEZWxpbnF1ZW5jeVNjb3JlKCk6IHZvaWQKZml4RGVsaW5xdWVuY3lTY29yZToKCXByb3RvIDAgMAoKCS8vICppZjIwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjcyMAoJLy8gdGhpcy5kZWxpbnF1ZW5jeVNjb3JlLnZhbHVlID09PSAwCglieXRlYyA3IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDAKCT09CglieiAqaWYyMF9lbmQKCgkvLyAqaWYyMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzIxCgkvLyByZXR1cm47CglyZXRzdWIKCippZjIwX2VuZDoKCS8vICppZjIxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjcyMwoJLy8gdGhpcy5zdGF0dXMudmFsdWUgPT09IERFTElOUVVFTkNZX1NUQVRVUwoJYnl0ZWMgNSAvLyAgInN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDIgLy8gMgoJPT0KCWJ6ICppZjIxX2VuZAoKCS8vICppZjIxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MjQKCS8vIHRoaXMuZGVsaW5xdWVuY3lTY29yZS52YWx1ZSAtPSA1CglieXRlYyA3IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglhcHBfZ2xvYmFsX2dldAoJaW50YyA3IC8vIDUKCS0KCWJ5dGVjIDcgLy8gICJkZWxpbnF1ZW5jeV9zY29yZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoqaWYyMV9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzI2CgkvLyB0aGlzLmRlbGlucXVlbmN5U2NvcmUudmFsdWUgPSAwCglieXRlYyA3IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gcHVyZ2UoKTogdm9pZApwdXJnZToKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MzAKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIHhmZXJBc3NldDogdGhpcy50b2tlbklkLnZhbHVlLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICBhc3NldENsb3NlVG86IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMudG9rZW5JZC52YWx1ZSksCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgNSAvLyAgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzMxCgkvLyB4ZmVyQXNzZXQ6IHRoaXMudG9rZW5JZC52YWx1ZQoJYnl0ZWMgMTAgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MzIKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlCglieXRlYyA0IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjczMwoJLy8gYXNzZXRDbG9zZVRvOiB0aGlzLm9wZXJhdG9yQWRkcmVzcy52YWx1ZQoJYnl0ZWMgNCAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXNzZXRDbG9zZVRvCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjczNAoJLy8gYXNzZXRBbW91bnQ6IHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMudG9rZW5JZC52YWx1ZSkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglieXRlYyAxMCAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MzYKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICBhbW91bnQ6IHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUgKyB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlLAoJLy8gICAgICAgY2xvc2VSZW1haW5kZXJUbzogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5nbG9iYWxTdGF0ZSgnbWFuYWdlcicpIGFzIEFkZHJlc3MsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjczNwoJLy8gcmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMyAvLyAgImNyZWF0b3IiCglhcHBfZ2xvYmFsX2dldAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjczOAoJLy8gYW1vdW50OiB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlICsgdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZQoJYnl0ZWMgMCAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAxIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCSsKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjczOQoJLy8gY2xvc2VSZW1haW5kZXJUbzogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5nbG9iYWxTdGF0ZSgnbWFuYWdlcicpIGFzIEFkZHJlc3MKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCXB1c2hieXRlcyAweDZkNjE2ZTYxNjc2NTcyIC8vICJtYW5hZ2VyIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuZ2xvYmFsU3RhdGUoJ21hbmFnZXInKQoJYXNzZXJ0CglpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIHVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCk6IHZvaWQKdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnM6Cglwcm90byAwIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMiAvLyAweAoJZHVwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc0NAoJLy8gaXNEZWxpbnF1ZW50ID0gZmFsc2UKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDAgLy8gaXNEZWxpbnF1ZW50OiBib29sCgoJLy8gKmlmMjJfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzQ1CgkvLyB0aGlzLnN0YXR1cy52YWx1ZSA9PT0gREVMSU5RVUVOQ1lfU1RBVFVTCglieXRlYyA1IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMiAvLyAyCgk9PQoJYnogKmlmMjJfZW5kCgoJLy8gKmlmMjJfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc0NgoJLy8gaXNEZWxpbnF1ZW50ID0gdHJ1ZQoJaW50YyAxIC8vIDEKCWZyYW1lX2J1cnkgMCAvLyBpc0RlbGlucXVlbnQ6IGJvb2wKCippZjIyX2VuZDoKCS8vICppZjIzX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc0OQoJLy8gdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSA+IGdsb2JhbHMucGF5b3V0c01pbkJhbGFuY2UKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJZ2xvYmFsIFBheW91dHNNaW5CYWxhbmNlCgk+CglieiAqaWYyM19lbHNlCgoJLy8gKmlmMjNfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc1MAoJLy8gdGhpcy5tYXhEZWxlZ2F0YWJsZVN0YWtlLnZhbHVlID0gdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZQoJYnl0ZWMgNiAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzUyCgkvLyB0b2tlbkJvb3N0ID0gKHRoaXMuZ2V0VGllcigpICogdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSkgLyAyCgljYWxsc3ViIGdldFRpZXIKCWJ5dGVjIDAgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJKgoJaW50YyAyIC8vIDIKCS8KCWZyYW1lX2J1cnkgMSAvLyB0b2tlbkJvb3N0OiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzUzCgkvLyB0aGlzLm1heERlbGVnYXRhYmxlU3Rha2UudmFsdWUgKz0gdG9rZW5Cb29zdAoJYnl0ZWMgNiAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMSAvLyB0b2tlbkJvb3N0OiB1aW50NjQKCSsKCWJ5dGVjIDYgLy8gICJtYXhfZGVsZWdhdGFibGVfc3Rha2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NTYKCS8vIHRoaXMubWF4RGVsZWdhdGFibGVTdGFrZS52YWx1ZSArPSBQRVJGT1JNQU5DRV9TVEFLRV9JTkNSRUFTRSAqICh0aGlzLnBlcmZvcm1hbmNlQ291bnRlci52YWx1ZSAvIFBFUkZPUk1BTkNFX1NURVApCglieXRlYyA2IC8vICAibWF4X2RlbGVnYXRhYmxlX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCXB1c2hpbnQgMTAwMDAwMDAwMDAKCWJ5dGVjIDkgLy8gICJwZXJmb3JtYW5jZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDcgLy8gNQoJLwoJKgoJKwoJYnl0ZWMgNiAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gKmlmMjRfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzU5CgkvLyB0aGlzLmFwcC5hZGRyZXNzLmJhbGFuY2UgPj0gTUFYX1NUQUtFX1BFUl9BQ0NPVU5UCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWludGMgNCAvLyA1MDAwMDAwMDAwMDAwMAoJPj0KCWJ6ICppZjI0X2Vsc2VpZjFfY29uZGl0aW9uCgoJLy8gKmlmMjRfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc2MAoJLy8gdGhpcy5tYXhEZWxlZ2F0YWJsZVN0YWtlLnZhbHVlID0gMAoJYnl0ZWMgNiAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vICppZjI1X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc2MQoJLy8gIWlzRGVsaW5xdWVudAoJZnJhbWVfZGlnIDAgLy8gaXNEZWxpbnF1ZW50OiBib29sCgkhCglieiAqaWYyNV9lbmQKCgkvLyAqaWYyNV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzYyCgkvLyB0aGlzLnN0YXR1cy52YWx1ZSA9IE5PVF9ERUxFR0FUQUJMRV9TVEFUVVMKCWJ5dGVjIDUgLy8gICJzdGF0dXMiCglpbnRjIDEgLy8gMQoJYXBwX2dsb2JhbF9wdXQKCippZjI1X2VuZDoKCWIgKmlmMjRfZW5kCgoqaWYyNF9lbHNlaWYxX2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NjQKCS8vIHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZSArIHRoaXMubWF4RGVsZWdhdGFibGVTdGFrZS52YWx1ZSA+IE1BWF9TVEFLRV9QRVJfQUNDT1VOVAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQoJcG9wCglieXRlYyA2IC8vICAibWF4X2RlbGVnYXRhYmxlX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCSsKCWludGMgNCAvLyA1MDAwMDAwMDAwMDAwMAoJPgoJYnogKmlmMjRfZW5kCgoJLy8gKmlmMjRfZWxzZWlmMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzY1CgkvLyB0aGlzLm1heERlbGVnYXRhYmxlU3Rha2UudmFsdWUgPSBNQVhfU1RBS0VfUEVSX0FDQ09VTlQgLSB0aGlzLmFwcC5hZGRyZXNzLmJhbGFuY2UKCWJ5dGVjIDYgLy8gICJtYXhfZGVsZWdhdGFibGVfc3Rha2UiCglpbnRjIDQgLy8gNTAwMDAwMDAwMDAwMDAKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCXBvcAoJLQoJYXBwX2dsb2JhbF9wdXQKCippZjI0X2VuZDoKCWIgKmlmMjNfZW5kCgoqaWYyM19lbHNlOgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc2OAoJLy8gdGhpcy5tYXhEZWxlZ2F0YWJsZVN0YWtlLnZhbHVlID0gMAoJYnl0ZWMgNiAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vICppZjI2X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc2OQoJLy8gIWlzRGVsaW5xdWVudAoJZnJhbWVfZGlnIDAgLy8gaXNEZWxpbnF1ZW50OiBib29sCgkhCglieiAqaWYyNl9lbmQKCgkvLyAqaWYyNl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzcwCgkvLyB0aGlzLnN0YXR1cy52YWx1ZSA9IE5PVF9ERUxFR0FUQUJMRV9TVEFUVVMKCWJ5dGVjIDUgLy8gICJzdGF0dXMiCglpbnRjIDEgLy8gMQoJYXBwX2dsb2JhbF9wdXQKCippZjI2X2VuZDoKCippZjIzX2VuZDoKCS8vICppZjI3X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc3NQoJLy8gdGhpcy5tYXhEZWxlZ2F0YWJsZVN0YWtlLnZhbHVlID4gMAoJYnl0ZWMgNiAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDAgLy8gMAoJPgoJYnogKmlmMjdfZWxzZQoKCS8vICppZjI3X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NzYKCS8vIHRoaXMuc2F0dXJhdGlvbkJ1ZmZlci52YWx1ZSA9ICh0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlICogQlVGRkVSX01BWCkgLyB0aGlzLm1heERlbGVnYXRhYmxlU3Rha2UudmFsdWUKCWJ5dGVjIDEyIC8vICAic2F0dXJhdGlvbl9idWZmZXIiCglieXRlYyAxIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgNiAvLyAxMDAwMDAwCgkqCglieXRlYyA2IC8vICAibWF4X2RlbGVnYXRhYmxlX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCS8KCWFwcF9nbG9iYWxfcHV0CgliICppZjI3X2VuZAoKKmlmMjdfZWxzZToKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NzgKCS8vIHRoaXMuc2F0dXJhdGlvbkJ1ZmZlci52YWx1ZSA9IEJVRkZFUl9NQVgKCWJ5dGVjIDEyIC8vICAic2F0dXJhdGlvbl9idWZmZXIiCglpbnRjIDYgLy8gMTAwMDAwMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyAqaWYyOF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NzkKCS8vICFpc0RlbGlucXVlbnQKCWZyYW1lX2RpZyAwIC8vIGlzRGVsaW5xdWVudDogYm9vbAoJIQoJYnogKmlmMjhfZW5kCgoJLy8gKmlmMjhfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc4MAoJLy8gdGhpcy5zdGF0dXMudmFsdWUgPSBOT1RfREVMRUdBVEFCTEVfU1RBVFVTCglieXRlYyA1IC8vICAic3RhdHVzIgoJaW50YyAxIC8vIDEKCWFwcF9nbG9iYWxfcHV0CgoqaWYyOF9lbmQ6CgoqaWYyN19lbmQ6CgkvLyAqaWYyOV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3ODQKCS8vIGlzRGVsaW5xdWVudAoJZnJhbWVfZGlnIDAgLy8gaXNEZWxpbnF1ZW50OiBib29sCglieiAqaWYyOV9lbmQKCgkvLyAqaWYyOV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6Nzg1CgkvLyB0aGlzLm1heERlbGVnYXRhYmxlU3Rha2UudmFsdWUgPSAwCglieXRlYyA2IC8vICAibWF4X2RlbGVnYXRhYmxlX3N0YWtlIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc4NgoJLy8gdGhpcy5wZXJmb3JtYW5jZUNvdW50ZXIudmFsdWUgPSAwCglieXRlYyA5IC8vICAicGVyZm9ybWFuY2UiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6Nzg3CgkvLyB0aGlzLnNhdHVyYXRpb25CdWZmZXIudmFsdWUgPSBCVUZGRVJfTUFYCglieXRlYyAxMiAvLyAgInNhdHVyYXRpb25fYnVmZmVyIgoJaW50YyA2IC8vIDEwMDAwMDAKCWFwcF9nbG9iYWxfcHV0CgoqaWYyOV9lbmQ6CglyZXRzdWIKCi8vIGdldFRpZXIoKTogdWludDY0CmdldFRpZXI6Cglwcm90byAwIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMiAvLyAweAoJZHVwbiAyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc5MgoJLy8gYm9vc3RUb2tlbiA9IEFzc2V0SUQuemVyb0luZGV4CglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAwIC8vIGJvb3N0VG9rZW46IHVpbnQ2NAoKCS8vICppZjMwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc5MwoJLy8gIXRoaXMuYm9vc3RUb2tlbklELmV4aXN0cwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZWMgMTUgLy8gICJib29zdF90b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCSEKCWJ6ICppZjMwX2VuZAoKCS8vICppZjMwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3OTQKCS8vIHRoaXMuYm9vc3RUb2tlbklELnZhbHVlID0gdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5nbG9iYWxTdGF0ZSgnYm9vc3RfdG9rZW5faWQnKSBhcyBBc3NldElECglieXRlYyAxNSAvLyAgImJvb3N0X3Rva2VuX2lkIgoJYnl0ZWMgMyAvLyAgImNyZWF0b3IiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMTUgLy8gICJib29zdF90b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmdsb2JhbFN0YXRlKCdib29zdF90b2tlbl9pZCcpCglhc3NlcnQKCWFwcF9nbG9iYWxfcHV0CgoqaWYzMF9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6Nzk2CgkvLyBib29zdFRva2VuID0gdGhpcy5ib29zdFRva2VuSUQudmFsdWUKCWJ5dGVjIDE1IC8vICAiYm9vc3RfdG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfYnVyeSAwIC8vIGJvb3N0VG9rZW46IHVpbnQ2NAoKCS8vICppZjMxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc5NwoJLy8gYm9vc3RUb2tlbiA9PT0gQXNzZXRJRC56ZXJvSW5kZXgKCWZyYW1lX2RpZyAwIC8vIGJvb3N0VG9rZW46IHVpbnQ2NAoJaW50YyAwIC8vIDAKCT09CglieiAqaWYzMV9lbmQKCgkvLyAqaWYzMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6Nzk3CgkvLyByZXR1cm4gMDsKCWludGMgMCAvLyAwCgliICpnZXRUaWVyKnJldHVybgoKKmlmMzFfZW5kOgoJLy8gKmlmMzJfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6Nzk4CgkvLyB0aGlzLm9wZXJhdG9yQWRkcmVzcy52YWx1ZS5pc09wdGVkSW5Ub0Fzc2V0KGJvb3N0VG9rZW4pCglieXRlYyA0IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDAgLy8gYm9vc3RUb2tlbjogdWludDY0Cglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXN3YXAKCXBvcAoJYnogKmlmMzJfZW5kCgoJLy8gKmlmMzJfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc5OAoJLy8gcmV0dXJuIDA7CglpbnRjIDAgLy8gMAoJYiAqZ2V0VGllcipyZXR1cm4KCippZjMyX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3OTkKCS8vIG93bmVkVG9rZW4gPSB0aGlzLm9wZXJhdG9yQWRkcmVzcy52YWx1ZS5hc3NldEJhbGFuY2UoYm9vc3RUb2tlbikKCWJ5dGVjIDQgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyBib29zdFRva2VuOiB1aW50NjQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglmcmFtZV9idXJ5IDEgLy8gb3duZWRUb2tlbjogdWludDY0CgoJLy8gKmlmMzNfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6ODAwCgkvLyBvd25lZFRva2VuID09PSAwCglmcmFtZV9kaWcgMSAvLyBvd25lZFRva2VuOiB1aW50NjQKCWludGMgMCAvLyAwCgk9PQoJYnogKmlmMzNfZW5kCgoJLy8gKmlmMzNfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjgwMAoJLy8gcmV0dXJuIDA7CglpbnRjIDAgLy8gMAoJYiAqZ2V0VGllcipyZXR1cm4KCippZjMzX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo4MDEKCS8vIGdldFRpZXIgPSBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzQWRtaW4ucHJvdG90eXBlLmdldEJvb3N0VGllciwgdWludDY0Pih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLAoJLy8gICAgICAgbWV0aG9kQXJnczogW293bmVkVG9rZW5dLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweDAwYzNhNzE0IC8vIG1ldGhvZCAiZ2V0Qm9vc3RUaWVyKHVpbnQ2NCl1aW50NjQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo4MDIKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUKCWJ5dGVjIDMgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo4MDMKCS8vIG1ldGhvZEFyZ3M6IFtvd25lZFRva2VuXQoJZnJhbWVfZGlnIDEgLy8gb3duZWRUb2tlbjogdWludDY0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50YyAxIC8vIDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJYnRvaQoJZnJhbWVfYnVyeSAyIC8vIGdldFRpZXI6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo4MDUKCS8vIHJldHVybiBnZXRUaWVyOwoJZnJhbWVfZGlnIDIgLy8gZ2V0VGllcjogdWludDY0CgoqZ2V0VGllcipyZXR1cm46CgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCi8vIGdldFRvbGVyYXRlZFByb3Bvc2FsRGVsdGEoKTogdWludDY0CmdldFRvbGVyYXRlZFByb3Bvc2FsRGVsdGE6Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6ODA5CgkvLyByZXR1cm4gdGhpcy5nZXRFeHBlY3RlZFByb3Bvc2Fsc0RlbHRhKCkgKiAzOwoJY2FsbHN1YiBnZXRFeHBlY3RlZFByb3Bvc2Fsc0RlbHRhCglwdXNoaW50IDMKCSoKCXJldHN1YgoKLy8gZ2V0RXhwZWN0ZWRQcm9wb3NhbHNEZWx0YSgpOiB1aW50NjQKZ2V0RXhwZWN0ZWRQcm9wb3NhbHNEZWx0YToKCXByb3RvIDAgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAyIC8vIDB4CglkdXBuIDIKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6ODEzCgkvLyBjdXJyZW50T25saW5lU3Rha2UgPSBvbmxpbmVTdGFrZSgpCglvbmxpbmVfc3Rha2UKCWZyYW1lX2J1cnkgMCAvLyBjdXJyZW50T25saW5lU3Rha2U6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo4MTQKCS8vIGN1cnJlbnRBY2NvdW50U3Rha2UgPSB0aGlzLmFwcC5hZGRyZXNzLnZvdGVyQmFsYW5jZQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCXZvdGVyX3BhcmFtc19nZXQgVm90ZXJCYWxhbmNlCglmcmFtZV9idXJ5IDEgLy8gY3VycmVudEFjY291bnRTdGFrZTogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjgxNQoJLy8gcm91bmREZWx0YSA9IGN1cnJlbnRPbmxpbmVTdGFrZSAvIGN1cnJlbnRBY2NvdW50U3Rha2UKCWZyYW1lX2RpZyAwIC8vIGN1cnJlbnRPbmxpbmVTdGFrZTogdWludDY0CglmcmFtZV9kaWcgMSAvLyBjdXJyZW50QWNjb3VudFN0YWtlOiB1aW50NjQKCS8KCWZyYW1lX2J1cnkgMiAvLyByb3VuZERlbHRhOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6ODE2CgkvLyByZXR1cm4gcm91bmREZWx0YSAqIDIwOwoJZnJhbWVfZGlnIDIgLy8gcm91bmREZWx0YTogdWludDY0CglwdXNoaW50IDIwCgkqCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMgoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHhhZDA0ZjZhMSAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AKCWVycgoKKmNhbGxfTm9PcDoKCXB1c2hieXRlcyAweGZiMWJjYjc1IC8vIG1ldGhvZCAib3B0SW50b0xTVCgpdm9pZCIKCXB1c2hieXRlcyAweDg0MGUzNzg1IC8vIG1ldGhvZCAiX19hZGRUb09wZXJhdG9yQ29tbWl0KHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4ZjAwZmQyZGIgLy8gbWV0aG9kICJfX3JlbW92ZUZyb21PcGVyYXRvckNvbW1pdCh1aW50NjQsdWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHg4ODVkMzE0ZSAvLyBtZXRob2QgIl9fdXBkYXRlWWllbGRBY2NydWVkKHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4ZGZiYmU1NTEgLy8gbWV0aG9kICJzb2x2ZURlbGlucXVlbmN5KHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4NDRhNWI1NzYgLy8gbWV0aG9kICJyZXBvcnRSZXdhcmRzKHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4OTgxMDIxZDcgLy8gbWV0aG9kICJfX2FkZFN0YWtlKHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4N2RlMTU1OWQgLy8gbWV0aG9kICJfX2J1cm5TdGFrZSh1aW50NjQsYWRkcmVzcyl2b2lkIgoJcHVzaGJ5dGVzIDB4YTE5NDg5OGQgLy8gbWV0aG9kICJzbml0Y2hWYWxpZGF0b3IodWludDY0LChib29sLGJvb2wsYm9vbCx1aW50NjQpKXZvaWQiCglieXRlYyAyMCAvLyAgbWV0aG9kICJnZXRTbml0Y2hlZCgoYm9vbCxib29sLGJvb2wsdWludDY0KSlib29sIgoJcHVzaGJ5dGVzIDB4ZWRjYjE4ZDcgLy8gbWV0aG9kICJfX2ZsYXNobG9hbih1aW50NjQsYWRkcmVzcyl2b2lkIgoJcHVzaGJ5dGVzIDB4MGRmMjY1OTIgLy8gbWV0aG9kICJjaGVja0JhbGFuY2UoKXZvaWQiCglwdXNoYnl0ZXMgMHg0MDBlMTRmYiAvLyBtZXRob2QgImdvT25saW5lKHBheSxieXRlW10sYnl0ZVtdLGJ5dGVbXSx1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4NTFlZjNiMjEgLy8gbWV0aG9kICJnb09mZmxpbmUoKXZvaWQiCglwdXNoYnl0ZXMgMHhmOWRjMjY0NiAvLyBtZXRob2QgImdldEVsaWdpYmlsaXR5RmxhZygpYm9vbCIKCXB1c2hieXRlcyAweDNjNjQ3ZWE1IC8vIG1ldGhvZCAibWlncmF0ZVRvUG9vbCh1aW50NjQpdm9pZCIKCWJ5dGVjIDIyIC8vICBtZXRob2QgIl9fbWVyZ2VTdGF0ZU9uTWlncmF0aW9uKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQscGF5LGF4ZmVyKXZvaWQiCglwdXNoYnl0ZXMgMHhhNjllYTRhNyAvLyBtZXRob2QgImNsYWltTGVmdEFsZ28oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX29wdEludG9MU1QgKmFiaV9yb3V0ZV9fX2FkZFRvT3BlcmF0b3JDb21taXQgKmFiaV9yb3V0ZV9fX3JlbW92ZUZyb21PcGVyYXRvckNvbW1pdCAqYWJpX3JvdXRlX19fdXBkYXRlWWllbGRBY2NydWVkICphYmlfcm91dGVfc29sdmVEZWxpbnF1ZW5jeSAqYWJpX3JvdXRlX3JlcG9ydFJld2FyZHMgKmFiaV9yb3V0ZV9fX2FkZFN0YWtlICphYmlfcm91dGVfX19idXJuU3Rha2UgKmFiaV9yb3V0ZV9zbml0Y2hWYWxpZGF0b3IgKmFiaV9yb3V0ZV9nZXRTbml0Y2hlZCAqYWJpX3JvdXRlX19fZmxhc2hsb2FuICphYmlfcm91dGVfY2hlY2tCYWxhbmNlICphYmlfcm91dGVfZ29PbmxpbmUgKmFiaV9yb3V0ZV9nb09mZmxpbmUgKmFiaV9yb3V0ZV9nZXRFbGlnaWJpbGl0eUZsYWcgKmFiaV9yb3V0ZV9taWdyYXRlVG9Qb29sICphYmlfcm91dGVfX19tZXJnZVN0YXRlT25NaWdyYXRpb24gKmFiaV9yb3V0ZV9jbGFpbUxlZnRBbGdvCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJyCgoqY2FsbF9EZWxldGVBcHBsaWNhdGlvbjoKCXB1c2hieXRlcyAweDI0ODdjMzJjIC8vIG1ldGhvZCAiZGVsZXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2RlbGV0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgRGVsZXRlQXBwbGljYXRpb24KCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusValidatorPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "createApplication method called at creation, initializes some globalKey values",
        "args": [
          {
            "name": "creatingContract",
            "type": "uint64",
            "desc": "ApplicationID for the creator contract (CaelusAdminContract)"
          },
          {
            "name": "operatorAddress",
            "type": "address",
            "desc": "Address of the node operator used to sign online/offline txns and participate in auctions"
          },
          {
            "name": "contractVersion",
            "type": "uint64",
            "desc": "Approval Program version for the node contract, stored in the CaelusAdminContract"
          },
          {
            "name": "tokenId",
            "type": "uint64",
            "desc": "AssetID of the LST token"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optIntoLST",
        "desc": "ARC4 PUBLIC METHODS",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "__addToOperatorCommit",
        "desc": "followup operation called by the Vestguard Admin to send the correct amount into the operator commit",
        "args": [
          {
            "name": "opStake",
            "type": "pay",
            "desc": "node operator stake commitment"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "operatorCommitUpdateEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "amountAdded",
                "type": "uint64"
              },
              {
                "name": "amountRemoved",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "__removeFromOperatorCommit",
        "desc": "Used by the node operator to remove from his stake amount for the node",
        "args": [
          {
            "name": "claimRequest",
            "type": "uint64",
            "desc": "amount claimed by the node operator to be removed from the operator_commit counter and moved into delegated stake"
          },
          {
            "name": "claimRequestLST",
            "type": "uint64",
            "desc": "amount of LST to be sent back to the node operator"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "operatorCommitUpdateEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "amountAdded",
                "type": "uint64"
              },
              {
                "name": "amountRemoved",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "__updateYieldAccrued",
        "args": [
          {
            "name": "yieldAccruedTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "operatorCommitUpdateEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "amountAdded",
                "type": "uint64"
              },
              {
                "name": "amountRemoved",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "solveDelinquency",
        "desc": "Delinquent Validators need to propose a valid block to clear up their delinquency status.\n\n\nThis method should be called when the delinquency score is below the threshold and the operator has proposed a block.",
        "args": [
          {
            "name": "block",
            "type": "uint64",
            "desc": "block number of the block proposed by the node operator while the account was in delinquency"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "solvedDelinquencyEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "stake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "reportRewards",
        "desc": "Called by the node operator to report the rewards of a block proposed by the contract account.",
        "args": [
          {
            "name": "block",
            "type": "uint64",
            "desc": "Block number of the block proposed by the node operator"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "rewardsEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "block",
                "type": "uint64"
              },
              {
                "name": "payout",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "__addStake",
        "desc": "FOLLOWUP OPERATION CALLED BY THE Vestguard ADMIN TO SEND THE DELEGATED STAKE TO THE NODE OPERATOR\n\n\nReceive delegated stake and update the delegation factors.",
        "args": [
          {
            "name": "txnWithStake",
            "type": "pay",
            "desc": "Payment transaction to the contract account with the delegated stake"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "__burnStake",
        "desc": "FOLLOWUP OPERATION CALLED BY THE Vestguard ADMIN TO CLAWBACK THE DELEGATED STAKE ON BURN OPERATION",
        "args": [
          {
            "name": "amountRequested",
            "type": "uint64",
            "desc": "amount of Algo to be burned"
          },
          {
            "name": "receiverBurn",
            "type": "address",
            "desc": "address of the receiver of the burn transaction triggered on the Vestguard Admin contract"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchValidator",
        "desc": "Snitch another Validator Contract. A valid snitch will improve the performance counter.",
        "args": [
          {
            "name": "appToSnitch",
            "type": "uint64",
            "desc": "ApplicationID of the validator to be snitched"
          },
          {
            "name": "params",
            "type": "(bool,bool,bool,uint64)",
            "desc": "parameters to check for the validator (For example: performanceCheck, stakeAmountCheck, delinquentCheck, versionCheck)"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "snitchValidatorEvent",
            "args": [
              {
                "name": "request",
                "type": "(bool,bool,bool,uint64)"
              },
              {
                "name": "result",
                "type": "bool"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getSnitched",
        "args": [
          {
            "name": "checks",
            "type": "(bool,bool,bool,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "__flashloan",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "receiver",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "checkBalance",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOnline",
        "desc": "Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake",
        "args": [
          {
            "name": "feePayment",
            "type": "pay",
            "desc": "Payment transaction to the contract to cover costs for Eligibility fee 0 for renewal."
          },
          {
            "name": "votePK",
            "type": "byte[]",
            "desc": "The vote public key"
          },
          {
            "name": "selectionPK",
            "type": "byte[]",
            "desc": "The selection public key"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]",
            "desc": "the state proof public key"
          },
          {
            "name": "voteFirst",
            "type": "uint64",
            "desc": "Index of first valid block for the participation keys"
          },
          {
            "name": "voteLast",
            "type": "uint64",
            "desc": "Index of last valid block for for the participation keys"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64",
            "desc": "The vote key dilution value"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "goOnlineEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              },
              {
                "name": "delegatedStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "goOffline",
        "desc": "Set the contract account to offline so that it doesn't participate in consensus anymore.\nNo force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status\nOnce the account is set offline the method ensures that it cannot be delegated to.",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "goOfflineEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              },
              {
                "name": "delegatedStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getEligibilityFlag",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "migrateToPool",
        "desc": "Migrate the validator pool to a new pool. Useful to migrate this validator pool to a new version of the contract without losing the state.",
        "args": [
          {
            "name": "newPool",
            "type": "uint64",
            "desc": "ApplicationID of the new pool to migrate to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "__mergeStateOnMigration",
        "desc": "FOLLOWUP OPERATION Receiving call from the old pool to merge the state into the new pool.",
        "args": [
          {
            "name": "from",
            "type": "uint64"
          },
          {
            "name": "opCommit",
            "type": "uint64"
          },
          {
            "name": "opYieldAccrued",
            "type": "uint64"
          },
          {
            "name": "delegatedAmount",
            "type": "uint64"
          },
          {
            "name": "performanceCounter",
            "type": "uint64"
          },
          {
            "name": "stakeTxn",
            "type": "pay"
          },
          {
            "name": "lstTxn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimLeftAlgo",
        "desc": "Used by anyone to clear up remaining Algo outside of stake counters back to the Vestguard Admin contract to be redistributed",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "desc": "Node operator can close the Validator and get back his stake. Delegated stake is put back into the Vestguard Admin contract.",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "validatorCloseEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "returnedStake",
                "type": "uint64"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      }
    ],
    "events": [
      {
        "name": "validatorCloseEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "returnedStake",
            "type": "uint64"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "goOnlineEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          },
          {
            "name": "delegatedStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "goOfflineEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          },
          {
            "name": "delegatedStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "operatorCommitUpdateEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "amountAdded",
            "type": "uint64"
          },
          {
            "name": "amountRemoved",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "delinquencyEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "stakeAtRisk",
            "type": "uint64"
          },
          {
            "name": "delinquencyScore",
            "type": "uint64"
          },
          {
            "name": "status",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "solvedDelinquencyEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "stake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "rewardsEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "block",
            "type": "uint64"
          },
          {
            "name": "payout",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "snitchValidatorEvent",
        "args": [
          {
            "name": "request",
            "type": "(bool,bool,bool,uint64)"
          },
          {
            "name": "result",
            "type": "bool"
          }
        ],
        "desc": ""
      }
    ]
  }
}