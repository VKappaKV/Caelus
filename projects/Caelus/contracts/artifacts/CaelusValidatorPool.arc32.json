{
  "hints": {
    "createApplication(uint64,address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optIntoLST()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addToOperatorCommit(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeFromOperatorCommit(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "solveDelinquency(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reportRewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnStake(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitchValidator(uint64,(bool,bool,bool,bool,uint64,bool,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSnitched((bool,bool,bool,bool,uint64,bool,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "flashloan(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkBalance()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getEligibilityFlag()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "migrateToPool(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimLeftAlgo()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "creatorContractAppID": {
          "type": "uint64",
          "key": "creator"
        },
        "validatorPoolContractVersion": {
          "type": "uint64",
          "key": "contract_version"
        },
        "tokenId": {
          "type": "uint64",
          "key": "token_id"
        },
        "boostTokenID": {
          "type": "uint64",
          "key": "boost_token_id"
        },
        "operatorAddress": {
          "type": "bytes",
          "key": "operator"
        },
        "operatorCommit": {
          "type": "uint64",
          "key": "operator_commit"
        },
        "delegatedStake": {
          "type": "uint64",
          "key": "delegated_stake"
        },
        "maxDelegatableStake": {
          "type": "uint64",
          "key": "max_delegatable_stake"
        },
        "status": {
          "type": "uint64",
          "key": "status"
        },
        "performanceCounter": {
          "type": "uint64",
          "key": "performance"
        },
        "saturationBuffer": {
          "type": "uint64",
          "key": "saturation_buffer"
        },
        "lastRewardReport": {
          "type": "uint64",
          "key": "reward_report"
        },
        "lastDelinquencyReport": {
          "type": "uint64",
          "key": "delinquency_report"
        },
        "delinquencyScore": {
          "type": "uint64",
          "key": "delinquency_score"
        },
        "balanceCheckpoint": {
          "type": "uint64",
          "key": "balance_checkpoint"
        },
        "repaid": {
          "type": "bytes",
          "key": "repaid"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 14
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCmludGNibG9jayAwIDEgMiA2IDQgNTAwMDAwMDAwMDAwMDAgNSAxMDAwIDMyIDMgMTgKYnl0ZWNibG9jayAweDY0NjU2YzY1Njc2MTc0NjU2NDVmNzM3NDYxNmI2NSAweDYzNzI2NTYxNzQ2ZjcyIDB4NmY3MDY1NzI2MTc0NmY3MjVmNjM2ZjZkNmQ2OTc0IDB4IDB4NzM3NDYxNzQ3NTczIDB4NmY3MDY1NzI2MTc0NmY3MiAweDc0NmY2YjY1NmU1ZjY5NjQgMHg2ZDYxNzg1ZjY0NjU2YzY1Njc2MTc0NjE2MjZjNjU1ZjczNzQ2MTZiNjUgMHg2NDY1NmM2OTZlNzE3NTY1NmU2Mzc5NWY3MzYzNmY3MjY1IDB4NzA2NTcyNjY2ZjcyNmQ2MTZlNjM2NSAweDYyNmY2ZjczNzQ1Zjc0NmY2YjY1NmU1ZjY5NjQgMHg2NDY1NmM2OTZlNzE3NTY1NmU2Mzc5NWY3MjY1NzA2ZjcyNzQgMHg2MjYxNmM2MTZlNjM2NTVmNjM2ODY1NjM2YjcwNmY2OTZlNzQgMHg3MzYxNzQ3NTcyNjE3NDY5NmY2ZTVmNjI3NTY2NjY2NTcyIDB4NzI2NTc3NjE3MjY0NWY3MjY1NzA2ZjcyNzQgMHgwMCAweDAwMDAwMDAwMDAwMDAwMDAgMHg2MzZmNmU3NDcyNjE2Mzc0NWY3NjY1NzI3MzY5NmY2ZSAweGNkNTNiYzliIDB4ZjdjYTI4MDIgMHgxNTFmN2M3NSAweDQxMmI3MGE4IDB4NTEwOTEwZTAgMHg5MTFjM2M0NiAweDkxMDcwYjgwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNS41Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnRjIDMgLy8gNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24odWludDY0LGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyB0b2tlbklkOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyBjb250cmFjdFZlcnNpb246IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIG9wZXJhdG9yQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludGMgOCAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAyIChvcGVyYXRvckFkZHJlc3MpIGZvciBjcmVhdGVBcHBsaWNhdGlvbiBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gY3JlYXRpbmdDb250cmFjdDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKGNyZWF0aW5nQ29udHJhY3Q6IEFwcElELCBvcGVyYXRvckFkZHJlc3M6IEFkZHJlc3MsIGNvbnRyYWN0VmVyc2lvbjogdWludDY0LCB0b2tlbklkOiBBc3NldElEKTogdm9pZAovLwovLyBjcmVhdGVBcHBsaWNhdGlvbiBtZXRob2QgY2FsbGVkIGF0IGNyZWF0aW9uLCBpbml0aWFsaXplcyBzb21lIGdsb2JhbEtleSB2YWx1ZXMKLy8gQHBhcmFtIHtBcHBJRH0gY3JlYXRpbmdDb250cmFjdCAtIEFwcGxpY2F0aW9uSUQgZm9yIHRoZSBjcmVhdG9yIGNvbnRyYWN0IChDYWVsdXNBZG1pbkNvbnRyYWN0KQovLyBAcGFyYW0ge0FkZHJlc3N9IG9wZXJhdG9yQWRkcmVzcyAtIEFkZHJlc3Mgb2YgdGhlIG5vZGUgb3BlcmF0b3IgdXNlZCB0byBzaWduIG9ubGluZS9vZmZsaW5lIHR4bnMgYW5kIHBhcnRpY2lwYXRlIGluIGF1Y3Rpb25zCi8vIEBwYXJhbSB7dWludDY0fSBjb250cmFjdFZlcnNpb24gLSBBcHByb3ZhbCBQcm9ncmFtIHZlcnNpb24gZm9yIHRoZSBub2RlIGNvbnRyYWN0LCBzdG9yZWQgaW4gdGhlIENhZWx1c0FkbWluQ29udHJhY3QKLy8gQHBhcmFtIHtBc3NldElEfSB0b2tlbklkIC0gQXNzZXRJRCBvZiB0aGUgTFNUIHRva2VuCmNyZWF0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gNCAwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjg4CgkvLyBhc3NlcnQoY3JlYXRpbmdDb250cmFjdCA9PT0gZ2xvYmFscy5jYWxsZXJBcHBsaWNhdGlvbklEKQoJZnJhbWVfZGlnIC0xIC8vIGNyZWF0aW5nQ29udHJhY3Q6IEFwcElECglnbG9iYWwgQ2FsbGVyQXBwbGljYXRpb25JRAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo4OQoJLy8gdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZSA9IGNyZWF0aW5nQ29udHJhY3QKCWJ5dGVjIDEgLy8gICJjcmVhdG9yIgoJZnJhbWVfZGlnIC0xIC8vIGNyZWF0aW5nQ29udHJhY3Q6IEFwcElECglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo5MAoJLy8gdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUgPSBvcGVyYXRvckFkZHJlc3MKCWJ5dGVjIDUgLy8gICJvcGVyYXRvciIKCWZyYW1lX2RpZyAtMiAvLyBvcGVyYXRvckFkZHJlc3M6IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjkxCgkvLyB0aGlzLnZhbGlkYXRvclBvb2xDb250cmFjdFZlcnNpb24udmFsdWUgPSBjb250cmFjdFZlcnNpb24KCWJ5dGVjIDE3IC8vICAiY29udHJhY3RfdmVyc2lvbiIKCWZyYW1lX2RpZyAtMyAvLyBjb250cmFjdFZlcnNpb246IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6OTMKCS8vIHRoaXMudG9rZW5JZC52YWx1ZSA9IHRva2VuSWQKCWJ5dGVjIDYgLy8gICJ0b2tlbl9pZCIKCWZyYW1lX2RpZyAtNCAvLyB0b2tlbklkOiBBc3NldElECglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo5NgoJLy8gdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSA9IDAKCWJ5dGVjIDIgLy8gICJvcGVyYXRvcl9jb21taXQiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6OTcKCS8vIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgPSAwCglieXRlYyAwIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjk4CgkvLyB0aGlzLm1heERlbGVnYXRhYmxlU3Rha2UudmFsdWUgPSAwCglieXRlYyA3IC8vICAibWF4X2RlbGVnYXRhYmxlX3N0YWtlIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjEwMQoJLy8gdGhpcy5zdGF0dXMudmFsdWUgPSBOT1RfREVMRUdBVEFCTEVfU1RBVFVTCglieXRlYyA0IC8vICAic3RhdHVzIgoJaW50YyAxIC8vIDEKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjEwMgoJLy8gdGhpcy5zYXR1cmF0aW9uQnVmZmVyLnZhbHVlID0gMAoJYnl0ZWMgMTMgLy8gICJzYXR1cmF0aW9uX2J1ZmZlciIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMDMKCS8vIHRoaXMucGVyZm9ybWFuY2VDb3VudGVyLnZhbHVlID0gMAoJYnl0ZWMgOSAvLyAgInBlcmZvcm1hbmNlIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjEwNAoJLy8gdGhpcy5kZWxpbnF1ZW5jeVNjb3JlLnZhbHVlID0gMAoJYnl0ZWMgOCAvLyAgImRlbGlucXVlbmN5X3Njb3JlIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjEwNgoJLy8gdGhpcy5yZXBhaWQudmFsdWUgPSB0cnVlCglwdXNoYnl0ZXMgMHg3MjY1NzA2MTY5NjQgLy8gInJlcGFpZCIKCWludGMgMSAvLyAxCglieXRlYyAxNSAvLyAweDAwCglpbnRjIDAgLy8gMAoJdW5jb3ZlciAyCglzZXRiaXQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIG9wdEludG9MU1QoKXZvaWQKKmFiaV9yb3V0ZV9vcHRJbnRvTFNUOgoJLy8gZXhlY3V0ZSBvcHRJbnRvTFNUKCl2b2lkCgljYWxsc3ViIG9wdEludG9MU1QKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIG9wdEludG9MU1QoKTogdm9pZAovLwovLyBBUkM0IFBVQkxJQyBNRVRIT0RTCm9wdEludG9MU1Q6Cglwcm90byAwIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMyAvLyAweAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMTQKCS8vIGFzc2VydCghdGhpcy5hcHAuYWRkcmVzcy5pc09wdGVkSW5Ub0Fzc2V0KHRoaXMudG9rZW5JZC52YWx1ZSksICdhbHJlYWR5IG9wdGVkIGluIHRva2VuSWQnKQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWJ5dGVjIDYgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0Cglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXN3YXAKCXBvcAoJIQoKCS8vIGFscmVhZHkgb3B0ZWQgaW4gdG9rZW5JZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjExNQoJLy8gbHN0ID0gdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5nbG9iYWxTdGF0ZSgndG9rZW5faWQnKSBhcyBBc3NldElECglieXRlYyAxIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyA2IC8vICAidG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldF9leAoKCS8vIGdsb2JhbCBzdGF0ZSB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5nbG9iYWxTdGF0ZSgndG9rZW5faWQnKQoJYXNzZXJ0CglmcmFtZV9idXJ5IDAgLy8gbHN0OiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTE2CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgeGZlckFzc2V0OiBsc3QsCgkvLyAgICAgICBhc3NldEFtb3VudDogMCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyA0IC8vICBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMTcKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTE4CgkvLyB4ZmVyQXNzZXQ6IGxzdAoJZnJhbWVfZGlnIDAgLy8gbHN0OiB1aW50NjQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjExOQoJLy8gYXNzZXRBbW91bnQ6IDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBhZGRUb09wZXJhdG9yQ29tbWl0KHBheSl2b2lkCiphYmlfcm91dGVfYWRkVG9PcGVyYXRvckNvbW1pdDoKCS8vIG9wU3Rha2U6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludGMgMSAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDEgLy8gIHBheQoJPT0KCgkvLyBhcmd1bWVudCAwIChvcFN0YWtlKSBmb3IgYWRkVG9PcGVyYXRvckNvbW1pdCBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIGFkZFRvT3BlcmF0b3JDb21taXQocGF5KXZvaWQKCWNhbGxzdWIgYWRkVG9PcGVyYXRvckNvbW1pdAoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gYWRkVG9PcGVyYXRvckNvbW1pdChvcFN0YWtlOiBQYXlUeG4pOiB2b2lkCi8vCi8vIFVzZWQgYnkgdGhlIENhZWx1cyBBZG1pbiB0byBzZW5kIHRoZSBjb3JyZWN0IGFtb3VudCBpbnRvIHRoZSBvcGVyYXRvciBjb21taXQKLy8KLy8gQHBhcmFtIHtQYXlUeG59IG9wU3Rha2UgLSBub2RlIG9wZXJhdG9yIHN0YWtlIGNvbW1pdG1lbnQKYWRkVG9PcGVyYXRvckNvbW1pdDoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMjkKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLAoJLy8gICAgICAgJ29ubHkgQ2FlbHVzIGFkbWluIGNhbiByb3V0ZSBvcGVyYXRvciBzdGFrZSB3aXRob3V0IExTVCcKCS8vICAgICApCgl0eG4gU2VuZGVyCglieXRlYyAxIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09CgoJLy8gb25seSBDYWVsdXMgYWRtaW4gY2FuIHJvdXRlIG9wZXJhdG9yIHN0YWtlIHdpdGhvdXQgTFNUCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTMzCgkvLyB2ZXJpZnlQYXlUeG4ob3BTdGFrZSwgewoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG9wU3Rha2U6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoib3BTdGFrZSIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjEzNgoJLy8gdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSArPSBvcFN0YWtlLmFtb3VudAoJYnl0ZWMgMiAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gb3BTdGFrZTogUGF5VHhuCglndHhucyBBbW91bnQKCSsKCWJ5dGVjIDIgLy8gICJvcGVyYXRvcl9jb21taXQiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vICppZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTM3CgkvLyB0aGlzLnN0YXR1cy52YWx1ZSA9PT0gREVMSU5RVUVOQ1lfU1RBVFVTCglieXRlYyA0IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMiAvLyAyCgk9PQoJYnogKmlmMF9lbmQKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxMzgKCS8vIHJldHVybjsKCXJldHN1YgoKKmlmMF9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTQwCgkvLyB0aGlzLnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCkKCWNhbGxzdWIgdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTQyCgkvLyB0aGlzLm9wZXJhdG9yQ29tbWl0VXBkYXRlRXZlbnQubG9nKHsKCS8vICAgICAgIGFwcDogdGhpcy5hcHAsCgkvLyAgICAgICBvcGVyYXRvcjogdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICBhbW91bnRBZGRlZDogb3BTdGFrZS5hbW91bnQsCgkvLyAgICAgICBhbW91bnRSZW1vdmVkOiAwLAoJLy8gICAgIH0pCglieXRlYyAxOCAvLyAgb3BlcmF0b3JDb21taXRVcGRhdGVFdmVudCh1aW50NjQsYWRkcmVzcyx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJaXRvYgoJYnl0ZWMgNSAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWNvbmNhdAoJZnJhbWVfZGlnIC0xIC8vIG9wU3Rha2U6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpdG9iCgljb25jYXQKCWJ5dGVjIDE2IC8vIDB4MDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyByZW1vdmVGcm9tT3BlcmF0b3JDb21taXQodWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfcmVtb3ZlRnJvbU9wZXJhdG9yQ29tbWl0OgoJLy8gY2xhaW1SZXF1ZXN0TFNUOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBjbGFpbVJlcXVlc3Q6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgcmVtb3ZlRnJvbU9wZXJhdG9yQ29tbWl0KHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiByZW1vdmVGcm9tT3BlcmF0b3JDb21taXQKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIHJlbW92ZUZyb21PcGVyYXRvckNvbW1pdChjbGFpbVJlcXVlc3Q6IHVpbnQ2NCwgY2xhaW1SZXF1ZXN0TFNUOiB1aW50NjQpOiB2b2lkCi8vCi8vIFVzZWQgYnkgdGhlIG5vZGUgb3BlcmF0b3IgdG8gcmVtb3ZlIGZyb20gaGlzIHN0YWtlIGFtb3VudCBmb3IgdGhlIG5vZGUKLy8gQHBhcmFtIHt1aW50NjR9IGNsYWltUmVxdWVzdCAtIGFtb3VudCBjbGFpbWVkIGJ5IHRoZSBub2RlIG9wZXJhdG9yIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgb3BlcmF0b3JfY29tbWl0IGNvdW50ZXIgYW5kIG1vdmVkIGludG8gZGVsZWdhdGVkIHN0YWtlCi8vIEBwYXJhbSB7dWludDY0fSBjbGFpbVJlcXVlc3RMU1QgLSBhbW91bnQgb2YgTFNUIHRvIGJlIHNlbnQgYmFjayB0byB0aGUgbm9kZSBvcGVyYXRvcgpyZW1vdmVGcm9tT3BlcmF0b3JDb21taXQ6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTU2CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MpCgl0eG4gU2VuZGVyCglieXRlYyAxIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTU3CgkvLyBhc3NlcnQoCgkvLyAgICAgICB0aGlzLnN0YXR1cy52YWx1ZSAhPT0gREVMSU5RVUVOQ1lfU1RBVFVTLAoJLy8gICAgICAgJ2Nhbm5vdCB3aXRoZHJhdyBmdW5kcyBpZiB0aGUgYWNjb3VudCBpcyBmbGFnZ2VkIGFzIGRlbGlucXVlbnQsIG11c3Qgc29sdmUgZGVsaW5xdWVuY3kgZmlyc3QnCgkvLyAgICAgKQoJYnl0ZWMgNCAvLyAgInN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDIgLy8gMgoJIT0KCgkvLyBjYW5ub3Qgd2l0aGRyYXcgZnVuZHMgaWYgdGhlIGFjY291bnQgaXMgZmxhZ2dlZCBhcyBkZWxpbnF1ZW50LCBtdXN0IHNvbHZlIGRlbGlucXVlbmN5IGZpcnN0Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTYxCgkvLyBhc3NlcnQoCgkvLyAgICAgICB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlIC0gY2xhaW1SZXF1ZXN0ID4gZ2xvYmFscy5wYXlvdXRzTWluQmFsYW5jZSwKCS8vICAgICAgICdOb2RlIE9wZXJhdG9yIGNhbiB0YWtlIGhpcyBzdGFrZSBiZWxvdyAzMGsgb25seSBpZiB0aGUgbm9kZSBjb250cmFjdCB3aWxsIGJlIGNsb3NlZCcKCS8vICAgICApCglieXRlYyAyIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBjbGFpbVJlcXVlc3Q6IHVpbnQ2NAoJLQoJZ2xvYmFsIFBheW91dHNNaW5CYWxhbmNlCgk+CgoJLy8gTm9kZSBPcGVyYXRvciBjYW4gdGFrZSBoaXMgc3Rha2UgYmVsb3cgMzBrIG9ubHkgaWYgdGhlIG5vZGUgY29udHJhY3Qgd2lsbCBiZSBjbG9zZWQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxNjUKCS8vIGFzc2VydCh0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlID4gY2xhaW1SZXF1ZXN0LCAnTm9kZSBPcGVyYXRvciBjYW5ub3QgY2xhaW0gbW9yZSB0aGFuIGhlIGhhcycpCglieXRlYyAyIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBjbGFpbVJlcXVlc3Q6IHVpbnQ2NAoJPgoKCS8vIE5vZGUgT3BlcmF0b3IgY2Fubm90IGNsYWltIG1vcmUgdGhhbiBoZSBoYXMKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxNjgKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIHhmZXJBc3NldDogdGhpcy50b2tlbklkLnZhbHVlLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICBhc3NldEFtb3VudDogY2xhaW1SZXF1ZXN0TFNULAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDQgLy8gIGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjE2OQoJLy8geGZlckFzc2V0OiB0aGlzLnRva2VuSWQudmFsdWUKCWJ5dGVjIDYgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxNzAKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlCglieXRlYyA1IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjE3MQoJLy8gYXNzZXRBbW91bnQ6IGNsYWltUmVxdWVzdExTVAoJZnJhbWVfZGlnIC0yIC8vIGNsYWltUmVxdWVzdExTVDogdWludDY0CglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoxNzQKCS8vIHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUgLT0gY2xhaW1SZXF1ZXN0CglieXRlYyAyIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBjbGFpbVJlcXVlc3Q6IHVpbnQ2NAoJLQoJYnl0ZWMgMiAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjE3NQoJLy8gdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSArPSBjbGFpbVJlcXVlc3QKCWJ5dGVjIDAgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGNsYWltUmVxdWVzdDogdWludDY0CgkrCglieXRlYyAwIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTc2CgkvLyB0aGlzLnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCkKCWNhbGxzdWIgdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTc4CgkvLyB0aGlzLm9wZXJhdG9yQ29tbWl0VXBkYXRlRXZlbnQubG9nKHsKCS8vICAgICAgIGFwcDogdGhpcy5hcHAsCgkvLyAgICAgICBvcGVyYXRvcjogdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICBhbW91bnRBZGRlZDogMCwKCS8vICAgICAgIGFtb3VudFJlbW92ZWQ6IGNsYWltUmVxdWVzdCwKCS8vICAgICB9KQoJYnl0ZWMgMTggLy8gIG9wZXJhdG9yQ29tbWl0VXBkYXRlRXZlbnQodWludDY0LGFkZHJlc3MsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWJ5dGVjIDUgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgljb25jYXQKCWJ5dGVjIDE2IC8vIDB4MDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gY2xhaW1SZXF1ZXN0OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gc29sdmVEZWxpbnF1ZW5jeSh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3NvbHZlRGVsaW5xdWVuY3k6CgkvLyBibG9jazogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzb2x2ZURlbGlucXVlbmN5KHVpbnQ2NCl2b2lkCgljYWxsc3ViIHNvbHZlRGVsaW5xdWVuY3kKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIHNvbHZlRGVsaW5xdWVuY3koYmxvY2s6IHVpbnQ2NCk6IHZvaWQKLy8KLy8gRGVsaW5xdWVudCBWYWxpZGF0b3JzIG5lZWQgdG8gcHJvcG9zZSBhIHZhbGlkIGJsb2NrIHRvIGNsZWFyIHVwIHRoZWlyIGRlbGlucXVlbmN5IHN0YXR1cy4KLy8KLy8gVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSBkZWxpbnF1ZW5jeSBzY29yZSBpcyBiZWxvdyB0aGUgdGhyZXNob2xkIGFuZCB0aGUgb3BlcmF0b3IgaGFzIHByb3Bvc2VkIGEgYmxvY2suCi8vCi8vIEBwYXJhbSBibG9jayAtIGJsb2NrIG51bWJlciBvZiB0aGUgYmxvY2sgcHJvcG9zZWQgYnkgdGhlIG5vZGUgb3BlcmF0b3Igd2hpbGUgdGhlIGFjY291bnQgd2FzIGluIGRlbGlucXVlbmN5CnNvbHZlRGVsaW5xdWVuY3k6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTk0CgkvLyBhc3NlcnQodGhpcy5zdGF0dXMudmFsdWUgIT09IERFTElOUVVFTkNZX1NUQVRVUywgJ0FjY291bnQgaXMgbm90IGRlbGlucXVlbnQnKQoJYnl0ZWMgNCAvLyAgInN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDIgLy8gMgoJIT0KCgkvLyBBY2NvdW50IGlzIG5vdCBkZWxpbnF1ZW50Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTk1CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm9wZXJhdG9yQWRkcmVzcy52YWx1ZSwgJ09ubHkgdGhlIE5vZGUgT3BlcmF0b3IgY2FuIGNsZWFyIHVwIERlbGlucXVlbmN5JykKCXR4biBTZW5kZXIKCWJ5dGVjIDUgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIE9ubHkgdGhlIE5vZGUgT3BlcmF0b3IgY2FuIGNsZWFyIHVwIERlbGlucXVlbmN5Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MTk2CgkvLyBhc3NlcnQoCgkvLyAgICAgICB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlID09PSAwLAoJLy8gICAgICAgJ0JlZm9yZSBjbGVhcmluZyB1cCBkZWxpbnF1ZW5jeSBhbGwgdGhlIGRlbGVnYXRlZCBzdGFrZSBtdXN0IGhhdmUgYmVlbiByZWRpc3RyaWJ1dGVkJwoJLy8gICAgICkKCWJ5dGVjIDAgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDAKCT09CgoJLy8gQmVmb3JlIGNsZWFyaW5nIHVwIGRlbGlucXVlbmN5IGFsbCB0aGUgZGVsZWdhdGVkIHN0YWtlIG11c3QgaGF2ZSBiZWVuIHJlZGlzdHJpYnV0ZWQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMDAKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMudG9rZW5JZC52YWx1ZSkgPT09IDAsCgkvLyAgICAgICAnQmVmb3JlIGNsZWFyaW5nIHVwIGRlbGlucXVlbmN5IGFsbCB0aGUgTFNUIG11c3QgaGF2ZSBiZWVuIGJ1cm5lZCcKCS8vICAgICApCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYnl0ZWMgNiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglpbnRjIDAgLy8gMAoJPT0KCgkvLyBCZWZvcmUgY2xlYXJpbmcgdXAgZGVsaW5xdWVuY3kgYWxsIHRoZSBMU1QgbXVzdCBoYXZlIGJlZW4gYnVybmVkCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjA0CgkvLyBhc3NlcnQoYmxvY2tzW2Jsb2NrXS5wcm9wb3NlciA9PT0gdGhpcy5hcHAuYWRkcmVzcywgJ3RoZSBzb2x2aW5nIGJsb2NrIG11c3QgYmUgcHJvcG9zZWQgYnkgdGhpcyBhY2NvdW50JykKCWZyYW1lX2RpZyAtMSAvLyBibG9jazogdWludDY0CglibG9jayBCbGtQcm9wb3NlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdGhlIHNvbHZpbmcgYmxvY2sgbXVzdCBiZSBwcm9wb3NlZCBieSB0aGlzIGFjY291bnQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMDUKCS8vIGFzc2VydCh0aGlzLmxhc3REZWxpbnF1ZW5jeVJlcG9ydC52YWx1ZSA8IGJsb2NrKQoJYnl0ZWMgMTEgLy8gICJkZWxpbnF1ZW5jeV9yZXBvcnQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGJsb2NrOiB1aW50NjQKCTwKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMDYKCS8vIGFzc2VydCh0aGlzLmRlbGlucXVlbmN5VGhyZXNob2xkQ2hlY2soKSwgJ0RlbGlucXVlbmN5IHNjb3JlIG11c3QgYmUgYmVsb3cgdGhyZXNob2xkJykKCWNhbGxzdWIgZGVsaW5xdWVuY3lUaHJlc2hvbGRDaGVjawoKCS8vIERlbGlucXVlbmN5IHNjb3JlIG11c3QgYmUgYmVsb3cgdGhyZXNob2xkCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjA3CgkvLyB0aGlzLnN0YXR1cy52YWx1ZSA9IE5FVVRSQUxfU1RBVFVTCglieXRlYyA0IC8vICAic3RhdHVzIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjIwOAoJLy8gdGhpcy51cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycygpCgljYWxsc3ViIHVwZGF0ZURlbGVnYXRpb25GYWN0b3JzCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjIwOQoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c0FkbWluLnByb3RvdHlwZS5yZU1pbnREZWxpbnF1ZW50Q29tbWl0LCB2b2lkPih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLAoJLy8gICAgICAgbWV0aG9kQXJnczogW3RoaXMuYXBwXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHgwMzc0NzkzMyAvLyBtZXRob2QgInJlTWludERlbGlucXVlbnRDb21taXQodWludDY0KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMTAKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUKCWJ5dGVjIDEgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMTEKCS8vIG1ldGhvZEFyZ3M6IFt0aGlzLmFwcF0KCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMTQKCS8vIHRoaXMuc29sdmVkRGVsaW5xdWVuY3lFdmVudC5sb2coewoJLy8gICAgICAgYXBwOiB0aGlzLmFwcCwKCS8vICAgICAgIG9wZXJhdG9yOiB0aGlzLm9wZXJhdG9yQWRkcmVzcy52YWx1ZSwKCS8vICAgICAgIHN0YWtlOiB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlLAoJLy8gICAgIH0pCglwdXNoYnl0ZXMgMHhkYjNlMTZmYiAvLyBzb2x2ZWREZWxpbnF1ZW5jeUV2ZW50KHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWJ5dGVjIDUgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgljb25jYXQKCWJ5dGVjIDIgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyByZXBvcnRSZXdhcmRzKHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfcmVwb3J0UmV3YXJkczoKCS8vIGJsb2NrOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHJlcG9ydFJld2FyZHModWludDY0KXZvaWQKCWNhbGxzdWIgcmVwb3J0UmV3YXJkcwoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gcmVwb3J0UmV3YXJkcyhibG9jazogdWludDY0KTogdm9pZAovLwovLyBDYWxsZWQgYnkgdGhlIG5vZGUgb3BlcmF0b3IgdG8gcmVwb3J0IHRoZSByZXdhcmRzIG9mIGEgYmxvY2sgcHJvcG9zZWQgYnkgdGhlIGNvbnRyYWN0IGFjY291bnQuCi8vCi8vIEBwYXJhbSB7dWludDY0fSBibG9jayAtIEJsb2NrIG51bWJlciBvZiB0aGUgYmxvY2sgcHJvcG9zZWQgYnkgdGhlIG5vZGUgb3BlcmF0b3IKLy8KLy8gV0hFTiBDUkFGVElORyBUWE4gVEhFIEJMT0NLIFJPVU5EIE5FRURTIFRPIEJFIElOQ0xVREVEIEFTIEZJUlNUIFZBTElECnJlcG9ydFJld2FyZHM6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMyAvLyAweAoJZHVwbiAyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjIyOQoJLy8gYXNzZXJ0KGJsb2Nrc1tibG9ja10ucHJvcG9zZXIgPT09IHRoaXMuYXBwLmFkZHJlc3MpCglmcmFtZV9kaWcgLTEgLy8gYmxvY2s6IHVpbnQ2NAoJYmxvY2sgQmxrUHJvcG9zZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjIzMgoJLy8gYXNzZXJ0KGJsb2NrID4gdGhpcy5sYXN0UmV3YXJkUmVwb3J0LnZhbHVlKQoJZnJhbWVfZGlnIC0xIC8vIGJsb2NrOiB1aW50NjQKCWJ5dGVjIDE0IC8vICAicmV3YXJkX3JlcG9ydCIKCWFwcF9nbG9iYWxfZ2V0Cgk+Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjMzCgkvLyBpc09wZXJhdG9yUmVwb3J0VGltZSA9IGdsb2JhbHMucm91bmQgLSBibG9jayA8IE9QRVJBVE9SX1JFUE9SVF9NQVhfVElNRQoJZ2xvYmFsIFJvdW5kCglmcmFtZV9kaWcgLTEgLy8gYmxvY2s6IHVpbnQ2NAoJLQoJcHVzaGludCA3MDAKCTwKCWZyYW1lX2J1cnkgMCAvLyBpc09wZXJhdG9yUmVwb3J0VGltZTogYm9vbAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMzQKCS8vIHJlcG9ydCA9IGJsb2Nrc1tibG9ja10ucHJvcG9zZXJQYXlvdXQKCWZyYW1lX2RpZyAtMSAvLyBibG9jazogdWludDY0CglibG9jayBCbGtQcm9wb3NlclBheW91dAoJZnJhbWVfYnVyeSAxIC8vIHJlcG9ydDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjIzNQoJLy8gdGFrZUZlZSA9IHdpZGVSYXRpbyhbcmVwb3J0LCBWQUxJREFUT1JfQ09NTUlTU0lPTl0sIFsxMDBdKQoJZnJhbWVfZGlnIDEgLy8gcmVwb3J0OiB1aW50NjQKCWludGMgMyAvLyA2CgltdWx3CglpbnRjIDAgLy8gMAoJcHVzaGludCAxMDAKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglmcmFtZV9idXJ5IDIgLy8gdGFrZUZlZTogdWludDY0CgoJLy8gKmlmMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyMzcKCS8vIHRoaXMuZ2V0VG9sZXJhdGVkUHJvcG9zYWxEZWx0YSgpIDwgZ2xvYmFscy5yb3VuZCAtIHRoaXMubGFzdFJld2FyZFJlcG9ydC52YWx1ZQoJY2FsbHN1YiBnZXRUb2xlcmF0ZWRQcm9wb3NhbERlbHRhCglnbG9iYWwgUm91bmQKCWJ5dGVjIDE0IC8vICAicmV3YXJkX3JlcG9ydCIKCWFwcF9nbG9iYWxfZ2V0CgktCgk8CglieiAqaWYxX2VuZAoKCS8vICppZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjIzOAoJLy8gdGhpcy5wZXJmb3JtYW5jZUNvdW50ZXIudmFsdWUgKz0gMQoJYnl0ZWMgOSAvLyAgInBlcmZvcm1hbmNlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMSAvLyAxCgkrCglieXRlYyA5IC8vICAicGVyZm9ybWFuY2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKKmlmMV9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjQwCgkvLyB0aGlzLmZpeERlbGlucXVlbmN5U2NvcmUoKQoJY2FsbHN1YiBmaXhEZWxpbnF1ZW5jeVNjb3JlCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjI0MQoJLy8gdGhpcy5sYXN0UmV3YXJkUmVwb3J0LnZhbHVlID0gYmxvY2sKCWJ5dGVjIDE0IC8vICAicmV3YXJkX3JlcG9ydCIKCWZyYW1lX2RpZyAtMSAvLyBibG9jazogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vICppZjJfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjQyCgkvLyBpc09wZXJhdG9yUmVwb3J0VGltZQoJZnJhbWVfZGlnIDAgLy8gaXNPcGVyYXRvclJlcG9ydFRpbWU6IGJvb2wKCWJ6ICppZjJfZWxzZQoKCS8vICppZjJfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjI0MwoJLy8gdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSArPSB0YWtlRmVlCglieXRlYyAyIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAyIC8vIHRha2VGZWU6IHVpbnQ2NAoJKwoJYnl0ZWMgMiAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgliICppZjJfZW5kCgoqaWYyX2Vsc2U6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjQ1CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgIGFtb3VudDogdGFrZUZlZSwKCS8vICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyNDYKCS8vIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjQ3CgkvLyBhbW91bnQ6IHRha2VGZWUKCWZyYW1lX2RpZyAyIC8vIHRha2VGZWU6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoqaWYyX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyNTEKCS8vIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNBZG1pbi5wcm90b3R5cGUuZGVjbGFyZVJld2FyZHM+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHRoaXMuYXBwLAoJLy8gICAgICAgICBibG9jaywKCS8vICAgICAgICAgewoJLy8gICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICAgICAgYW1vdW50OiByZXBvcnQgLSB0YWtlRmVlLAoJLy8gICAgICAgICB9LAoJLy8gICAgICAgXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAxIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjU3CgkvLyByZWNlaXZlcjogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzCglieXRlYyAxIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjU4CgkvLyBhbW91bnQ6IHJlcG9ydCAtIHRha2VGZWUKCWZyYW1lX2RpZyAxIC8vIHJlcG9ydDogdWludDY0CglmcmFtZV9kaWcgMiAvLyB0YWtlRmVlOiB1aW50NjQKCS0KCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4OGFmNDk2MzkgLy8gbWV0aG9kICJkZWNsYXJlUmV3YXJkcyh1aW50NjQsdWludDY0LHBheSl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjUyCgkvLyBhcHBsaWNhdGlvbklEOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlCglieXRlYyAxIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjUzCgkvLyBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHRoaXMuYXBwLAoJLy8gICAgICAgICBibG9jaywKCS8vICAgICAgICAgewoJLy8gICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICAgICAgYW1vdW50OiByZXBvcnQgLSB0YWtlRmVlLAoJLy8gICAgICAgICB9LAoJLy8gICAgICAgXQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMSAvLyBibG9jazogdWludDY0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjYzCgkvLyB0aGlzLnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCkKCWNhbGxzdWIgdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjY1CgkvLyB0aGlzLnJld2FyZHNFdmVudC5sb2coewoJLy8gICAgICAgYXBwOiB0aGlzLmFwcCwKCS8vICAgICAgIGJsb2NrOiBibG9jaywKCS8vICAgICAgIHBheW91dDogcmVwb3J0LAoJLy8gICAgIH0pCglwdXNoYnl0ZXMgMHhmMjNiZDg4MiAvLyByZXdhcmRzRXZlbnQodWludDY0LHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglpdG9iCglmcmFtZV9kaWcgLTEgLy8gYmxvY2s6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMSAvLyByZXBvcnQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBhZGRTdGFrZShwYXkpdm9pZAoqYWJpX3JvdXRlX2FkZFN0YWtlOgoJLy8gdHhuV2l0aFN0YWtlOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAodHhuV2l0aFN0YWtlKSBmb3IgYWRkU3Rha2UgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhZGRTdGFrZShwYXkpdm9pZAoJY2FsbHN1YiBhZGRTdGFrZQoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gYWRkU3Rha2UodHhuV2l0aFN0YWtlOiBQYXlUeG4pOiB2b2lkCi8vCi8vIFJlY2VpdmUgZGVsZWdhdGVkIHN0YWtlIGFuZCB1cGRhdGUgdGhlIGRlbGVnYXRpb24gZmFjdG9ycy4KLy8KLy8gQHBhcmFtIHtQYXlUeG59IHR4bldpdGhTdGFrZSAtIFBheW1lbnQgdHJhbnNhY3Rpb24gdG8gdGhlIGNvbnRyYWN0IGFjY291bnQgd2l0aCB0aGUgZGVsZWdhdGVkIHN0YWtlCmFkZFN0YWtlOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjI3OAoJLy8gdmVyaWZ5UGF5VHhuKHR4bldpdGhTdGFrZSwgewoJLy8gICAgICAgc2VuZGVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHR4bldpdGhTdGFrZTogUGF5VHhuCglndHhucyBTZW5kZXIKCWJ5dGVjIDEgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InR4bldpdGhTdGFrZSIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gdHhuV2l0aFN0YWtlOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InR4bldpdGhTdGFrZSIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjI4MgoJLy8gdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSArPSB0eG5XaXRoU3Rha2UuYW1vdW50CglieXRlYyAwIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyB0eG5XaXRoU3Rha2U6IFBheVR4bgoJZ3R4bnMgQW1vdW50CgkrCglieXRlYyAwIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MjgzCgkvLyB0aGlzLnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCkKCWNhbGxzdWIgdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMKCXJldHN1YgoKLy8gYnVyblN0YWtlKHVpbnQ2NCxhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9idXJuU3Rha2U6CgkvLyByZWNlaXZlckJ1cm46IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnRjIDggLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAocmVjZWl2ZXJCdXJuKSBmb3IgYnVyblN0YWtlIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBhbW91bnRSZXF1ZXN0ZWQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgYnVyblN0YWtlKHVpbnQ2NCxhZGRyZXNzKXZvaWQKCWNhbGxzdWIgYnVyblN0YWtlCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBidXJuU3Rha2UoYW1vdW50UmVxdWVzdGVkOiB1aW50NjQsIHJlY2VpdmVyQnVybjogQWRkcmVzcyk6IHZvaWQKLy8KLy8KLy8gQHBhcmFtIHt1aW50NjR9IGFtb3VudFJlcXVlc3RlZCAtIGFtb3VudCBvZiBBbGdvIHRvIGJlIGJ1cm5lZAovLyBAcGFyYW0ge0FkZHJlc3N9IHJlY2VpdmVyQnVybiAtIGFkZHJlc3Mgb2YgdGhlIHJlY2VpdmVyIG9mIHRoZSBidXJuIHRyYW5zYWN0aW9uIHRyaWdnZXJlZCBvbiB0aGUgQ2FlbHVzIEFkbWluIGNvbnRyYWN0CmJ1cm5TdGFrZToKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyOTIKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLAoJLy8gICAgICAgJ09ubHkgdGhlIENhZWx1cyBBZG1pbiBjb250cmFjdCBjYW4gY2FsbCB0aGlzIG1ldGhvZCcKCS8vICAgICApCgl0eG4gU2VuZGVyCglieXRlYyAxIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09CgoJLy8gT25seSB0aGUgQ2FlbHVzIEFkbWluIGNvbnRyYWN0IGNhbiBjYWxsIHRoaXMgbWV0aG9kCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6Mjk2CgkvLyBhc3NlcnQoYW1vdW50UmVxdWVzdGVkIDw9IHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUsICdDYW5ub3Qgd2l0aGRyYXcgbW9yZSBzdGFrZSB0aGFuIHRoZSBkZWxlZ2F0ZWQgYW1vdW50JykKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRSZXF1ZXN0ZWQ6IHVpbnQ2NAoJYnl0ZWMgMCAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0Cgk8PQoKCS8vIENhbm5vdCB3aXRoZHJhdyBtb3JlIHN0YWtlIHRoYW4gdGhlIGRlbGVnYXRlZCBhbW91bnQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czoyOTcKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZSAtIGFtb3VudFJlcXVlc3RlZCA+PSB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlLAoJLy8gICAgICAgJ0Nhbm5vdCBsZWF2ZSB0aGUgT3BwZXJhdG9yIHdpdGggbGVzcyB0aGFuIHRoZWlyIG93biBzdGFrZScKCS8vICAgICApCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRSZXF1ZXN0ZWQ6IHVpbnQ2NAoJLQoJYnl0ZWMgMiAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCWFwcF9nbG9iYWxfZ2V0Cgk+PQoKCS8vIENhbm5vdCBsZWF2ZSB0aGUgT3BwZXJhdG9yIHdpdGggbGVzcyB0aGFuIHRoZWlyIG93biBzdGFrZQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjMwMQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiBhbW91bnRSZXF1ZXN0ZWQsCgkvLyAgICAgICByZWNlaXZlcjogcmVjZWl2ZXJCdXJuLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozMDIKCS8vIGFtb3VudDogYW1vdW50UmVxdWVzdGVkCglmcmFtZV9kaWcgLTEgLy8gYW1vdW50UmVxdWVzdGVkOiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjMwMwoJLy8gcmVjZWl2ZXI6IHJlY2VpdmVyQnVybgoJZnJhbWVfZGlnIC0yIC8vIHJlY2VpdmVyQnVybjogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzA1CgkvLyB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlIC09IGFtb3VudFJlcXVlc3RlZAoJYnl0ZWMgMCAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gYW1vdW50UmVxdWVzdGVkOiB1aW50NjQKCS0KCWJ5dGVjIDAgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozMDYKCS8vIHRoaXMudXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMoKQoJY2FsbHN1YiB1cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycwoJcmV0c3ViCgovLyBzbml0Y2hWYWxpZGF0b3IodWludDY0LChib29sLGJvb2wsYm9vbCxib29sLHVpbnQ2NCxib29sLHVpbnQ2NCkpdm9pZAoqYWJpX3JvdXRlX3NuaXRjaFZhbGlkYXRvcjoKCS8vIHBhcmFtczogKGJvb2wsYm9vbCxib29sLGJvb2wsdWludDY0LGJvb2wsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludGMgMTAgLy8gMTgKCT09CgoJLy8gYXJndW1lbnQgMCAocGFyYW1zKSBmb3Igc25pdGNoVmFsaWRhdG9yIG11c3QgYmUgYSAoYm9vbCxib29sLGJvb2wsYm9vbCx1aW50NjQsYm9vbCx1aW50NjQpCglhc3NlcnQKCgkvLyBhcHBUb1NuaXRjaDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzbml0Y2hWYWxpZGF0b3IodWludDY0LChib29sLGJvb2wsYm9vbCxib29sLHVpbnQ2NCxib29sLHVpbnQ2NCkpdm9pZAoJY2FsbHN1YiBzbml0Y2hWYWxpZGF0b3IKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIHNuaXRjaFZhbGlkYXRvcihhcHBUb1NuaXRjaDogQXBwSUQsIHBhcmFtczogU25pdGNoSW5mbyk6IHZvaWQKLy8KLy8gU25pdGNoIGFub3RoZXIgVmFsaWRhdG9yIENvbnRyYWN0LiBBIHZhbGlkIHNuaXRjaCB3aWxsIGltcHJvdmUgdGhlIHBlcmZvcm1hbmNlIGNvdW50ZXIuCi8vIEBwYXJhbSB7QXBwSUR9IGFwcFRvU25pdGNoIC0gQXBwbGljYXRpb25JRCBvZiB0aGUgdmFsaWRhdG9yIHRvIGJlIHNuaXRjaGVkCi8vIEBwYXJhbSB7U25pdGNoSW5mb30gcGFyYW1zIC0gcGFyYW1ldGVycyB0byBjaGVjayBmb3IgdGhlIHZhbGlkYXRvciAoRm9yIGV4YW1wbGU6IHBlcmZvcm1hbmNlQ2hlY2ssIHN0YWtlQW1vdW50Q2hlY2ssIGRlbGlucXVlbnRDaGVjaywgdmVyc2lvbkNoZWNrKQpzbml0Y2hWYWxpZGF0b3I6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMyAvLyAweAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozMTUKCS8vIGFzc2VydCh0aGlzLnN0YXR1cy52YWx1ZSAhPT0gREVMSU5RVUVOQ1lfU1RBVFVTKQoJYnl0ZWMgNCAvLyAgInN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDIgLy8gMgoJIT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozMTYKCS8vIHJlc3VsdCA9IHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNWYWxpZGF0b3JQb29sLnByb3RvdHlwZS5nZXRTbml0Y2hlZCwgYm9vbGVhbj4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogYXBwVG9Tbml0Y2gsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbcGFyYW1zXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglieXRlYyAxOSAvLyAgbWV0aG9kICJnZXRTbml0Y2hlZCgoYm9vbCxib29sLGJvb2wsYm9vbCx1aW50NjQsYm9vbCx1aW50NjQpKWJvb2wiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozMTcKCS8vIGFwcGxpY2F0aW9uSUQ6IGFwcFRvU25pdGNoCglmcmFtZV9kaWcgLTEgLy8gYXBwVG9Tbml0Y2g6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzE4CgkvLyBtZXRob2RBcmdzOiBbcGFyYW1zXQoJZnJhbWVfZGlnIC0yIC8vIHBhcmFtczogU25pdGNoSW5mbwoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludGMgMSAvLyAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWludGMgMCAvLyAwCglnZXRiaXQKCWZyYW1lX2J1cnkgMCAvLyByZXN1bHQ6IGJvb2wKCgkvLyAqaWYzX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjMyMAoJLy8gcmVzdWx0CglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IGJvb2wKCWJ6ICppZjNfZW5kCgoJLy8gKmlmM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzIxCgkvLyB0aGlzLnBlcmZvcm1hbmNlQ291bnRlci52YWx1ZSArPSAxCglieXRlYyA5IC8vICAicGVyZm9ybWFuY2UiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAxIC8vIDEKCSsKCWJ5dGVjIDkgLy8gICJwZXJmb3JtYW5jZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoqaWYzX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozMjMKCS8vIHRoaXMudXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMoKQoJY2FsbHN1YiB1cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozMjUKCS8vIHRoaXMuc25pdGNoVmFsaWRhdG9yRXZlbnQubG9nKHsgcmVxdWVzdDogcGFyYW1zLCByZXN1bHQ6IHJlc3VsdCB9KQoJcHVzaGJ5dGVzIDB4YmIzZTNiYjQgLy8gc25pdGNoVmFsaWRhdG9yRXZlbnQoKGJvb2wsYm9vbCxib29sLGJvb2wsdWludDY0LGJvb2wsdWludDY0KSxib29sKQoJZnJhbWVfZGlnIC0yIC8vIHBhcmFtczogU25pdGNoSW5mbwoJYnl0ZWMgMTUgLy8gMHgwMAoJaW50YyAwIC8vIDAKCWZyYW1lX2RpZyAwIC8vIHJlc3VsdDogYm9vbAoJc2V0Yml0Cgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGdldFNuaXRjaGVkKChib29sLGJvb2wsYm9vbCxib29sLHVpbnQ2NCxib29sLHVpbnQ2NCkpYm9vbAoqYWJpX3JvdXRlX2dldFNuaXRjaGVkOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyMCAvLyAweDE1MWY3Yzc1CgoJLy8gY2hlY2tzOiAoYm9vbCxib29sLGJvb2wsYm9vbCx1aW50NjQsYm9vbCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAxMCAvLyAxOAoJPT0KCgkvLyBhcmd1bWVudCAwIChjaGVja3MpIGZvciBnZXRTbml0Y2hlZCBtdXN0IGJlIGEgKGJvb2wsYm9vbCxib29sLGJvb2wsdWludDY0LGJvb2wsdWludDY0KQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBnZXRTbml0Y2hlZCgoYm9vbCxib29sLGJvb2wsYm9vbCx1aW50NjQsYm9vbCx1aW50NjQpKWJvb2wKCWNhbGxzdWIgZ2V0U25pdGNoZWQKCWJ5dGVjIDE1IC8vIDB4MDAKCWludGMgMCAvLyAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGdldFNuaXRjaGVkKGNoZWNrczogU25pdGNoSW5mbyk6IGJvb2xlYW4KZ2V0U25pdGNoZWQ6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMyAvLyAweAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozMjkKCS8vIHJlc3VsdCA9IGZhbHNlCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAwIC8vIHJlc3VsdDogYm9vbAoKCS8vICppZjRfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzMxCgkvLyBjaGVja3MucGVyZm9ybWFuY2VDaGVjawoJZnJhbWVfZGlnIC0xIC8vIGNoZWNrczogU25pdGNoSW5mbwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAwCglnZXRiaXQKCWJ6ICppZjRfZW5kCgoJLy8gKmlmNF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzMyCgkvLyByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5wZXJmb3JtYW5jZUNoZWNrKCkKCWZyYW1lX2RpZyAwIC8vIHJlc3VsdDogYm9vbAoJZHVwCglibnogKnNraXBfb3IwCgljYWxsc3ViIHBlcmZvcm1hbmNlQ2hlY2sKCXx8Cgoqc2tpcF9vcjA6CglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiBib29sCgoqaWY0X2VuZDoKCS8vICppZjVfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzM0CgkvLyBjaGVja3Muc3Rha2VBbW91bnRDaGVjawoJZnJhbWVfZGlnIC0xIC8vIGNoZWNrczogU25pdGNoSW5mbwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMSAvLyAxCglnZXRiaXQKCWJ6ICppZjVfZW5kCgoJLy8gKmlmNV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzM1CgkvLyByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5jaGVja1N0YWtlT25Tbml0Y2goY2hlY2tzLnJlY2lwaWVudCwgY2hlY2tzLnNwbGl0LCBjaGVja3MubWF4KQoJZnJhbWVfZGlnIDAgLy8gcmVzdWx0OiBib29sCglkdXAKCWJueiAqc2tpcF9vcjEKCWZyYW1lX2RpZyAtMSAvLyBjaGVja3M6IFNuaXRjaEluZm8KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDEwIDgKCWJ0b2kKCWZyYW1lX2RpZyAtMSAvLyBjaGVja3M6IFNuaXRjaEluZm8KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglwdXNoaW50IDcyCglnZXRiaXQKCWZyYW1lX2RpZyAtMSAvLyBjaGVja3M6IFNuaXRjaEluZm8KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDEgOAoJYnRvaQoJY2FsbHN1YiBjaGVja1N0YWtlT25Tbml0Y2gKCXx8Cgoqc2tpcF9vcjE6CglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiBib29sCgoqaWY1X2VuZDoKCS8vICppZjZfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzM3CgkvLyBjaGVja3MuZGVsaW5xdWVudENoZWNrCglmcmFtZV9kaWcgLTEgLy8gY2hlY2tzOiBTbml0Y2hJbmZvCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAyIC8vIDIKCWdldGJpdAoJYnogKmlmNl9lbmQKCgkvLyAqaWY2X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozMzgKCS8vIHJlc3VsdCA9IHJlc3VsdCB8fCB0aGlzLmNoZWNrRGVsaW5xdWVuY3lPblNuaXRjaCgpCglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IGJvb2wKCWR1cAoJYm56ICpza2lwX29yMgoJY2FsbHN1YiBjaGVja0RlbGlucXVlbmN5T25Tbml0Y2gKCXx8Cgoqc2tpcF9vcjI6CglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiBib29sCgoqaWY2X2VuZDoKCS8vICppZjdfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6MzQwCgkvLyBjaGVja3MudmVyc2lvbkNoZWNrCglmcmFtZV9kaWcgLTEgLy8gY2hlY2tzOiBTbml0Y2hJbmZvCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyA5IC8vIDMKCWdldGJpdAoJYnogKmlmN19lbmQKCgkvLyAqaWY3X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNDEKCS8vIHJlc3VsdCA9IHJlc3VsdCB8fCB0aGlzLmNoZWNrUHJvZ3JhbVZlcnNpb24oKQoJZnJhbWVfZGlnIDAgLy8gcmVzdWx0OiBib29sCglkdXAKCWJueiAqc2tpcF9vcjMKCWNhbGxzdWIgY2hlY2tQcm9ncmFtVmVyc2lvbgoJfHwKCipza2lwX29yMzoKCWZyYW1lX2J1cnkgMCAvLyByZXN1bHQ6IGJvb2wKCippZjdfZW5kOgoJLy8gKmlmOF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNDMKCS8vIHRoaXMuc3RhdHVzLnZhbHVlICE9PSBERUxJTlFVRU5DWV9TVEFUVVMKCWJ5dGVjIDQgLy8gICJzdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAyIC8vIDIKCSE9CglieiAqaWY4X2VuZAoKCS8vICppZjhfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM0MwoJLy8gdGhpcy51cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycygpCgljYWxsc3ViIHVwZGF0ZURlbGVnYXRpb25GYWN0b3JzCgoqaWY4X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNDQKCS8vIHJldHVybiByZXN1bHQ7CglmcmFtZV9kaWcgMCAvLyByZXN1bHQ6IGJvb2wKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKLy8gZmxhc2hsb2FuKHVpbnQ2NCxhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9mbGFzaGxvYW46CgkvLyByZWNlaXZlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludGMgOCAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChyZWNlaXZlcikgZm9yIGZsYXNobG9hbiBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGZsYXNobG9hbih1aW50NjQsYWRkcmVzcyl2b2lkCgljYWxsc3ViIGZsYXNobG9hbgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gZmxhc2hsb2FuKGFtb3VudDogdWludDY0LCByZWNlaXZlcjogQWRkcmVzcyk6IHZvaWQKZmxhc2hsb2FuOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM0OAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLCAnQ2FsbGVyIG11c3QgYmUgdGhlIENhZWx1cyBBZG1pbiBDb250cmFjdCcpCgl0eG4gU2VuZGVyCglieXRlYyAxIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09CgoJLy8gQ2FsbGVyIG11c3QgYmUgdGhlIENhZWx1cyBBZG1pbiBDb250cmFjdAoJYXNzZXJ0CgoJLy8gKmlmOV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNTAKCS8vICF0aGlzLmJhbGFuY2VDaGVja3BvaW50LmV4aXN0cwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZWMgMTIgLy8gICJiYWxhbmNlX2NoZWNrcG9pbnQiCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCgkhCglieiAqaWY5X2VuZAoKCS8vICppZjlfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM1MQoJLy8gdGhpcy5iYWxhbmNlQ2hlY2twb2ludC52YWx1ZSA9IHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZQoJYnl0ZWMgMTIgLy8gICJiYWxhbmNlX2NoZWNrcG9pbnQiCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWFwcF9nbG9iYWxfcHV0CgoqaWY5X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNTMKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgIHJlY2VpdmVyOiByZWNlaXZlciwKCS8vICAgICAgIGFtb3VudDogYW1vdW50LAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNTQKCS8vIHJlY2VpdmVyOiByZWNlaXZlcgoJZnJhbWVfZGlnIC0yIC8vIHJlY2VpdmVyOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM1NQoJLy8gYW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGNoZWNrQmFsYW5jZSgpdm9pZAoqYWJpX3JvdXRlX2NoZWNrQmFsYW5jZToKCS8vIGV4ZWN1dGUgY2hlY2tCYWxhbmNlKCl2b2lkCgljYWxsc3ViIGNoZWNrQmFsYW5jZQoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gY2hlY2tCYWxhbmNlKCk6IHZvaWQKY2hlY2tCYWxhbmNlOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjM2MgoJLy8gYXNzZXJ0KHRoaXMuYmFsYW5jZUNoZWNrcG9pbnQudmFsdWUgPT09IHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZSkKCWJ5dGVjIDEyIC8vICAiYmFsYW5jZV9jaGVja3BvaW50IgoJYXBwX2dsb2JhbF9nZXQKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCXBvcAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozNjMKCS8vIHRoaXMuYmFsYW5jZUNoZWNrcG9pbnQuZGVsZXRlKCkKCWJ5dGVjIDEyIC8vICAiYmFsYW5jZV9jaGVja3BvaW50IgoJYXBwX2dsb2JhbF9kZWwKCXJldHN1YgoKLy8gZ29PbmxpbmUocGF5LGJ5dGVbXSxieXRlW10sYnl0ZVtdLHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9nb09ubGluZToKCS8vIHZvdGVLZXlEaWx1dGlvbjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA2CglidG9pCgoJLy8gdm90ZUxhc3Q6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQoJYnRvaQoKCS8vIHZvdGVGaXJzdDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gc3RhdGVQcm9vZlBLOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWV4dHJhY3QgMiAwCgoJLy8gc2VsZWN0aW9uUEs6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyB2b3RlUEs6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBmZWVQYXltZW50OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAxIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgNiAoZmVlUGF5bWVudCkgZm9yIGdvT25saW5lIG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgZ29PbmxpbmUocGF5LGJ5dGVbXSxieXRlW10sYnl0ZVtdLHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgZ29PbmxpbmUKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGdvT25saW5lKGZlZVBheW1lbnQ6IFBheVR4biwgdm90ZVBLOiBieXRlcywgc2VsZWN0aW9uUEs6IGJ5dGVzLCBzdGF0ZVByb29mUEs6IGJ5dGVzLCB2b3RlRmlyc3Q6IHVpbnQ2NCwgdm90ZUxhc3Q6IHVpbnQ2NCwgdm90ZUtleURpbHV0aW9uOiB1aW50NjQpOiB2b2lkCi8vCi8vIFVzZWQgdG8gc2V0IHRoZSBDb250cmFjdCBhY2NvdW50IG9ubGluZSBmb3IgY29uc2Vuc3VzLiBBbHdheXMgY2hlY2sgdGhhdCBhY2NvdW50IGlzIG9ubGluZSBhbmQgaW5jZW50aXZlc0VsaWdpYmxlIGJlZm9yZSBoYXZpbmcgZGVsZWdhdGFibGUgc3Rha2UKLy8KLy8gQHBhcmFtIHtQYXlUeG59IGZlZVBheW1lbnQgLSBQYXltZW50IHRyYW5zYWN0aW9uIHRvIHRoZSBjb250cmFjdCB0byBjb3ZlciBjb3N0cyBmb3IgRWxpZ2liaWxpdHkgZmVlIDAgZm9yIHJlbmV3YWwuCi8vIEBwYXJhbSB7Ynl0ZXN9IHZvdGVQSyAtIFRoZSB2b3RlIHB1YmxpYyBrZXkKLy8gQHBhcmFtIHtieXRlc30gc2VsZWN0aW9uUEsgLSBUaGUgc2VsZWN0aW9uIHB1YmxpYyBrZXkKLy8gQHBhcmFtIHtieXRlc30gc3RhdGVQcm9vZlBLIC0gdGhlIHN0YXRlIHByb29mIHB1YmxpYyBrZXkKLy8gQHBhcmFtIHt1aW50NjR9IHZvdGVGaXJzdCAtIEluZGV4IG9mIGZpcnN0IHZhbGlkIGJsb2NrIGZvciB0aGUgcGFydGljaXBhdGlvbiBrZXlzCi8vIEBwYXJhbSB7dWludDY0fSB2b3RlTGFzdCAtIEluZGV4IG9mIGxhc3QgdmFsaWQgYmxvY2sgZm9yIGZvciB0aGUgcGFydGljaXBhdGlvbiBrZXlzCi8vIEBwYXJhbSB7dWludDY0fSB2b3RlS2V5RGlsdXRpb24gLSBUaGUgdm90ZSBrZXkgZGlsdXRpb24gdmFsdWUKLy8gQHRocm93cyB7RXJyb3J9IGlmIHRoZSBjYWxsZXIgaXNuJ3QgdGhlIG5vZGUgb3BlcmF0b3IKZ29PbmxpbmU6Cglwcm90byA3IDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMyAvLyAweAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozODgKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICAnT25seSB0aGUgTm9kZSBPcGVyYXRvciBjYW4gcmVnaXN0ZXIgb25saW5lIHdpdGggcGFydGljaXBhdGlvbiBrZXknCgkvLyAgICAgKQoJdHhuIFNlbmRlcgoJYnl0ZWMgNSAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gT25seSB0aGUgTm9kZSBPcGVyYXRvciBjYW4gcmVnaXN0ZXIgb25saW5lIHdpdGggcGFydGljaXBhdGlvbiBrZXkKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czozOTIKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZSA+PSBnbG9iYWxzLnBheW91dHNNaW5CYWxhbmNlICYmIHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZSA8PSBNQVhfU1RBS0VfUEVSX0FDQ09VTlQsCgkvLyAgICAgICAnQ29udHJhY3QgbmVlZHMgMzBrIEFsZ28gYXMgbWluaW11bSBiYWxhbmNlIGZvciByZXdhcmRzIGVsaWdpYmlsaXR5IGFuZCBhdCBtb3N0IDUwTSBBbGdvJwoJLy8gICAgICkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCXBvcAoJZ2xvYmFsIFBheW91dHNNaW5CYWxhbmNlCgk+PQoJZHVwCglieiAqc2tpcF9hbmQwCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWludGMgNSAvLyA1MDAwMDAwMDAwMDAwMAoJPD0KCSYmCgoqc2tpcF9hbmQwOgoJLy8gQ29udHJhY3QgbmVlZHMgMzBrIEFsZ28gYXMgbWluaW11bSBiYWxhbmNlIGZvciByZXdhcmRzIGVsaWdpYmlsaXR5IGFuZCBhdCBtb3N0IDUwTSBBbGdvCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6Mzk2CgkvLyBhc3NlcnQoCgkvLyAgICAgICB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlID49IGdsb2JhbHMucGF5b3V0c01pbkJhbGFuY2UsCgkvLyAgICAgICAnT3BlcmF0b3IgY29tbWl0IG11c3QgYmUgaGlnaGVyIHRoYW4gbWluaW11bSBiYWxhbmNlIGZvciByZXdhcmRzIGVsaWdpYmlsaXR5JwoJLy8gICAgICkKCWJ5dGVjIDIgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJZ2xvYmFsIFBheW91dHNNaW5CYWxhbmNlCgk+PQoKCS8vIE9wZXJhdG9yIGNvbW1pdCBtdXN0IGJlIGhpZ2hlciB0aGFuIG1pbmltdW0gYmFsYW5jZSBmb3IgcmV3YXJkcyBlbGlnaWJpbGl0eQoJYXNzZXJ0CgoJLy8gKmlmMTBfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDAxCgkvLyB0aGlzLnN0YXR1cy52YWx1ZSA9PT0gREVMSU5RVUVOQ1lfU1RBVFVTCglieXRlYyA0IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMiAvLyAyCgk9PQoJYnogKmlmMTBfZW5kCgoJLy8gKmlmMTBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQwMgoJLy8gYXNzZXJ0KAoJLy8gICAgICAgICB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlID09PSAwLAoJLy8gICAgICAgICAnaWYgRGVsaW5xdWVudCBnbyBPbmxpbmUgb25seSB3aXRoIHlvdXIgb3duIHN0YWtlIHRvIGNsZWFyIHVwIGRlbGlucXVlbmN5JwoJLy8gICAgICAgKQoJYnl0ZWMgMCAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDAgLy8gMAoJPT0KCgkvLyBpZiBEZWxpbnF1ZW50IGdvIE9ubGluZSBvbmx5IHdpdGggeW91ciBvd24gc3Rha2UgdG8gY2xlYXIgdXAgZGVsaW5xdWVuY3kKCWFzc2VydAoKKmlmMTBfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQwOAoJLy8gZXh0cmFGZWUgPSB0aGlzLmdldEdvT25saW5lRmVlQW1vdW50KCkKCWNhbGxzdWIgZ2V0R29PbmxpbmVGZWVBbW91bnQKCWZyYW1lX2J1cnkgMCAvLyBleHRyYUZlZTogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQxMAoJLy8gdmVyaWZ5UGF5VHhuKGZlZVBheW1lbnQsIHsgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsIGFtb3VudDogZXh0cmFGZWUgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIGZlZVBheW1lbnQ6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoiZmVlUGF5bWVudCIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIGZlZVBheW1lbnQ6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglmcmFtZV9kaWcgMCAvLyBleHRyYUZlZTogdWludDY0Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoiZmVlUGF5bWVudCIsImZpZWxkIjoiYW1vdW50IiwiZXhwZWN0ZWQiOiJleHRyYUZlZSJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDEyCgkvLyBzZW5kT25saW5lS2V5UmVnaXN0cmF0aW9uKHsKCS8vICAgICAgIHZvdGVQSzogdm90ZVBLLAoJLy8gICAgICAgc2VsZWN0aW9uUEs6IHNlbGVjdGlvblBLLAoJLy8gICAgICAgc3RhdGVQcm9vZlBLOiBzdGF0ZVByb29mUEssCgkvLyAgICAgICB2b3RlRmlyc3Q6IHZvdGVGaXJzdCwKCS8vICAgICAgIHZvdGVMYXN0OiB2b3RlTGFzdCwKCS8vICAgICAgIHZvdGVLZXlEaWx1dGlvbjogdm90ZUtleURpbHV0aW9uLAoJLy8gICAgICAgZmVlOiBleHRyYUZlZSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAyIC8vICBrZXlyZWcKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDEzCgkvLyB2b3RlUEs6IHZvdGVQSwoJZnJhbWVfZGlnIC0yIC8vIHZvdGVQSzogYnl0ZXMKCWl0eG5fZmllbGQgVm90ZVBLCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQxNAoJLy8gc2VsZWN0aW9uUEs6IHNlbGVjdGlvblBLCglmcmFtZV9kaWcgLTMgLy8gc2VsZWN0aW9uUEs6IGJ5dGVzCglpdHhuX2ZpZWxkIFNlbGVjdGlvblBLCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQxNQoJLy8gc3RhdGVQcm9vZlBLOiBzdGF0ZVByb29mUEsKCWZyYW1lX2RpZyAtNCAvLyBzdGF0ZVByb29mUEs6IGJ5dGVzCglpdHhuX2ZpZWxkIFN0YXRlUHJvb2ZQSwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0MTYKCS8vIHZvdGVGaXJzdDogdm90ZUZpcnN0CglmcmFtZV9kaWcgLTUgLy8gdm90ZUZpcnN0OiB1aW50NjQKCWl0eG5fZmllbGQgVm90ZUZpcnN0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQxNwoJLy8gdm90ZUxhc3Q6IHZvdGVMYXN0CglmcmFtZV9kaWcgLTYgLy8gdm90ZUxhc3Q6IHVpbnQ2NAoJaXR4bl9maWVsZCBWb3RlTGFzdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0MTgKCS8vIHZvdGVLZXlEaWx1dGlvbjogdm90ZUtleURpbHV0aW9uCglmcmFtZV9kaWcgLTcgLy8gdm90ZUtleURpbHV0aW9uOiB1aW50NjQKCWl0eG5fZmllbGQgVm90ZUtleURpbHV0aW9uCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQxOQoJLy8gZmVlOiBleHRyYUZlZQoJZnJhbWVfZGlnIDAgLy8gZXh0cmFGZWU6IHVpbnQ2NAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gKmlmMTFfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDIyCgkvLyB0aGlzLnN0YXR1cy52YWx1ZSAhPT0gREVMSU5RVUVOQ1lfU1RBVFVTCglieXRlYyA0IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMiAvLyAyCgkhPQoJYnogKmlmMTFfZW5kCgoJLy8gKmlmMTFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQyMwoJLy8gdGhpcy5zdGF0dXMudmFsdWUgPSBORVVUUkFMX1NUQVRVUwoJYnl0ZWMgNCAvLyAgInN0YXR1cyIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKKmlmMTFfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQyNgoJLy8gdGhpcy5nb09ubGluZUV2ZW50LmxvZyh7CgkvLyAgICAgICBhcHA6IHRoaXMuYXBwLAoJLy8gICAgICAgb3BlcmF0b3I6IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlLAoJLy8gICAgICAgb3BlcmF0b3JTdGFrZTogdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSwKCS8vICAgICAgIGRlbGVnYXRlZFN0YWtlOiB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlLAoJLy8gICAgIH0pCglwdXNoYnl0ZXMgMHhjNGMwYTk3MiAvLyBnb09ubGluZUV2ZW50KHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglpdG9iCglieXRlYyA1IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJY29uY2F0CglieXRlYyAyIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWNvbmNhdAoJYnl0ZWMgMCAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGdvT2ZmbGluZSgpdm9pZAoqYWJpX3JvdXRlX2dvT2ZmbGluZToKCS8vIGV4ZWN1dGUgZ29PZmZsaW5lKCl2b2lkCgljYWxsc3ViIGdvT2ZmbGluZQoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gZ29PZmZsaW5lKCk6IHZvaWQKLy8KLy8gU2V0IHRoZSBjb250cmFjdCBhY2NvdW50IHRvIG9mZmxpbmUgc28gdGhhdCBpdCBkb2Vzbid0IHBhcnRpY2lwYXRlIGluIGNvbnNlbnN1cyBhbnltb3JlLgovLyBObyBmb3JjZSBvZmZsaW5lIGJ5IHRoZSBwcm90b2NvbCAobWlnaHQgYmUgY2hhbmdlZCB0byBhIHZlcnkgbG9uZyB0aW1lIHdhaXQgaW4gY2FzZSB0aGUgbm9kZSBpc24ndCBwcm9wb3NpbmcgYmxvY2tzIGF0IGFsbCkuIExvb2t1cCBEZWxpbnF1ZW5jeSBzdGF0dXMKLy8gT25jZSB0aGUgYWNjb3VudCBpcyBzZXQgb2ZmbGluZSB0aGUgbWV0aG9kIGVuc3VyZXMgdGhhdCBpdCBjYW5ub3QgYmUgZGVsZWdhdGVkIHRvLgpnb09mZmxpbmU6Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDQyCgkvLyBhc3NlcnQoCgkvLyAgICAgICB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlIHx8IHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLAoJLy8gICAgICAgJ09ubHkgTm9kZSBPcGVyYXRvciBvciBDYWVsdXMgQWRtaW4gY29udHJhY3QgY2FuIHNldCB0aGUgY29udHJhY3Qgb2ZmbGluZScKCS8vICAgICApCgl0eG4gU2VuZGVyCglieXRlYyA1IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWR1cAoJYm56ICpza2lwX29yNAoJdHhuIFNlbmRlcgoJYnl0ZWMgMSAvLyAgImNyZWF0b3IiCglhcHBfZ2xvYmFsX2dldAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCgk9PQoJfHwKCipza2lwX29yNDoKCS8vIE9ubHkgTm9kZSBPcGVyYXRvciBvciBDYWVsdXMgQWRtaW4gY29udHJhY3QgY2FuIHNldCB0aGUgY29udHJhY3Qgb2ZmbGluZQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQ0NgoJLy8gc2VuZE9mZmxpbmVLZXlSZWdpc3RyYXRpb24oe30pCglpdHhuX2JlZ2luCglpbnRjIDIgLy8gIGtleXJlZwoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDQ3CgkvLyB0aGlzLnN0YXR1cy52YWx1ZSA9IE5PVF9ERUxFR0FUQUJMRV9TVEFUVVMKCWJ5dGVjIDQgLy8gICJzdGF0dXMiCglpbnRjIDEgLy8gMQoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDQ5CgkvLyB0aGlzLmdvT2ZmbGluZUV2ZW50LmxvZyh7CgkvLyAgICAgICBhcHA6IHRoaXMuYXBwLAoJLy8gICAgICAgb3BlcmF0b3I6IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlLAoJLy8gICAgICAgb3BlcmF0b3JTdGFrZTogdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSwKCS8vICAgICAgIGRlbGVnYXRlZFN0YWtlOiB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlLAoJLy8gICAgIH0pCglwdXNoYnl0ZXMgMHg2MWE5OWMyMyAvLyBnb09mZmxpbmVFdmVudCh1aW50NjQsYWRkcmVzcyx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJaXRvYgoJYnl0ZWMgNSAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWNvbmNhdAoJYnl0ZWMgMiAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCgljb25jYXQKCWJ5dGVjIDAgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBnZXRFbGlnaWJpbGl0eUZsYWcoKWJvb2wKKmFiaV9yb3V0ZV9nZXRFbGlnaWJpbGl0eUZsYWc6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIwIC8vIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGdldEVsaWdpYmlsaXR5RmxhZygpYm9vbAoJY2FsbHN1YiBnZXRFbGlnaWJpbGl0eUZsYWcKCWJ5dGVjIDE1IC8vIDB4MDAKCWludGMgMCAvLyAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGdldEVsaWdpYmlsaXR5RmxhZygpOiBib29sZWFuCmdldEVsaWdpYmlsaXR5RmxhZzoKCXByb3RvIDAgMQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0NTkKCS8vIHJldHVybiB0aGlzLmFwcC5hZGRyZXNzLmluY2VudGl2ZUVsaWdpYmxlOwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0SW5jZW50aXZlRWxpZ2libGUKCXBvcAoJcmV0c3ViCgovLyBwZXJmb3JtYW5jZUNoZWNrKCk6IGJvb2xlYW4KcGVyZm9ybWFuY2VDaGVjazoKCXByb3RvIDAgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAzIC8vIDB4CglkdXBuIDIKCgkvLyAqaWYxMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0NjMKCS8vICF0aGlzLmFwcC5hZGRyZXNzLmluY2VudGl2ZUVsaWdpYmxlCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RJbmNlbnRpdmVFbGlnaWJsZQoJcG9wCgkhCglieiAqaWYxMl9lbmQKCgkvLyAqaWYxMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDY0CgkvLyB0aGlzLnNldERlbGlucXVlbmN5KCkKCWNhbGxzdWIgc2V0RGVsaW5xdWVuY3kKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDY2CgkvLyB0aGlzLmRlbGlucXVlbmN5RXZlbnQubG9nKHsKCS8vICAgICAgICAgYXBwOiB0aGlzLmFwcCwKCS8vICAgICAgICAgb3BlcmF0b3I6IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlLAoJLy8gICAgICAgICBzdGFrZUF0UmlzazogdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSwKCS8vICAgICAgICAgZGVsaW5xdWVuY3lTY29yZTogdGhpcy5kZWxpbnF1ZW5jeVNjb3JlLnZhbHVlLAoJLy8gICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLnZhbHVlLAoJLy8gICAgICAgfSkKCWJ5dGVjIDIxIC8vICBkZWxpbnF1ZW5jeUV2ZW50KHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJaXRvYgoJYnl0ZWMgNSAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWNvbmNhdAoJYnl0ZWMgMCAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCgljb25jYXQKCWJ5dGVjIDggLy8gICJkZWxpbnF1ZW5jeV9zY29yZSIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCgljb25jYXQKCWJ5dGVjIDQgLy8gICJzdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0NzQKCS8vIHJldHVybiB0cnVlOwoJaW50YyAxIC8vIDEKCWIgKnBlcmZvcm1hbmNlQ2hlY2sqcmV0dXJuCgoqaWYxMl9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDc3CgkvLyBhc3NlcnQoCgkvLyAgICAgICBnbG9iYWxzLnJvdW5kIC0gdGhpcy5sYXN0RGVsaW5xdWVuY3lSZXBvcnQudmFsdWUgPiB0aGlzLmdldEV4cGVjdGVkUHJvcG9zYWxzRGVsdGEoKSAvIDIsCgkvLyAgICAgICAnV2FpdCBhdCBsZWFzdCBoYWxmIHRoZSBwcm9wb3NhbCBleHBlY3RlZCB0aW1lIGJldHdlZW4gUGVyZm9ybWFuY2UgY2hlY2tzJwoJLy8gICAgICkKCWdsb2JhbCBSb3VuZAoJYnl0ZWMgMTEgLy8gICJkZWxpbnF1ZW5jeV9yZXBvcnQiCglhcHBfZ2xvYmFsX2dldAoJLQoJY2FsbHN1YiBnZXRFeHBlY3RlZFByb3Bvc2Fsc0RlbHRhCglpbnRjIDIgLy8gMgoJLwoJPgoKCS8vIFdhaXQgYXQgbGVhc3QgaGFsZiB0aGUgcHJvcG9zYWwgZXhwZWN0ZWQgdGltZSBiZXR3ZWVuIFBlcmZvcm1hbmNlIGNoZWNrcwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQ4MQoJLy8gZGVsdGFXaXRoTGF0ZXN0UHJvcG9zYWwgPSBnbG9iYWxzLnJvdW5kIC0gdGhpcy5hcHAuYWRkcmVzcy5sYXN0UHJvcG9zZWQKCWdsb2JhbCBSb3VuZAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0TGFzdFByb3Bvc2VkCglwb3AKCS0KCWZyYW1lX2J1cnkgMCAvLyBkZWx0YVdpdGhMYXRlc3RQcm9wb3NhbDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQ4MgoJLy8gaXNQZXJmb3JtaW5nQXNFeHBlY3RlZCA9IHRoaXMuZ2V0RXhwZWN0ZWRQcm9wb3NhbHNEZWx0YSgpID4gZGVsdGFXaXRoTGF0ZXN0UHJvcG9zYWwKCWNhbGxzdWIgZ2V0RXhwZWN0ZWRQcm9wb3NhbHNEZWx0YQoJZnJhbWVfZGlnIDAgLy8gZGVsdGFXaXRoTGF0ZXN0UHJvcG9zYWw6IHVpbnQ2NAoJPgoJZnJhbWVfYnVyeSAxIC8vIGlzUGVyZm9ybWluZ0FzRXhwZWN0ZWQ6IGJvb2wKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDgzCgkvLyBpc1BlcmZvcm1pbmdBc1RvbGVyYXRlZCA9IHRoaXMuZ2V0VG9sZXJhdGVkUHJvcG9zYWxEZWx0YSgpID4gZGVsdGFXaXRoTGF0ZXN0UHJvcG9zYWwKCWNhbGxzdWIgZ2V0VG9sZXJhdGVkUHJvcG9zYWxEZWx0YQoJZnJhbWVfZGlnIDAgLy8gZGVsdGFXaXRoTGF0ZXN0UHJvcG9zYWw6IHVpbnQ2NAoJPgoJZnJhbWVfYnVyeSAyIC8vIGlzUGVyZm9ybWluZ0FzVG9sZXJhdGVkOiBib29sCgoJLy8gKmlmMTNfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDg0CgkvLyBpc1BlcmZvcm1pbmdBc0V4cGVjdGVkICYmIGlzUGVyZm9ybWluZ0FzVG9sZXJhdGVkCglmcmFtZV9kaWcgMSAvLyBpc1BlcmZvcm1pbmdBc0V4cGVjdGVkOiBib29sCglkdXAKCWJ6ICpza2lwX2FuZDEKCWZyYW1lX2RpZyAyIC8vIGlzUGVyZm9ybWluZ0FzVG9sZXJhdGVkOiBib29sCgkmJgoKKnNraXBfYW5kMToKCWJ6ICppZjEzX2VuZAoKCS8vICppZjEzX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0ODUKCS8vIHJldHVybiBmYWxzZTsKCWludGMgMCAvLyAwCgliICpwZXJmb3JtYW5jZUNoZWNrKnJldHVybgoKKmlmMTNfZW5kOgoJLy8gKmlmMTRfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDg3CgkvLyAhaXNQZXJmb3JtaW5nQXNUb2xlcmF0ZWQKCWZyYW1lX2RpZyAyIC8vIGlzUGVyZm9ybWluZ0FzVG9sZXJhdGVkOiBib29sCgkhCglieiAqaWYxNF9lbHNlaWYxX2NvbmRpdGlvbgoKCS8vICppZjE0X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0ODgKCS8vIHRoaXMuZGVsaW5xdWVuY3lTY29yZS52YWx1ZSArPSA1CglieXRlYyA4IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglhcHBfZ2xvYmFsX2dldAoJaW50YyA2IC8vIDUKCSsKCWJ5dGVjIDggLy8gICJkZWxpbnF1ZW5jeV9zY29yZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgliICppZjE0X2VuZAoKKmlmMTRfZWxzZWlmMV9jb25kaXRpb246CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDg5CgkvLyAhaXNQZXJmb3JtaW5nQXNFeHBlY3RlZAoJZnJhbWVfZGlnIDEgLy8gaXNQZXJmb3JtaW5nQXNFeHBlY3RlZDogYm9vbAoJIQoJYnogKmlmMTRfZW5kCgoJLy8gKmlmMTRfZWxzZWlmMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDkwCgkvLyB0aGlzLmRlbGlucXVlbmN5U2NvcmUudmFsdWUgKz0KCS8vICAgICAgICAgdGhpcy5sYXN0RGVsaW5xdWVuY3lSZXBvcnQudmFsdWUgPiB0aGlzLmxhc3RSZXdhcmRSZXBvcnQudmFsdWUgfHwgdGhpcy5kZWxpbnF1ZW5jeVNjb3JlLnZhbHVlID4gNSA/IDIgOiAxCglieXRlYyA4IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMTEgLy8gICJkZWxpbnF1ZW5jeV9yZXBvcnQiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMTQgLy8gICJyZXdhcmRfcmVwb3J0IgoJYXBwX2dsb2JhbF9nZXQKCT4KCWR1cAoJYm56ICpza2lwX29yNgoJYnl0ZWMgOCAvLyAgImRlbGlucXVlbmN5X3Njb3JlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgNiAvLyA1Cgk+Cgl8fAoKKnNraXBfb3I2OgoJYnogKnRlcm5hcnkxX2ZhbHNlCglpbnRjIDIgLy8gMgoJYiAqdGVybmFyeTFfZW5kCgoqdGVybmFyeTFfZmFsc2U6CglpbnRjIDEgLy8gMQoKKnRlcm5hcnkxX2VuZDoKCSsKCWJ5dGVjIDggLy8gICJkZWxpbnF1ZW5jeV9zY29yZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoqaWYxNF9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NDkzCgkvLyB0aGlzLnNldERlbGlucXVlbmN5T25UaHJlc2hvbGRDaGVjaygpCgljYWxsc3ViIHNldERlbGlucXVlbmN5T25UaHJlc2hvbGRDaGVjawoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo0OTQKCS8vIHRoaXMubGFzdERlbGlucXVlbmN5UmVwb3J0LnZhbHVlID0gZ2xvYmFscy5yb3VuZAoJYnl0ZWMgMTEgLy8gICJkZWxpbnF1ZW5jeV9yZXBvcnQiCglnbG9iYWwgUm91bmQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjQ5NgoJLy8gdGhpcy5kZWxpbnF1ZW5jeUV2ZW50LmxvZyh7CgkvLyAgICAgICBhcHA6IHRoaXMuYXBwLAoJLy8gICAgICAgb3BlcmF0b3I6IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlLAoJLy8gICAgICAgc3Rha2VBdFJpc2s6IHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUsCgkvLyAgICAgICBkZWxpbnF1ZW5jeVNjb3JlOiB0aGlzLmRlbGlucXVlbmN5U2NvcmUudmFsdWUsCgkvLyAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLnZhbHVlLAoJLy8gICAgIH0pCglieXRlYyAyMSAvLyAgZGVsaW5xdWVuY3lFdmVudCh1aW50NjQsYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWJ5dGVjIDUgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgljb25jYXQKCWJ5dGVjIDAgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0CglieXRlYyA4IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0CglieXRlYyA0IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTAzCgkvLyByZXR1cm4gdHJ1ZTsKCWludGMgMSAvLyAxCgoqcGVyZm9ybWFuY2VDaGVjaypyZXR1cm46CgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCi8vIG1pZ3JhdGVUb1Bvb2wodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9taWdyYXRlVG9Qb29sOgoJLy8gbmV3UG9vbDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBtaWdyYXRlVG9Qb29sKHVpbnQ2NCl2b2lkCgljYWxsc3ViIG1pZ3JhdGVUb1Bvb2wKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIG1pZ3JhdGVUb1Bvb2wobmV3UG9vbDogQXBwSUQpOiB2b2lkCi8vCi8vIE1pZ3JhdGUgdGhlIHZhbGlkYXRvciBwb29sIHRvIGEgbmV3IHBvb2wuIFVzZWZ1bCB0byBtaWdyYXRlIHRoaXMgdmFsaWRhdG9yIHBvb2wgdG8gYSBuZXcgdmVyc2lvbiBvZiB0aGUgY29udHJhY3Qgd2l0aG91dCBsb3NpbmcgdGhlIHN0YXRlLgovLwovLyBAcGFyYW0ge0FwcElEfSBuZXdQb29sIC0gQXBwbGljYXRpb25JRCBvZiB0aGUgbmV3IHBvb2wgdG8gbWlncmF0ZSB0bwptaWdyYXRlVG9Qb29sOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjUxMgoJLy8gYXNzZXJ0KG5ld1Bvb2wuY3JlYXRvciA9PT0gdGhpcy5hcHAuY3JlYXRvciwgJ25ldyBwb29sIGhhcyB0byBiZSBhIHBvb2wgY3JlYXRlZCBieSB0aGUgYWRtaW4gY29udHJhY3QnKQoJZnJhbWVfZGlnIC0xIC8vIG5ld1Bvb2w6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCgkvLyBuZXcgcG9vbCBoYXMgdG8gYmUgYSBwb29sIGNyZWF0ZWQgYnkgdGhlIGFkbWluIGNvbnRyYWN0Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTEzCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLm9wZXJhdG9yQWRkcmVzcy52YWx1ZSwgJ29ubHkgdGhlIG9wZXJhdG9yIGNhbiBtaWdyYXRlIHRvIGEgbmV3IHBvb2wnKQoJdHhuIFNlbmRlcgoJYnl0ZWMgNSAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gb25seSB0aGUgb3BlcmF0b3IgY2FuIG1pZ3JhdGUgdG8gYSBuZXcgcG9vbAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjUxNAoJLy8gYXNzZXJ0KHRoaXMuc3RhdHVzLnZhbHVlICE9PSBERUxJTlFVRU5DWV9TVEFUVVMsICdjYW5ub3QgbWlncmF0ZSBpZiBkZWxpbnF1ZW50JykKCWJ5dGVjIDQgLy8gICJzdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAyIC8vIDIKCSE9CgoJLy8gY2Fubm90IG1pZ3JhdGUgaWYgZGVsaW5xdWVudAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjUxNgoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c1ZhbGlkYXRvclBvb2wucHJvdG90eXBlLm1lcmdlU3RhdGVPbk1pZ3JhdGlvbj4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogbmV3UG9vbCwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgdGhpcy5hcHAsCgkvLyAgICAgICAgIHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUsCgkvLyAgICAgICAgIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUsCgkvLyAgICAgICAgIHRoaXMucGVyZm9ybWFuY2VDb3VudGVyLnZhbHVlLAoJLy8gICAgICAgICB7IHJlY2VpdmVyOiBuZXdQb29sLmFkZHJlc3MsIGFtb3VudDogdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSArIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgfSwKCS8vICAgICAgICAgewoJLy8gICAgICAgICAgIHhmZXJBc3NldDogdGhpcy50b2tlbklkLnZhbHVlLAoJLy8gICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IG5ld1Bvb2wuYWRkcmVzcywKCS8vICAgICAgICAgICBhc3NldEFtb3VudDogdGhpcy5hcHAuYWRkcmVzcy5hc3NldEJhbGFuY2UodGhpcy50b2tlbklkLnZhbHVlKSwKCS8vICAgICAgICAgfSwKCS8vICAgICAgIF0sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjUyMwoJLy8gcmVjZWl2ZXI6IG5ld1Bvb2wuYWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIG5ld1Bvb2w6IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTIzCgkvLyBhbW91bnQ6IHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUgKyB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlCglieXRlYyAyIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDAgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJKwoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCWl0eG5fbmV4dAoJaW50YyA0IC8vICBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1MjUKCS8vIHhmZXJBc3NldDogdGhpcy50b2tlbklkLnZhbHVlCglieXRlYyA2IC8vICAidG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTI2CgkvLyBhc3NldFJlY2VpdmVyOiBuZXdQb29sLmFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBuZXdQb29sOiBBcHBJRAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTI3CgkvLyBhc3NldEFtb3VudDogdGhpcy5hcHAuYWRkcmVzcy5hc3NldEJhbGFuY2UodGhpcy50b2tlbklkLnZhbHVlKQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWJ5dGVjIDYgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0Cglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXBvcAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoJaXR4bl9uZXh0CglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCWJ5dGVjIDIyIC8vICBtZXRob2QgIm1lcmdlU3RhdGVPbk1pZ3JhdGlvbih1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQscGF5LGF4ZmVyKXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1MTcKCS8vIGFwcGxpY2F0aW9uSUQ6IG5ld1Bvb2wKCWZyYW1lX2RpZyAtMSAvLyBuZXdQb29sOiBBcHBJRAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjUxOAoJLy8gbWV0aG9kQXJnczogWwoJLy8gICAgICAgICB0aGlzLmFwcCwKCS8vICAgICAgICAgdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSwKCS8vICAgICAgICAgdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSwKCS8vICAgICAgICAgdGhpcy5wZXJmb3JtYW5jZUNvdW50ZXIudmFsdWUsCgkvLyAgICAgICAgIHsgcmVjZWl2ZXI6IG5ld1Bvb2wuYWRkcmVzcywgYW1vdW50OiB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlICsgdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSB9LAoJLy8gICAgICAgICB7CgkvLyAgICAgICAgICAgeGZlckFzc2V0OiB0aGlzLnRva2VuSWQudmFsdWUsCgkvLyAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogbmV3UG9vbC5hZGRyZXNzLAoJLy8gICAgICAgICAgIGFzc2V0QW1vdW50OiB0aGlzLmFwcC5hZGRyZXNzLmFzc2V0QmFsYW5jZSh0aGlzLnRva2VuSWQudmFsdWUpLAoJLy8gICAgICAgICB9LAoJLy8gICAgICAgXQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWJ5dGVjIDIgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWJ5dGVjIDAgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWJ5dGVjIDkgLy8gICJwZXJmb3JtYW5jZSIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gbWVyZ2VTdGF0ZU9uTWlncmF0aW9uKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCxwYXksYXhmZXIpdm9pZAoqYWJpX3JvdXRlX21lcmdlU3RhdGVPbk1pZ3JhdGlvbjoKCS8vIGxzdFR4bjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyA0IC8vICBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAwIChsc3RUeG4pIGZvciBtZXJnZVN0YXRlT25NaWdyYXRpb24gbXVzdCBiZSBhIGF4ZmVyIHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBzdGFrZVR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAyIC8vIDIKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMSAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDEgKHN0YWtlVHhuKSBmb3IgbWVyZ2VTdGF0ZU9uTWlncmF0aW9uIG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIHBlcmZvcm1hbmNlQ291bnRlcjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gZGVsZWdhdGVkQW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBvcENvbW1pdDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gZnJvbTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBtZXJnZVN0YXRlT25NaWdyYXRpb24odWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHBheSxheGZlcil2b2lkCgljYWxsc3ViIG1lcmdlU3RhdGVPbk1pZ3JhdGlvbgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gbWVyZ2VTdGF0ZU9uTWlncmF0aW9uKGZyb206IEFwcElELCBvcENvbW1pdDogdWludDY0LCBkZWxlZ2F0ZWRBbW91bnQ6IHVpbnQ2NCwgcGVyZm9ybWFuY2VDb3VudGVyOiB1aW50NjQsIHN0YWtlVHhuOiBQYXlUeG4sIGxzdFR4bjogQXNzZXRUcmFuc2ZlclR4bik6IHZvaWQKLy8KLy8gUmVjZWl2aW5nIGNhbGwgZnJvbSB0aGUgbmV3IHBvb2wgdG8gbWVyZ2UgdGhlIHN0YXRlIG9mIHRoZSBvbGQgcG9vbCBpbnRvIHRoZSBuZXcgcG9vbC4KbWVyZ2VTdGF0ZU9uTWlncmF0aW9uOgoJcHJvdG8gNiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDMgLy8gMHgKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTQ0CgkvLyBmcm9tT3AgPSBmcm9tLmdsb2JhbFN0YXRlKCdvcGVyYXRvcicpIGFzIEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBmcm9tOiBBcHBJRAoJYnl0ZWMgNSAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGZyb20uZ2xvYmFsU3RhdGUoJ29wZXJhdG9yJykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIGZyb21PcDogYWRkcmVzcwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NDUKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gZnJvbS5hZGRyZXNzICYmIGZyb21PcCA9PT0gdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICAnb25seSB0aGUgb3BlcmF0b3IgY2FuIGluaXRpYXRlIG1pZ3JhdGlvbiBtZXJnZSB3aXRoIHByb3BlciBtZXRob2QnCgkvLyAgICAgKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGZyb206IEFwcElECglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09CglkdXAKCWJ6ICpza2lwX2FuZDIKCWZyYW1lX2RpZyAwIC8vIGZyb21PcDogYWRkcmVzcwoJYnl0ZWMgNSAvLyAgIm9wZXJhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCT09CgkmJgoKKnNraXBfYW5kMjoKCS8vIG9ubHkgdGhlIG9wZXJhdG9yIGNhbiBpbml0aWF0ZSBtaWdyYXRpb24gbWVyZ2Ugd2l0aCBwcm9wZXIgbWV0aG9kCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTQ5CgkvLyB2ZXJpZnlQYXlUeG4oc3Rha2VUeG4sIHsKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiBvcENvbW1pdCArIGRlbGVnYXRlZEFtb3VudCwKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTUgLy8gc3Rha2VUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoic3Rha2VUeG4iLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtNSAvLyBzdGFrZVR4bjogUGF5VHhuCglndHhucyBBbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBvcENvbW1pdDogdWludDY0CglmcmFtZV9kaWcgLTMgLy8gZGVsZWdhdGVkQW1vdW50OiB1aW50NjQKCSsKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJzdGFrZVR4biIsImZpZWxkIjoiYW1vdW50IiwiZXhwZWN0ZWQiOiJvcENvbW1pdCArIGRlbGVnYXRlZEFtb3VudCJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTUzCgkvLyB2ZXJpZnlBc3NldFRyYW5zZmVyVHhuKGxzdFR4biwgewoJLy8gICAgICAgeGZlckFzc2V0OiB0aGlzLnRva2VuSWQudmFsdWUsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgeGZlckFzc2V0CglmcmFtZV9kaWcgLTYgLy8gbHN0VHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBYZmVyQXNzZXQKCWJ5dGVjIDYgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibHN0VHhuIiwiZmllbGQiOiJ4ZmVyQXNzZXQiLCJleHBlY3RlZCI6InRoaXMudG9rZW5JZC52YWx1ZSJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC02IC8vIGxzdFR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJsc3RUeG4iLCJmaWVsZCI6ImFzc2V0UmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU1OAoJLy8gdGhpcy5wZXJmb3JtYW5jZUNvdW50ZXIudmFsdWUgKz0gcGVyZm9ybWFuY2VDb3VudGVyCglieXRlYyA5IC8vICAicGVyZm9ybWFuY2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC00IC8vIHBlcmZvcm1hbmNlQ291bnRlcjogdWludDY0CgkrCglieXRlYyA5IC8vICAicGVyZm9ybWFuY2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NTkKCS8vIHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUgKz0gb3BDb21taXQKCWJ5dGVjIDIgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0yIC8vIG9wQ29tbWl0OiB1aW50NjQKCSsKCWJ5dGVjIDIgLy8gICJvcGVyYXRvcl9jb21taXQiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NjAKCS8vIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgKz0gZGVsZWdhdGVkQW1vdW50CglieXRlYyAwIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMyAvLyBkZWxlZ2F0ZWRBbW91bnQ6IHVpbnQ2NAoJKwoJYnl0ZWMgMCAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU2MgoJLy8gdGhpcy51cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycygpCgljYWxsc3ViIHVwZGF0ZURlbGVnYXRpb25GYWN0b3JzCglyZXRzdWIKCi8vIGNsYWltTGVmdEFsZ28oKXZvaWQKKmFiaV9yb3V0ZV9jbGFpbUxlZnRBbGdvOgoJLy8gZXhlY3V0ZSBjbGFpbUxlZnRBbGdvKCl2b2lkCgljYWxsc3ViIGNsYWltTGVmdEFsZ28KCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGNsYWltTGVmdEFsZ28oKTogdm9pZAovLwovLyBVc2VkIGJ5IGFueW9uZSB0byBjbGVhciB1cCByZW1haW5pbmcgQWxnbyBvdXRzaWRlIG9mIHN0YWtlIGNvdW50ZXJzIGJhY2sgdG8gdGhlIENhZWx1cyBBZG1pbiBjb250cmFjdCB0byBiZSByZWRpc3RyaWJ1dGVkCmNsYWltTGVmdEFsZ286Cglwcm90byAwIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMyAvLyAweAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NjkKCS8vIGR1c3QgPQoJLy8gICAgICAgdGhpcy5hcHAuYWRkcmVzcy5iYWxhbmNlIC0gdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSAtIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgLSB0aGlzLmFwcC5hZGRyZXNzLm1pbkJhbGFuY2UKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCXBvcAoJYnl0ZWMgMiAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCWFwcF9nbG9iYWxfZ2V0CgktCglieXRlYyAwIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCS0KCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKCXBvcAoJLQoJZnJhbWVfYnVyeSAwIC8vIGR1c3Q6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1NzEKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICBhbW91bnQ6IGR1c3QsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU3MgoJLy8gcmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMSAvLyAgImNyZWF0b3IiCglhcHBfZ2xvYmFsX2dldAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU3MwoJLy8gYW1vdW50OiBkdXN0CglmcmFtZV9kaWcgMCAvLyBkdXN0OiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX2RlbGV0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBkZWxldGVBcHBsaWNhdGlvbgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gZGVsZXRlQXBwbGljYXRpb24oKTogdm9pZAovLwovLyBOb2RlIG9wZXJhdG9yIGNhbiBjbG9zZSB0aGUgVmFsaWRhdG9yIGFuZCBnZXQgYmFjayBoaXMgc3Rha2UuIERlbGVnYXRlZCBzdGFrZSBpcyBwdXQgYmFjayBpbnRvIHRoZSBDYWVsdXMgQWRtaW4gY29udHJhY3QuCmRlbGV0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU4MQoJLy8gYXNzZXJ0KHRoaXMuc3RhdHVzLnZhbHVlICE9PSBERUxJTlFVRU5DWV9TVEFUVVMsICdBY2NvdW50IGlzIGRlbGlucXVlbnQuIFNvbHZlIERlbGlucXVlbmN5IHN0YXRlIGJlZm9yZSBjbG9zaW5nJykKCWJ5dGVjIDQgLy8gICJzdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAyIC8vIDIKCSE9CgoJLy8gQWNjb3VudCBpcyBkZWxpbnF1ZW50LiBTb2x2ZSBEZWxpbnF1ZW5jeSBzdGF0ZSBiZWZvcmUgY2xvc2luZwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU4MgoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsICdPbmx5IHRoZSBub2RlIG9wZXJhdG9yIGNhbiBjbG9zZSB0aGUgbm9kZScpCgl0eG4gU2VuZGVyCglieXRlYyA1IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBPbmx5IHRoZSBub2RlIG9wZXJhdG9yIGNhbiBjbG9zZSB0aGUgbm9kZQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU4MwoJLy8gdGhpcy5wdXJnZSgpCgljYWxsc3ViIHB1cmdlCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU4NAoJLy8gdGhpcy52YWxpZGF0b3JDbG9zZUV2ZW50LmxvZyh7CgkvLyAgICAgICBhcHA6IHRoaXMuYXBwLAoJLy8gICAgICAgb3BlcmF0b3I6IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlLAoJLy8gICAgICAgcmV0dXJuZWRTdGFrZTogdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSwKCS8vICAgICAgIG9wZXJhdG9yU3Rha2U6IHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUsCgkvLyAgICAgfSkKCXB1c2hieXRlcyAweGFiYTY4MmRlIC8vIHZhbGlkYXRvckNsb3NlRXZlbnQodWludDY0LGFkZHJlc3MsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWJ5dGVjIDUgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgljb25jYXQKCWJ5dGVjIDAgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJY29uY2F0CglieXRlYyAyIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gY2hlY2tTdGFrZU9uU25pdGNoKHJlY2lwaWVudDogQXBwSUQsIHNwbGl0OiBib29sZWFuLCBtYXg6IHVpbnQ2NCk6IGJvb2xlYW4KLy8KLy8gU1VCUk9VVElORVMKY2hlY2tTdGFrZU9uU25pdGNoOgoJcHJvdG8gMyAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDMgLy8gMHgKCWR1cG4gMwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1OTcKCS8vIGhhc01vcmVUaGFuTWF4ID0gdGhpcy5hcHAuYWRkcmVzcy5iYWxhbmNlID4gTUFYX1NUQUtFX1BFUl9BQ0NPVU5UCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWludGMgNSAvLyA1MDAwMDAwMDAwMDAwMAoJPgoJZnJhbWVfYnVyeSAwIC8vIGhhc01vcmVUaGFuTWF4OiBib29sCgoJLy8gKmlmMTVfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NTk4CgkvLyBoYXNNb3JlVGhhbk1heAoJZnJhbWVfZGlnIDAgLy8gaGFzTW9yZVRoYW5NYXg6IGJvb2wKCWJ6ICppZjE1X2VuZAoKCS8vICppZjE1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo1OTgKCS8vIHRoaXMuc2V0RGVsaW5xdWVuY3koKQoJY2FsbHN1YiBzZXREZWxpbnF1ZW5jeQoKKmlmMTVfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjU5OQoJLy8gaGFzTW9yZVRoYW5EZWxlZ2F0YWJsZSA9IHRoaXMuc2F0dXJhdGlvbkJ1ZmZlci52YWx1ZSA+IEJVRkZFUl9NQVgKCWJ5dGVjIDEzIC8vICAic2F0dXJhdGlvbl9idWZmZXIiCglhcHBfZ2xvYmFsX2dldAoJaW50YyA3IC8vIDEwMDAKCT4KCWZyYW1lX2J1cnkgMSAvLyBoYXNNb3JlVGhhbkRlbGVnYXRhYmxlOiBib29sCgoJLy8gKmlmMTZfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjAwCgkvLyBoYXNNb3JlVGhhbkRlbGVnYXRhYmxlCglmcmFtZV9kaWcgMSAvLyBoYXNNb3JlVGhhbkRlbGVnYXRhYmxlOiBib29sCglieiAqaWYxNl9lbmQKCgkvLyAqaWYxNl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjAxCgkvLyBhbW91bnQgPSB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlIC0gdGhpcy5tYXhEZWxlZ2F0YWJsZVN0YWtlLnZhbHVlCglieXRlYyAwIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDcgLy8gICJtYXhfZGVsZWdhdGFibGVfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJLQoJZnJhbWVfYnVyeSAyIC8vIGFtb3VudDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjYwMgoJLy8gdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSAtPSBhbW91bnQKCWJ5dGVjIDAgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDIgLy8gYW1vdW50OiB1aW50NjQKCS0KCWJ5dGVjIDAgLy8gICJkZWxlZ2F0ZWRfc3Rha2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MDMKCS8vIHJlU3Rha2VBbW91bnQgPSBzcGxpdCA/IGFtb3VudCAtIG1heCA6IGFtb3VudAoJZnJhbWVfZGlnIC0yIC8vIHNwbGl0OiBib29sZWFuCglieiAqdGVybmFyeTJfZmFsc2UKCWZyYW1lX2RpZyAyIC8vIGFtb3VudDogdWludDY0CglmcmFtZV9kaWcgLTMgLy8gbWF4OiB1aW50NjQKCS0KCWIgKnRlcm5hcnkyX2VuZAoKKnRlcm5hcnkyX2ZhbHNlOgoJZnJhbWVfZGlnIDIgLy8gYW1vdW50OiB1aW50NjQKCip0ZXJuYXJ5Ml9lbmQ6CglmcmFtZV9idXJ5IDMgLy8gcmVTdGFrZUFtb3VudDogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjYwNAoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENhZWx1c0FkbWluLnByb3RvdHlwZS5yZVN0YWtlRnJvbVNuaXRjaD4oewoJLy8gICAgICAgICBhcHBsaWNhdGlvbklEOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLAoJLy8gICAgICAgICBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgICAgdGhpcy5hcHAsCgkvLyAgICAgICAgICAgcmVjaXBpZW50LAoJLy8gICAgICAgICAgIHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IHJlU3Rha2VBbW91bnQsCgkvLyAgICAgICAgICAgfSwKCS8vICAgICAgICAgXSwKCS8vICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MTAKCS8vIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MTEKCS8vIGFtb3VudDogcmVTdGFrZUFtb3VudAoJZnJhbWVfZGlnIDMgLy8gcmVTdGFrZUFtb3VudDogdWludDY0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoJaXR4bl9uZXh0CglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCWJ5dGVjIDIzIC8vICBtZXRob2QgInJlU3Rha2VGcm9tU25pdGNoKHVpbnQ2NCx1aW50NjQscGF5KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MDUKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUKCWJ5dGVjIDEgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MDYKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgICB0aGlzLmFwcCwKCS8vICAgICAgICAgICByZWNpcGllbnQsCgkvLyAgICAgICAgICAgewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFtb3VudDogcmVTdGFrZUFtb3VudCwKCS8vICAgICAgICAgICB9LAoJLy8gICAgICAgICBdCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0xIC8vIHJlY2lwaWVudDogQXBwSUQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vICppZjE3X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjYxNQoJLy8gYW1vdW50IC0gbWF4ID4gMAoJZnJhbWVfZGlnIDIgLy8gYW1vdW50OiB1aW50NjQKCWZyYW1lX2RpZyAtMyAvLyBtYXg6IHVpbnQ2NAoJLQoJaW50YyAwIC8vIDAKCT4KCWJ6ICppZjE3X2VuZAoKCS8vICppZjE3X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MTYKCS8vIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNBZG1pbi5wcm90b3R5cGUucmVTdGFrZUZyb21Tbml0Y2g+KHsKCS8vICAgICAgICAgICBhcHBsaWNhdGlvbklEOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLAoJLy8gICAgICAgICAgIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgICAgIHRoaXMuYXBwLAoJLy8gICAgICAgICAgICAgdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZSwKCS8vICAgICAgICAgICAgIHsKCS8vICAgICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcywKCS8vICAgICAgICAgICAgICAgYW1vdW50OiBhbW91bnQgLSBtYXgsCgkvLyAgICAgICAgICAgICB9LAoJLy8gICAgICAgICAgIF0sCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MjIKCS8vIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MjMKCS8vIGFtb3VudDogYW1vdW50IC0gbWF4CglmcmFtZV9kaWcgMiAvLyBhbW91bnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIG1heDogdWludDY0CgktCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoJaXR4bl9uZXh0CglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCWJ5dGVjIDIzIC8vICBtZXRob2QgInJlU3Rha2VGcm9tU25pdGNoKHVpbnQ2NCx1aW50NjQscGF5KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MTcKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUKCWJ5dGVjIDEgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MTgKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgICAgIHRoaXMuYXBwLAoJLy8gICAgICAgICAgICAgdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZSwKCS8vICAgICAgICAgICAgIHsKCS8vICAgICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcywKCS8vICAgICAgICAgICAgICAgYW1vdW50OiBhbW91bnQgLSBtYXgsCgkvLyAgICAgICAgICAgICB9LAoJLy8gICAgICAgICAgIF0KCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglieXRlYyAxIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCippZjE3X2VuZDoKCippZjE2X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MjkKCS8vIHJldHVybiBoYXNNb3JlVGhhbk1heCB8fCBoYXNNb3JlVGhhbkRlbGVnYXRhYmxlOwoJZnJhbWVfZGlnIDAgLy8gaGFzTW9yZVRoYW5NYXg6IGJvb2wKCWR1cAoJYm56ICpza2lwX29yNwoJZnJhbWVfZGlnIDEgLy8gaGFzTW9yZVRoYW5EZWxlZ2F0YWJsZTogYm9vbAoJfHwKCipza2lwX29yNzoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDMKCXJldHN1YgoKLy8gY2hlY2tEZWxpbnF1ZW5jeU9uU25pdGNoKCk6IGJvb2xlYW4KY2hlY2tEZWxpbnF1ZW5jeU9uU25pdGNoOgoJcHJvdG8gMCAxCgoJLy8gKmlmMThfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjMzCgkvLyB0aGlzLnN0YXR1cy52YWx1ZSAhPT0gREVMSU5RVUVOQ1lfU1RBVFVTCglieXRlYyA0IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMiAvLyAyCgkhPQoJYnogKmlmMThfZW5kCgoJLy8gKmlmMThfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjYzMwoJLy8gcmV0dXJuIGZhbHNlOwoJaW50YyAwIC8vIDAKCXJldHN1YgoKKmlmMThfZW5kOgoJLy8gKmlmMTlfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjM0CgkvLyB0aGlzLmFwcC5hZGRyZXNzLmFzc2V0QmFsYW5jZSh0aGlzLnRva2VuSWQudmFsdWUpID09PSAwCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYnl0ZWMgNiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglpbnRjIDAgLy8gMAoJPT0KCWJ6ICppZjE5X2VuZAoKCS8vICppZjE5X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MzQKCS8vIHJldHVybiBmYWxzZTsKCWludGMgMCAvLyAwCglyZXRzdWIKCippZjE5X2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MzUKCS8vIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDYWVsdXNBZG1pbi5wcm90b3R5cGUuYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvcj4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZSwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgewoJLy8gICAgICAgICAgIHhmZXJBc3NldDogdGhpcy50b2tlbklkLnZhbHVlLAoJLy8gICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcywKCS8vICAgICAgICAgICBhc3NldEFtb3VudDogdGhpcy5hcHAuYWRkcmVzcy5hc3NldEJhbGFuY2UodGhpcy50b2tlbklkLnZhbHVlKSwKCS8vICAgICAgICAgfSwKCS8vICAgICAgICAgdGhpcy5hcHAsCgkvLyAgICAgICAgIDAsIC8vIG11c3QgYmUga2VwdCAwIGJlY2F1c2UgdGhlIG9wZXJhdG9yIGNvbW1pdCBpcyBhbHJlYWR5IHJlbW92ZWQgZnJvbSB0aGUgVG90YWxTdGFrZSBvbiBzZXREZWxpbnF1ZW5jeSwgdGhpcyBpcyBhIGZvbGxvdyB1cCBjYWxsIHRvIGVuc3VyZSBhbGwgaGlzIExTVCBiYWxhbmNlIGhhdmUgYmVlbiBidXJuZWQKCS8vICAgICAgIF0sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgNCAvLyAgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjM5CgkvLyB4ZmVyQXNzZXQ6IHRoaXMudG9rZW5JZC52YWx1ZQoJYnl0ZWMgNiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY0MAoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzCglieXRlYyAxIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NDEKCS8vIGFzc2V0QW1vdW50OiB0aGlzLmFwcC5hZGRyZXNzLmFzc2V0QmFsYW5jZSh0aGlzLnRva2VuSWQudmFsdWUpCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYnl0ZWMgNiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCglpdHhuX25leHQKCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJYnl0ZWMgMjQgLy8gIG1ldGhvZCAiYnVyblRvRGVsaW5xdWVudFZhbGlkYXRvcihheGZlcix1aW50NjQsdWludDY0KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MzYKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUKCWJ5dGVjIDEgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2MzcKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgewoJLy8gICAgICAgICAgIHhmZXJBc3NldDogdGhpcy50b2tlbklkLnZhbHVlLAoJLy8gICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcywKCS8vICAgICAgICAgICBhc3NldEFtb3VudDogdGhpcy5hcHAuYWRkcmVzcy5hc3NldEJhbGFuY2UodGhpcy50b2tlbklkLnZhbHVlKSwKCS8vICAgICAgICAgfSwKCS8vICAgICAgICAgdGhpcy5hcHAsCgkvLyAgICAgICAgIDAsIC8vIG11c3QgYmUga2VwdCAwIGJlY2F1c2UgdGhlIG9wZXJhdG9yIGNvbW1pdCBpcyBhbHJlYWR5IHJlbW92ZWQgZnJvbSB0aGUgVG90YWxTdGFrZSBvbiBzZXREZWxpbnF1ZW5jeSwgdGhpcyBpcyBhIGZvbGxvdyB1cCBjYWxsIHRvIGVuc3VyZSBhbGwgaGlzIExTVCBiYWxhbmNlIGhhdmUgYmVlbiBidXJuZWQKCS8vICAgICAgIF0KCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglieXRlYyAxNiAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NDcKCS8vIHJldHVybiB0cnVlOwoJaW50YyAxIC8vIDEKCXJldHN1YgoKLy8gY2hlY2tQcm9ncmFtVmVyc2lvbigpOiBib29sZWFuCmNoZWNrUHJvZ3JhbVZlcnNpb246Cglwcm90byAwIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMyAvLyAweAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NTEKCS8vIGxhdGVzdFZlcnNpb24gPSB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmdsb2JhbFN0YXRlKCd2YWxpZGF0b3JfcG9vbF92ZXJzaW9uJykgYXMgdWludDY0CglieXRlYyAxIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglwdXNoYnl0ZXMgMHg3NjYxNmM2OTY0NjE3NDZmNzI1ZjcwNmY2ZjZjNWY3NjY1NzI3MzY5NmY2ZSAvLyAidmFsaWRhdG9yX3Bvb2xfdmVyc2lvbiIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmdsb2JhbFN0YXRlKCd2YWxpZGF0b3JfcG9vbF92ZXJzaW9uJykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIGxhdGVzdFZlcnNpb246IHVpbnQ2NAoKCS8vICppZjIwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY1MgoJLy8gbGF0ZXN0VmVyc2lvbiA9PT0gdGhpcy52YWxpZGF0b3JQb29sQ29udHJhY3RWZXJzaW9uLnZhbHVlCglmcmFtZV9kaWcgMCAvLyBsYXRlc3RWZXJzaW9uOiB1aW50NjQKCWJ5dGVjIDE3IC8vICAiY29udHJhY3RfdmVyc2lvbiIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYnogKmlmMjBfZW5kCgoJLy8gKmlmMjBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY1MgoJLy8gcmV0dXJuIGZhbHNlOwoJaW50YyAwIC8vIDAKCWIgKmNoZWNrUHJvZ3JhbVZlcnNpb24qcmV0dXJuCgoqaWYyMF9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjUzCgkvLyB0aGlzLnB1cmdlKCkKCWNhbGxzdWIgcHVyZ2UKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjU0CgkvLyB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlID0gMAoJYnl0ZWMgMiAvLyAgIm9wZXJhdG9yX2NvbW1pdCIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NTUKCS8vIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgPSAwCglieXRlYyAwIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY1NgoJLy8gdGhpcy51cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycygpCgljYWxsc3ViIHVwZGF0ZURlbGVnYXRpb25GYWN0b3JzCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY1NwoJLy8gdGhpcy5nb09mZmxpbmUoKQoJY2FsbHN1YiBnb09mZmxpbmUKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjU4CgkvLyByZXR1cm4gdHJ1ZTsKCWludGMgMSAvLyAxCgoqY2hlY2tQcm9ncmFtVmVyc2lvbipyZXR1cm46CgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKLy8gZ2V0R29PbmxpbmVGZWVBbW91bnQoKTogdWludDY0CmdldEdvT25saW5lRmVlQW1vdW50OgoJcHJvdG8gMCAxCgoJLy8gKmlmMjFfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjYyCgkvLyAhdGhpcy5nZXRFbGlnaWJpbGl0eUZsYWcoKQoJY2FsbHN1YiBnZXRFbGlnaWJpbGl0eUZsYWcKCSEKCWJ6ICppZjIxX2VuZAoKCS8vICppZjIxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NjMKCS8vIHJldHVybiBnbG9iYWxzLnBheW91dHNHb09ubGluZUZlZTsKCWdsb2JhbCBQYXlvdXRzR29PbmxpbmVGZWUKCXJldHN1YgoKKmlmMjFfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY2NQoJLy8gcmV0dXJuIDA7CglpbnRjIDAgLy8gMAoJcmV0c3ViCgovLyBzZXREZWxpbnF1ZW5jeU9uVGhyZXNob2xkQ2hlY2soKTogdm9pZApzZXREZWxpbnF1ZW5jeU9uVGhyZXNob2xkQ2hlY2s6Cglwcm90byAwIDAKCgkvLyAqaWYyMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NjkKCS8vICF0aGlzLmRlbGlucXVlbmN5VGhyZXNob2xkQ2hlY2soKQoJY2FsbHN1YiBkZWxpbnF1ZW5jeVRocmVzaG9sZENoZWNrCgkhCglieiAqaWYyMl9lbmQKCgkvLyAqaWYyMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjcwCgkvLyB0aGlzLnNldERlbGlucXVlbmN5KCkKCWNhbGxzdWIgc2V0RGVsaW5xdWVuY3kKCippZjIyX2VuZDoKCXJldHN1YgoKLy8gZGVsaW5xdWVuY3lUaHJlc2hvbGRDaGVjaygpOiBib29sZWFuCmRlbGlucXVlbmN5VGhyZXNob2xkQ2hlY2s6Cglwcm90byAwIDEKCgkvLyAqaWYyM19jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2NzUKCS8vIHRoaXMuZGVsaW5xdWVuY3lTY29yZS52YWx1ZSA+IE1BWF9ERUxJTlFVRU5DWV9UT0xFUkFURUQKCWJ5dGVjIDggLy8gICJkZWxpbnF1ZW5jeV9zY29yZSIKCWFwcF9nbG9iYWxfZ2V0CglwdXNoaW50IDEwCgk+CglieiAqaWYyM19lbmQKCgkvLyAqaWYyM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6Njc2CgkvLyByZXR1cm4gZmFsc2U7CglpbnRjIDAgLy8gMAoJcmV0c3ViCgoqaWYyM19lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6Njc4CgkvLyByZXR1cm4gdHJ1ZTsKCWludGMgMSAvLyAxCglyZXRzdWIKCi8vIHNldERlbGlucXVlbmN5KCk6IHZvaWQKc2V0RGVsaW5xdWVuY3k6Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NjgyCgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzQWRtaW4ucHJvdG90eXBlLmJ1cm5Ub0RlbGlucXVlbnRWYWxpZGF0b3I+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUsCgkvLyAgICAgICBtZXRob2RBcmdzOiBbCgkvLyAgICAgICAgIHsKCS8vICAgICAgICAgICB4ZmVyQXNzZXQ6IHRoaXMudG9rZW5JZC52YWx1ZSwKCS8vICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICAgICAgYXNzZXRBbW91bnQ6IHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMudG9rZW5JZC52YWx1ZSksCgkvLyAgICAgICAgIH0sCgkvLyAgICAgICAgIHRoaXMuYXBwLAoJLy8gICAgICAgICB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlLAoJLy8gICAgICAgXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyA0IC8vICBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2ODYKCS8vIHhmZXJBc3NldDogdGhpcy50b2tlbklkLnZhbHVlCglieXRlYyA2IC8vICAidG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6Njg3CgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY4OAoJLy8gYXNzZXRBbW91bnQ6IHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMudG9rZW5JZC52YWx1ZSkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglieXRlYyA2IC8vICAidG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldAoJYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCglwb3AKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCWl0eG5fbmV4dAoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglieXRlYyAyNCAvLyAgbWV0aG9kICJidXJuVG9EZWxpbnF1ZW50VmFsaWRhdG9yKGF4ZmVyLHVpbnQ2NCx1aW50NjQpdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY4MwoJLy8gYXBwbGljYXRpb25JRDogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZQoJYnl0ZWMgMSAvLyAgImNyZWF0b3IiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY4NAoJLy8gbWV0aG9kQXJnczogWwoJLy8gICAgICAgICB7CgkvLyAgICAgICAgICAgeGZlckFzc2V0OiB0aGlzLnRva2VuSWQudmFsdWUsCgkvLyAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLAoJLy8gICAgICAgICAgIGFzc2V0QW1vdW50OiB0aGlzLmFwcC5hZGRyZXNzLmFzc2V0QmFsYW5jZSh0aGlzLnRva2VuSWQudmFsdWUpLAoJLy8gICAgICAgICB9LAoJLy8gICAgICAgICB0aGlzLmFwcCwKCS8vICAgICAgICAgdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSwKCS8vICAgICAgIF0KCXR4bmEgQXBwbGljYXRpb25zIDAKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglieXRlYyAyIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2OTQKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MsCgkvLyAgICAgICBhbW91bnQ6IHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMSAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY5NQoJLy8gcmVjZWl2ZXI6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMSAvLyAgImNyZWF0b3IiCglhcHBfZ2xvYmFsX2dldAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY5NgoJLy8gYW1vdW50OiB0aGlzLmRlbGVnYXRlZFN0YWtlLnZhbHVlCglieXRlYyAwIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo2OTgKCS8vIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUgPSAwCglieXRlYyAwIC8vICAiZGVsZWdhdGVkX3N0YWtlIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjY5OQoJLy8gdGhpcy5wZXJmb3JtYW5jZUNvdW50ZXIudmFsdWUgPSAwCglieXRlYyA5IC8vICAicGVyZm9ybWFuY2UiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzAwCgkvLyB0aGlzLnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzKCkKCWNhbGxzdWIgdXBkYXRlRGVsZWdhdGlvbkZhY3RvcnMKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzAxCgkvLyB0aGlzLnN0YXR1cy52YWx1ZSA9IERFTElOUVVFTkNZX1NUQVRVUwoJYnl0ZWMgNCAvLyAgInN0YXR1cyIKCWludGMgMiAvLyAyCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBmaXhEZWxpbnF1ZW5jeVNjb3JlKCk6IHZvaWQKZml4RGVsaW5xdWVuY3lTY29yZToKCXByb3RvIDAgMAoKCS8vICppZjI0X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjcwNQoJLy8gdGhpcy5kZWxpbnF1ZW5jeVNjb3JlLnZhbHVlID09PSAwCglieXRlYyA4IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDAKCT09CglieiAqaWYyNF9lbmQKCgkvLyAqaWYyNF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzA2CgkvLyByZXR1cm47CglyZXRzdWIKCippZjI0X2VuZDoKCS8vICppZjI1X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjcwOAoJLy8gdGhpcy5zdGF0dXMudmFsdWUgPT09IERFTElOUVVFTkNZX1NUQVRVUwoJYnl0ZWMgNCAvLyAgInN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDIgLy8gMgoJPT0KCWJ6ICppZjI1X2VuZAoKCS8vICppZjI1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MDkKCS8vIHRoaXMuZGVsaW5xdWVuY3lTY29yZS52YWx1ZSAtPSA1CglieXRlYyA4IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglhcHBfZ2xvYmFsX2dldAoJaW50YyA2IC8vIDUKCS0KCWJ5dGVjIDggLy8gICJkZWxpbnF1ZW5jeV9zY29yZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoqaWYyNV9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzExCgkvLyB0aGlzLmRlbGlucXVlbmN5U2NvcmUudmFsdWUgPSAwCglieXRlYyA4IC8vICAiZGVsaW5xdWVuY3lfc2NvcmUiCglpbnRjIDAgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gcHVyZ2UoKTogdm9pZApwdXJnZToKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MTUKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIHhmZXJBc3NldDogdGhpcy50b2tlbklkLnZhbHVlLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUsCgkvLyAgICAgICBhc3NldENsb3NlVG86IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMudG9rZW5JZC52YWx1ZSksCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgNCAvLyAgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzE2CgkvLyB4ZmVyQXNzZXQ6IHRoaXMudG9rZW5JZC52YWx1ZQoJYnl0ZWMgNiAvLyAgInRva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjcxNwoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5vcGVyYXRvckFkZHJlc3MudmFsdWUKCWJ5dGVjIDUgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzE4CgkvLyBhc3NldENsb3NlVG86IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlCglieXRlYyA1IC8vICAib3BlcmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBBc3NldENsb3NlVG8KCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzE5CgkvLyBhc3NldEFtb3VudDogdGhpcy5hcHAuYWRkcmVzcy5hc3NldEJhbGFuY2UodGhpcy50b2tlbklkLnZhbHVlKQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWJ5dGVjIDYgLy8gICJ0b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0Cglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXBvcAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzIxCgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiB0aGlzLm9wZXJhdG9yQ29tbWl0LnZhbHVlICsgdGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSwKCS8vICAgICAgIGNsb3NlUmVtYWluZGVyVG86IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuZ2xvYmFsU3RhdGUoJ21hbmFnZXInKSBhcyBBZGRyZXNzLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MjIKCS8vIHJlY2VpdmVyOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKCXBvcAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MjMKCS8vIGFtb3VudDogdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSArIHRoaXMuZGVsZWdhdGVkU3Rha2UudmFsdWUKCWJ5dGVjIDIgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMCAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CgkrCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MjQKCS8vIGNsb3NlUmVtYWluZGVyVG86IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUuZ2xvYmFsU3RhdGUoJ21hbmFnZXInKSBhcyBBZGRyZXNzCglieXRlYyAxIC8vICAiY3JlYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglwdXNoYnl0ZXMgMHg2ZDYxNmU2MTY3NjU3MiAvLyAibWFuYWdlciIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmdsb2JhbFN0YXRlKCdtYW5hZ2VyJykKCWFzc2VydAoJaXR4bl9maWVsZCBDbG9zZVJlbWFpbmRlclRvCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyB1cGRhdGVEZWxlZ2F0aW9uRmFjdG9ycygpOiB2b2lkCnVwZGF0ZURlbGVnYXRpb25GYWN0b3JzOgoJcHJvdG8gMCAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDMgLy8gMHgKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzI5CgkvLyBhc3NlcnQoCgkvLyAgICAgICB0aGlzLnN0YXR1cy52YWx1ZSAhPT0gREVMSU5RVUVOQ1lfU1RBVFVTLAoJLy8gICAgICAgJ0FjY291bnQgaXMgZGVsaW5xdWVudC4gU29sdmUgRGVsaW5xdWVuY3kgc3RhdGUgYmVmb3JlIHVwZGF0aW5nIHBhcmFtZXRlcnMnCgkvLyAgICAgKQoJYnl0ZWMgNCAvLyAgInN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDIgLy8gMgoJIT0KCgkvLyBBY2NvdW50IGlzIGRlbGlucXVlbnQuIFNvbHZlIERlbGlucXVlbmN5IHN0YXRlIGJlZm9yZSB1cGRhdGluZyBwYXJhbWV0ZXJzCglhc3NlcnQKCgkvLyAqaWYyNl9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3MzQKCS8vIHRoaXMub3BlcmF0b3JDb21taXQudmFsdWUgPiBnbG9iYWxzLnBheW91dHNNaW5CYWxhbmNlICYmIHRoaXMuc3RhdHVzLnZhbHVlID09PSAwCglieXRlYyAyIC8vICAib3BlcmF0b3JfY29tbWl0IgoJYXBwX2dsb2JhbF9nZXQKCWdsb2JhbCBQYXlvdXRzTWluQmFsYW5jZQoJPgoJZHVwCglieiAqc2tpcF9hbmQzCglieXRlYyA0IC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAwCgk9PQoJJiYKCipza2lwX2FuZDM6CglieiAqaWYyNl9lbHNlCgoJLy8gKmlmMjZfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjczNQoJLy8gdGhpcy5tYXhEZWxlZ2F0YWJsZVN0YWtlLnZhbHVlID0gdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZQoJYnl0ZWMgNyAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCWJ5dGVjIDIgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzM3CgkvLyB0b2tlbkJvb3N0ID0gKHRoaXMuZ2V0VGllcigpICogdGhpcy5vcGVyYXRvckNvbW1pdC52YWx1ZSkgLyAyCgljYWxsc3ViIGdldFRpZXIKCWJ5dGVjIDIgLy8gICJvcGVyYXRvcl9jb21taXQiCglhcHBfZ2xvYmFsX2dldAoJKgoJaW50YyAyIC8vIDIKCS8KCWZyYW1lX2J1cnkgMCAvLyB0b2tlbkJvb3N0OiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzM4CgkvLyB0aGlzLm1heERlbGVnYXRhYmxlU3Rha2UudmFsdWUgKz0gdG9rZW5Cb29zdAoJYnl0ZWMgNyAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyB0b2tlbkJvb3N0OiB1aW50NjQKCSsKCWJ5dGVjIDcgLy8gICJtYXhfZGVsZWdhdGFibGVfc3Rha2UiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NDEKCS8vIHRoaXMubWF4RGVsZWdhdGFibGVTdGFrZS52YWx1ZSArPSBQRVJGT1JNQU5DRV9TVEFLRV9JTkNSRUFTRSAqICh0aGlzLnBlcmZvcm1hbmNlQ291bnRlci52YWx1ZSAvIFBFUkZPUk1BTkNFX1NURVApCglieXRlYyA3IC8vICAibWF4X2RlbGVnYXRhYmxlX3N0YWtlIgoJYXBwX2dsb2JhbF9nZXQKCXB1c2hpbnQgMTAwMDAwMDAwMDAKCWJ5dGVjIDkgLy8gICJwZXJmb3JtYW5jZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDYgLy8gNQoJLwoJKgoJKwoJYnl0ZWMgNyAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gKmlmMjdfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzQ0CgkvLyB0aGlzLmFwcC5hZGRyZXNzLmJhbGFuY2UgPj0gTUFYX1NUQUtFX1BFUl9BQ0NPVU5UCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWludGMgNSAvLyA1MDAwMDAwMDAwMDAwMAoJPj0KCWJ6ICppZjI3X2Vsc2VpZjFfY29uZGl0aW9uCgoJLy8gKmlmMjdfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc0NQoJLy8gdGhpcy5tYXhEZWxlZ2F0YWJsZVN0YWtlLnZhbHVlID0gMAoJYnl0ZWMgNyAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCWludGMgMCAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NDYKCS8vIHRoaXMuc2V0RGVsaW5xdWVuY3koKQoJY2FsbHN1YiBzZXREZWxpbnF1ZW5jeQoJYiAqaWYyN19lbmQKCippZjI3X2Vsc2VpZjFfY29uZGl0aW9uOgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc0NwoJLy8gdGhpcy5hcHAuYWRkcmVzcy5iYWxhbmNlICsgdGhpcy5tYXhEZWxlZ2F0YWJsZVN0YWtlLnZhbHVlID4gTUFYX1NUQUtFX1BFUl9BQ0NPVU5UCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWJ5dGVjIDcgLy8gICJtYXhfZGVsZWdhdGFibGVfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJKwoJaW50YyA1IC8vIDUwMDAwMDAwMDAwMDAwCgk+CglieiAqaWYyN19lbmQKCgkvLyAqaWYyN19lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NDgKCS8vIHRoaXMubWF4RGVsZWdhdGFibGVTdGFrZS52YWx1ZSA9IE1BWF9TVEFLRV9QRVJfQUNDT1VOVCAtIHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZQoJYnl0ZWMgNyAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCWludGMgNSAvLyA1MDAwMDAwMDAwMDAwMAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQoJcG9wCgktCglhcHBfZ2xvYmFsX3B1dAoKKmlmMjdfZW5kOgoJYiAqaWYyNl9lbmQKCippZjI2X2Vsc2U6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzUxCgkvLyB0aGlzLm1heERlbGVnYXRhYmxlU3Rha2UudmFsdWUgPSAwCglieXRlYyA3IC8vICAibWF4X2RlbGVnYXRhYmxlX3N0YWtlIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoqaWYyNl9lbmQ6CgkvLyAqaWYyOF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NTUKCS8vIHRoaXMubWF4RGVsZWdhdGFibGVTdGFrZS52YWx1ZSA+IDAKCWJ5dGVjIDcgLy8gICJtYXhfZGVsZWdhdGFibGVfc3Rha2UiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDAKCT4KCWJ6ICppZjI4X2Vsc2UKCgkvLyAqaWYyOF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzU2CgkvLyB0aGlzLnNhdHVyYXRpb25CdWZmZXIudmFsdWUgPSAodGhpcy5kZWxlZ2F0ZWRTdGFrZS52YWx1ZSAqIEJVRkZFUl9NQVgpIC8gdGhpcy5tYXhEZWxlZ2F0YWJsZVN0YWtlLnZhbHVlCglieXRlYyAxMyAvLyAgInNhdHVyYXRpb25fYnVmZmVyIgoJYnl0ZWMgMCAvLyAgImRlbGVnYXRlZF9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDcgLy8gMTAwMAoJKgoJYnl0ZWMgNyAvLyAgIm1heF9kZWxlZ2F0YWJsZV9zdGFrZSIKCWFwcF9nbG9iYWxfZ2V0CgkvCglhcHBfZ2xvYmFsX3B1dAoJYiAqaWYyOF9lbmQKCippZjI4X2Vsc2U6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzU4CgkvLyB0aGlzLnNhdHVyYXRpb25CdWZmZXIudmFsdWUgPSBCVUZGRVJfTUFYCglieXRlYyAxMyAvLyAgInNhdHVyYXRpb25fYnVmZmVyIgoJaW50YyA3IC8vIDEwMDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc1OQoJLy8gdGhpcy5zdGF0dXMudmFsdWUgPSBOT1RfREVMRUdBVEFCTEVfU1RBVFVTCglieXRlYyA0IC8vICAic3RhdHVzIgoJaW50YyAxIC8vIDEKCWFwcF9nbG9iYWxfcHV0CgoqaWYyOF9lbmQ6CglyZXRzdWIKCi8vIGdldFRpZXIoKTogdWludDY0CmdldFRpZXI6Cglwcm90byAwIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMyAvLyAweAoJZHVwbiAyCgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc2NAoJLy8gYm9vc3RUb2tlbiA9IEFzc2V0SUQuemVyb0luZGV4CglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAwIC8vIGJvb3N0VG9rZW46IHVpbnQ2NAoKCS8vICppZjI5X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc2NQoJLy8gIXRoaXMuYm9vc3RUb2tlbklELmV4aXN0cwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZWMgMTAgLy8gICJib29zdF90b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCSEKCWJ6ICppZjI5X2VuZAoKCS8vICppZjI5X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NjYKCS8vIHRoaXMuYm9vc3RUb2tlbklELnZhbHVlID0gdGhpcy5jcmVhdG9yQ29udHJhY3RBcHBJRC52YWx1ZS5nbG9iYWxTdGF0ZSgnYm9vc3RfdG9rZW5faWQnKSBhcyBBc3NldElECglieXRlYyAxMCAvLyAgImJvb3N0X3Rva2VuX2lkIgoJYnl0ZWMgMSAvLyAgImNyZWF0b3IiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMTAgLy8gICJib29zdF90b2tlbl9pZCIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLmdsb2JhbFN0YXRlKCdib29zdF90b2tlbl9pZCcpCglhc3NlcnQKCWFwcF9nbG9iYWxfcHV0CgoqaWYyOV9lbmQ6CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzY4CgkvLyBib29zdFRva2VuID0gdGhpcy5ib29zdFRva2VuSUQudmFsdWUKCWJ5dGVjIDEwIC8vICAiYm9vc3RfdG9rZW5faWQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfYnVyeSAwIC8vIGJvb3N0VG9rZW46IHVpbnQ2NAoKCS8vICppZjMwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc2OQoJLy8gYm9vc3RUb2tlbiA9PT0gQXNzZXRJRC56ZXJvSW5kZXgKCWZyYW1lX2RpZyAwIC8vIGJvb3N0VG9rZW46IHVpbnQ2NAoJaW50YyAwIC8vIDAKCT09CglieiAqaWYzMF9lbmQKCgkvLyAqaWYzMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzY5CgkvLyByZXR1cm4gMDsKCWludGMgMCAvLyAwCgliICpnZXRUaWVyKnJldHVybgoKKmlmMzBfZW5kOgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc3MAoJLy8gb3duZWRUb2tlbiA9IHRoaXMub3BlcmF0b3JBZGRyZXNzLnZhbHVlLmFzc2V0QmFsYW5jZSh0aGlzLmJvb3N0VG9rZW5JRC52YWx1ZSkKCWJ5dGVjIDUgLy8gICJvcGVyYXRvciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAxMCAvLyAgImJvb3N0X3Rva2VuX2lkIgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglmcmFtZV9idXJ5IDEgLy8gb3duZWRUb2tlbjogdWludDY0CgoJLy8gKmlmMzFfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzcxCgkvLyBvd25lZFRva2VuID09PSAwCglmcmFtZV9kaWcgMSAvLyBvd25lZFRva2VuOiB1aW50NjQKCWludGMgMCAvLyAwCgk9PQoJYnogKmlmMzFfZW5kCgoJLy8gKmlmMzFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc3MQoJLy8gcmV0dXJuIDA7CglpbnRjIDAgLy8gMAoJYiAqZ2V0VGllcipyZXR1cm4KCippZjMxX2VuZDoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NzIKCS8vIGdldFRpZXIgPSBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ2FlbHVzQWRtaW4ucHJvdG90eXBlLmdldEJvb3N0VGllciwgdWludDY0Pih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiB0aGlzLmNyZWF0b3JDb250cmFjdEFwcElELnZhbHVlLAoJLy8gICAgICAgbWV0aG9kQXJnczogW293bmVkVG9rZW5dLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweDAwYzNhNzE0IC8vIG1ldGhvZCAiZ2V0Qm9vc3RUaWVyKHVpbnQ2NCl1aW50NjQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NzMKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMuY3JlYXRvckNvbnRyYWN0QXBwSUQudmFsdWUKCWJ5dGVjIDEgLy8gICJjcmVhdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NzQKCS8vIG1ldGhvZEFyZ3M6IFtvd25lZFRva2VuXQoJZnJhbWVfZGlnIDEgLy8gb3duZWRUb2tlbjogdWludDY0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50YyAxIC8vIDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJYnRvaQoJZnJhbWVfYnVyeSAyIC8vIGdldFRpZXI6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3NzYKCS8vIHJldHVybiBnZXRUaWVyOwoJZnJhbWVfZGlnIDIgLy8gZ2V0VGllcjogdWludDY0CgoqZ2V0VGllcipyZXR1cm46CgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCi8vIGdldFRvbGVyYXRlZFByb3Bvc2FsRGVsdGEoKTogdWludDY0CmdldFRvbGVyYXRlZFByb3Bvc2FsRGVsdGE6Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6NzgwCgkvLyByZXR1cm4gdGhpcy5nZXRFeHBlY3RlZFByb3Bvc2Fsc0RlbHRhKCkgKiAzOwoJY2FsbHN1YiBnZXRFeHBlY3RlZFByb3Bvc2Fsc0RlbHRhCglpbnRjIDkgLy8gMwoJKgoJcmV0c3ViCgovLyBnZXRFeHBlY3RlZFByb3Bvc2Fsc0RlbHRhKCk6IHVpbnQ2NApnZXRFeHBlY3RlZFByb3Bvc2Fsc0RlbHRhOgoJcHJvdG8gMCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDMgLy8gMHgKCWR1cG4gMgoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3ODQKCS8vIGN1cnJlbnRPbmxpbmVTdGFrZSA9IG9ubGluZVN0YWtlKCkKCW9ubGluZV9zdGFrZQoJZnJhbWVfYnVyeSAwIC8vIGN1cnJlbnRPbmxpbmVTdGFrZTogdWludDY0CgoJLy8gY29udHJhY3RzXENhZWx1c1ZhbGlkYXRvci5hbGdvLnRzOjc4NQoJLy8gY3VycmVudEFjY291bnRTdGFrZSA9IHRoaXMuYXBwLmFkZHJlc3Mudm90ZXJCYWxhbmNlCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJdm90ZXJfcGFyYW1zX2dldCBWb3RlckJhbGFuY2UKCWZyYW1lX2J1cnkgMSAvLyBjdXJyZW50QWNjb3VudFN0YWtlOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQ2FlbHVzVmFsaWRhdG9yLmFsZ28udHM6Nzg2CgkvLyByb3VuZERlbHRhID0gY3VycmVudE9ubGluZVN0YWtlIC8gY3VycmVudEFjY291bnRTdGFrZQoJZnJhbWVfZGlnIDAgLy8gY3VycmVudE9ubGluZVN0YWtlOiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIGN1cnJlbnRBY2NvdW50U3Rha2U6IHVpbnQ2NAoJLwoJZnJhbWVfYnVyeSAyIC8vIHJvdW5kRGVsdGE6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xDYWVsdXNWYWxpZGF0b3IuYWxnby50czo3ODcKCS8vIHJldHVybiByb3VuZERlbHRhICogMjA7CglmcmFtZV9kaWcgMiAvLyByb3VuZERlbHRhOiB1aW50NjQKCXB1c2hpbnQgMjAKCSoKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweGFkMDRmNmExIC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24odWludDY0LGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4ZmIxYmNiNzUgLy8gbWV0aG9kICJvcHRJbnRvTFNUKCl2b2lkIgoJcHVzaGJ5dGVzIDB4ZGZhMjA3NjQgLy8gbWV0aG9kICJhZGRUb09wZXJhdG9yQ29tbWl0KHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4MzFiN2VjMTkgLy8gbWV0aG9kICJyZW1vdmVGcm9tT3BlcmF0b3JDb21taXQodWludDY0LHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4ZGZiYmU1NTEgLy8gbWV0aG9kICJzb2x2ZURlbGlucXVlbmN5KHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4NDRhNWI1NzYgLy8gbWV0aG9kICJyZXBvcnRSZXdhcmRzKHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4ZDQ1MDIxMDAgLy8gbWV0aG9kICJhZGRTdGFrZShwYXkpdm9pZCIKCXB1c2hieXRlcyAweDNkYzdhZTc5IC8vIG1ldGhvZCAiYnVyblN0YWtlKHVpbnQ2NCxhZGRyZXNzKXZvaWQiCglwdXNoYnl0ZXMgMHgxM2M4OWVjYyAvLyBtZXRob2QgInNuaXRjaFZhbGlkYXRvcih1aW50NjQsKGJvb2wsYm9vbCxib29sLGJvb2wsdWludDY0LGJvb2wsdWludDY0KSl2b2lkIgoJYnl0ZWMgMTkgLy8gIG1ldGhvZCAiZ2V0U25pdGNoZWQoKGJvb2wsYm9vbCxib29sLGJvb2wsdWludDY0LGJvb2wsdWludDY0KSlib29sIgoJcHVzaGJ5dGVzIDB4NGE1MzU2Y2MgLy8gbWV0aG9kICJmbGFzaGxvYW4odWludDY0LGFkZHJlc3Mpdm9pZCIKCXB1c2hieXRlcyAweDBkZjI2NTkyIC8vIG1ldGhvZCAiY2hlY2tCYWxhbmNlKCl2b2lkIgoJcHVzaGJ5dGVzIDB4NDAwZTE0ZmIgLy8gbWV0aG9kICJnb09ubGluZShwYXksYnl0ZVtdLGJ5dGVbXSxieXRlW10sdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweDUxZWYzYjIxIC8vIG1ldGhvZCAiZ29PZmZsaW5lKCl2b2lkIgoJcHVzaGJ5dGVzIDB4ZjlkYzI2NDYgLy8gbWV0aG9kICJnZXRFbGlnaWJpbGl0eUZsYWcoKWJvb2wiCglwdXNoYnl0ZXMgMHgzYzY0N2VhNSAvLyBtZXRob2QgIm1pZ3JhdGVUb1Bvb2wodWludDY0KXZvaWQiCglieXRlYyAyMiAvLyAgbWV0aG9kICJtZXJnZVN0YXRlT25NaWdyYXRpb24odWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHBheSxheGZlcil2b2lkIgoJcHVzaGJ5dGVzIDB4YTY5ZWE0YTcgLy8gbWV0aG9kICJjbGFpbUxlZnRBbGdvKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9vcHRJbnRvTFNUICphYmlfcm91dGVfYWRkVG9PcGVyYXRvckNvbW1pdCAqYWJpX3JvdXRlX3JlbW92ZUZyb21PcGVyYXRvckNvbW1pdCAqYWJpX3JvdXRlX3NvbHZlRGVsaW5xdWVuY3kgKmFiaV9yb3V0ZV9yZXBvcnRSZXdhcmRzICphYmlfcm91dGVfYWRkU3Rha2UgKmFiaV9yb3V0ZV9idXJuU3Rha2UgKmFiaV9yb3V0ZV9zbml0Y2hWYWxpZGF0b3IgKmFiaV9yb3V0ZV9nZXRTbml0Y2hlZCAqYWJpX3JvdXRlX2ZsYXNobG9hbiAqYWJpX3JvdXRlX2NoZWNrQmFsYW5jZSAqYWJpX3JvdXRlX2dvT25saW5lICphYmlfcm91dGVfZ29PZmZsaW5lICphYmlfcm91dGVfZ2V0RWxpZ2liaWxpdHlGbGFnICphYmlfcm91dGVfbWlncmF0ZVRvUG9vbCAqYWJpX3JvdXRlX21lcmdlU3RhdGVPbk1pZ3JhdGlvbiAqYWJpX3JvdXRlX2NsYWltTGVmdEFsZ28KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnIKCipjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uOgoJcHVzaGJ5dGVzIDB4MjQ4N2MzMmMgLy8gbWV0aG9kICJkZWxldGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfZGVsZXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBEZWxldGVBcHBsaWNhdGlvbgoJZXJy",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusValidatorPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "createApplication method called at creation, initializes some globalKey values",
        "args": [
          {
            "name": "creatingContract",
            "type": "uint64",
            "desc": "ApplicationID for the creator contract (CaelusAdminContract)"
          },
          {
            "name": "operatorAddress",
            "type": "address",
            "desc": "Address of the node operator used to sign online/offline txns and participate in auctions"
          },
          {
            "name": "contractVersion",
            "type": "uint64",
            "desc": "Approval Program version for the node contract, stored in the CaelusAdminContract"
          },
          {
            "name": "tokenId",
            "type": "uint64",
            "desc": "AssetID of the LST token"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optIntoLST",
        "desc": "ARC4 PUBLIC METHODS",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addToOperatorCommit",
        "desc": "Used by the Caelus Admin to send the correct amount into the operator commit",
        "args": [
          {
            "name": "opStake",
            "type": "pay",
            "desc": "node operator stake commitment"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "operatorCommitUpdateEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "amountAdded",
                "type": "uint64"
              },
              {
                "name": "amountRemoved",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "removeFromOperatorCommit",
        "desc": "Used by the node operator to remove from his stake amount for the node",
        "args": [
          {
            "name": "claimRequest",
            "type": "uint64",
            "desc": "amount claimed by the node operator to be removed from the operator_commit counter and moved into delegated stake"
          },
          {
            "name": "claimRequestLST",
            "type": "uint64",
            "desc": "amount of LST to be sent back to the node operator"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "operatorCommitUpdateEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "amountAdded",
                "type": "uint64"
              },
              {
                "name": "amountRemoved",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "solveDelinquency",
        "desc": "Delinquent Validators need to propose a valid block to clear up their delinquency status.\n\n\nThis method should be called when the delinquency score is below the threshold and the operator has proposed a block.",
        "args": [
          {
            "name": "block",
            "type": "uint64",
            "desc": "block number of the block proposed by the node operator while the account was in delinquency"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "solvedDelinquencyEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "stake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "reportRewards",
        "desc": "Called by the node operator to report the rewards of a block proposed by the contract account.",
        "args": [
          {
            "name": "block",
            "type": "uint64",
            "desc": "Block number of the block proposed by the node operator\n\n\n WHEN CRAFTING TXN THE BLOCK ROUND NEEDS TO BE INCLUDED AS FIRST VALID"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "rewardsEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "block",
                "type": "uint64"
              },
              {
                "name": "payout",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "addStake",
        "desc": "Receive delegated stake and update the delegation factors.",
        "args": [
          {
            "name": "txnWithStake",
            "type": "pay",
            "desc": "Payment transaction to the contract account with the delegated stake"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnStake",
        "args": [
          {
            "name": "amountRequested",
            "type": "uint64",
            "desc": "amount of Algo to be burned"
          },
          {
            "name": "receiverBurn",
            "type": "address",
            "desc": "address of the receiver of the burn transaction triggered on the Caelus Admin contract"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitchValidator",
        "desc": "Snitch another Validator Contract. A valid snitch will improve the performance counter.",
        "args": [
          {
            "name": "appToSnitch",
            "type": "uint64",
            "desc": "ApplicationID of the validator to be snitched"
          },
          {
            "name": "params",
            "type": "(bool,bool,bool,bool,uint64,bool,uint64)",
            "desc": "parameters to check for the validator (For example: performanceCheck, stakeAmountCheck, delinquentCheck, versionCheck)"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "snitchValidatorEvent",
            "args": [
              {
                "name": "request",
                "type": "(bool,bool,bool,bool,uint64,bool,uint64)"
              },
              {
                "name": "result",
                "type": "bool"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getSnitched",
        "args": [
          {
            "name": "checks",
            "type": "(bool,bool,bool,bool,uint64,bool,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "flashloan",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "receiver",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "checkBalance",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOnline",
        "desc": "Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake",
        "args": [
          {
            "name": "feePayment",
            "type": "pay",
            "desc": "Payment transaction to the contract to cover costs for Eligibility fee 0 for renewal."
          },
          {
            "name": "votePK",
            "type": "byte[]",
            "desc": "The vote public key"
          },
          {
            "name": "selectionPK",
            "type": "byte[]",
            "desc": "The selection public key"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]",
            "desc": "the state proof public key"
          },
          {
            "name": "voteFirst",
            "type": "uint64",
            "desc": "Index of first valid block for the participation keys"
          },
          {
            "name": "voteLast",
            "type": "uint64",
            "desc": "Index of last valid block for for the participation keys"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64",
            "desc": "The vote key dilution value"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "goOnlineEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              },
              {
                "name": "delegatedStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "goOffline",
        "desc": "Set the contract account to offline so that it doesn't participate in consensus anymore.\nNo force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status\nOnce the account is set offline the method ensures that it cannot be delegated to.",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "goOfflineEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              },
              {
                "name": "delegatedStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getEligibilityFlag",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "migrateToPool",
        "desc": "Migrate the validator pool to a new pool. Useful to migrate this validator pool to a new version of the contract without losing the state.",
        "args": [
          {
            "name": "newPool",
            "type": "uint64",
            "desc": "ApplicationID of the new pool to migrate to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mergeStateOnMigration",
        "desc": "Receiving call from the new pool to merge the state of the old pool into the new pool.",
        "args": [
          {
            "name": "from",
            "type": "uint64"
          },
          {
            "name": "opCommit",
            "type": "uint64"
          },
          {
            "name": "delegatedAmount",
            "type": "uint64"
          },
          {
            "name": "performanceCounter",
            "type": "uint64"
          },
          {
            "name": "stakeTxn",
            "type": "pay"
          },
          {
            "name": "lstTxn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimLeftAlgo",
        "desc": "Used by anyone to clear up remaining Algo outside of stake counters back to the Caelus Admin contract to be redistributed",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "desc": "Node operator can close the Validator and get back his stake. Delegated stake is put back into the Caelus Admin contract.",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "validatorCloseEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64"
              },
              {
                "name": "operator",
                "type": "address"
              },
              {
                "name": "returnedStake",
                "type": "uint64"
              },
              {
                "name": "operatorStake",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      }
    ],
    "events": [
      {
        "name": "validatorCloseEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "returnedStake",
            "type": "uint64"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "goOnlineEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          },
          {
            "name": "delegatedStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "goOfflineEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "operatorStake",
            "type": "uint64"
          },
          {
            "name": "delegatedStake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "operatorCommitUpdateEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "amountAdded",
            "type": "uint64"
          },
          {
            "name": "amountRemoved",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "delinquencyEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "stakeAtRisk",
            "type": "uint64"
          },
          {
            "name": "delinquencyScore",
            "type": "uint64"
          },
          {
            "name": "status",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "solvedDelinquencyEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "operator",
            "type": "address"
          },
          {
            "name": "stake",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "rewardsEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "block",
            "type": "uint64"
          },
          {
            "name": "payout",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "snitchValidatorEvent",
        "args": [
          {
            "name": "request",
            "type": "(bool,bool,bool,bool,uint64,bool,uint64)"
          },
          {
            "name": "result",
            "type": "bool"
          }
        ],
        "desc": ""
      }
    ]
  }
}