{
  "hints": {
    "createApplication(uint64,address,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "addToOperatorCommit(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeFromOperatorCommit(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "performanceCheck()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getToleratedBlockDelta()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reportRewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "add_stake()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitch_burn()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "snitch()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_snitched()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "clawback_stake()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "clawback_stake_to_validator()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimLeftAlgo()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkAlgodVersion()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOnline(pay,string,string,string,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOffline(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "creatorContract_AppID": {
          "type": "uint64",
          "key": "creator"
        },
        "algod_version": {
          "type": "bytes",
          "key": "algodV"
        },
        "pool_name": {
          "type": "bytes",
          "key": "name"
        },
        "validatorPoolContract_version": {
          "type": "uint64",
          "key": "contractVersion"
        },
        "operator_Address": {
          "type": "bytes",
          "key": "operator"
        },
        "operator_Commit": {
          "type": "uint64",
          "key": "operatorCommit"
        },
        "min_Commit": {
          "type": "uint64",
          "key": "minStake"
        },
        "delegated_stake": {
          "type": "uint64",
          "key": "delegatedStake"
        },
        "max_delegatable_stake": {
          "type": "uint64",
          "key": "maxDStake"
        },
        "performance_counter": {
          "type": "uint64",
          "key": "performance"
        },
        "saturation_BUFFER": {
          "type": "uint64",
          "key": "saturationBuffer"
        },
        "last_reward_report": {
          "type": "uint64",
          "key": "rewardReport"
        },
        "isDelinquent": {
          "type": "bytes",
          "key": "isDelinquent"
        },
        "last_delinquency_report": {
          "type": "uint64",
          "key": "delinquencyReport"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 10
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "CaelusValidatorPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "******************\nPublic Methods    *\n******************",
        "args": [
          {
            "name": "creatingContract",
            "type": "uint64"
          },
          {
            "name": "operatorAddress",
            "type": "address"
          },
          {
            "name": "contractVersion",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addToOperatorCommit",
        "desc": "Used by the node operator to add to his stake amount for the node",
        "args": [
          {
            "name": "commit",
            "type": "pay",
            "desc": "node operator stake commitment"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeFromOperatorCommit",
        "desc": "Used by the node operator to remove from his stake amount for the node",
        "args": [
          {
            "name": "claimRequest",
            "type": "uint64",
            "desc": "amount claimed by the node operator to be removed from the contract balance and subtracted from the operator_commit counter"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "performanceCheck",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getToleratedBlockDelta",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "reportRewards",
        "args": [
          {
            "name": "block",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bid",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "add_stake",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitch_burn",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "snitch",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_snitched",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "clawback_stake",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "clawback_stake_to_validator",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimLeftAlgo",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "checkAlgodVersion",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOnline",
        "desc": "Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake",
        "args": [
          {
            "name": "feePayment",
            "type": "pay",
            "desc": "Payment transaction to the contract to cover costs for Eligibility fee; 0 for renewal."
          },
          {
            "name": "votePK",
            "type": "string",
            "desc": "The vote public key"
          },
          {
            "name": "selectionPK",
            "type": "string",
            "desc": "The selection public key"
          },
          {
            "name": "stateProofPK",
            "type": "string",
            "desc": "the state proof public key"
          },
          {
            "name": "voteFirst",
            "type": "uint64",
            "desc": "Index of first valid block for the participation keys"
          },
          {
            "name": "voteLast",
            "type": "uint64",
            "desc": "Index of last valid block for for the participation keys"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64",
            "desc": "The vote key dilution value"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOffline",
        "desc": "Set the contract account to offline so that it doesn't participate in consensus anymore.\nif graceful then it only means that there was some migration or other operation [CASE 1]\nif used to force the account offline because of bad behavior, then set up a flag for penalties [CASE 2]",
        "args": [
          {
            "name": "offlineCase",
            "type": "uint64",
            "desc": ": graceful offline of the node by the node runner or the main Caelus contract\n                             1: node is misbehaving and needs to be set offline by the main Caelus contract"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}