#pragma version 11
intcblock 0 1 2 6 4 50000000000000 5 1000000 32 3 18
bytecblock 0x64656c6567617465645f7374616b65 0x6f70657261746f725f636f6d6d6974 0x63726561746f72 0x 0x6f70657261746f72 0x737461747573 0x746f6b656e5f6964 0x6d61785f64656c6567617461626c655f7374616b65 0x64656c696e7175656e63795f73636f7265 0x706572666f726d616e6365 0x64656c696e7175656e63795f7265706f7274 0x7265776172645f7265706f7274 0x62616c616e63655f636865636b706f696e74 0x73617475726174696f6e5f627566666572 0x626f6f73745f746f6b656e5f6964 0x00 0x0000000000000000 0x636f6e74726163745f76657273696f6e 0xcd53bc9b 0xf7ca2802 0x151f7c75 0x510910e0 0x412b70a8 0x911c3c46 0x91070b80

// This TEAL was generated by TEALScript v0.105.5
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,address,uint64,uint64)void
*abi_route_createApplication:
	// tokenId: uint64
	txna ApplicationArgs 4
	btoi

	// contractVersion: uint64
	txna ApplicationArgs 3
	btoi

	// operatorAddress: address
	txna ApplicationArgs 2
	dup
	len
	intc 8 // 32
	==

	// argument 2 (operatorAddress) for createApplication must be a address
	assert

	// creatingContract: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,address,uint64,uint64)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(creatingContract: AppID, operatorAddress: Address, contractVersion: uint64, tokenId: AssetID): void
//
// createApplication method called at creation, initializes some globalKey values
// @param {AppID} creatingContract - ApplicationID for the creator contract (CaelusAdminContract)
// @param {Address} operatorAddress - Address of the node operator used to sign online/offline txns and participate in auctions
// @param {uint64} contractVersion - Approval Program version for the node contract, stored in the CaelusAdminContract
// @param {AssetID} tokenId - AssetID of the LST token
createApplication:
	proto 4 0

	// contracts\CaelusValidator.algo.ts:88
	// assert(creatingContract === globals.callerApplicationID)
	frame_dig -1 // creatingContract: AppID
	global CallerApplicationID
	==
	assert

	// contracts\CaelusValidator.algo.ts:89
	// this.creatorContractAppID.value = creatingContract
	bytec 2 //  "creator"
	frame_dig -1 // creatingContract: AppID
	app_global_put

	// contracts\CaelusValidator.algo.ts:90
	// this.operatorAddress.value = operatorAddress
	bytec 4 //  "operator"
	frame_dig -2 // operatorAddress: Address
	app_global_put

	// contracts\CaelusValidator.algo.ts:91
	// this.validatorPoolContractVersion.value = contractVersion
	bytec 17 //  "contract_version"
	frame_dig -3 // contractVersion: uint64
	app_global_put

	// contracts\CaelusValidator.algo.ts:93
	// this.tokenId.value = tokenId
	bytec 6 //  "token_id"
	frame_dig -4 // tokenId: AssetID
	app_global_put

	// contracts\CaelusValidator.algo.ts:96
	// this.operatorCommit.value = 0
	bytec 1 //  "operator_commit"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:97
	// this.delegatedStake.value = 0
	bytec 0 //  "delegated_stake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:98
	// this.maxDelegatableStake.value = 0
	bytec 7 //  "max_delegatable_stake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:101
	// this.status.value = NOT_DELEGATABLE_STATUS
	bytec 5 //  "status"
	intc 1 // 1
	app_global_put

	// contracts\CaelusValidator.algo.ts:102
	// this.saturationBuffer.value = 0
	bytec 13 //  "saturation_buffer"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:103
	// this.performanceCounter.value = 0
	bytec 9 //  "performance"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:104
	// this.delinquencyScore.value = 0
	bytec 8 //  "delinquency_score"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:105
	// this.lastRewardReport.value = 0
	bytec 11 //  "reward_report"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:106
	// this.lastDelinquencyReport.value = 0
	bytec 10 //  "delinquency_report"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:108
	// this.repaid.value = true
	pushbytes 0x726570616964 // "repaid"
	intc 1 // 1
	bytec 15 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put
	retsub

// optIntoLST()void
*abi_route_optIntoLST:
	// execute optIntoLST()void
	callsub optIntoLST
	intc 1 // 1
	return

// optIntoLST(): void
//
// ARC4 PUBLIC METHODS
optIntoLST:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\CaelusValidator.algo.ts:116
	// assert(!this.app.address.isOptedInToAsset(this.tokenId.value), 'already opted in tokenId')
	global CurrentApplicationAddress
	bytec 6 //  "token_id"
	app_global_get
	asset_holding_get AssetBalance
	swap
	pop
	!

	// already opted in tokenId
	assert

	// contracts\CaelusValidator.algo.ts:117
	// lst = this.creatorContractAppID.value.globalState('token_id') as AssetID
	bytec 2 //  "creator"
	app_global_get
	bytec 6 //  "token_id"
	app_global_get_ex

	// global state value does not exist: this.creatorContractAppID.value.globalState('token_id')
	assert
	frame_bury 0 // lst: uint64

	// contracts\CaelusValidator.algo.ts:118
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       xferAsset: lst,
	//       assetAmount: 0,
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:119
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts\CaelusValidator.algo.ts:120
	// xferAsset: lst
	frame_dig 0 // lst: uint64
	itxn_field XferAsset

	// contracts\CaelusValidator.algo.ts:121
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// addToOperatorCommit(pay)void
*abi_route_addToOperatorCommit:
	// opStake: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (opStake) for addToOperatorCommit must be a pay transaction
	assert

	// execute addToOperatorCommit(pay)void
	callsub addToOperatorCommit
	intc 1 // 1
	return

// addToOperatorCommit(opStake: PayTxn): void
//
// followup operation called by the Caelus Admin to send the correct amount into the operator commit
//
// @param {PayTxn} opStake - node operator stake commitment
addToOperatorCommit:
	proto 1 0

	// contracts\CaelusValidator.algo.ts:131
	// assert(
	//       this.txn.sender === this.creatorContractAppID.value.address,
	//       'only Caelus admin can route operator stake without LST'
	//     )
	txn Sender
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// only Caelus admin can route operator stake without LST
	assert

	// contracts\CaelusValidator.algo.ts:135
	// verifyPayTxn(opStake, {
	//       receiver: this.app.address,
	//     })
	// verify receiver
	frame_dig -1 // opStake: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"opStake","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusValidator.algo.ts:138
	// this.operatorCommit.value += opStake.amount
	bytec 1 //  "operator_commit"
	app_global_get
	frame_dig -1 // opStake: PayTxn
	gtxns Amount
	+
	bytec 1 //  "operator_commit"
	swap
	app_global_put

	// *if0_condition
	// contracts\CaelusValidator.algo.ts:139
	// this.status.value === DELINQUENCY_STATUS
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	==
	bz *if0_end

	// *if0_consequent
	// contracts\CaelusValidator.algo.ts:140
	// return;
	retsub

*if0_end:
	// contracts\CaelusValidator.algo.ts:142
	// this.updateDelegationFactors()
	callsub updateDelegationFactors

	// contracts\CaelusValidator.algo.ts:144
	// this.operatorCommitUpdateEvent.log({
	//       app: this.app,
	//       operator: this.operatorAddress.value,
	//       amountAdded: opStake.amount,
	//       amountRemoved: 0,
	//     })
	bytec 18 //  operatorCommitUpdateEvent(uint64,address,uint64,uint64)
	txna Applications 0
	itob
	bytec 4 //  "operator"
	app_global_get
	concat
	frame_dig -1 // opStake: PayTxn
	gtxns Amount
	itob
	concat
	bytec 16 // 0x0000000000000000
	concat
	concat
	log
	retsub

// removeFromOperatorCommit(uint64,uint64)void
*abi_route_removeFromOperatorCommit:
	// claimRequestLST: uint64
	txna ApplicationArgs 2
	btoi

	// claimRequest: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeFromOperatorCommit(uint64,uint64)void
	callsub removeFromOperatorCommit
	intc 1 // 1
	return

// removeFromOperatorCommit(claimRequest: uint64, claimRequestLST: uint64): void
//
// Used by the node operator to remove from his stake amount for the node
// @param {uint64} claimRequest - amount claimed by the node operator to be removed from the operator_commit counter and moved into delegated stake
// @param {uint64} claimRequestLST - amount of LST to be sent back to the node operator
removeFromOperatorCommit:
	proto 2 0

	// contracts\CaelusValidator.algo.ts:158
	// assert(this.txn.sender === this.creatorContractAppID.value.address)
	txn Sender
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// contracts\CaelusValidator.algo.ts:159
	// assert(
	//       this.status.value !== DELINQUENCY_STATUS,
	//       'cannot withdraw funds if the account is flagged as delinquent, must solve delinquency first'
	//     )
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	!=

	// cannot withdraw funds if the account is flagged as delinquent, must solve delinquency first
	assert

	// contracts\CaelusValidator.algo.ts:163
	// assert(
	//       this.operatorCommit.value - claimRequest > globals.payoutsMinBalance,
	//       'Node Operator can take his stake below 30k only if the node contract will be closed'
	//     )
	bytec 1 //  "operator_commit"
	app_global_get
	frame_dig -1 // claimRequest: uint64
	-
	global PayoutsMinBalance
	>

	// Node Operator can take his stake below 30k only if the node contract will be closed
	assert

	// contracts\CaelusValidator.algo.ts:167
	// assert(this.operatorCommit.value > claimRequest, 'Node Operator cannot claim more than he has')
	bytec 1 //  "operator_commit"
	app_global_get
	frame_dig -1 // claimRequest: uint64
	>

	// Node Operator cannot claim more than he has
	assert

	// contracts\CaelusValidator.algo.ts:170
	// sendAssetTransfer({
	//       xferAsset: this.tokenId.value,
	//       assetReceiver: this.operatorAddress.value,
	//       assetAmount: claimRequestLST,
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:171
	// xferAsset: this.tokenId.value
	bytec 6 //  "token_id"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusValidator.algo.ts:172
	// assetReceiver: this.operatorAddress.value
	bytec 4 //  "operator"
	app_global_get
	itxn_field AssetReceiver

	// contracts\CaelusValidator.algo.ts:173
	// assetAmount: claimRequestLST
	frame_dig -2 // claimRequestLST: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:176
	// this.operatorCommit.value -= claimRequest
	bytec 1 //  "operator_commit"
	app_global_get
	frame_dig -1 // claimRequest: uint64
	-
	bytec 1 //  "operator_commit"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:177
	// this.delegatedStake.value += claimRequest
	bytec 0 //  "delegated_stake"
	app_global_get
	frame_dig -1 // claimRequest: uint64
	+
	bytec 0 //  "delegated_stake"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:178
	// this.updateDelegationFactors()
	callsub updateDelegationFactors

	// contracts\CaelusValidator.algo.ts:180
	// this.operatorCommitUpdateEvent.log({
	//       app: this.app,
	//       operator: this.operatorAddress.value,
	//       amountAdded: 0,
	//       amountRemoved: claimRequest,
	//     })
	bytec 18 //  operatorCommitUpdateEvent(uint64,address,uint64,uint64)
	txna Applications 0
	itob
	bytec 4 //  "operator"
	app_global_get
	concat
	bytec 16 // 0x0000000000000000
	concat
	frame_dig -1 // claimRequest: uint64
	itob
	concat
	concat
	log
	retsub

// solveDelinquency(uint64)void
*abi_route_solveDelinquency:
	// block: uint64
	txna ApplicationArgs 1
	btoi

	// execute solveDelinquency(uint64)void
	callsub solveDelinquency
	intc 1 // 1
	return

// solveDelinquency(block: uint64): void
//
// Delinquent Validators need to propose a valid block to clear up their delinquency status.
//
// This method should be called when the delinquency score is below the threshold and the operator has proposed a block.
//
// @param block - block number of the block proposed by the node operator while the account was in delinquency
solveDelinquency:
	proto 1 0

	// contracts\CaelusValidator.algo.ts:196
	// assert(this.status.value !== DELINQUENCY_STATUS, 'Account is not delinquent')
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	!=

	// Account is not delinquent
	assert

	// contracts\CaelusValidator.algo.ts:197
	// assert(this.txn.sender === this.operatorAddress.value, 'Only the Node Operator can clear up Delinquency')
	txn Sender
	bytec 4 //  "operator"
	app_global_get
	==

	// Only the Node Operator can clear up Delinquency
	assert

	// contracts\CaelusValidator.algo.ts:198
	// assert(
	//       this.delegatedStake.value === 0,
	//       'Before clearing up delinquency all the delegated stake must have been redistributed'
	//     )
	bytec 0 //  "delegated_stake"
	app_global_get
	intc 0 // 0
	==

	// Before clearing up delinquency all the delegated stake must have been redistributed
	assert

	// contracts\CaelusValidator.algo.ts:202
	// assert(
	//       this.app.address.assetBalance(this.tokenId.value) === 0,
	//       'Before clearing up delinquency all the LST must have been burned'
	//     )
	global CurrentApplicationAddress
	bytec 6 //  "token_id"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 0 // 0
	==

	// Before clearing up delinquency all the LST must have been burned
	assert

	// contracts\CaelusValidator.algo.ts:206
	// assert(blocks[block].proposer === this.app.address, 'the solving block must be proposed by this account')
	frame_dig -1 // block: uint64
	block BlkProposer
	global CurrentApplicationAddress
	==

	// the solving block must be proposed by this account
	assert

	// contracts\CaelusValidator.algo.ts:207
	// assert(this.lastDelinquencyReport.value < block)
	bytec 10 //  "delinquency_report"
	app_global_get
	frame_dig -1 // block: uint64
	<
	assert

	// contracts\CaelusValidator.algo.ts:208
	// assert(this.delinquencyThresholdCheck(), 'Delinquency score must be below threshold')
	callsub delinquencyThresholdCheck

	// Delinquency score must be below threshold
	assert

	// contracts\CaelusValidator.algo.ts:209
	// this.status.value = NEUTRAL_STATUS
	bytec 5 //  "status"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:210
	// this.updateDelegationFactors()
	callsub updateDelegationFactors

	// contracts\CaelusValidator.algo.ts:211
	// sendMethodCall<typeof CaelusAdmin.prototype.reMintDelinquentCommit, void>({
	//       applicationID: this.creatorContractAppID.value,
	//       methodArgs: [this.app],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x03747933 // method "reMintDelinquentCommit(uint64)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:212
	// applicationID: this.creatorContractAppID.value
	bytec 2 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:213
	// methodArgs: [this.app]
	txna Applications 0
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:216
	// this.solvedDelinquencyEvent.log({
	//       app: this.app,
	//       operator: this.operatorAddress.value,
	//       stake: this.operatorCommit.value,
	//     })
	pushbytes 0xdb3e16fb // solvedDelinquencyEvent(uint64,address,uint64)
	txna Applications 0
	itob
	bytec 4 //  "operator"
	app_global_get
	concat
	bytec 1 //  "operator_commit"
	app_global_get
	itob
	concat
	concat
	log
	retsub

// reportRewards(uint64)void
*abi_route_reportRewards:
	// block: uint64
	txna ApplicationArgs 1
	btoi

	// execute reportRewards(uint64)void
	callsub reportRewards
	intc 1 // 1
	return

// reportRewards(block: uint64): void
//
// Called by the node operator to report the rewards of a block proposed by the contract account.
//
// @param {uint64} block - Block number of the block proposed by the node operator
reportRewards:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dupn 2

	// contracts\CaelusValidator.algo.ts:230
	// assert(blocks[block].proposer === this.app.address)
	frame_dig -1 // block: uint64
	block BlkProposer
	global CurrentApplicationAddress
	==
	assert

	// contracts\CaelusValidator.algo.ts:233
	// assert(block > this.lastRewardReport.value)
	frame_dig -1 // block: uint64
	bytec 11 //  "reward_report"
	app_global_get
	>
	assert

	// contracts\CaelusValidator.algo.ts:234
	// isOperatorReportTime = globals.round - block < OPERATOR_REPORT_MAX_TIME
	global Round
	frame_dig -1 // block: uint64
	-
	pushint 700
	<
	frame_bury 0 // isOperatorReportTime: bool

	// contracts\CaelusValidator.algo.ts:235
	// report = blocks[block].proposerPayout
	frame_dig -1 // block: uint64
	block BlkProposerPayout
	frame_bury 1 // report: uint64

	// contracts\CaelusValidator.algo.ts:236
	// takeFee = wideRatio([report, VALIDATOR_COMMISSION], [100])
	frame_dig 1 // report: uint64
	intc 3 // 6
	mulw
	intc 0 // 0
	pushint 100
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 2 // takeFee: uint64

	// *if1_condition
	// contracts\CaelusValidator.algo.ts:238
	// this.getExpectedProposalsDelta() > globals.round - this.lastRewardReport.value
	callsub getExpectedProposalsDelta
	global Round
	bytec 11 //  "reward_report"
	app_global_get
	-
	>
	bz *if1_end

	// *if1_consequent
	// contracts\CaelusValidator.algo.ts:239
	// this.performanceCounter.value += 1
	bytec 9 //  "performance"
	app_global_get
	intc 1 // 1
	+
	bytec 9 //  "performance"
	swap
	app_global_put

*if1_end:
	// contracts\CaelusValidator.algo.ts:241
	// this.fixDelinquencyScore()
	callsub fixDelinquencyScore

	// contracts\CaelusValidator.algo.ts:242
	// this.lastRewardReport.value = block
	bytec 11 //  "reward_report"
	frame_dig -1 // block: uint64
	app_global_put

	// *if2_condition
	// contracts\CaelusValidator.algo.ts:243
	// isOperatorReportTime
	frame_dig 0 // isOperatorReportTime: bool
	bz *if2_else

	// *if2_consequent
	// contracts\CaelusValidator.algo.ts:244
	// this.operatorCommit.value += takeFee
	bytec 1 //  "operator_commit"
	app_global_get
	frame_dig 2 // takeFee: uint64
	+
	bytec 1 //  "operator_commit"
	swap
	app_global_put
	b *if2_end

*if2_else:
	// contracts\CaelusValidator.algo.ts:246
	// sendPayment({
	//         receiver: this.txn.sender,
	//         amount: takeFee,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:247
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:248
	// amount: takeFee
	frame_dig 2 // takeFee: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if2_end:
	// contracts\CaelusValidator.algo.ts:252
	// sendMethodCall<typeof CaelusAdmin.prototype.declareRewards>({
	//       applicationID: this.creatorContractAppID.value,
	//       methodArgs: [
	//         this.app,
	//         block,
	//         {
	//           receiver: this.creatorContractAppID.value.address,
	//           amount: report - takeFee,
	//         },
	//       ],
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:258
	// receiver: this.creatorContractAppID.value.address
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:259
	// amount: report - takeFee
	frame_dig 1 // report: uint64
	frame_dig 2 // takeFee: uint64
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x8af49639 // method "declareRewards(uint64,uint64,pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:253
	// applicationID: this.creatorContractAppID.value
	bytec 2 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:254
	// methodArgs: [
	//         this.app,
	//         block,
	//         {
	//           receiver: this.creatorContractAppID.value.address,
	//           amount: report - takeFee,
	//         },
	//       ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	frame_dig -1 // block: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:264
	// this.updateDelegationFactors()
	callsub updateDelegationFactors

	// contracts\CaelusValidator.algo.ts:266
	// this.rewardsEvent.log({
	//       app: this.app,
	//       block: block,
	//       payout: report,
	//     })
	pushbytes 0xf23bd882 // rewardsEvent(uint64,uint64,uint64)
	txna Applications 0
	itob
	frame_dig -1 // block: uint64
	itob
	concat
	frame_dig 1 // report: uint64
	itob
	concat
	concat
	log
	retsub

// addStake(pay)void
*abi_route_addStake:
	// txnWithStake: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (txnWithStake) for addStake must be a pay transaction
	assert

	// execute addStake(pay)void
	callsub addStake
	intc 1 // 1
	return

// addStake(txnWithStake: PayTxn): void
//
// FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO SEND THE DELEGATED STAKE TO THE NODE OPERATOR
//
// Receive delegated stake and update the delegation factors.
//
// @param {PayTxn} txnWithStake - Payment transaction to the contract account with the delegated stake
addStake:
	proto 1 0

	// contracts\CaelusValidator.algo.ts:281
	// verifyPayTxn(txnWithStake, {
	//       sender: this.creatorContractAppID.value.address,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -1 // txnWithStake: PayTxn
	gtxns Sender
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"txnWithStake","field":"sender","expected":"this.creatorContractAppID.value.address"}
	assert

	// verify receiver
	frame_dig -1 // txnWithStake: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"txnWithStake","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusValidator.algo.ts:285
	// this.delegatedStake.value += txnWithStake.amount
	bytec 0 //  "delegated_stake"
	app_global_get
	frame_dig -1 // txnWithStake: PayTxn
	gtxns Amount
	+
	bytec 0 //  "delegated_stake"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:286
	// this.updateDelegationFactors()
	callsub updateDelegationFactors
	retsub

// burnStake(uint64,address)void
*abi_route_burnStake:
	// receiverBurn: address
	txna ApplicationArgs 2
	dup
	len
	intc 8 // 32
	==

	// argument 0 (receiverBurn) for burnStake must be a address
	assert

	// amountRequested: uint64
	txna ApplicationArgs 1
	btoi

	// execute burnStake(uint64,address)void
	callsub burnStake
	intc 1 // 1
	return

// burnStake(amountRequested: uint64, receiverBurn: Address): void
//
// FOLLOWUP OPERATION CALLED BY THE CAELUS ADMIN TO CLAWBACK THE DELEGATED STAKE ON BURN OPERATION
//
// @param {uint64} amountRequested - amount of Algo to be burned
// @param {Address} receiverBurn - address of the receiver of the burn transaction triggered on the Caelus Admin contract
burnStake:
	proto 2 0

	// contracts\CaelusValidator.algo.ts:296
	// assert(
	//       this.txn.sender === this.creatorContractAppID.value.address,
	//       'Only the Caelus Admin contract can call this method'
	//     )
	txn Sender
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// Only the Caelus Admin contract can call this method
	assert

	// contracts\CaelusValidator.algo.ts:300
	// assert(amountRequested <= this.delegatedStake.value, 'Cannot withdraw more stake than the delegated amount')
	frame_dig -1 // amountRequested: uint64
	bytec 0 //  "delegated_stake"
	app_global_get
	<=

	// Cannot withdraw more stake than the delegated amount
	assert

	// contracts\CaelusValidator.algo.ts:301
	// assert(
	//       this.app.address.balance - amountRequested >= this.operatorCommit.value,
	//       'Cannot leave the Opperator with less than their own stake'
	//     )
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	frame_dig -1 // amountRequested: uint64
	-
	bytec 1 //  "operator_commit"
	app_global_get
	>=

	// Cannot leave the Opperator with less than their own stake
	assert

	// contracts\CaelusValidator.algo.ts:305
	// sendPayment({
	//       amount: amountRequested,
	//       receiver: receiverBurn,
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:306
	// amount: amountRequested
	frame_dig -1 // amountRequested: uint64
	itxn_field Amount

	// contracts\CaelusValidator.algo.ts:307
	// receiver: receiverBurn
	frame_dig -2 // receiverBurn: Address
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:309
	// this.delegatedStake.value -= amountRequested
	bytec 0 //  "delegated_stake"
	app_global_get
	frame_dig -1 // amountRequested: uint64
	-
	bytec 0 //  "delegated_stake"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:310
	// this.updateDelegationFactors()
	callsub updateDelegationFactors
	retsub

// snitchValidator(uint64,(bool,bool,bool,bool,uint64,bool,uint64))void
*abi_route_snitchValidator:
	// params: (bool,bool,bool,bool,uint64,bool,uint64)
	txna ApplicationArgs 2
	dup
	len
	intc 10 // 18
	==

	// argument 0 (params) for snitchValidator must be a (bool,bool,bool,bool,uint64,bool,uint64)
	assert

	// appToSnitch: uint64
	txna ApplicationArgs 1
	btoi

	// execute snitchValidator(uint64,(bool,bool,bool,bool,uint64,bool,uint64))void
	callsub snitchValidator
	intc 1 // 1
	return

// snitchValidator(appToSnitch: AppID, params: SnitchInfo): void
//
// Snitch another Validator Contract. A valid snitch will improve the performance counter.
// @param {AppID} appToSnitch - ApplicationID of the validator to be snitched
// @param {SnitchInfo} params - parameters to check for the validator (For example: performanceCheck, stakeAmountCheck, delinquentCheck, versionCheck)
snitchValidator:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\CaelusValidator.algo.ts:319
	// assert(this.status.value !== DELINQUENCY_STATUS)
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	!=
	assert

	// contracts\CaelusValidator.algo.ts:320
	// result = sendMethodCall<typeof CaelusValidatorPool.prototype.getSnitched, boolean>({
	//       applicationID: appToSnitch,
	//       methodArgs: [params],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 19 //  method "getSnitched((bool,bool,bool,bool,uint64,bool,uint64))bool"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:321
	// applicationID: appToSnitch
	frame_dig -1 // appToSnitch: AppID
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:322
	// methodArgs: [params]
	frame_dig -2 // params: SnitchInfo
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	intc 0 // 0
	getbit
	frame_bury 0 // result: bool

	// *if3_condition
	// contracts\CaelusValidator.algo.ts:324
	// result
	frame_dig 0 // result: bool
	bz *if3_end

	// *if3_consequent
	// contracts\CaelusValidator.algo.ts:325
	// this.performanceCounter.value += 1
	bytec 9 //  "performance"
	app_global_get
	intc 1 // 1
	+
	bytec 9 //  "performance"
	swap
	app_global_put

*if3_end:
	// contracts\CaelusValidator.algo.ts:327
	// this.updateDelegationFactors()
	callsub updateDelegationFactors

	// contracts\CaelusValidator.algo.ts:329
	// this.snitchValidatorEvent.log({ request: params, result: result })
	pushbytes 0xbb3e3bb4 // snitchValidatorEvent((bool,bool,bool,bool,uint64,bool,uint64),bool)
	frame_dig -2 // params: SnitchInfo
	bytec 15 // 0x00
	intc 0 // 0
	frame_dig 0 // result: bool
	setbit
	concat
	concat
	log
	retsub

// getSnitched((bool,bool,bool,bool,uint64,bool,uint64))bool
*abi_route_getSnitched:
	// The ABI return prefix
	bytec 20 // 0x151f7c75

	// checks: (bool,bool,bool,bool,uint64,bool,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 10 // 18
	==

	// argument 0 (checks) for getSnitched must be a (bool,bool,bool,bool,uint64,bool,uint64)
	assert

	// execute getSnitched((bool,bool,bool,bool,uint64,bool,uint64))bool
	callsub getSnitched
	bytec 15 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	concat
	log
	intc 1 // 1
	return

// getSnitched(checks: SnitchInfo): boolean
getSnitched:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\CaelusValidator.algo.ts:333
	// result = false
	intc 0 // 0
	frame_bury 0 // result: bool

	// *if4_condition
	// contracts\CaelusValidator.algo.ts:335
	// checks.performanceCheck
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	intc 0 // 0
	getbit
	bz *if4_end

	// *if4_consequent
	// contracts\CaelusValidator.algo.ts:336
	// result = result || this.performanceCheck()
	frame_dig 0 // result: bool
	dup
	bnz *skip_or0
	callsub performanceCheck
	||

*skip_or0:
	frame_bury 0 // result: bool

*if4_end:
	// *if5_condition
	// contracts\CaelusValidator.algo.ts:338
	// checks.stakeAmountCheck
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	intc 1 // 1
	getbit
	bz *if5_end

	// *if5_consequent
	// contracts\CaelusValidator.algo.ts:339
	// result = result || this.checkStakeOnSnitch(checks.recipient, checks.split, checks.max)
	frame_dig 0 // result: bool
	dup
	bnz *skip_or1
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 10 8
	btoi
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	pushint 72
	getbit
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 1 8
	btoi
	callsub checkStakeOnSnitch
	||

*skip_or1:
	frame_bury 0 // result: bool

*if5_end:
	// *if6_condition
	// contracts\CaelusValidator.algo.ts:341
	// checks.delinquentCheck
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	intc 2 // 2
	getbit
	bz *if6_end

	// *if6_consequent
	// contracts\CaelusValidator.algo.ts:342
	// result = result || this.checkDelinquencyOnSnitch()
	frame_dig 0 // result: bool
	dup
	bnz *skip_or2
	callsub checkDelinquencyOnSnitch
	||

*skip_or2:
	frame_bury 0 // result: bool

*if6_end:
	// *if7_condition
	// contracts\CaelusValidator.algo.ts:344
	// checks.versionCheck
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	intc 9 // 3
	getbit
	bz *if7_end

	// *if7_consequent
	// contracts\CaelusValidator.algo.ts:345
	// result = result || this.checkProgramVersion()
	frame_dig 0 // result: bool
	dup
	bnz *skip_or3
	callsub checkProgramVersion
	||

*skip_or3:
	frame_bury 0 // result: bool

*if7_end:
	// *if8_condition
	// contracts\CaelusValidator.algo.ts:347
	// this.status.value !== DELINQUENCY_STATUS
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	!=
	bz *if8_end

	// *if8_consequent
	// contracts\CaelusValidator.algo.ts:347
	// this.updateDelegationFactors()
	callsub updateDelegationFactors

*if8_end:
	// contracts\CaelusValidator.algo.ts:348
	// return result;
	frame_dig 0 // result: bool

	// set the subroutine return value
	frame_bury 0
	retsub

// flashloan(uint64,address)void
*abi_route_flashloan:
	// receiver: address
	txna ApplicationArgs 2
	dup
	len
	intc 8 // 32
	==

	// argument 0 (receiver) for flashloan must be a address
	assert

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute flashloan(uint64,address)void
	callsub flashloan
	intc 1 // 1
	return

// flashloan(amount: uint64, receiver: Address): void
flashloan:
	proto 2 0

	// contracts\CaelusValidator.algo.ts:352
	// assert(this.txn.sender === this.creatorContractAppID.value.address, 'Caller must be the Caelus Admin Contract')
	txn Sender
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// Caller must be the Caelus Admin Contract
	assert

	// *if9_condition
	// contracts\CaelusValidator.algo.ts:354
	// !this.balanceCheckpoint.exists
	txna Applications 0
	bytec 12 //  "balance_checkpoint"
	app_global_get_ex
	swap
	pop
	!
	bz *if9_end

	// *if9_consequent
	// contracts\CaelusValidator.algo.ts:355
	// this.balanceCheckpoint.value = this.app.address.balance
	bytec 12 //  "balance_checkpoint"
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	app_global_put

*if9_end:
	// contracts\CaelusValidator.algo.ts:357
	// sendPayment({
	//       receiver: receiver,
	//       amount: amount,
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:358
	// receiver: receiver
	frame_dig -2 // receiver: Address
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:359
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// checkBalance()void
*abi_route_checkBalance:
	// execute checkBalance()void
	callsub checkBalance
	intc 1 // 1
	return

// checkBalance(): void
checkBalance:
	proto 0 0

	// contracts\CaelusValidator.algo.ts:366
	// assert(this.balanceCheckpoint.value === this.app.address.balance)
	bytec 12 //  "balance_checkpoint"
	app_global_get
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	==
	assert

	// contracts\CaelusValidator.algo.ts:367
	// this.balanceCheckpoint.delete()
	bytec 12 //  "balance_checkpoint"
	app_global_del
	retsub

// goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_goOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// feePayment: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 6 (feePayment) for goOnline must be a pay transaction
	assert

	// execute goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub goOnline
	intc 1 // 1
	return

// goOnline(feePayment: PayTxn, votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
//
// Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
//
// @param {PayTxn} feePayment - Payment transaction to the contract to cover costs for Eligibility fee 0 for renewal.
// @param {bytes} votePK - The vote public key
// @param {bytes} selectionPK - The selection public key
// @param {bytes} stateProofPK - the state proof public key
// @param {uint64} voteFirst - Index of first valid block for the participation keys
// @param {uint64} voteLast - Index of last valid block for for the participation keys
// @param {uint64} voteKeyDilution - The vote key dilution value
// @throws {Error} if the caller isn't the node operator
goOnline:
	proto 7 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\CaelusValidator.algo.ts:392
	// assert(
	//       this.txn.sender === this.operatorAddress.value,
	//       'Only the Node Operator can register online with participation key'
	//     )
	txn Sender
	bytec 4 //  "operator"
	app_global_get
	==

	// Only the Node Operator can register online with participation key
	assert

	// contracts\CaelusValidator.algo.ts:396
	// assert(
	//       this.app.address.balance >= globals.payoutsMinBalance && this.app.address.balance <= MAX_STAKE_PER_ACCOUNT,
	//       'Contract needs 30k Algo as minimum balance for rewards eligibility and at most 50M Algo'
	//     )
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	global PayoutsMinBalance
	>=
	dup
	bz *skip_and0
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	intc 5 // 50000000000000
	<=
	&&

*skip_and0:
	// Contract needs 30k Algo as minimum balance for rewards eligibility and at most 50M Algo
	assert

	// contracts\CaelusValidator.algo.ts:400
	// assert(
	//       this.operatorCommit.value >= globals.payoutsMinBalance,
	//       'Operator commit must be higher than minimum balance for rewards eligibility'
	//     )
	bytec 1 //  "operator_commit"
	app_global_get
	global PayoutsMinBalance
	>=

	// Operator commit must be higher than minimum balance for rewards eligibility
	assert

	// *if10_condition
	// contracts\CaelusValidator.algo.ts:405
	// this.status.value === DELINQUENCY_STATUS
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	==
	bz *if10_end

	// *if10_consequent
	// contracts\CaelusValidator.algo.ts:406
	// assert(
	//         this.delegatedStake.value === 0,
	//         'if Delinquent go Online only with your own stake to clear up delinquency'
	//       )
	bytec 0 //  "delegated_stake"
	app_global_get
	intc 0 // 0
	==

	// if Delinquent go Online only with your own stake to clear up delinquency
	assert

*if10_end:
	// contracts\CaelusValidator.algo.ts:412
	// extraFee = this.getGoOnlineFeeAmount()
	callsub getGoOnlineFeeAmount
	frame_bury 0 // extraFee: uint64

	// contracts\CaelusValidator.algo.ts:414
	// verifyPayTxn(feePayment, { receiver: this.app.address, amount: extraFee })
	// verify receiver
	frame_dig -1 // feePayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"feePayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // feePayment: PayTxn
	gtxns Amount
	frame_dig 0 // extraFee: uint64
	==

	// transaction verification failed: {"txn":"feePayment","field":"amount","expected":"extraFee"}
	assert

	// contracts\CaelusValidator.algo.ts:416
	// sendOnlineKeyRegistration({
	//       votePK: votePK,
	//       selectionPK: selectionPK,
	//       stateProofPK: stateProofPK,
	//       voteFirst: voteFirst,
	//       voteLast: voteLast,
	//       voteKeyDilution: voteKeyDilution,
	//       fee: extraFee,
	//     })
	itxn_begin
	intc 2 //  keyreg
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:417
	// votePK: votePK
	frame_dig -2 // votePK: bytes
	itxn_field VotePK

	// contracts\CaelusValidator.algo.ts:418
	// selectionPK: selectionPK
	frame_dig -3 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts\CaelusValidator.algo.ts:419
	// stateProofPK: stateProofPK
	frame_dig -4 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts\CaelusValidator.algo.ts:420
	// voteFirst: voteFirst
	frame_dig -5 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts\CaelusValidator.algo.ts:421
	// voteLast: voteLast
	frame_dig -6 // voteLast: uint64
	itxn_field VoteLast

	// contracts\CaelusValidator.algo.ts:422
	// voteKeyDilution: voteKeyDilution
	frame_dig -7 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// contracts\CaelusValidator.algo.ts:423
	// fee: extraFee
	frame_dig 0 // extraFee: uint64
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if11_condition
	// contracts\CaelusValidator.algo.ts:426
	// this.status.value !== DELINQUENCY_STATUS
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	!=
	bz *if11_end

	// *if11_consequent
	// contracts\CaelusValidator.algo.ts:427
	// this.status.value = NEUTRAL_STATUS
	bytec 5 //  "status"
	intc 0 // 0
	app_global_put

*if11_end:
	// contracts\CaelusValidator.algo.ts:430
	// this.goOnlineEvent.log({
	//       app: this.app,
	//       operator: this.operatorAddress.value,
	//       operatorStake: this.operatorCommit.value,
	//       delegatedStake: this.delegatedStake.value,
	//     })
	pushbytes 0xc4c0a972 // goOnlineEvent(uint64,address,uint64,uint64)
	txna Applications 0
	itob
	bytec 4 //  "operator"
	app_global_get
	concat
	bytec 1 //  "operator_commit"
	app_global_get
	itob
	concat
	bytec 0 //  "delegated_stake"
	app_global_get
	itob
	concat
	concat
	log
	retsub

// goOffline()void
*abi_route_goOffline:
	// execute goOffline()void
	callsub goOffline
	intc 1 // 1
	return

// goOffline(): void
//
// Set the contract account to offline so that it doesn't participate in consensus anymore.
// No force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status
// Once the account is set offline the method ensures that it cannot be delegated to.
goOffline:
	proto 0 0

	// contracts\CaelusValidator.algo.ts:446
	// assert(
	//       this.txn.sender === this.operatorAddress.value || this.txn.sender === this.creatorContractAppID.value.address,
	//       'Only Node Operator or Caelus Admin contract can set the contract offline'
	//     )
	txn Sender
	bytec 4 //  "operator"
	app_global_get
	==
	dup
	bnz *skip_or4
	txn Sender
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==
	||

*skip_or4:
	// Only Node Operator or Caelus Admin contract can set the contract offline
	assert

	// contracts\CaelusValidator.algo.ts:450
	// sendOfflineKeyRegistration({})
	itxn_begin
	intc 2 //  keyreg
	itxn_field TypeEnum

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:451
	// this.status.value = NOT_DELEGATABLE_STATUS
	bytec 5 //  "status"
	intc 1 // 1
	app_global_put

	// contracts\CaelusValidator.algo.ts:453
	// this.goOfflineEvent.log({
	//       app: this.app,
	//       operator: this.operatorAddress.value,
	//       operatorStake: this.operatorCommit.value,
	//       delegatedStake: this.delegatedStake.value,
	//     })
	pushbytes 0x61a99c23 // goOfflineEvent(uint64,address,uint64,uint64)
	txna Applications 0
	itob
	bytec 4 //  "operator"
	app_global_get
	concat
	bytec 1 //  "operator_commit"
	app_global_get
	itob
	concat
	bytec 0 //  "delegated_stake"
	app_global_get
	itob
	concat
	concat
	log
	retsub

// getEligibilityFlag()bool
*abi_route_getEligibilityFlag:
	// The ABI return prefix
	bytec 20 // 0x151f7c75

	// execute getEligibilityFlag()bool
	callsub getEligibilityFlag
	bytec 15 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	concat
	log
	intc 1 // 1
	return

// getEligibilityFlag(): boolean
getEligibilityFlag:
	proto 0 1

	// contracts\CaelusValidator.algo.ts:463
	// return this.app.address.incentiveEligible;
	global CurrentApplicationAddress
	acct_params_get AcctIncentiveEligible
	pop
	retsub

// migrateToPool(uint64)void
*abi_route_migrateToPool:
	// newPool: uint64
	txna ApplicationArgs 1
	btoi

	// execute migrateToPool(uint64)void
	callsub migrateToPool
	intc 1 // 1
	return

// migrateToPool(newPool: AppID): void
//
// Migrate the validator pool to a new pool. Useful to migrate this validator pool to a new version of the contract without losing the state.
//
// @param {AppID} newPool - ApplicationID of the new pool to migrate to
migrateToPool:
	proto 1 0

	// contracts\CaelusValidator.algo.ts:472
	// assert(newPool.creator === this.app.creator, 'new pool has to be a pool created by the admin contract')
	frame_dig -1 // newPool: AppID
	app_params_get AppCreator
	pop
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// new pool has to be a pool created by the admin contract
	assert

	// contracts\CaelusValidator.algo.ts:473
	// assert(this.txn.sender === this.operatorAddress.value, 'only the operator can migrate to a new pool')
	txn Sender
	bytec 4 //  "operator"
	app_global_get
	==

	// only the operator can migrate to a new pool
	assert

	// contracts\CaelusValidator.algo.ts:474
	// assert(this.status.value !== DELINQUENCY_STATUS, 'cannot migrate if delinquent')
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	!=

	// cannot migrate if delinquent
	assert

	// contracts\CaelusValidator.algo.ts:476
	// sendMethodCall<typeof CaelusValidatorPool.prototype.mergeStateOnMigration>({
	//       applicationID: newPool,
	//       methodArgs: [
	//         this.app,
	//         this.operatorCommit.value,
	//         this.delegatedStake.value,
	//         this.performanceCounter.value,
	//         { receiver: newPool.address, amount: this.operatorCommit.value + this.delegatedStake.value },
	//         {
	//           xferAsset: this.tokenId.value,
	//           assetReceiver: newPool.address,
	//           assetAmount: this.app.address.assetBalance(this.tokenId.value),
	//         },
	//       ],
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:483
	// receiver: newPool.address
	frame_dig -1 // newPool: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:483
	// amount: this.operatorCommit.value + this.delegatedStake.value
	bytec 1 //  "operator_commit"
	app_global_get
	bytec 0 //  "delegated_stake"
	app_global_get
	+
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:485
	// xferAsset: this.tokenId.value
	bytec 6 //  "token_id"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusValidator.algo.ts:486
	// assetReceiver: newPool.address
	frame_dig -1 // newPool: AppID
	app_params_get AppAddress
	pop
	itxn_field AssetReceiver

	// contracts\CaelusValidator.algo.ts:487
	// assetAmount: this.app.address.assetBalance(this.tokenId.value)
	global CurrentApplicationAddress
	bytec 6 //  "token_id"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 21 //  method "mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:477
	// applicationID: newPool
	frame_dig -1 // newPool: AppID
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:478
	// methodArgs: [
	//         this.app,
	//         this.operatorCommit.value,
	//         this.delegatedStake.value,
	//         this.performanceCounter.value,
	//         { receiver: newPool.address, amount: this.operatorCommit.value + this.delegatedStake.value },
	//         {
	//           xferAsset: this.tokenId.value,
	//           assetReceiver: newPool.address,
	//           assetAmount: this.app.address.assetBalance(this.tokenId.value),
	//         },
	//       ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	bytec 1 //  "operator_commit"
	app_global_get
	itob
	itxn_field ApplicationArgs
	bytec 0 //  "delegated_stake"
	app_global_get
	itob
	itxn_field ApplicationArgs
	bytec 9 //  "performance"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:492
	// this.goOffline()
	callsub goOffline

	// contracts\CaelusValidator.algo.ts:493
	// this.operatorCommit.value = 0
	bytec 1 //  "operator_commit"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:494
	// this.delegatedStake.value = 0
	bytec 0 //  "delegated_stake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:495
	// this.performanceCounter.value = 0
	bytec 9 //  "performance"
	intc 0 // 0
	app_global_put
	retsub

// mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void
*abi_route_mergeStateOnMigration:
	// lstTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 0 (lstTxn) for mergeStateOnMigration must be a axfer transaction
	assert

	// stakeTxn: pay
	txn GroupIndex
	intc 2 // 2
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 1 (stakeTxn) for mergeStateOnMigration must be a pay transaction
	assert

	// performanceCounter: uint64
	txna ApplicationArgs 4
	btoi

	// delegatedAmount: uint64
	txna ApplicationArgs 3
	btoi

	// opCommit: uint64
	txna ApplicationArgs 2
	btoi

	// from: uint64
	txna ApplicationArgs 1
	btoi

	// execute mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void
	callsub mergeStateOnMigration
	intc 1 // 1
	return

// mergeStateOnMigration(from: AppID, opCommit: uint64, delegatedAmount: uint64, performanceCounter: uint64, stakeTxn: PayTxn, lstTxn: AssetTransferTxn): void
//
// FOLLOWUP OPERATION Receiving call from the old pool to merge the state into the new pool.
mergeStateOnMigration:
	proto 6 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\CaelusValidator.algo.ts:509
	// fromOp = from.globalState('operator') as Address
	frame_dig -1 // from: AppID
	bytec 4 //  "operator"
	app_global_get_ex

	// global state value does not exist: from.globalState('operator')
	assert
	frame_bury 0 // fromOp: address

	// contracts\CaelusValidator.algo.ts:510
	// assert(
	//       this.txn.sender === from.address && fromOp === this.operatorAddress.value,
	//       'only the operator can initiate migration merge with proper method'
	//     )
	txn Sender
	frame_dig -1 // from: AppID
	app_params_get AppAddress
	pop
	==
	dup
	bz *skip_and1
	frame_dig 0 // fromOp: address
	bytec 4 //  "operator"
	app_global_get
	==
	&&

*skip_and1:
	// only the operator can initiate migration merge with proper method
	assert

	// contracts\CaelusValidator.algo.ts:514
	// verifyPayTxn(stakeTxn, {
	//       receiver: this.app.address,
	//       amount: opCommit + delegatedAmount,
	//     })
	// verify receiver
	frame_dig -5 // stakeTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -5 // stakeTxn: PayTxn
	gtxns Amount
	frame_dig -2 // opCommit: uint64
	frame_dig -3 // delegatedAmount: uint64
	+
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"amount","expected":"opCommit + delegatedAmount"}
	assert

	// contracts\CaelusValidator.algo.ts:518
	// verifyAssetTransferTxn(lstTxn, {
	//       xferAsset: this.tokenId.value,
	//       assetReceiver: this.app.address,
	//     })
	// verify xferAsset
	frame_dig -6 // lstTxn: AssetTransferTxn
	gtxns XferAsset
	bytec 6 //  "token_id"
	app_global_get
	==

	// transaction verification failed: {"txn":"lstTxn","field":"xferAsset","expected":"this.tokenId.value"}
	assert

	// verify assetReceiver
	frame_dig -6 // lstTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"lstTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// contracts\CaelusValidator.algo.ts:523
	// this.performanceCounter.value += performanceCounter
	bytec 9 //  "performance"
	app_global_get
	frame_dig -4 // performanceCounter: uint64
	+
	bytec 9 //  "performance"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:524
	// this.operatorCommit.value += opCommit
	bytec 1 //  "operator_commit"
	app_global_get
	frame_dig -2 // opCommit: uint64
	+
	bytec 1 //  "operator_commit"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:525
	// this.delegatedStake.value += delegatedAmount
	bytec 0 //  "delegated_stake"
	app_global_get
	frame_dig -3 // delegatedAmount: uint64
	+
	bytec 0 //  "delegated_stake"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:527
	// this.updateDelegationFactors()
	callsub updateDelegationFactors
	retsub

// claimLeftAlgo()void
*abi_route_claimLeftAlgo:
	// execute claimLeftAlgo()void
	callsub claimLeftAlgo
	intc 1 // 1
	return

// claimLeftAlgo(): void
//
// Used by anyone to clear up remaining Algo outside of stake counters back to the Caelus Admin contract to be redistributed
claimLeftAlgo:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\CaelusValidator.algo.ts:534
	// dust =
	//       this.app.address.balance - this.operatorCommit.value - this.delegatedStake.value - this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	bytec 1 //  "operator_commit"
	app_global_get
	-
	bytec 0 //  "delegated_stake"
	app_global_get
	-
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	frame_bury 0 // dust: uint64

	// contracts\CaelusValidator.algo.ts:536
	// sendPayment({
	//       receiver: this.creatorContractAppID.value.address,
	//       amount: dust,
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:537
	// receiver: this.creatorContractAppID.value.address
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:538
	// amount: dust
	frame_dig 0 // dust: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 1 // 1
	return

// deleteApplication(): void
//
// Node operator can close the Validator and get back his stake. Delegated stake is put back into the Caelus Admin contract.
deleteApplication:
	proto 0 0

	// contracts\CaelusValidator.algo.ts:546
	// assert(this.status.value !== DELINQUENCY_STATUS, 'Account is delinquent. Solve Delinquency state before closing')
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	!=

	// Account is delinquent. Solve Delinquency state before closing
	assert

	// contracts\CaelusValidator.algo.ts:547
	// assert(this.txn.sender === this.operatorAddress.value, 'Only the node operator can close the node')
	txn Sender
	bytec 4 //  "operator"
	app_global_get
	==

	// Only the node operator can close the node
	assert

	// contracts\CaelusValidator.algo.ts:548
	// this.purge()
	callsub purge

	// contracts\CaelusValidator.algo.ts:549
	// this.validatorCloseEvent.log({
	//       app: this.app,
	//       operator: this.operatorAddress.value,
	//       returnedStake: this.delegatedStake.value,
	//       operatorStake: this.operatorCommit.value,
	//     })
	pushbytes 0xaba682de // validatorCloseEvent(uint64,address,uint64,uint64)
	txna Applications 0
	itob
	bytec 4 //  "operator"
	app_global_get
	concat
	bytec 0 //  "delegated_stake"
	app_global_get
	itob
	concat
	bytec 1 //  "operator_commit"
	app_global_get
	itob
	concat
	concat
	log
	retsub

// performanceCheck(): boolean
//
// SUBROUTINES
performanceCheck:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dupn 2

	// *if12_condition
	// contracts\CaelusValidator.algo.ts:562
	// !this.app.address.incentiveEligible
	global CurrentApplicationAddress
	acct_params_get AcctIncentiveEligible
	pop
	!
	bz *if12_end

	// *if12_consequent
	// contracts\CaelusValidator.algo.ts:563
	// this.setDelinquency()
	callsub setDelinquency

	// contracts\CaelusValidator.algo.ts:565
	// this.delinquencyEvent.log({
	//         app: this.app,
	//         operator: this.operatorAddress.value,
	//         stakeAtRisk: this.delegatedStake.value,
	//         delinquencyScore: this.delinquencyScore.value,
	//         status: this.status.value,
	//       })
	bytec 22 //  delinquencyEvent(uint64,address,uint64,uint64,uint64)
	txna Applications 0
	itob
	bytec 4 //  "operator"
	app_global_get
	concat
	bytec 0 //  "delegated_stake"
	app_global_get
	itob
	concat
	bytec 8 //  "delinquency_score"
	app_global_get
	itob
	concat
	bytec 5 //  "status"
	app_global_get
	itob
	concat
	concat
	log

	// contracts\CaelusValidator.algo.ts:573
	// return true;
	intc 1 // 1
	b *performanceCheck*return

*if12_end:
	// contracts\CaelusValidator.algo.ts:576
	// assert(
	//       globals.round - this.lastDelinquencyReport.value > this.getExpectedProposalsDelta() / 2,
	//       'Wait at least half the proposal expected time between Performance checks'
	//     )
	global Round
	bytec 10 //  "delinquency_report"
	app_global_get
	-
	callsub getExpectedProposalsDelta
	intc 2 // 2
	/
	>

	// Wait at least half the proposal expected time between Performance checks
	assert

	// contracts\CaelusValidator.algo.ts:580
	// deltaWithLatestProposal = globals.round - this.app.address.lastProposed
	global Round
	global CurrentApplicationAddress
	acct_params_get AcctLastProposed
	pop
	-
	frame_bury 0 // deltaWithLatestProposal: uint64

	// contracts\CaelusValidator.algo.ts:581
	// isPerformingAsExpected = deltaWithLatestProposal < this.getExpectedProposalsDelta()
	frame_dig 0 // deltaWithLatestProposal: uint64
	callsub getExpectedProposalsDelta
	<
	frame_bury 1 // isPerformingAsExpected: bool

	// contracts\CaelusValidator.algo.ts:582
	// isPerformingAsTolerated = deltaWithLatestProposal < this.getToleratedProposalDelta()
	frame_dig 0 // deltaWithLatestProposal: uint64
	callsub getToleratedProposalDelta
	<
	frame_bury 2 // isPerformingAsTolerated: bool

	// *if13_condition
	// contracts\CaelusValidator.algo.ts:583
	// isPerformingAsExpected && isPerformingAsTolerated
	frame_dig 1 // isPerformingAsExpected: bool
	dup
	bz *skip_and2
	frame_dig 2 // isPerformingAsTolerated: bool
	&&

*skip_and2:
	bz *if13_end

	// *if13_consequent
	// contracts\CaelusValidator.algo.ts:584
	// return false;
	intc 0 // 0
	b *performanceCheck*return

*if13_end:
	// *if14_condition
	// contracts\CaelusValidator.algo.ts:586
	// !isPerformingAsTolerated
	frame_dig 2 // isPerformingAsTolerated: bool
	!
	bz *if14_elseif1_condition

	// *if14_consequent
	// contracts\CaelusValidator.algo.ts:587
	// this.delinquencyScore.value += 5
	bytec 8 //  "delinquency_score"
	app_global_get
	intc 6 // 5
	+
	bytec 8 //  "delinquency_score"
	swap
	app_global_put
	b *if14_end

*if14_elseif1_condition:
	// contracts\CaelusValidator.algo.ts:588
	// !isPerformingAsExpected
	frame_dig 1 // isPerformingAsExpected: bool
	!
	bz *if14_end

	// *if14_elseif1_consequent
	// contracts\CaelusValidator.algo.ts:589
	// this.delinquencyScore.value +=
	//         this.lastDelinquencyReport.value > this.lastRewardReport.value || this.delinquencyScore.value > 5 ? 2 : 1
	bytec 8 //  "delinquency_score"
	app_global_get
	bytec 10 //  "delinquency_report"
	app_global_get
	bytec 11 //  "reward_report"
	app_global_get
	>
	dup
	bnz *skip_or6
	bytec 8 //  "delinquency_score"
	app_global_get
	intc 6 // 5
	>
	||

*skip_or6:
	bz *ternary1_false
	intc 2 // 2
	b *ternary1_end

*ternary1_false:
	intc 1 // 1

*ternary1_end:
	+
	bytec 8 //  "delinquency_score"
	swap
	app_global_put

*if14_end:
	// contracts\CaelusValidator.algo.ts:592
	// this.setDelinquencyOnThresholdCheck()
	callsub setDelinquencyOnThresholdCheck

	// contracts\CaelusValidator.algo.ts:593
	// this.lastDelinquencyReport.value = globals.round
	bytec 10 //  "delinquency_report"
	global Round
	app_global_put

	// contracts\CaelusValidator.algo.ts:595
	// this.delinquencyEvent.log({
	//       app: this.app,
	//       operator: this.operatorAddress.value,
	//       stakeAtRisk: this.delegatedStake.value,
	//       delinquencyScore: this.delinquencyScore.value,
	//       status: this.status.value,
	//     })
	bytec 22 //  delinquencyEvent(uint64,address,uint64,uint64,uint64)
	txna Applications 0
	itob
	bytec 4 //  "operator"
	app_global_get
	concat
	bytec 0 //  "delegated_stake"
	app_global_get
	itob
	concat
	bytec 8 //  "delinquency_score"
	app_global_get
	itob
	concat
	bytec 5 //  "status"
	app_global_get
	itob
	concat
	concat
	log

	// contracts\CaelusValidator.algo.ts:602
	// return true;
	intc 1 // 1

*performanceCheck*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// checkStakeOnSnitch(recipient: AppID, split: boolean, max: uint64): boolean
checkStakeOnSnitch:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dupn 2

	// contracts\CaelusValidator.algo.ts:606
	// hasMoreThanMax = this.app.address.balance > MAX_STAKE_PER_ACCOUNT
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	intc 5 // 50000000000000
	>
	frame_bury 0 // hasMoreThanMax: bool

	// *if15_condition
	// contracts\CaelusValidator.algo.ts:607
	// hasMoreThanMax
	frame_dig 0 // hasMoreThanMax: bool
	bz *if15_end

	// *if15_consequent
	// contracts\CaelusValidator.algo.ts:607
	// this.setDelinquency()
	callsub setDelinquency

*if15_end:
	// contracts\CaelusValidator.algo.ts:608
	// hasMoreThanDelegatable = this.saturationBuffer.value > BUFFER_MAX
	bytec 13 //  "saturation_buffer"
	app_global_get
	intc 7 // 1000000
	>
	frame_bury 1 // hasMoreThanDelegatable: bool

	// *if16_condition
	// contracts\CaelusValidator.algo.ts:609
	// hasMoreThanDelegatable
	frame_dig 1 // hasMoreThanDelegatable: bool
	bz *if16_end

	// *if16_consequent
	// contracts\CaelusValidator.algo.ts:610
	// amount = this.delegatedStake.value - this.maxDelegatableStake.value
	bytec 0 //  "delegated_stake"
	app_global_get
	bytec 7 //  "max_delegatable_stake"
	app_global_get
	-
	frame_bury 2 // amount: uint64

	// contracts\CaelusValidator.algo.ts:611
	// this.delegatedStake.value -= amount
	bytec 0 //  "delegated_stake"
	app_global_get
	frame_dig 2 // amount: uint64
	-
	bytec 0 //  "delegated_stake"
	swap
	app_global_put

	// *if17_condition
	// contracts\CaelusValidator.algo.ts:612
	// split && amount > max
	frame_dig -2 // split: boolean
	dup
	bz *skip_and3
	frame_dig 2 // amount: uint64
	frame_dig -3 // max: uint64
	>
	&&

*skip_and3:
	bz *if17_end

	// *if17_consequent
	// contracts\CaelusValidator.algo.ts:613
	// sendMethodCall<typeof CaelusAdmin.prototype.reStakeFromSnitch>({
	//           applicationID: this.creatorContractAppID.value,
	//           methodArgs: [
	//             this.app,
	//             this.creatorContractAppID.value,
	//             {
	//               receiver: this.creatorContractAppID.value.address,
	//               amount: amount - max,
	//             },
	//           ],
	//         })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:619
	// receiver: this.creatorContractAppID.value.address
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:620
	// amount: amount - max
	frame_dig 2 // amount: uint64
	frame_dig -3 // max: uint64
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 23 //  method "reStakeFromSnitch(uint64,uint64,pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:614
	// applicationID: this.creatorContractAppID.value
	bytec 2 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:615
	// methodArgs: [
	//             this.app,
	//             this.creatorContractAppID.value,
	//             {
	//               receiver: this.creatorContractAppID.value.address,
	//               amount: amount - max,
	//             },
	//           ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	bytec 2 //  "creator"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if17_end:
	// contracts\CaelusValidator.algo.ts:625
	// sendMethodCall<typeof CaelusAdmin.prototype.reStakeFromSnitch>({
	//         applicationID: this.creatorContractAppID.value,
	//         methodArgs: [
	//           this.app,
	//           recipient,
	//           {
	//             receiver: this.creatorContractAppID.value.address,
	//             amount: max,
	//           },
	//         ],
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:631
	// receiver: this.creatorContractAppID.value.address
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:632
	// amount: max
	frame_dig -3 // max: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 23 //  method "reStakeFromSnitch(uint64,uint64,pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:626
	// applicationID: this.creatorContractAppID.value
	bytec 2 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:627
	// methodArgs: [
	//           this.app,
	//           recipient,
	//           {
	//             receiver: this.creatorContractAppID.value.address,
	//             amount: max,
	//           },
	//         ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	frame_dig -1 // recipient: AppID
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if16_end:
	// contracts\CaelusValidator.algo.ts:638
	// return hasMoreThanMax || hasMoreThanDelegatable;
	frame_dig 0 // hasMoreThanMax: bool
	dup
	bnz *skip_or7
	frame_dig 1 // hasMoreThanDelegatable: bool
	||

*skip_or7:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// checkDelinquencyOnSnitch(): boolean
checkDelinquencyOnSnitch:
	proto 0 1

	// *if18_condition
	// contracts\CaelusValidator.algo.ts:642
	// this.status.value !== DELINQUENCY_STATUS
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	!=
	bz *if18_end

	// *if18_consequent
	// contracts\CaelusValidator.algo.ts:642
	// return false;
	intc 0 // 0
	retsub

*if18_end:
	// *if19_condition
	// contracts\CaelusValidator.algo.ts:643
	// this.app.address.assetBalance(this.tokenId.value) === 0
	global CurrentApplicationAddress
	bytec 6 //  "token_id"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 0 // 0
	==
	bz *if19_end

	// *if19_consequent
	// contracts\CaelusValidator.algo.ts:643
	// return false;
	intc 0 // 0
	retsub

*if19_end:
	// contracts\CaelusValidator.algo.ts:644
	// sendMethodCall<typeof CaelusAdmin.prototype.burnToDelinquentValidator>({
	//       applicationID: this.creatorContractAppID.value,
	//       methodArgs: [
	//         {
	//           xferAsset: this.tokenId.value,
	//           assetReceiver: this.creatorContractAppID.value.address,
	//           assetAmount: this.app.address.assetBalance(this.tokenId.value),
	//         },
	//         this.app,
	//         0, // must be kept 0 because the operator commit is already removed from the TotalStake on setDelinquency, this is a follow up call to ensure all his LST balance have been burned
	//       ],
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:648
	// xferAsset: this.tokenId.value
	bytec 6 //  "token_id"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusValidator.algo.ts:649
	// assetReceiver: this.creatorContractAppID.value.address
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field AssetReceiver

	// contracts\CaelusValidator.algo.ts:650
	// assetAmount: this.app.address.assetBalance(this.tokenId.value)
	global CurrentApplicationAddress
	bytec 6 //  "token_id"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 24 //  method "burnToDelinquentValidator(axfer,uint64,uint64)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:645
	// applicationID: this.creatorContractAppID.value
	bytec 2 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:646
	// methodArgs: [
	//         {
	//           xferAsset: this.tokenId.value,
	//           assetReceiver: this.creatorContractAppID.value.address,
	//           assetAmount: this.app.address.assetBalance(this.tokenId.value),
	//         },
	//         this.app,
	//         0, // must be kept 0 because the operator commit is already removed from the TotalStake on setDelinquency, this is a follow up call to ensure all his LST balance have been burned
	//       ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	bytec 16 // 0x0000000000000000
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:656
	// return true;
	intc 1 // 1
	retsub

// checkProgramVersion(): boolean
checkProgramVersion:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\CaelusValidator.algo.ts:660
	// latestVersion = this.creatorContractAppID.value.globalState('validator_pool_version') as uint64
	bytec 2 //  "creator"
	app_global_get
	pushbytes 0x76616c696461746f725f706f6f6c5f76657273696f6e // "validator_pool_version"
	app_global_get_ex

	// global state value does not exist: this.creatorContractAppID.value.globalState('validator_pool_version')
	assert
	frame_bury 0 // latestVersion: uint64

	// *if20_condition
	// contracts\CaelusValidator.algo.ts:661
	// latestVersion === this.validatorPoolContractVersion.value
	frame_dig 0 // latestVersion: uint64
	bytec 17 //  "contract_version"
	app_global_get
	==
	bz *if20_end

	// *if20_consequent
	// contracts\CaelusValidator.algo.ts:661
	// return false;
	intc 0 // 0
	b *checkProgramVersion*return

*if20_end:
	// contracts\CaelusValidator.algo.ts:662
	// this.purge()
	callsub purge

	// contracts\CaelusValidator.algo.ts:663
	// this.operatorCommit.value = 0
	bytec 1 //  "operator_commit"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:664
	// this.delegatedStake.value = 0
	bytec 0 //  "delegated_stake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:665
	// this.updateDelegationFactors()
	callsub updateDelegationFactors

	// contracts\CaelusValidator.algo.ts:666
	// this.goOffline()
	callsub goOffline

	// contracts\CaelusValidator.algo.ts:667
	// return true;
	intc 1 // 1

*checkProgramVersion*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// getGoOnlineFeeAmount(): uint64
getGoOnlineFeeAmount:
	proto 0 1

	// *if21_condition
	// contracts\CaelusValidator.algo.ts:671
	// !this.getEligibilityFlag()
	callsub getEligibilityFlag
	!
	bz *if21_end

	// *if21_consequent
	// contracts\CaelusValidator.algo.ts:672
	// return globals.payoutsGoOnlineFee;
	global PayoutsGoOnlineFee
	retsub

*if21_end:
	// contracts\CaelusValidator.algo.ts:674
	// return 0;
	intc 0 // 0
	retsub

// setDelinquencyOnThresholdCheck(): void
setDelinquencyOnThresholdCheck:
	proto 0 0

	// *if22_condition
	// contracts\CaelusValidator.algo.ts:678
	// !this.delinquencyThresholdCheck()
	callsub delinquencyThresholdCheck
	!
	bz *if22_end

	// *if22_consequent
	// contracts\CaelusValidator.algo.ts:679
	// this.setDelinquency()
	callsub setDelinquency

*if22_end:
	retsub

// delinquencyThresholdCheck(): boolean
delinquencyThresholdCheck:
	proto 0 1

	// *if23_condition
	// contracts\CaelusValidator.algo.ts:684
	// this.delinquencyScore.value > MAX_DELINQUENCY_TOLERATED
	bytec 8 //  "delinquency_score"
	app_global_get
	pushint 10
	>
	bz *if23_end

	// *if23_consequent
	// contracts\CaelusValidator.algo.ts:685
	// return false;
	intc 0 // 0
	retsub

*if23_end:
	// contracts\CaelusValidator.algo.ts:687
	// return true;
	intc 1 // 1
	retsub

// setDelinquency(): void
setDelinquency:
	proto 0 0

	// contracts\CaelusValidator.algo.ts:691
	// sendMethodCall<typeof CaelusAdmin.prototype.burnToDelinquentValidator>({
	//       applicationID: this.creatorContractAppID.value,
	//       methodArgs: [
	//         {
	//           xferAsset: this.tokenId.value,
	//           assetReceiver: this.creatorContractAppID.value.address,
	//           assetAmount: this.app.address.assetBalance(this.tokenId.value),
	//         },
	//         this.app,
	//         this.operatorCommit.value,
	//       ],
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:695
	// xferAsset: this.tokenId.value
	bytec 6 //  "token_id"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusValidator.algo.ts:696
	// assetReceiver: this.creatorContractAppID.value.address
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field AssetReceiver

	// contracts\CaelusValidator.algo.ts:697
	// assetAmount: this.app.address.assetBalance(this.tokenId.value)
	global CurrentApplicationAddress
	bytec 6 //  "token_id"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 24 //  method "burnToDelinquentValidator(axfer,uint64,uint64)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:692
	// applicationID: this.creatorContractAppID.value
	bytec 2 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:693
	// methodArgs: [
	//         {
	//           xferAsset: this.tokenId.value,
	//           assetReceiver: this.creatorContractAppID.value.address,
	//           assetAmount: this.app.address.assetBalance(this.tokenId.value),
	//         },
	//         this.app,
	//         this.operatorCommit.value,
	//       ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	bytec 1 //  "operator_commit"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:703
	// sendPayment({
	//       receiver: this.creatorContractAppID.value.address,
	//       amount: this.delegatedStake.value,
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:704
	// receiver: this.creatorContractAppID.value.address
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:705
	// amount: this.delegatedStake.value
	bytec 0 //  "delegated_stake"
	app_global_get
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:707
	// this.delegatedStake.value = 0
	bytec 0 //  "delegated_stake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:708
	// this.performanceCounter.value = 0
	bytec 9 //  "performance"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:709
	// this.updateDelegationFactors()
	callsub updateDelegationFactors

	// contracts\CaelusValidator.algo.ts:710
	// this.status.value = DELINQUENCY_STATUS
	bytec 5 //  "status"
	intc 2 // 2
	app_global_put
	retsub

// fixDelinquencyScore(): void
fixDelinquencyScore:
	proto 0 0

	// *if24_condition
	// contracts\CaelusValidator.algo.ts:714
	// this.delinquencyScore.value === 0
	bytec 8 //  "delinquency_score"
	app_global_get
	intc 0 // 0
	==
	bz *if24_end

	// *if24_consequent
	// contracts\CaelusValidator.algo.ts:715
	// return;
	retsub

*if24_end:
	// *if25_condition
	// contracts\CaelusValidator.algo.ts:717
	// this.status.value === DELINQUENCY_STATUS
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	==
	bz *if25_end

	// *if25_consequent
	// contracts\CaelusValidator.algo.ts:718
	// this.delinquencyScore.value -= 5
	bytec 8 //  "delinquency_score"
	app_global_get
	intc 6 // 5
	-
	bytec 8 //  "delinquency_score"
	swap
	app_global_put

*if25_end:
	// contracts\CaelusValidator.algo.ts:720
	// this.delinquencyScore.value = 0
	bytec 8 //  "delinquency_score"
	intc 0 // 0
	app_global_put
	retsub

// purge(): void
purge:
	proto 0 0

	// contracts\CaelusValidator.algo.ts:724
	// sendAssetTransfer({
	//       xferAsset: this.tokenId.value,
	//       assetReceiver: this.operatorAddress.value,
	//       assetCloseTo: this.operatorAddress.value,
	//       assetAmount: this.app.address.assetBalance(this.tokenId.value),
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:725
	// xferAsset: this.tokenId.value
	bytec 6 //  "token_id"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusValidator.algo.ts:726
	// assetReceiver: this.operatorAddress.value
	bytec 4 //  "operator"
	app_global_get
	itxn_field AssetReceiver

	// contracts\CaelusValidator.algo.ts:727
	// assetCloseTo: this.operatorAddress.value
	bytec 4 //  "operator"
	app_global_get
	itxn_field AssetCloseTo

	// contracts\CaelusValidator.algo.ts:728
	// assetAmount: this.app.address.assetBalance(this.tokenId.value)
	global CurrentApplicationAddress
	bytec 6 //  "token_id"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:730
	// sendPayment({
	//       receiver: this.creatorContractAppID.value.address,
	//       amount: this.operatorCommit.value + this.delegatedStake.value,
	//       closeRemainderTo: this.creatorContractAppID.value.globalState('manager') as Address,
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:731
	// receiver: this.creatorContractAppID.value.address
	bytec 2 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:732
	// amount: this.operatorCommit.value + this.delegatedStake.value
	bytec 1 //  "operator_commit"
	app_global_get
	bytec 0 //  "delegated_stake"
	app_global_get
	+
	itxn_field Amount

	// contracts\CaelusValidator.algo.ts:733
	// closeRemainderTo: this.creatorContractAppID.value.globalState('manager') as Address
	bytec 2 //  "creator"
	app_global_get
	pushbytes 0x6d616e61676572 // "manager"
	app_global_get_ex

	// global state value does not exist: this.creatorContractAppID.value.globalState('manager')
	assert
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateDelegationFactors(): void
updateDelegationFactors:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\CaelusValidator.algo.ts:738
	// assert(
	//       this.status.value !== DELINQUENCY_STATUS,
	//       'Account is delinquent. Solve Delinquency state before updating parameters'
	//     )
	bytec 5 //  "status"
	app_global_get
	intc 2 // 2
	!=

	// Account is delinquent. Solve Delinquency state before updating parameters
	assert

	// *if26_condition
	// contracts\CaelusValidator.algo.ts:743
	// this.operatorCommit.value > globals.payoutsMinBalance
	bytec 1 //  "operator_commit"
	app_global_get
	global PayoutsMinBalance
	>
	bz *if26_else

	// *if26_consequent
	// contracts\CaelusValidator.algo.ts:744
	// this.maxDelegatableStake.value = this.operatorCommit.value
	bytec 7 //  "max_delegatable_stake"
	bytec 1 //  "operator_commit"
	app_global_get
	app_global_put

	// contracts\CaelusValidator.algo.ts:746
	// tokenBoost = (this.getTier() * this.operatorCommit.value) / 2
	callsub getTier
	bytec 1 //  "operator_commit"
	app_global_get
	*
	intc 2 // 2
	/
	frame_bury 0 // tokenBoost: uint64

	// contracts\CaelusValidator.algo.ts:747
	// this.maxDelegatableStake.value += tokenBoost
	bytec 7 //  "max_delegatable_stake"
	app_global_get
	frame_dig 0 // tokenBoost: uint64
	+
	bytec 7 //  "max_delegatable_stake"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:750
	// this.maxDelegatableStake.value += PERFORMANCE_STAKE_INCREASE * (this.performanceCounter.value / PERFORMANCE_STEP)
	bytec 7 //  "max_delegatable_stake"
	app_global_get
	pushint 10000000000
	bytec 9 //  "performance"
	app_global_get
	intc 6 // 5
	/
	*
	+
	bytec 7 //  "max_delegatable_stake"
	swap
	app_global_put

	// *if27_condition
	// contracts\CaelusValidator.algo.ts:753
	// this.app.address.balance >= MAX_STAKE_PER_ACCOUNT
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	intc 5 // 50000000000000
	>=
	bz *if27_elseif1_condition

	// *if27_consequent
	// contracts\CaelusValidator.algo.ts:754
	// this.maxDelegatableStake.value = 0
	bytec 7 //  "max_delegatable_stake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:755
	// this.setDelinquency()
	callsub setDelinquency
	b *if27_end

*if27_elseif1_condition:
	// contracts\CaelusValidator.algo.ts:756
	// this.app.address.balance + this.maxDelegatableStake.value > MAX_STAKE_PER_ACCOUNT
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	bytec 7 //  "max_delegatable_stake"
	app_global_get
	+
	intc 5 // 50000000000000
	>
	bz *if27_end

	// *if27_elseif1_consequent
	// contracts\CaelusValidator.algo.ts:757
	// this.maxDelegatableStake.value = MAX_STAKE_PER_ACCOUNT - this.app.address.balance
	bytec 7 //  "max_delegatable_stake"
	intc 5 // 50000000000000
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	-
	app_global_put

*if27_end:
	b *if26_end

*if26_else:
	// contracts\CaelusValidator.algo.ts:760
	// this.maxDelegatableStake.value = 0
	bytec 7 //  "max_delegatable_stake"
	intc 0 // 0
	app_global_put

*if26_end:
	// *if28_condition
	// contracts\CaelusValidator.algo.ts:764
	// this.maxDelegatableStake.value > 0
	bytec 7 //  "max_delegatable_stake"
	app_global_get
	intc 0 // 0
	>
	bz *if28_else

	// *if28_consequent
	// contracts\CaelusValidator.algo.ts:765
	// this.saturationBuffer.value = (this.delegatedStake.value * BUFFER_MAX) / this.maxDelegatableStake.value
	bytec 13 //  "saturation_buffer"
	bytec 0 //  "delegated_stake"
	app_global_get
	intc 7 // 1000000
	*
	bytec 7 //  "max_delegatable_stake"
	app_global_get
	/
	app_global_put
	b *if28_end

*if28_else:
	// contracts\CaelusValidator.algo.ts:767
	// this.saturationBuffer.value = BUFFER_MAX
	bytec 13 //  "saturation_buffer"
	intc 7 // 1000000
	app_global_put

	// contracts\CaelusValidator.algo.ts:768
	// this.status.value = NOT_DELEGATABLE_STATUS
	bytec 5 //  "status"
	intc 1 // 1
	app_global_put

*if28_end:
	retsub

// getTier(): uint64
getTier:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dupn 2

	// contracts\CaelusValidator.algo.ts:773
	// boostToken = AssetID.zeroIndex
	intc 0 // 0
	frame_bury 0 // boostToken: uint64

	// *if29_condition
	// contracts\CaelusValidator.algo.ts:774
	// !this.boostTokenID.exists
	txna Applications 0
	bytec 14 //  "boost_token_id"
	app_global_get_ex
	swap
	pop
	!
	bz *if29_end

	// *if29_consequent
	// contracts\CaelusValidator.algo.ts:775
	// this.boostTokenID.value = this.creatorContractAppID.value.globalState('boost_token_id') as AssetID
	bytec 14 //  "boost_token_id"
	bytec 2 //  "creator"
	app_global_get
	bytec 14 //  "boost_token_id"
	app_global_get_ex

	// global state value does not exist: this.creatorContractAppID.value.globalState('boost_token_id')
	assert
	app_global_put

*if29_end:
	// contracts\CaelusValidator.algo.ts:777
	// boostToken = this.boostTokenID.value
	bytec 14 //  "boost_token_id"
	app_global_get
	frame_bury 0 // boostToken: uint64

	// *if30_condition
	// contracts\CaelusValidator.algo.ts:778
	// boostToken === AssetID.zeroIndex
	frame_dig 0 // boostToken: uint64
	intc 0 // 0
	==
	bz *if30_end

	// *if30_consequent
	// contracts\CaelusValidator.algo.ts:778
	// return 0;
	intc 0 // 0
	b *getTier*return

*if30_end:
	// *if31_condition
	// contracts\CaelusValidator.algo.ts:779
	// this.operatorAddress.value.isOptedInToAsset(boostToken)
	bytec 4 //  "operator"
	app_global_get
	frame_dig 0 // boostToken: uint64
	asset_holding_get AssetBalance
	swap
	pop
	bz *if31_end

	// *if31_consequent
	// contracts\CaelusValidator.algo.ts:779
	// return 0;
	intc 0 // 0
	b *getTier*return

*if31_end:
	// contracts\CaelusValidator.algo.ts:780
	// ownedToken = this.operatorAddress.value.assetBalance(boostToken)
	bytec 4 //  "operator"
	app_global_get
	frame_dig 0 // boostToken: uint64
	asset_holding_get AssetBalance
	pop
	frame_bury 1 // ownedToken: uint64

	// *if32_condition
	// contracts\CaelusValidator.algo.ts:781
	// ownedToken === 0
	frame_dig 1 // ownedToken: uint64
	intc 0 // 0
	==
	bz *if32_end

	// *if32_consequent
	// contracts\CaelusValidator.algo.ts:781
	// return 0;
	intc 0 // 0
	b *getTier*return

*if32_end:
	// contracts\CaelusValidator.algo.ts:782
	// getTier = sendMethodCall<typeof CaelusAdmin.prototype.getBoostTier, uint64>({
	//       applicationID: this.creatorContractAppID.value,
	//       methodArgs: [ownedToken],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x00c3a714 // method "getBoostTier(uint64)uint64"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:783
	// applicationID: this.creatorContractAppID.value
	bytec 2 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:784
	// methodArgs: [ownedToken]
	frame_dig 1 // ownedToken: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 2 // getTier: uint64

	// contracts\CaelusValidator.algo.ts:786
	// return getTier;
	frame_dig 2 // getTier: uint64

*getTier*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// getToleratedProposalDelta(): uint64
getToleratedProposalDelta:
	proto 0 1

	// contracts\CaelusValidator.algo.ts:790
	// return this.getExpectedProposalsDelta() * 3;
	callsub getExpectedProposalsDelta
	intc 9 // 3
	*
	retsub

// getExpectedProposalsDelta(): uint64
getExpectedProposalsDelta:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dupn 2

	// contracts\CaelusValidator.algo.ts:794
	// currentOnlineStake = onlineStake()
	online_stake
	frame_bury 0 // currentOnlineStake: uint64

	// contracts\CaelusValidator.algo.ts:795
	// currentAccountStake = this.app.address.voterBalance
	global CurrentApplicationAddress
	voter_params_get VoterBalance
	frame_bury 1 // currentAccountStake: uint64

	// contracts\CaelusValidator.algo.ts:796
	// roundDelta = currentOnlineStake / currentAccountStake
	frame_dig 0 // currentOnlineStake: uint64
	frame_dig 1 // currentAccountStake: uint64
	/
	frame_bury 2 // roundDelta: uint64

	// contracts\CaelusValidator.algo.ts:797
	// return roundDelta * 20;
	frame_dig 2 // roundDelta: uint64
	pushint 20
	*

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

*create_NoOp:
	pushbytes 0xad04f6a1 // method "createApplication(uint64,address,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xfb1bcb75 // method "optIntoLST()void"
	pushbytes 0xdfa20764 // method "addToOperatorCommit(pay)void"
	pushbytes 0x31b7ec19 // method "removeFromOperatorCommit(uint64,uint64)void"
	pushbytes 0xdfbbe551 // method "solveDelinquency(uint64)void"
	pushbytes 0x44a5b576 // method "reportRewards(uint64)void"
	pushbytes 0xd4502100 // method "addStake(pay)void"
	pushbytes 0x3dc7ae79 // method "burnStake(uint64,address)void"
	pushbytes 0x13c89ecc // method "snitchValidator(uint64,(bool,bool,bool,bool,uint64,bool,uint64))void"
	bytec 19 //  method "getSnitched((bool,bool,bool,bool,uint64,bool,uint64))bool"
	pushbytes 0x4a5356cc // method "flashloan(uint64,address)void"
	pushbytes 0x0df26592 // method "checkBalance()void"
	pushbytes 0x400e14fb // method "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void"
	pushbytes 0x51ef3b21 // method "goOffline()void"
	pushbytes 0xf9dc2646 // method "getEligibilityFlag()bool"
	pushbytes 0x3c647ea5 // method "migrateToPool(uint64)void"
	bytec 21 //  method "mergeStateOnMigration(uint64,uint64,uint64,uint64,pay,axfer)void"
	pushbytes 0xa69ea4a7 // method "claimLeftAlgo()void"
	txna ApplicationArgs 0
	match *abi_route_optIntoLST *abi_route_addToOperatorCommit *abi_route_removeFromOperatorCommit *abi_route_solveDelinquency *abi_route_reportRewards *abi_route_addStake *abi_route_burnStake *abi_route_snitchValidator *abi_route_getSnitched *abi_route_flashloan *abi_route_checkBalance *abi_route_goOnline *abi_route_goOffline *abi_route_getEligibilityFlag *abi_route_migrateToPool *abi_route_mergeStateOnMigration *abi_route_claimLeftAlgo

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err