#pragma version 11
intcblock 0 1 6 2 50000000000000 5 4 1000 32 10 18
bytecblock 0x63726561746f72 0x64656c6567617465645374616b65 0x 0x6f70657261746f72436f6d6d6974 0x00 0x697344656c696e7175656e74 0x6d6178445374616b65 0x64656c696e7175656e637953636f7265 0x6f70657261746f72 0x63616e426544656c656761746564 0x76414c474f 0x706572666f726d616e6365 0x64656c696e7175656e63795265706f7274 0x73617475726174696f6e427566666572 0x7265776172645265706f7274 0x726570616964 0x151f7c75 0x62616c616e6365436865636b706f696e74 0x7374566573744944 0x766573744944 0xb13cc0b1 0x911c3c46

// This TEAL was generated by TEALScript v0.105.5
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 2 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,address,uint64,uint64,uint64,uint64)void
*abi_route_createApplication:
	// vALGO: uint64
	txna ApplicationArgs 6
	btoi

	// stVestID: uint64
	txna ApplicationArgs 5
	btoi

	// vestID: uint64
	txna ApplicationArgs 4
	btoi

	// contractVersion: uint64
	txna ApplicationArgs 3
	btoi

	// operatorAddress: address
	txna ApplicationArgs 2
	dup
	len
	intc 8 // 32
	==

	// argument 4 (operatorAddress) for createApplication must be a address
	assert

	// creatingContract: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,address,uint64,uint64,uint64,uint64)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(creatingContract: AppID, operatorAddress: Address, contractVersion: uint64, vestID: AssetID, stVestID: AssetID, vALGO: AssetID): void
//
// ******************
// Public Methods    *
// ******************
//
// createApplication method called at creation, initializes some globalKey values
// @param {AppID} creatingContract - ApplicationID for the creator contract (CaelusAdminContract)
// @param {Address} operatorAddress - Address of the node operator used to sign online/offline txns and participate in auctions
// @param {uint64} contractVersion - Approval Program version for the node contract, stored in the CaelusAdminContract
// TODO UPDATE
createApplication:
	proto 6 0

	// contracts\CaelusValidator.algo.ts:92
	// this.creatorContractAppID.value = creatingContract
	bytec 0 //  "creator"
	frame_dig -1 // creatingContract: AppID
	app_global_put

	// contracts\CaelusValidator.algo.ts:93
	// this.operatorAddress.value = operatorAddress
	bytec 8 //  "operator"
	frame_dig -2 // operatorAddress: Address
	app_global_put

	// contracts\CaelusValidator.algo.ts:94
	// this.validatorPoolContractVersion.value = contractVersion
	pushbytes 0x636f6e747261637456657273696f6e // "contractVersion"
	frame_dig -3 // contractVersion: uint64
	app_global_put

	// contracts\CaelusValidator.algo.ts:95
	// this.vestID.value = vestID
	bytec 19 //  "vestID"
	frame_dig -4 // vestID: AssetID
	app_global_put

	// contracts\CaelusValidator.algo.ts:96
	// this.stVestID.value = stVestID
	bytec 18 //  "stVestID"
	frame_dig -5 // stVestID: AssetID
	app_global_put

	// contracts\CaelusValidator.algo.ts:97
	// this.vALGO.value = vALGO
	bytec 10 //  "vALGO"
	frame_dig -6 // vALGO: AssetID
	app_global_put

	// contracts\CaelusValidator.algo.ts:100
	// this.operatorCommit.value = 0
	bytec 3 //  "operatorCommit"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:101
	// this.delegatedStake.value = 0
	bytec 1 //  "delegatedStake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:102
	// this.maxDelegatableStake.value = 0
	bytec 6 //  "maxDStake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:105
	// this.canBeDelegated.value = false
	bytec 9 //  "canBeDelegated"
	intc 0 // 0
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put

	// contracts\CaelusValidator.algo.ts:106
	// this.saturationBUFFER.value = 0
	bytec 13 //  "saturationBuffer"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:107
	// this.performanceCounter.value = 0
	bytec 11 //  "performance"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:108
	// this.delinquencyScore.value = 0
	bytec 7 //  "delinquencyScore"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:109
	// this.isDelinquent.value = false
	bytec 5 //  "isDelinquent"
	intc 0 // 0
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put

	// contracts\CaelusValidator.algo.ts:111
	// this.repaid.value = true
	bytec 15 //  "repaid"
	intc 1 // 1
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put
	retsub

// optIntoLST()void
*abi_route_optIntoLST:
	// execute optIntoLST()void
	callsub optIntoLST
	intc 1 // 1
	return

// optIntoLST(): void
optIntoLST:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// contracts\CaelusValidator.algo.ts:115
	// verifyTxn(this.txn, {
	//       sender: this.operatorAddress.value,
	//     })
	// verify sender
	txn Sender
	bytec 8 //  "operator"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.operatorAddress.value"}
	assert

	// contracts\CaelusValidator.algo.ts:119
	// lst = this.creatorContractAppID.value.globalState('vALGOid') as AssetID
	bytec 0 //  "creator"
	app_global_get
	pushbytes 0x76414c474f6964 // "vALGOid"
	app_global_get_ex

	// global state value does not exist: this.creatorContractAppID.value.globalState('vALGOid')
	assert
	frame_bury 0 // lst: uint64

	// contracts\CaelusValidator.algo.ts:121
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       xferAsset: lst,
	//       assetAmount: 0,
	//       fee: 0,
	//     })
	itxn_begin
	intc 6 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:122
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts\CaelusValidator.algo.ts:123
	// xferAsset: lst
	frame_dig 0 // lst: uint64
	itxn_field XferAsset

	// contracts\CaelusValidator.algo.ts:124
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts\CaelusValidator.algo.ts:125
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// addToOperatorCommit(pay)void
*abi_route_addToOperatorCommit:
	// opStake: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (opStake) for addToOperatorCommit must be a pay transaction
	assert

	// execute addToOperatorCommit(pay)void
	callsub addToOperatorCommit
	intc 1 // 1
	return

// addToOperatorCommit(opStake: PayTxn): void
addToOperatorCommit:
	proto 1 0

	// contracts\CaelusValidator.algo.ts:131
	// assert(this.txn.sender === this.creatorContractAppID.value.address, 'only Caelus admin can route operator stake')
	txn Sender
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// only Caelus admin can route operator stake
	assert

	// contracts\CaelusValidator.algo.ts:133
	// verifyPayTxn(opStake, {
	//       sender: this.creatorContractAppID.value.address,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -1 // opStake: PayTxn
	gtxns Sender
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"opStake","field":"sender","expected":"this.creatorContractAppID.value.address"}
	assert

	// verify receiver
	frame_dig -1 // opStake: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"opStake","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusValidator.algo.ts:137
	// this.operatorCommit.value += opStake.amount
	bytec 3 //  "operatorCommit"
	app_global_get
	frame_dig -1 // opStake: PayTxn
	gtxns Amount
	+
	bytec 3 //  "operatorCommit"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:138
	// this.updateDelegationFactors()
	callsub updateDelegationFactors
	retsub

// addToOperatorCommitOnDelinquency(pay)void
*abi_route_addToOperatorCommitOnDelinquency:
	// opStake: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (opStake) for addToOperatorCommitOnDelinquency must be a pay transaction
	assert

	// execute addToOperatorCommitOnDelinquency(pay)void
	callsub addToOperatorCommitOnDelinquency
	intc 1 // 1
	return

// addToOperatorCommitOnDelinquency(opStake: PayTxn): void
//
// Used by the Caelus Admin to send the correct amount into the operator commit on delinquent burn of his vALGO
//
// @param {PayTxn} opStake - node operator stake commitment
addToOperatorCommitOnDelinquency:
	proto 1 0

	// contracts\CaelusValidator.algo.ts:147
	// assert(
	//       this.txn.sender === this.creatorContractAppID.value.address,
	//       'only Caelus admin can route operator stake without LST'
	//     )
	txn Sender
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// only Caelus admin can route operator stake without LST
	assert

	// contracts\CaelusValidator.algo.ts:151
	// verifyPayTxn(opStake, {
	//       receiver: this.app.address,
	//       amount: opStake.amount,
	//     })
	// verify receiver
	frame_dig -1 // opStake: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"opStake","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // opStake: PayTxn
	gtxns Amount
	frame_dig -1 // opStake: PayTxn
	gtxns Amount
	==

	// transaction verification failed: {"txn":"opStake","field":"amount","expected":"opStake.amount"}
	assert

	// contracts\CaelusValidator.algo.ts:155
	// this.operatorCommit.value += opStake.amount
	bytec 3 //  "operatorCommit"
	app_global_get
	frame_dig -1 // opStake: PayTxn
	gtxns Amount
	+
	bytec 3 //  "operatorCommit"
	swap
	app_global_put
	retsub

// removeFromOperatorCommit(uint64)void
*abi_route_removeFromOperatorCommit:
	// claimRequest: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeFromOperatorCommit(uint64)void
	callsub removeFromOperatorCommit
	intc 1 // 1
	return

// removeFromOperatorCommit(claimRequest: uint64): void
//
// Used by the node operator to remove from his stake amount for the node
// @param {uint64} claimRequest - amount claimed by the node operator to be removed from the contract balance and subtracted from the operator_commit counter
// @throws {Error} if the sender isn't the node operator or if the total commit by the node operator goes below the min threshold for rewards eligibility
// @throws {Error} if isDelinquent is True
removeFromOperatorCommit:
	proto 1 0

	// contracts\CaelusValidator.algo.ts:167
	// assert(this.txn.sender === this.creatorContractAppID.value.address)
	txn Sender
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// contracts\CaelusValidator.algo.ts:168
	// assert(
	//       !this.isDelinquent.value,
	//       'cannot withdraw funds if the account is flagged as delinquent, must solve delinquency first'
	//     )
	bytec 5 //  "isDelinquent"
	app_global_get
	intc 0 // 0
	getbit
	!

	// cannot withdraw funds if the account is flagged as delinquent, must solve delinquency first
	assert

	// contracts\CaelusValidator.algo.ts:173
	// assert(
	//       this.operatorCommit.value - claimRequest > globals.payoutsMinBalance,
	//       'Node Operator can take his stake below 30k only if the node contract will be closed'
	//     )
	bytec 3 //  "operatorCommit"
	app_global_get
	frame_dig -1 // claimRequest: uint64
	-
	global PayoutsMinBalance
	>

	// Node Operator can take his stake below 30k only if the node contract will be closed
	assert

	// contracts\CaelusValidator.algo.ts:178
	// assert(this.operatorCommit.value > claimRequest, 'Node Operator cannot claim more than he has')
	bytec 3 //  "operatorCommit"
	app_global_get
	frame_dig -1 // claimRequest: uint64
	>

	// Node Operator cannot claim more than he has
	assert

	// contracts\CaelusValidator.algo.ts:188
	// this.updateDelegationFactors()
	callsub updateDelegationFactors
	retsub

// performanceCheck()bool
*abi_route_performanceCheck:
	// The ABI return prefix
	bytec 16 // 0x151f7c75

	// execute performanceCheck()bool
	callsub performanceCheck
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	concat
	log
	intc 1 // 1
	return

// performanceCheck(): boolean
performanceCheck:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 2

	// *if0_condition
	// contracts\CaelusValidator.algo.ts:192
	// !this.app.address.incentiveEligible
	global CurrentApplicationAddress
	acct_params_get AcctIncentiveEligible
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts\CaelusValidator.algo.ts:193
	// this.setDelinquency()
	callsub setDelinquency

	// contracts\CaelusValidator.algo.ts:194
	// return true;
	intc 1 // 1
	b *performanceCheck*return

*if0_end:
	// contracts\CaelusValidator.algo.ts:197
	// assert(
	//       globals.round - this.lastDelinquencyReport.value > this.getExpectedProposalsDelta() / 2,
	//       'Wait at least half the proposal expected time between Performance checks'
	//     )
	global Round
	bytec 12 //  "delinquencyReport"
	app_global_get
	-
	callsub getExpectedProposalsDelta
	intc 3 // 2
	/
	>

	// Wait at least half the proposal expected time between Performance checks
	assert

	// contracts\CaelusValidator.algo.ts:201
	// deltaWithLatestProposal = globals.round - this.app.address.lastProposed
	global Round
	global CurrentApplicationAddress
	acct_params_get AcctLastProposed
	pop
	-
	frame_bury 0 // deltaWithLatestProposal: uint64

	// contracts\CaelusValidator.algo.ts:202
	// isPerformingAsExpected = this.getExpectedProposalsDelta() > deltaWithLatestProposal
	callsub getExpectedProposalsDelta
	frame_dig 0 // deltaWithLatestProposal: uint64
	>
	frame_bury 1 // isPerformingAsExpected: bool

	// contracts\CaelusValidator.algo.ts:203
	// isPerformingAsTolerated = this.getToleratedBlockDelta() > deltaWithLatestProposal
	callsub getToleratedBlockDelta
	frame_dig 0 // deltaWithLatestProposal: uint64
	>
	frame_bury 2 // isPerformingAsTolerated: bool

	// *if1_condition
	// contracts\CaelusValidator.algo.ts:204
	// isPerformingAsExpected && isPerformingAsTolerated
	frame_dig 1 // isPerformingAsExpected: bool
	dup
	bz *skip_and0
	frame_dig 2 // isPerformingAsTolerated: bool
	&&

*skip_and0:
	bz *if1_end

	// *if1_consequent
	// contracts\CaelusValidator.algo.ts:205
	// return false;
	intc 0 // 0
	b *performanceCheck*return

*if1_end:
	// *if2_condition
	// contracts\CaelusValidator.algo.ts:207
	// !isPerformingAsTolerated
	frame_dig 2 // isPerformingAsTolerated: bool
	!
	bz *if2_elseif1_condition

	// *if2_consequent
	// contracts\CaelusValidator.algo.ts:208
	// this.delinquencyScore.value += 5
	bytec 7 //  "delinquencyScore"
	app_global_get
	intc 5 // 5
	+
	bytec 7 //  "delinquencyScore"
	swap
	app_global_put
	b *if2_end

*if2_elseif1_condition:
	// contracts\CaelusValidator.algo.ts:209
	// !isPerformingAsExpected
	frame_dig 1 // isPerformingAsExpected: bool
	!
	bz *if2_end

	// *if2_elseif1_consequent
	// contracts\CaelusValidator.algo.ts:210
	// this.delinquencyScore.value +=
	//         this.lastDelinquencyReport.value > this.lastRewardReport.value || this.delinquencyScore.value > 5 ? 2 : 1
	bytec 7 //  "delinquencyScore"
	app_global_get
	bytec 12 //  "delinquencyReport"
	app_global_get
	bytec 14 //  "rewardReport"
	app_global_get
	>
	dup
	bnz *skip_or1
	bytec 7 //  "delinquencyScore"
	app_global_get
	intc 5 // 5
	>
	||

*skip_or1:
	bz *ternary1_false
	intc 3 // 2
	b *ternary1_end

*ternary1_false:
	intc 1 // 1

*ternary1_end:
	+
	bytec 7 //  "delinquencyScore"
	swap
	app_global_put

*if2_end:
	// contracts\CaelusValidator.algo.ts:213
	// this.setDelinquencyOnThresholdCheck()
	callsub setDelinquencyOnThresholdCheck

	// contracts\CaelusValidator.algo.ts:214
	// this.lastDelinquencyReport.value = globals.round
	bytec 12 //  "delinquencyReport"
	global Round
	app_global_put

	// contracts\CaelusValidator.algo.ts:215
	// return true;
	intc 1 // 1

*performanceCheck*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// solveDelinquency(uint64)void
*abi_route_solveDelinquency:
	// block: uint64
	txna ApplicationArgs 1
	btoi

	// execute solveDelinquency(uint64)void
	callsub solveDelinquency
	intc 1 // 1
	return

// solveDelinquency(block: uint64): void
solveDelinquency:
	proto 1 0

	// contracts\CaelusValidator.algo.ts:220
	// assert(this.isDelinquent.value, 'Account is not delinquent')
	bytec 5 //  "isDelinquent"
	app_global_get
	intc 0 // 0
	getbit

	// Account is not delinquent
	assert

	// contracts\CaelusValidator.algo.ts:221
	// assert(this.txn.sender === this.operatorAddress.value, 'Only the Node Operator can clear up Delinquency')
	txn Sender
	bytec 8 //  "operator"
	app_global_get
	==

	// Only the Node Operator can clear up Delinquency
	assert

	// contracts\CaelusValidator.algo.ts:222
	// assert(
	//       this.delegatedStake.value === 0,
	//       'Before clearing up delinquency all the delegated stake must be redistributed'
	//     )
	bytec 1 //  "delegatedStake"
	app_global_get
	intc 0 // 0
	==

	// Before clearing up delinquency all the delegated stake must be redistributed
	assert

	// contracts\CaelusValidator.algo.ts:226
	// assert(blocks[block].proposer === this.app.address, 'the solving block must be proposed by this account')
	frame_dig -1 // block: uint64
	block BlkProposer
	global CurrentApplicationAddress
	==

	// the solving block must be proposed by this account
	assert

	// contracts\CaelusValidator.algo.ts:227
	// assert(this.lastDelinquencyReport.value < block)
	bytec 12 //  "delinquencyReport"
	app_global_get
	frame_dig -1 // block: uint64
	<
	assert

	// contracts\CaelusValidator.algo.ts:228
	// assert(this.delinquencyThresholdCheck(), 'Delinquency score must be below threshold')
	callsub delinquencyThresholdCheck

	// Delinquency score must be below threshold
	assert

	// contracts\CaelusValidator.algo.ts:229
	// this.isDelinquent.value = false
	bytec 5 //  "isDelinquent"
	intc 0 // 0
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put

	// contracts\CaelusValidator.algo.ts:230
	// this.canBeDelegated.value = true
	bytec 9 //  "canBeDelegated"
	intc 1 // 1
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put

	// contracts\CaelusValidator.algo.ts:231
	// this.updateDelegationFactors()
	callsub updateDelegationFactors
	retsub

// reportRewards(uint64)void
*abi_route_reportRewards:
	// block: uint64
	txna ApplicationArgs 1
	btoi

	// execute reportRewards(uint64)void
	callsub reportRewards
	intc 1 // 1
	return

// reportRewards(block: uint64): void
reportRewards:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 2

	// contracts\CaelusValidator.algo.ts:236
	// assert(blocks[block].proposer === this.app.address)
	frame_dig -1 // block: uint64
	block BlkProposer
	global CurrentApplicationAddress
	==
	assert

	// contracts\CaelusValidator.algo.ts:237
	// assert(block > this.lastRewardReport.value)
	frame_dig -1 // block: uint64
	bytec 14 //  "rewardReport"
	app_global_get
	>
	assert

	// contracts\CaelusValidator.algo.ts:238
	// isOperatorReportTime = globals.round - block < 700
	global Round
	frame_dig -1 // block: uint64
	-
	pushint 700
	<
	frame_bury 0 // isOperatorReportTime: bool

	// contracts\CaelusValidator.algo.ts:239
	// report = blocks[block].proposerPayout
	frame_dig -1 // block: uint64
	block BlkProposerPayout
	frame_bury 1 // report: uint64

	// contracts\CaelusValidator.algo.ts:240
	// takeFee = wideRatio([report, 6], [100])
	frame_dig 1 // report: uint64
	intc 2 // 6
	mulw
	intc 0 // 0
	pushint 100
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 2 // takeFee: uint64

	// contracts\CaelusValidator.algo.ts:242
	// this.pendingGroup.addMethodCall<typeof CaelusAdmin.prototype.declareRewards, void>({
	//       applicationID: this.creatorContractAppID.value,
	//       methodArgs: [
	//         {
	//           receiver: this.creatorContractAppID.value.address,
	//           amount: report - takeFee,
	//           fee: 0,
	//         },
	//       ],
	//     })
	itxn_next
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:246
	// receiver: this.creatorContractAppID.value.address
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:247
	// amount: report - takeFee
	frame_dig 1 // report: uint64
	frame_dig 2 // takeFee: uint64
	-
	itxn_field Amount

	// contracts\CaelusValidator.algo.ts:248
	// fee: 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x548b59f6 // method "declareRewards(pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:243
	// applicationID: this.creatorContractAppID.value
	bytec 0 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:244
	// methodArgs: [
	//         {
	//           receiver: this.creatorContractAppID.value.address,
	//           amount: report - takeFee,
	//           fee: 0,
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// *if3_condition
	// contracts\CaelusValidator.algo.ts:253
	// this.getExpectedProposalsDelta() < globals.round - this.lastRewardReport.value
	callsub getExpectedProposalsDelta
	global Round
	bytec 14 //  "rewardReport"
	app_global_get
	-
	<
	bz *if3_end

	// *if3_consequent
	// contracts\CaelusValidator.algo.ts:254
	// this.performanceCounter.value += 1
	bytec 11 //  "performance"
	app_global_get
	intc 1 // 1
	+
	bytec 11 //  "performance"
	swap
	app_global_put

*if3_end:
	// contracts\CaelusValidator.algo.ts:256
	// this.fixDelinquencyScore()
	callsub fixDelinquencyScore

	// contracts\CaelusValidator.algo.ts:257
	// this.lastRewardReport.value = block
	bytec 14 //  "rewardReport"
	frame_dig -1 // block: uint64
	app_global_put

	// *if4_condition
	// contracts\CaelusValidator.algo.ts:258
	// isOperatorReportTime
	frame_dig 0 // isOperatorReportTime: bool
	bz *if4_else

	// *if4_consequent
	// contracts\CaelusValidator.algo.ts:259
	// this.operatorCommit.value += takeFee
	bytec 3 //  "operatorCommit"
	app_global_get
	frame_dig 2 // takeFee: uint64
	+
	bytec 3 //  "operatorCommit"
	swap
	app_global_put
	b *if4_end

*if4_else:
	// contracts\CaelusValidator.algo.ts:261
	// this.operatorCommit.value += takeFee
	bytec 3 //  "operatorCommit"
	app_global_get
	frame_dig 2 // takeFee: uint64
	+
	bytec 3 //  "operatorCommit"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:262
	// sendPayment({
	//         receiver: this.txn.sender,
	//         amount: takeFee,
	//         fee: 0,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:263
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:264
	// amount: takeFee
	frame_dig 2 // takeFee: uint64
	itxn_field Amount

	// contracts\CaelusValidator.algo.ts:265
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if4_end:
	// contracts\CaelusValidator.algo.ts:268
	// this.updateDelegationFactors()
	callsub updateDelegationFactors
	retsub

// addStake(pay)void
*abi_route_addStake:
	// txnWithStake: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (txnWithStake) for addStake must be a pay transaction
	assert

	// execute addStake(pay)void
	callsub addStake
	intc 1 // 1
	return

// addStake(txnWithStake: PayTxn): void
addStake:
	proto 1 0

	// contracts\CaelusValidator.algo.ts:273
	// verifyPayTxn(txnWithStake, {
	//       sender: this.creatorContractAppID.value.address,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -1 // txnWithStake: PayTxn
	gtxns Sender
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"txnWithStake","field":"sender","expected":"this.creatorContractAppID.value.address"}
	assert

	// verify receiver
	frame_dig -1 // txnWithStake: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"txnWithStake","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusValidator.algo.ts:277
	// this.delegatedStake.value += txnWithStake.amount
	bytec 1 //  "delegatedStake"
	app_global_get
	frame_dig -1 // txnWithStake: PayTxn
	gtxns Amount
	+
	bytec 1 //  "delegatedStake"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:278
	// this.updateDelegationFactors()
	callsub updateDelegationFactors
	retsub

// burnStake(uint64,address)void
*abi_route_burnStake:
	// receiverBurn: address
	txna ApplicationArgs 2
	dup
	len
	intc 8 // 32
	==

	// argument 0 (receiverBurn) for burnStake must be a address
	assert

	// amountRequested: uint64
	txna ApplicationArgs 1
	btoi

	// execute burnStake(uint64,address)void
	callsub burnStake
	intc 1 // 1
	return

// burnStake(amountRequested: uint64, receiverBurn: Address): void
burnStake:
	proto 2 0

	// contracts\CaelusValidator.algo.ts:283
	// assert(
	//       this.txn.sender === this.creatorContractAppID.value.address,
	//       'Only the Caelus Admin contract can call this method'
	//     )
	txn Sender
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// Only the Caelus Admin contract can call this method
	assert

	// contracts\CaelusValidator.algo.ts:287
	// assert(amountRequested <= this.delegatedStake.value, 'Cannot withdraw more stake than the delegated amount')
	frame_dig -1 // amountRequested: uint64
	bytec 1 //  "delegatedStake"
	app_global_get
	<=

	// Cannot withdraw more stake than the delegated amount
	assert

	// contracts\CaelusValidator.algo.ts:288
	// assert(
	//       this.app.address.balance - amountRequested >= this.operatorCommit.value,
	//       'Cannot leave the Opperator with less than their own stake'
	//     )
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	frame_dig -1 // amountRequested: uint64
	-
	bytec 3 //  "operatorCommit"
	app_global_get
	>=

	// Cannot leave the Opperator with less than their own stake
	assert

	// contracts\CaelusValidator.algo.ts:292
	// sendPayment({
	//       amount: amountRequested,
	//       receiver: receiverBurn,
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:293
	// amount: amountRequested
	frame_dig -1 // amountRequested: uint64
	itxn_field Amount

	// contracts\CaelusValidator.algo.ts:294
	// receiver: receiverBurn
	frame_dig -2 // receiverBurn: Address
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:296
	// this.delegatedStake.value -= amountRequested
	bytec 1 //  "delegatedStake"
	app_global_get
	frame_dig -1 // amountRequested: uint64
	-
	bytec 1 //  "delegatedStake"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:297
	// this.updateDelegationFactors()
	callsub updateDelegationFactors
	retsub

// snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void
*abi_route_snitchValidator:
	// params: (bool,bool,bool,uint64,bool,uint64)
	txna ApplicationArgs 2
	dup
	len
	intc 10 // 18
	==

	// argument 0 (params) for snitchValidator must be a (bool,bool,bool,uint64,bool,uint64)
	assert

	// appToSnitch: uint64
	txna ApplicationArgs 1
	btoi

	// execute snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void
	callsub snitchValidator
	intc 1 // 1
	return

// snitchValidator(appToSnitch: AppID, params: SnitchInfo): void
snitchValidator:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// contracts\CaelusValidator.algo.ts:302
	// assert(!this.isDelinquent.value)
	bytec 5 //  "isDelinquent"
	app_global_get
	intc 0 // 0
	getbit
	!
	assert

	// contracts\CaelusValidator.algo.ts:303
	// result = sendMethodCall<typeof CaelusAdmin.prototype.snitchCheck, boolean>({
	//       applicationID: appToSnitch,
	//       methodArgs: [appToSnitch, params],
	//       fee: 0,
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0xd2be586a // method "snitchCheck(uint64,(bool,bool,bool,uint64,bool,uint64))bool"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:304
	// applicationID: appToSnitch
	frame_dig -1 // appToSnitch: AppID
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:305
	// methodArgs: [appToSnitch, params]
	frame_dig -1 // appToSnitch: AppID
	itob
	itxn_field ApplicationArgs
	frame_dig -2 // params: SnitchInfo
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:306
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	intc 0 // 0
	getbit
	frame_bury 0 // result: bool

	// *if5_condition
	// contracts\CaelusValidator.algo.ts:308
	// result
	frame_dig 0 // result: bool
	bz *if5_end

	// *if5_consequent
	// contracts\CaelusValidator.algo.ts:309
	// this.performanceCounter.value += 1
	bytec 11 //  "performance"
	app_global_get
	intc 1 // 1
	+
	bytec 11 //  "performance"
	swap
	app_global_put

*if5_end:
	// contracts\CaelusValidator.algo.ts:311
	// this.updateDelegationFactors()
	callsub updateDelegationFactors
	retsub

// getSnitched((bool,bool,bool,uint64,bool,uint64))bool
*abi_route_getSnitched:
	// The ABI return prefix
	bytec 16 // 0x151f7c75

	// checks: (bool,bool,bool,uint64,bool,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 10 // 18
	==

	// argument 0 (checks) for getSnitched must be a (bool,bool,bool,uint64,bool,uint64)
	assert

	// execute getSnitched((bool,bool,bool,uint64,bool,uint64))bool
	callsub getSnitched
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	concat
	log
	intc 1 // 1
	return

// getSnitched(checks: SnitchInfo): boolean
getSnitched:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 3

	// contracts\CaelusValidator.algo.ts:316
	// assert(this.txn.sender === this.creatorContractAppID.value.address)
	txn Sender
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// contracts\CaelusValidator.algo.ts:317
	// result = false
	intc 0 // 0
	frame_bury 0 // result: bool

	// contracts\CaelusValidator.algo.ts:318
	// amount = 0
	intc 0 // 0
	frame_bury 1 // amount: uint64

	// *if6_condition
	// contracts\CaelusValidator.algo.ts:319
	// checks.performanceCheck
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	intc 0 // 0
	getbit
	bz *if6_end

	// *if6_consequent
	// contracts\CaelusValidator.algo.ts:320
	// result = this.performanceCheck()
	callsub performanceCheck
	frame_bury 0 // result: bool

*if6_end:
	// *if7_condition
	// contracts\CaelusValidator.algo.ts:322
	// checks.stakeAmountCheck && this.app.address.balance > MAX_STAKE_PER_ACCOUNT
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	intc 1 // 1
	getbit
	dup
	bz *skip_and1
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	intc 4 // 50000000000000
	>
	&&

*skip_and1:
	bz *if7_end

	// *if7_consequent
	// contracts\CaelusValidator.algo.ts:323
	// this.setDelinquency()
	callsub setDelinquency

	// contracts\CaelusValidator.algo.ts:324
	// result = true
	intc 1 // 1
	frame_bury 0 // result: bool

*if7_end:
	// *if8_condition
	// contracts\CaelusValidator.algo.ts:327
	// checks.delinquentCheck && this.isDelinquent.value
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	intc 3 // 2
	getbit
	dup
	bz *skip_and2
	bytec 5 //  "isDelinquent"
	app_global_get
	intc 0 // 0
	getbit
	&&

*skip_and2:
	bz *if8_end

	// *if8_consequent
	// contracts\CaelusValidator.algo.ts:329
	// result = this.delegatedStake.value && this.app.address.assetBalance(this.vALGO.value) > 0
	bytec 1 //  "delegatedStake"
	app_global_get
	dup
	bz *skip_and3
	global CurrentApplicationAddress
	bytec 10 //  "vALGO"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 0 // 0
	>
	&&

*skip_and3:
	frame_bury 0 // result: bool

	// *if9_condition
	// contracts\CaelusValidator.algo.ts:330
	// this.app.address.assetBalance(this.vALGO.value) > 0
	global CurrentApplicationAddress
	bytec 10 //  "vALGO"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 0 // 0
	>
	bz *if9_end

	// *if9_consequent
	// contracts\CaelusValidator.algo.ts:331
	// sendMethodCall<typeof CaelusAdmin.prototype.burnToDelinquentValidator>({
	//           applicationID: this.creatorContractAppID.value,
	//           methodArgs: [
	//             {
	//               xferAsset: this.vALGO.value,
	//               assetReceiver: this.creatorContractAppID.value.address,
	//               assetAmount: this.app.address.assetBalance(this.vALGO.value),
	//               fee: 0,
	//             },
	//             this.app,
	//           ],
	//         })
	itxn_begin
	intc 6 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:335
	// xferAsset: this.vALGO.value
	bytec 10 //  "vALGO"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusValidator.algo.ts:336
	// assetReceiver: this.creatorContractAppID.value.address
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field AssetReceiver

	// contracts\CaelusValidator.algo.ts:337
	// assetAmount: this.app.address.assetBalance(this.vALGO.value)
	global CurrentApplicationAddress
	bytec 10 //  "vALGO"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts\CaelusValidator.algo.ts:338
	// fee: 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 20 //  method "burnToDelinquentValidator(axfer,uint64)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:332
	// applicationID: this.creatorContractAppID.value
	bytec 0 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:333
	// methodArgs: [
	//             {
	//               xferAsset: this.vALGO.value,
	//               assetReceiver: this.creatorContractAppID.value.address,
	//               assetAmount: this.app.address.assetBalance(this.vALGO.value),
	//               fee: 0,
	//             },
	//             this.app,
	//           ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if9_end:
	// contracts\CaelusValidator.algo.ts:344
	// amount += this.delegatedStake.value
	frame_dig 1 // amount: uint64
	bytec 1 //  "delegatedStake"
	app_global_get
	+
	frame_bury 1 // amount: uint64

	// contracts\CaelusValidator.algo.ts:345
	// this.delegatedStake.value -= amount
	bytec 1 //  "delegatedStake"
	app_global_get
	frame_dig 1 // amount: uint64
	-
	bytec 1 //  "delegatedStake"
	swap
	app_global_put

*if8_end:
	// *if10_condition
	// contracts\CaelusValidator.algo.ts:347
	// checks.stakeAmountCheck && this.saturationBUFFER.value > 1000
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	intc 1 // 1
	getbit
	dup
	bz *skip_and4
	bytec 13 //  "saturationBuffer"
	app_global_get
	intc 7 // 1000
	>
	&&

*skip_and4:
	bz *if10_end

	// *if10_consequent
	// contracts\CaelusValidator.algo.ts:348
	// amount = this.delegatedStake.value - this.maxDelegatableStake.value
	bytec 1 //  "delegatedStake"
	app_global_get
	bytec 6 //  "maxDStake"
	app_global_get
	-
	frame_bury 1 // amount: uint64

	// contracts\CaelusValidator.algo.ts:349
	// this.delegatedStake.value -= amount
	bytec 1 //  "delegatedStake"
	app_global_get
	frame_dig 1 // amount: uint64
	-
	bytec 1 //  "delegatedStake"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:350
	// result = true
	intc 1 // 1
	frame_bury 0 // result: bool

*if10_end:
	// contracts\CaelusValidator.algo.ts:352
	// assert(amount <= this.delegatedStake.value)
	frame_dig 1 // amount: uint64
	bytec 1 //  "delegatedStake"
	app_global_get
	<=
	assert

	// contracts\CaelusValidator.algo.ts:353
	// isDelegatable = checks.recipient.globalState('canBeDelegated') as boolean
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 1 8
	btoi
	bytec 9 //  "canBeDelegated"
	app_global_get_ex

	// global state value does not exist: checks.recipient.globalState('canBeDelegated')
	assert
	frame_bury 2 // isDelegatable: bool

	// *if11_condition
	// contracts\CaelusValidator.algo.ts:354
	// checks.split && amount > checks.max && isDelegatable
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	pushint 72
	getbit
	dup
	bz *skip_and5
	frame_dig 1 // amount: uint64
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 10 8
	btoi
	>
	&&

*skip_and5:
	dup
	bz *skip_and6
	frame_dig 2 // isDelegatable: bool
	&&

*skip_and6:
	bz *if11_end

	// *if11_consequent
	// contracts\CaelusValidator.algo.ts:355
	// toRecipient = amount - checks.max
	frame_dig 1 // amount: uint64
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 10 8
	btoi
	-
	frame_bury 3 // toRecipient: uint64

	// contracts\CaelusValidator.algo.ts:356
	// amount -= toRecipient
	frame_dig 1 // amount: uint64
	frame_dig 3 // toRecipient: uint64
	-
	frame_bury 1 // amount: uint64

	// contracts\CaelusValidator.algo.ts:357
	// sendMethodCall<typeof CaelusAdmin.prototype.reStakeFromSnitch, void>({
	//         applicationID: checks.recipient,
	//         methodArgs: [
	//           this.app,
	//           checks.recipient,
	//           {
	//             receiver: checks.recipient.address,
	//             amount: toRecipient,
	//             fee: 0,
	//           },
	//         ],
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:363
	// receiver: checks.recipient.address
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 1 8
	btoi
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:364
	// amount: toRecipient
	frame_dig 3 // toRecipient: uint64
	itxn_field Amount

	// contracts\CaelusValidator.algo.ts:365
	// fee: 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 21 //  method "reStakeFromSnitch(uint64,uint64,pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:358
	// applicationID: checks.recipient
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 1 8
	btoi
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:359
	// methodArgs: [
	//           this.app,
	//           checks.recipient,
	//           {
	//             receiver: checks.recipient.address,
	//             amount: toRecipient,
	//             fee: 0,
	//           },
	//         ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	frame_dig -1 // checks: SnitchInfo
	store 255 // full array
	load 255 // full array
	extract 1 8
	btoi
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if11_end:
	// contracts\CaelusValidator.algo.ts:370
	// sendMethodCall<typeof CaelusAdmin.prototype.reStakeFromSnitch, void>({
	//       applicationID: this.creatorContractAppID.value,
	//       methodArgs: [
	//         this.app,
	//         this.creatorContractAppID.value,
	//         {
	//           receiver: this.creatorContractAppID.value.address,
	//           amount: amount,
	//           fee: 0,
	//         },
	//       ],
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:376
	// receiver: this.creatorContractAppID.value.address
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:377
	// amount: amount
	frame_dig 1 // amount: uint64
	itxn_field Amount

	// contracts\CaelusValidator.algo.ts:378
	// fee: 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 21 //  method "reStakeFromSnitch(uint64,uint64,pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:371
	// applicationID: this.creatorContractAppID.value
	bytec 0 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:372
	// methodArgs: [
	//         this.app,
	//         this.creatorContractAppID.value,
	//         {
	//           receiver: this.creatorContractAppID.value.address,
	//           amount: amount,
	//           fee: 0,
	//         },
	//       ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	bytec 0 //  "creator"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if12_condition
	// contracts\CaelusValidator.algo.ts:382
	// !this.isDelinquent.value
	bytec 5 //  "isDelinquent"
	app_global_get
	intc 0 // 0
	getbit
	!
	bz *if12_end

	// *if12_consequent
	// contracts\CaelusValidator.algo.ts:383
	// this.updateDelegationFactors()
	callsub updateDelegationFactors

*if12_end:
	// contracts\CaelusValidator.algo.ts:385
	// return result;
	frame_dig 0 // result: bool

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// getClawbackedStake(pay)void
*abi_route_getClawbackedStake:
	// receivedStake: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (receivedStake) for getClawbackedStake must be a pay transaction
	assert

	// execute getClawbackedStake(pay)void
	callsub getClawbackedStake
	intc 1 // 1
	return

// getClawbackedStake(receivedStake: PayTxn): void
getClawbackedStake:
	proto 1 0

	// contracts\CaelusValidator.algo.ts:390
	// assert(this.txn.sender === this.creatorContractAppID.value.address)
	txn Sender
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// contracts\CaelusValidator.algo.ts:391
	// verifyPayTxn(receivedStake, {
	//       receiver: this.app.address,
	//     })
	// verify receiver
	frame_dig -1 // receivedStake: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"receivedStake","field":"receiver","expected":"this.app.address"}
	assert

	// contracts\CaelusValidator.algo.ts:394
	// this.delegatedStake.value += receivedStake.amount
	bytec 1 //  "delegatedStake"
	app_global_get
	frame_dig -1 // receivedStake: PayTxn
	gtxns Amount
	+
	bytec 1 //  "delegatedStake"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:395
	// this.updateDelegationFactors()
	callsub updateDelegationFactors
	retsub

// flashloan(uint64,address)void
*abi_route_flashloan:
	// receiver: address
	txna ApplicationArgs 2
	dup
	len
	intc 8 // 32
	==

	// argument 0 (receiver) for flashloan must be a address
	assert

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute flashloan(uint64,address)void
	callsub flashloan
	intc 1 // 1
	return

// flashloan(amount: uint64, receiver: Address): void
flashloan:
	proto 2 0

	// *if13_condition
	// contracts\CaelusValidator.algo.ts:399
	// this.repaid.value
	bytec 15 //  "repaid"
	app_global_get
	intc 0 // 0
	getbit
	bz *if13_end

	// *if13_consequent
	// contracts\CaelusValidator.algo.ts:400
	// this.balanceCheckpoint.value = this.app.address.balance
	bytec 17 //  "balanceCheckpoint"
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	app_global_put

	// contracts\CaelusValidator.algo.ts:401
	// this.repaid.value = false
	bytec 15 //  "repaid"
	intc 0 // 0
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put

*if13_end:
	// contracts\CaelusValidator.algo.ts:403
	// assert(this.txn.sender === this.creatorContractAppID.value.address, 'Caller must be the Caelus Admin Contract')
	txn Sender
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// Caller must be the Caelus Admin Contract
	assert

	// contracts\CaelusValidator.algo.ts:405
	// sendPayment({
	//       receiver: receiver,
	//       amount: amount,
	//       fee: 0,
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:406
	// receiver: receiver
	frame_dig -2 // receiver: Address
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:407
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// contracts\CaelusValidator.algo.ts:408
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// checkBalance()void
*abi_route_checkBalance:
	// execute checkBalance()void
	callsub checkBalance
	intc 1 // 1
	return

// checkBalance(): void
checkBalance:
	proto 0 0

	// contracts\CaelusValidator.algo.ts:415
	// assert(this.balanceCheckpoint.value === this.app.address.balance)
	bytec 17 //  "balanceCheckpoint"
	app_global_get
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	==
	assert

	// contracts\CaelusValidator.algo.ts:416
	// this.repaid.value = true
	bytec 15 //  "repaid"
	intc 1 // 1
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put
	retsub

// claimLeftAlgo()void
*abi_route_claimLeftAlgo:
	// execute claimLeftAlgo()void
	callsub claimLeftAlgo
	intc 1 // 1
	return

// claimLeftAlgo(): void
claimLeftAlgo:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dup

	// contracts\CaelusValidator.algo.ts:421
	// dust =
	//       this.app.address.balance - this.operatorCommit.value - this.delegatedStake.value - this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	bytec 3 //  "operatorCommit"
	app_global_get
	-
	bytec 1 //  "delegatedStake"
	app_global_get
	-
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	frame_bury 0 // dust: uint64

	// contracts\CaelusValidator.algo.ts:423
	// vestige = this.creatorContractAppID.value.globalState('vestigeAddress') as Address
	bytec 0 //  "creator"
	app_global_get
	pushbytes 0x7665737469676541646472657373 // "vestigeAddress"
	app_global_get_ex

	// global state value does not exist: this.creatorContractAppID.value.globalState('vestigeAddress')
	assert
	frame_bury 1 // vestige: address

	// contracts\CaelusValidator.algo.ts:425
	// sendPayment({
	//       receiver: vestige,
	//       amount: dust,
	//       fee: 0,
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:426
	// receiver: vestige
	frame_dig 1 // vestige: address
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:427
	// amount: dust
	frame_dig 0 // dust: uint64
	itxn_field Amount

	// contracts\CaelusValidator.algo.ts:428
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateToNewVersionEmptyContract()void
*abi_route_updateToNewVersionEmptyContract:
	// execute updateToNewVersionEmptyContract()void
	callsub updateToNewVersionEmptyContract
	intc 1 // 1
	return

// updateToNewVersionEmptyContract(): void
updateToNewVersionEmptyContract:
	proto 0 0
	retsub

// makeCloseTxn()void
*abi_route_makeCloseTxn:
	// execute makeCloseTxn()void
	callsub makeCloseTxn
	intc 1 // 1
	return

// makeCloseTxn(): void
makeCloseTxn:
	proto 0 0

	// contracts\CaelusValidator.algo.ts:443
	// assert(!this.isDelinquent.value)
	bytec 5 //  "isDelinquent"
	app_global_get
	intc 0 // 0
	getbit
	!
	assert

	// contracts\CaelusValidator.algo.ts:444
	// assert(this.app.address.voterBalance === 0, 'Account must be set to offline')
	global CurrentApplicationAddress
	voter_params_get VoterBalance
	intc 0 // 0
	==

	// Account must be set to offline
	assert

	// contracts\CaelusValidator.algo.ts:445
	// assert(this.txn.sender === this.operatorAddress.value)
	txn Sender
	bytec 8 //  "operator"
	app_global_get
	==
	assert

	// contracts\CaelusValidator.algo.ts:446
	// sendMethodCall<typeof CaelusAdmin.prototype.onOperatorExit, void>({
	//       applicationID: this.creatorContractAppID.value,
	//       methodArgs: [
	//         this.app,
	//         {
	//           receiver: this.creatorContractAppID.value.address,
	//           amount: this.operatorCommit.value + this.delegatedStake.value,
	//           fee: 0,
	//         },
	//       ],
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:451
	// receiver: this.creatorContractAppID.value.address
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\CaelusValidator.algo.ts:452
	// amount: this.operatorCommit.value + this.delegatedStake.value
	bytec 3 //  "operatorCommit"
	app_global_get
	bytec 1 //  "delegatedStake"
	app_global_get
	+
	itxn_field Amount

	// contracts\CaelusValidator.algo.ts:453
	// fee: 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x5e073e67 // method "onOperatorExit(uint64,pay)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:447
	// applicationID: this.creatorContractAppID.value
	bytec 0 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:448
	// methodArgs: [
	//         this.app,
	//         {
	//           receiver: this.creatorContractAppID.value.address,
	//           amount: this.operatorCommit.value + this.delegatedStake.value,
	//           fee: 0,
	//         },
	//       ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:457
	// this.operatorCommit.value = 0
	bytec 3 //  "operatorCommit"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:458
	// this.delegatedStake.value = 0
	bytec 1 //  "delegatedStake"
	intc 0 // 0
	app_global_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 1 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts\CaelusValidator.algo.ts:463
	// assert(!this.isDelinquent.value)
	bytec 5 //  "isDelinquent"
	app_global_get
	intc 0 // 0
	getbit
	!
	assert

	// contracts\CaelusValidator.algo.ts:464
	// assert(this.txn.sender === this.creatorContractAppID.value.address)
	txn Sender
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==
	assert

	// contracts\CaelusValidator.algo.ts:465
	// assert(this.operatorCommit.value === 0 && this.delegatedStake.value === 0, 'no stake left')
	bytec 3 //  "operatorCommit"
	app_global_get
	intc 0 // 0
	==
	dup
	bz *skip_and7
	bytec 1 //  "delegatedStake"
	app_global_get
	intc 0 // 0
	==
	&&

*skip_and7:
	// no stake left
	assert

	// contracts\CaelusValidator.algo.ts:466
	// sendAssetTransfer({
	//       xferAsset: this.vALGO.value,
	//       assetReceiver: this.operatorAddress.value,
	//       assetCloseTo: this.operatorAddress.value,
	//       assetAmount: this.app.address.assetBalance(this.vALGO.value),
	//       fee: 0,
	//     })
	itxn_begin
	intc 6 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:467
	// xferAsset: this.vALGO.value
	bytec 10 //  "vALGO"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusValidator.algo.ts:468
	// assetReceiver: this.operatorAddress.value
	bytec 8 //  "operator"
	app_global_get
	itxn_field AssetReceiver

	// contracts\CaelusValidator.algo.ts:469
	// assetCloseTo: this.operatorAddress.value
	bytec 8 //  "operator"
	app_global_get
	itxn_field AssetCloseTo

	// contracts\CaelusValidator.algo.ts:470
	// assetAmount: this.app.address.assetBalance(this.vALGO.value)
	global CurrentApplicationAddress
	bytec 10 //  "vALGO"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts\CaelusValidator.algo.ts:471
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:473
	// this.claimLeftAlgo()
	callsub claimLeftAlgo
	retsub

// goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_goOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// feePayment: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 6 (feePayment) for goOnline must be a pay transaction
	assert

	// execute goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub goOnline
	intc 1 // 1
	return

// goOnline(feePayment: PayTxn, votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
//
// Used to set the Contract account online for consensus. Always check that account is online and incentivesEligible before having delegatable stake
//
// @param {PayTxn} feePayment - Payment transaction to the contract to cover costs for Eligibility fee 0 for renewal.
// @param {bytes} votePK - The vote public key
// @param {bytes} selectionPK - The selection public key
// @param {bytes} stateProofPK - the state proof public key
// @param {uint64} voteFirst - Index of first valid block for the participation keys
// @param {uint64} voteLast - Index of last valid block for for the participation keys
// @param {uint64} voteKeyDilution - The vote key dilution value
// @throws {Error} if the caller isn't the node operator
// @throws {Error} if isDelinquent is True
goOnline:
	proto 7 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// contracts\CaelusValidator.algo.ts:499
	// assert(
	//       this.txn.sender === this.operatorAddress.value,
	//       'Only the Node Operator can register online with participation key'
	//     )
	txn Sender
	bytec 8 //  "operator"
	app_global_get
	==

	// Only the Node Operator can register online with participation key
	assert

	// contracts\CaelusValidator.algo.ts:505
	// assert(
	//       this.app.address.balance >= globals.payoutsMinBalance && this.app.address.balance <= MAX_STAKE_PER_ACCOUNT,
	//       'Contract needs 30k Algo as minimum balance for rewards eligibility and at most 50M Algo'
	//     )
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	global PayoutsMinBalance
	>=
	dup
	bz *skip_and8
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	intc 4 // 50000000000000
	<=
	&&

*skip_and8:
	// Contract needs 30k Algo as minimum balance for rewards eligibility and at most 50M Algo
	assert

	// contracts\CaelusValidator.algo.ts:511
	// assert(
	//       this.operatorCommit.value >= globals.payoutsMinBalance,
	//       'Operator commit must be higher than minimum balance for rewards eligibility'
	//     )
	bytec 3 //  "operatorCommit"
	app_global_get
	global PayoutsMinBalance
	>=

	// Operator commit must be higher than minimum balance for rewards eligibility
	assert

	// *if14_condition
	// contracts\CaelusValidator.algo.ts:516
	// this.isDelinquent.value
	bytec 5 //  "isDelinquent"
	app_global_get
	intc 0 // 0
	getbit
	bz *if14_end

	// *if14_consequent
	// contracts\CaelusValidator.algo.ts:517
	// assert(
	//         this.delegatedStake.value === 0,
	//         'if Delinquent go Online only with your own stake to clear up delinquency'
	//       )
	bytec 1 //  "delegatedStake"
	app_global_get
	intc 0 // 0
	==

	// if Delinquent go Online only with your own stake to clear up delinquency
	assert

*if14_end:
	// contracts\CaelusValidator.algo.ts:523
	// extraFee = this.getGoOnlineFeeAmount()
	callsub getGoOnlineFeeAmount
	frame_bury 0 // extraFee: uint64

	// contracts\CaelusValidator.algo.ts:525
	// verifyPayTxn(feePayment, { receiver: this.app.address, amount: extraFee })
	// verify receiver
	frame_dig -1 // feePayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"feePayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // feePayment: PayTxn
	gtxns Amount
	frame_dig 0 // extraFee: uint64
	==

	// transaction verification failed: {"txn":"feePayment","field":"amount","expected":"extraFee"}
	assert

	// contracts\CaelusValidator.algo.ts:527
	// sendOnlineKeyRegistration({
	//       votePK: votePK,
	//       selectionPK: selectionPK,
	//       stateProofPK: stateProofPK,
	//       voteFirst: voteFirst,
	//       voteLast: voteLast,
	//       voteKeyDilution: voteKeyDilution,
	//       fee: extraFee,
	//     })
	itxn_begin
	intc 3 //  keyreg
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:528
	// votePK: votePK
	frame_dig -2 // votePK: bytes
	itxn_field VotePK

	// contracts\CaelusValidator.algo.ts:529
	// selectionPK: selectionPK
	frame_dig -3 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts\CaelusValidator.algo.ts:530
	// stateProofPK: stateProofPK
	frame_dig -4 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts\CaelusValidator.algo.ts:531
	// voteFirst: voteFirst
	frame_dig -5 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts\CaelusValidator.algo.ts:532
	// voteLast: voteLast
	frame_dig -6 // voteLast: uint64
	itxn_field VoteLast

	// contracts\CaelusValidator.algo.ts:533
	// voteKeyDilution: voteKeyDilution
	frame_dig -7 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// contracts\CaelusValidator.algo.ts:534
	// fee: extraFee
	frame_dig 0 // extraFee: uint64
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:536
	// this.canBeDelegated.value = true
	bytec 9 //  "canBeDelegated"
	intc 1 // 1
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put
	retsub

// goOffline()void
*abi_route_goOffline:
	// execute goOffline()void
	callsub goOffline
	intc 1 // 1
	return

// goOffline(): void
//
// Set the contract account to offline so that it doesn't participate in consensus anymore.
// No force offline by the protocol (might be changed to a very long time wait in case the node isn't proposing blocks at all). Lookup Delinquency status
// Once the account is set offline the method ensures that it cannot be delegated to.
goOffline:
	proto 0 0

	// contracts\CaelusValidator.algo.ts:547
	// assert(
	//       this.txn.sender === this.operatorAddress.value || this.txn.sender === this.creatorContractAppID.value.address,
	//       'Only Node Operator or Caelus Admin contract can set the contract offline'
	//     )
	txn Sender
	bytec 8 //  "operator"
	app_global_get
	==
	dup
	bnz *skip_or2
	txn Sender
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	==
	||

*skip_or2:
	// Only Node Operator or Caelus Admin contract can set the contract offline
	assert

	// contracts\CaelusValidator.algo.ts:551
	// sendOfflineKeyRegistration({})
	itxn_begin
	intc 3 //  keyreg
	itxn_field TypeEnum

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\CaelusValidator.algo.ts:552
	// this.canBeDelegated.value = false
	bytec 9 //  "canBeDelegated"
	intc 0 // 0
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put
	retsub

// getGoOnlineFeeAmount(): uint64
//
// *****************
// Private Methods  *
// *****************
getGoOnlineFeeAmount:
	proto 0 1

	// *if15_condition
	// contracts\CaelusValidator.algo.ts:561
	// !this.getEligibilityFlag()
	callsub getEligibilityFlag
	!
	bz *if15_end

	// *if15_consequent
	// contracts\CaelusValidator.algo.ts:562
	// return globals.payoutsGoOnlineFee;
	global PayoutsGoOnlineFee
	retsub

*if15_end:
	// contracts\CaelusValidator.algo.ts:564
	// return 0;
	intc 0 // 0
	retsub

// getEligibilityFlag()bool
*abi_route_getEligibilityFlag:
	// The ABI return prefix
	bytec 16 // 0x151f7c75

	// execute getEligibilityFlag()bool
	callsub getEligibilityFlag
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	concat
	log
	intc 1 // 1
	return

// getEligibilityFlag(): boolean
getEligibilityFlag:
	proto 0 1

	// contracts\CaelusValidator.algo.ts:569
	// return this.app.address.incentiveEligible;
	global CurrentApplicationAddress
	acct_params_get AcctIncentiveEligible
	pop
	retsub

// setDelinquencyOnThresholdCheck(): void
setDelinquencyOnThresholdCheck:
	proto 0 0

	// *if16_condition
	// contracts\CaelusValidator.algo.ts:573
	// !this.delinquencyThresholdCheck()
	callsub delinquencyThresholdCheck
	!
	bz *if16_end

	// *if16_consequent
	// contracts\CaelusValidator.algo.ts:574
	// this.setDelinquency()
	callsub setDelinquency

*if16_end:
	retsub

// delinquencyThresholdCheck(): boolean
delinquencyThresholdCheck:
	proto 0 1

	// *if17_condition
	// contracts\CaelusValidator.algo.ts:579
	// this.delinquencyScore.value > MAX_DELINQUENCY_TOLERATED
	bytec 7 //  "delinquencyScore"
	app_global_get
	intc 9 // 10
	>
	bz *if17_end

	// *if17_consequent
	// contracts\CaelusValidator.algo.ts:580
	// return false;
	intc 0 // 0
	retsub

*if17_end:
	// contracts\CaelusValidator.algo.ts:582
	// return true;
	intc 1 // 1
	retsub

// setDelinquency(): void
setDelinquency:
	proto 0 0

	// contracts\CaelusValidator.algo.ts:586
	// this.canBeDelegated.value = false
	bytec 9 //  "canBeDelegated"
	intc 0 // 0
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put

	// contracts\CaelusValidator.algo.ts:587
	// this.performanceCounter.value = 0
	bytec 11 //  "performance"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:588
	// this.updateDelegationFactors()
	callsub updateDelegationFactors

	// contracts\CaelusValidator.algo.ts:589
	// this.isDelinquent.value = true
	bytec 5 //  "isDelinquent"
	intc 1 // 1
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put

	// contracts\CaelusValidator.algo.ts:590
	// sendMethodCall<typeof CaelusAdmin.prototype.burnToDelinquentValidator>({
	//       applicationID: this.creatorContractAppID.value,
	//       methodArgs: [
	//         {
	//           xferAsset: this.vALGO.value,
	//           assetReceiver: this.creatorContractAppID.value.address,
	//           assetAmount: this.app.address.assetBalance(this.vALGO.value),
	//           fee: 0,
	//         },
	//         this.app,
	//       ],
	//     })
	itxn_begin
	intc 6 //  axfer
	itxn_field TypeEnum

	// contracts\CaelusValidator.algo.ts:594
	// xferAsset: this.vALGO.value
	bytec 10 //  "vALGO"
	app_global_get
	itxn_field XferAsset

	// contracts\CaelusValidator.algo.ts:595
	// assetReceiver: this.creatorContractAppID.value.address
	bytec 0 //  "creator"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field AssetReceiver

	// contracts\CaelusValidator.algo.ts:596
	// assetAmount: this.app.address.assetBalance(this.vALGO.value)
	global CurrentApplicationAddress
	bytec 10 //  "vALGO"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts\CaelusValidator.algo.ts:597
	// fee: 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 20 //  method "burnToDelinquentValidator(axfer,uint64)void"
	itxn_field ApplicationArgs

	// contracts\CaelusValidator.algo.ts:591
	// applicationID: this.creatorContractAppID.value
	bytec 0 //  "creator"
	app_global_get
	itxn_field ApplicationID

	// contracts\CaelusValidator.algo.ts:592
	// methodArgs: [
	//         {
	//           xferAsset: this.vALGO.value,
	//           assetReceiver: this.creatorContractAppID.value.address,
	//           assetAmount: this.app.address.assetBalance(this.vALGO.value),
	//           fee: 0,
	//         },
	//         this.app,
	//       ]
	txna Applications 0
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// fixDelinquencyScore(): void
fixDelinquencyScore:
	proto 0 0

	// *if18_condition
	// contracts\CaelusValidator.algo.ts:605
	// this.delinquencyScore.value === 0
	bytec 7 //  "delinquencyScore"
	app_global_get
	intc 0 // 0
	==
	bz *if18_end

	// *if18_consequent
	// contracts\CaelusValidator.algo.ts:606
	// return;
	retsub

*if18_end:
	// *if19_condition
	// contracts\CaelusValidator.algo.ts:608
	// this.isDelinquent.value
	bytec 5 //  "isDelinquent"
	app_global_get
	intc 0 // 0
	getbit
	bz *if19_end

	// *if19_consequent
	// contracts\CaelusValidator.algo.ts:609
	// this.delinquencyScore.value -= 5
	bytec 7 //  "delinquencyScore"
	app_global_get
	intc 5 // 5
	-
	bytec 7 //  "delinquencyScore"
	swap
	app_global_put

*if19_end:
	// contracts\CaelusValidator.algo.ts:611
	// this.delinquencyScore.value = 0
	bytec 7 //  "delinquencyScore"
	intc 0 // 0
	app_global_put
	retsub

// updateDelegationFactors(): void
updateDelegationFactors:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// contracts\CaelusValidator.algo.ts:615
	// assert(!this.isDelinquent.value, 'Account is delinquent. Solve Delinquency state before updating parameters')
	bytec 5 //  "isDelinquent"
	app_global_get
	intc 0 // 0
	getbit
	!

	// Account is delinquent. Solve Delinquency state before updating parameters
	assert

	// *if20_condition
	// contracts\CaelusValidator.algo.ts:617
	// this.operatorCommit.value > globals.payoutsMinBalance && this.canBeDelegated.value
	bytec 3 //  "operatorCommit"
	app_global_get
	global PayoutsMinBalance
	>
	dup
	bz *skip_and9
	bytec 9 //  "canBeDelegated"
	app_global_get
	intc 0 // 0
	getbit
	&&

*skip_and9:
	bz *if20_else

	// *if20_consequent
	// contracts\CaelusValidator.algo.ts:618
	// this.maxDelegatableStake.value = this.operatorCommit.value
	bytec 6 //  "maxDStake"
	bytec 3 //  "operatorCommit"
	app_global_get
	app_global_put

	// contracts\CaelusValidator.algo.ts:621
	// vestBoost = (this.getTierVEST() * this.operatorCommit.value) / 2
	callsub getTierVEST
	bytec 3 //  "operatorCommit"
	app_global_get
	*
	intc 3 // 2
	/
	frame_bury 0 // vestBoost: uint64

	// contracts\CaelusValidator.algo.ts:622
	// this.maxDelegatableStake.value += vestBoost
	bytec 6 //  "maxDStake"
	app_global_get
	frame_dig 0 // vestBoost: uint64
	+
	bytec 6 //  "maxDStake"
	swap
	app_global_put

	// contracts\CaelusValidator.algo.ts:625
	// this.maxDelegatableStake.value += PERFORMANCE_STAKE_INCREASE * (this.performanceCounter.value / PERFORMANCE_STEP)
	bytec 6 //  "maxDStake"
	app_global_get
	pushint 10000000000
	bytec 11 //  "performance"
	app_global_get
	intc 5 // 5
	/
	*
	+
	bytec 6 //  "maxDStake"
	swap
	app_global_put

	// *if21_condition
	// contracts\CaelusValidator.algo.ts:628
	// this.app.address.balance >= MAX_STAKE_PER_ACCOUNT
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	intc 4 // 50000000000000
	>=
	bz *if21_elseif1_condition

	// *if21_consequent
	// contracts\CaelusValidator.algo.ts:629
	// this.maxDelegatableStake.value = 0
	bytec 6 //  "maxDStake"
	intc 0 // 0
	app_global_put

	// contracts\CaelusValidator.algo.ts:630
	// this.setDelinquency()
	callsub setDelinquency
	b *if21_end

*if21_elseif1_condition:
	// contracts\CaelusValidator.algo.ts:631
	// this.app.address.balance + this.maxDelegatableStake.value > MAX_STAKE_PER_ACCOUNT
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	bytec 6 //  "maxDStake"
	app_global_get
	+
	intc 4 // 50000000000000
	>
	bz *if21_end

	// *if21_elseif1_consequent
	// contracts\CaelusValidator.algo.ts:632
	// this.maxDelegatableStake.value = MAX_STAKE_PER_ACCOUNT - this.app.address.balance
	bytec 6 //  "maxDStake"
	intc 4 // 50000000000000
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	-
	app_global_put

*if21_end:
	b *if20_end

*if20_else:
	// contracts\CaelusValidator.algo.ts:635
	// this.maxDelegatableStake.value = 0
	bytec 6 //  "maxDStake"
	intc 0 // 0
	app_global_put

*if20_end:
	// *if22_condition
	// contracts\CaelusValidator.algo.ts:639
	// this.maxDelegatableStake.value > 0
	bytec 6 //  "maxDStake"
	app_global_get
	intc 0 // 0
	>
	bz *if22_else

	// *if22_consequent
	// contracts\CaelusValidator.algo.ts:640
	// this.saturationBUFFER.value = (this.delegatedStake.value * 1000) / this.maxDelegatableStake.value
	bytec 13 //  "saturationBuffer"
	bytec 1 //  "delegatedStake"
	app_global_get
	intc 7 // 1000
	*
	bytec 6 //  "maxDStake"
	app_global_get
	/
	app_global_put

	// contracts\CaelusValidator.algo.ts:641
	// this.canBeDelegated.value = true
	bytec 9 //  "canBeDelegated"
	intc 1 // 1
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put
	b *if22_end

*if22_else:
	// contracts\CaelusValidator.algo.ts:643
	// this.saturationBUFFER.value = 1000
	bytec 13 //  "saturationBuffer"
	intc 7 // 1000
	app_global_put

	// contracts\CaelusValidator.algo.ts:644
	// this.canBeDelegated.value = false
	bytec 9 //  "canBeDelegated"
	intc 0 // 0
	bytec 4 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put

*if22_end:
	retsub

// getTierVEST(): uint64
getTierVEST:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dup

	// contracts\CaelusValidator.algo.ts:649
	// lockedVEST = this.operatorAddress.value.assetBalance(this.stVestID.value)
	bytec 8 //  "operator"
	app_global_get
	bytec 18 //  "stVestID"
	app_global_get
	asset_holding_get AssetBalance
	pop
	frame_bury 0 // lockedVEST: uint64

	// contracts\CaelusValidator.algo.ts:650
	// ownedVEST = this.operatorAddress.value.assetBalance(this.vestID.value)
	bytec 8 //  "operator"
	app_global_get
	bytec 19 //  "vestID"
	app_global_get
	asset_holding_get AssetBalance
	pop
	frame_bury 1 // ownedVEST: uint64

	// *if23_condition
	// contracts\CaelusValidator.algo.ts:651
	// lockedVEST + ownedVEST >= VEST_TIER_5
	frame_dig 0 // lockedVEST: uint64
	frame_dig 1 // ownedVEST: uint64
	+
	pushint 150000000000
	>=
	bz *if23_end

	// *if23_consequent
	// contracts\CaelusValidator.algo.ts:652
	// return 2;
	intc 3 // 2
	b *getTierVEST*return

*if23_end:
	// *if24_condition
	// contracts\CaelusValidator.algo.ts:654
	// lockedVEST + ownedVEST >= VEST_TIER_4
	frame_dig 0 // lockedVEST: uint64
	frame_dig 1 // ownedVEST: uint64
	+
	pushint 100000000000
	>=
	bz *if24_end

	// *if24_consequent
	// contracts\CaelusValidator.algo.ts:655
	// return 1;
	intc 1 // 1
	b *getTierVEST*return

*if24_end:
	// contracts\CaelusValidator.algo.ts:657
	// return 0;
	intc 0 // 0

*getTierVEST*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// getToleratedBlockDelta(): uint64
getToleratedBlockDelta:
	proto 0 1

	// contracts\CaelusValidator.algo.ts:662
	// return this.getExpectedProposalsDelta() * 5;
	callsub getExpectedProposalsDelta
	intc 5 // 5
	*
	retsub

// getExpectedProposalsDelta(): uint64
getExpectedProposalsDelta:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 2

	// contracts\CaelusValidator.algo.ts:666
	// currentOnlineStake = onlineStake()
	online_stake
	frame_bury 0 // currentOnlineStake: uint64

	// contracts\CaelusValidator.algo.ts:667
	// currentAccountStake = this.app.address.voterBalance
	global CurrentApplicationAddress
	voter_params_get VoterBalance
	frame_bury 1 // currentAccountStake: uint64

	// contracts\CaelusValidator.algo.ts:668
	// roundDelta = currentOnlineStake / currentAccountStake
	frame_dig 0 // currentOnlineStake: uint64
	frame_dig 1 // currentAccountStake: uint64
	/
	frame_bury 2 // roundDelta: uint64

	// contracts\CaelusValidator.algo.ts:669
	// return roundDelta * 10;
	frame_dig 2 // roundDelta: uint64
	intc 9 // 10
	*

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

*create_NoOp:
	pushbytes 0x025f869f // method "createApplication(uint64,address,uint64,uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xfb1bcb75 // method "optIntoLST()void"
	pushbytes 0xdfa20764 // method "addToOperatorCommit(pay)void"
	pushbytes 0x2c443b6f // method "addToOperatorCommitOnDelinquency(pay)void"
	pushbytes 0xf6786084 // method "removeFromOperatorCommit(uint64)void"
	pushbytes 0x6f991fd0 // method "performanceCheck()bool"
	pushbytes 0xdfbbe551 // method "solveDelinquency(uint64)void"
	pushbytes 0x44a5b576 // method "reportRewards(uint64)void"
	pushbytes 0xd4502100 // method "addStake(pay)void"
	pushbytes 0x3dc7ae79 // method "burnStake(uint64,address)void"
	pushbytes 0x99a84afe // method "snitchValidator(uint64,(bool,bool,bool,uint64,bool,uint64))void"
	pushbytes 0x5b674f2f // method "getSnitched((bool,bool,bool,uint64,bool,uint64))bool"
	pushbytes 0xbdf01e8e // method "getClawbackedStake(pay)void"
	pushbytes 0x4a5356cc // method "flashloan(uint64,address)void"
	pushbytes 0x0df26592 // method "checkBalance()void"
	pushbytes 0xa69ea4a7 // method "claimLeftAlgo()void"
	pushbytes 0x2aa9db86 // method "updateToNewVersionEmptyContract()void"
	pushbytes 0xb2e8d660 // method "makeCloseTxn()void"
	pushbytes 0x400e14fb // method "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void"
	pushbytes 0x51ef3b21 // method "goOffline()void"
	pushbytes 0xf9dc2646 // method "getEligibilityFlag()bool"
	txna ApplicationArgs 0
	match *abi_route_optIntoLST *abi_route_addToOperatorCommit *abi_route_addToOperatorCommitOnDelinquency *abi_route_removeFromOperatorCommit *abi_route_performanceCheck *abi_route_solveDelinquency *abi_route_reportRewards *abi_route_addStake *abi_route_burnStake *abi_route_snitchValidator *abi_route_getSnitched *abi_route_getClawbackedStake *abi_route_flashloan *abi_route_checkBalance *abi_route_claimLeftAlgo *abi_route_updateToNewVersionEmptyContract *abi_route_makeCloseTxn *abi_route_goOnline *abi_route_goOffline *abi_route_getEligibilityFlag

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err